/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'jvm.dll'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct ciBaseObject_vtbl;
struct outputStream_vtbl;
struct Metadata_vtbl;
struct markOopDesc;
struct Klass;
struct Array<Klass *>;
struct ThreadShadow_vtbl;
struct Thread;
struct HandleArea;
struct HandleMark;
struct HeapWord;
struct ChunkedList<Metadata *,7>;
struct ParkEvent;
struct ObjectMonitor;
struct JNIInvokeInterface_;
struct JNINativeInterface_;
struct ResourceArea;
struct DeoptResourceMark;
struct OopClosure_vtbl;
struct CodeBlob_vtbl;
struct OopMapSet;
struct ConstantPoolCache;
struct Array<unsigned short>;
struct Method;
struct Mutex;
struct nmethod;
struct InstanceKlass;
struct JvmtiCachedClassFileData;
struct JvmtiCachedClassFieldMap;
struct Array<Method *>;
struct Array<int>;
struct ConstMethod;
struct MethodData;
struct MethodCounters;
struct AdapterHandlerEntry;
struct AbstractCompiler;
struct ciKlass;
struct ciConstantPoolCache;
struct GrowableArray<ciField *>;
struct ciMethodBlocks;
struct ciExceptionHandler;
struct MethodLiveness;
struct MethodLiveness::BasicBlock;
struct GrowableArray<MethodLiveness::BasicBlock *>;
struct GrowableArray<ciTypeFlow::Block *>;
struct GrowableArray<ciInstanceKlass *>;
struct ciTypeFlow;
struct ciTypeFlow::StateVector;
struct GrowableArray<ciTypeFlow::JsrRecord *>;
struct ciTypeFlow::JsrSet;
struct ciTypeFlow::Loop;
struct SetI__vtbl;
struct Set_vtbl;
struct BCEscapeAnalyzer;
struct ciObjectFactory;
struct GrowableArray<Metadata *>;
struct OopRecorder;
struct DebugInformationRecorder;
struct DebugInfoWriteStream;
struct DIR_Chunk;
struct GrowableArray<DIR_Chunk *>;
struct PcDesc;
struct xmlStream;
struct CompileLog;
struct Dependencies;
struct CompileTask;
struct AbstractCompiler_vtbl;
struct ExceptionCache;
union $54C14F04533127A0B4542E8633832638;
struct vframeArray;
struct Deoptimization::UnrollBlock;
struct MonitorChunk;
struct StackValueCollection;
struct GrowableArray<jvmtiDeferredLocalVariableSet *>;
struct ThreadSafepointState;
struct PtrQueue_vtbl;
struct PtrQueueSet;
struct PtrQueueSet_vtbl;
struct BufferNode;
struct ProfilerNode_vtbl;
struct tick_counter;
struct ThreadProfiler;
struct PrivilegedElement;
struct GrowableArray<oopDesc *>;
struct jvmtiInterface_1_;
struct JvmtiTagMap;
struct JvmtiFramePops;
struct JvmtiThreadState;
struct JvmtiEventCollector_vtbl;
struct JvmtiDynamicCodeEventCollector;
struct JvmtiVMObjectAllocEventCollector;
struct JvmtiGetLoadedClassesClosure;
struct ThreadStatistics;
struct Parker;
struct GrowableArray<MonitorInfo *>;
struct ClassLoaderData;
struct CLDClosure_vtbl;
struct CodeBlobClosure_vtbl;
struct OSThread;
struct Metachunk;
struct VirtualSpaceNode;
struct MetaWord;
struct Metablock;
struct FreeBlockDictionary<Metablock>_vtbl;
struct Metaspace;
struct ClassLoaderData::ChunkedHandleList::Chunk;
struct JNIMethodBlock;
struct Stack<oopDesc *,5>_vtbl;
struct Stack<ObjArrayTask,5>_vtbl;
struct Stack<unsigned int,7>_vtbl;
struct PSPromotionLAB_vtbl;
struct PSVirtualSpace_vtbl;
struct Stack<StarTask,1>_vtbl;
struct CopyFailedInfo_vtbl;
struct BoolObjectClosure_vtbl;
struct ReferencePolicy_vtbl;
struct KlassClosure_vtbl;
struct Stack<ObjArrayChunkedTask,5>_vtbl;
struct ShenandoahStrDedupChunkedList<64>;
struct ShenandoahStrDedupQueueSet;
struct PhaseVisitor_vtbl;
struct GCPhase_vtbl;
struct GCTracer_vtbl;
struct LinearLeastSquareFit;
struct AdaptiveSizePolicy_vtbl;
struct AdaptivePaddedAverage;
struct AdaptivePaddedNoZeroDevAverage;
struct GenerationSpec_vtbl;
struct G1MMUTracker_vtbl;
struct ObjectClosure_vtbl;
struct MemRegionClosure;
struct MemRegionClosure_vtbl;
struct SpaceMangler_vtbl;
struct GenSpaceMangler;
struct Space_vtbl;
struct SpaceClosure_vtbl;
struct GenRemSet_vtbl;
struct BarrierSet;
struct BarrierSet_vtbl;
struct CardTableModRefBSForCTRS;
struct ParGCAllocBuffer_vtbl;
struct VoidClosure_vtbl;
struct ParScanThreadState;
struct PerfData_vtbl;
struct PerfDataEntry;
struct PerfLongSampleHelper_vtbl;
struct PerfLongVariable;
struct Stack<markOopDesc *,5>_vtbl;
struct GenerationCounters_vtbl;
struct CSpaceCounters_vtbl;
struct DefNewGeneration;
struct EdenSpace;
struct GCTimer_vtbl;
struct STWGCTimer;
struct TaskQueueSetSuper_vtbl;
struct GenericTaskQueueSet<Padded<GenericTaskQueue<oopDesc *,5,16384>,64>,5>;
struct ParNewGeneration;
struct ParallelTaskTerminator;
struct ParallelTaskTerminator_vtbl;
struct ChunkArray;
struct CollectorCounters;
struct Generation_vtbl;
struct GCStats;
struct GCStats_vtbl;
struct G1BlockOffsetTable_vtbl;
struct G1MappingChangedListener_vtbl;
struct G1OffsetTableContigSpace;
struct HeapRegionSetBase_vtbl;
struct HRSMtSafeChecker;
struct HRSMtSafeChecker_vtbl;
struct G1BiasedMappedArray<HeapRegion *>_vtbl;
struct G1RegionToSpaceMapper_vtbl;
struct G1AllocRegion_vtbl;
struct G1Allocator_vtbl;
struct G1CollectedHeap;
struct G1MonitoringSupport;
struct G1BiasedMappedArray<bool>_vtbl;
struct YoungList;
struct G1CollectorPolicy;
struct G1RemSet;
struct G1RemSet_vtbl;
struct ConcurrentG1Refine;
struct CardTableEntryClosure;
struct CardTableEntryClosure_vtbl;
struct G1CardCounts;
struct OopsInHeapRegionClosure;
struct Stack<StarTask,5>_vtbl;
struct G1ParGCAllocator_vtbl;
struct G1ParScanThreadState;
struct G1ParPushHeapRSClosure;
struct FreeIdSet;
struct RefineCardTableEntryClosure;
struct ConcurrentMark;
struct ConcurrentMarkThread;
struct CMBitMap;
struct TerminatorTerminator_vtbl;
struct GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5>;
struct CMTask;
struct G1CMOopClosure;
struct AbsSeq_vtbl;
struct TruncatedSeq;
struct AbstractGangTask_vtbl;
struct AbstractWorkGang_vtbl;
struct GangWorker;
struct FlexibleWorkGang;
struct GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5>;
struct EvacuationFailedInfo;
struct ConcurrentGCTimer;
struct G1OldTracer;
struct G1NewTracer;
struct G1BiasedMappedArray<InCSetState>_vtbl;
struct HeapRegionRemSet;
struct SurvRateGroup;
struct CollectionSetChooser;
struct G1YoungGenSizer;
struct G1GCPhaseTimes;
struct CollectorPolicy_vtbl;
struct GCPolicyCounters;
struct GCPolicyCounters_vtbl;
struct ThreadClosure_vtbl;
struct CollectedHeap_vtbl;
struct EventLog_vtbl;
struct GCHeapLog;
struct PerfStringVariable;
struct ShenandoahHeap;
struct PeriodicTask_vtbl;
struct ShenandoahControlThread;
struct ShenandoahCollectorPolicy;
struct ShenandoahMode;
struct ShenandoahCollectionSet;
struct ShenandoahHeuristics;
struct ShenandoahHeuristics_vtbl;
struct ShenandoahMode_vtbl;
struct ShenandoahFreeSet;
struct ShenandoahConcurrentMark;
struct Stack<PreservedMarks::OopAndMarkOop,5>_vtbl;
struct ShenandoahMarkCompact;
struct ShenandoahPacer;
struct ShenandoahVerifier;
struct ShenandoahPhaseTimings;
struct ShenandoahMonitoringSupport;
struct ShenandoahMarkingContext;
struct GCHeapSummaryVisitor_vtbl;
struct GCHeapSummary_vtbl;
struct BlockOffsetTable_vtbl;
struct ConcurrentMarkSweepGeneration;
struct CompactibleFreeListSpace;
struct PromotedObject;
struct FreeChunk;
struct SpoolBlock;
struct FreeBlockDictionary<FreeChunk>_vtbl;
struct BinaryTreeDictionary<FreeChunk,AdaptiveFreeList<FreeChunk> >;
struct GSpaceCounters;
struct CMSParGCThreadState;
struct ConcurrentMarkSweepThread;
struct BitMapClosure_vtbl;
struct CMSConcMarkingTask;
struct Type_vtbl;
struct Compile;
struct Node_Notes;
struct GrowableArray<Node_Notes *>;
struct MachOper;
struct PhaseRegAlloc;
struct PhaseRegAlloc_vtbl;
struct OptoRegPair;
struct RootNode;
struct CFGElement_vtbl;
struct Block;
struct CFGLoop;
struct GrowableArray<CFGElement *>;
struct BlockProbPair;
struct Matcher;
struct PhaseCFG;
struct MachOper_vtbl;
struct GrowableArray<Node *>;
struct SafePointNode;
struct InlineTree;
struct CallGenerator;
struct CallGenerator_vtbl;
struct GrowableArray<CallGenerator *>;
struct GrowableArray<ShenandoahLoadReferenceBarrierNode *>;
struct PointsToNode;
struct PhaseGVN;
struct Node_Stack::INode;
struct Unique_Node_List;
struct ConnectionGraph;
struct Compile::Constant;
struct MachConstantBaseNode;
struct Dict;
struct Compile::AliasType;
struct WarmCallInfo;
struct GrowableArray<Compile::PrintInliningBuffer>;
struct Bundle;
struct relocInfo;
struct CodeBuffer;
struct BufferBlob;
struct HandlerTableEntry;
struct ConNode;
struct PhaseTransform_vtbl;
struct ConINode;
struct ConLNode;
struct Node_vtbl;
struct Relocation_vtbl;
struct AbstractAssembler_vtbl;
struct ShenandoahBarrierSetAssembler_vtbl;
struct XHandlers;
struct Instruction;
struct BlockBegin;
struct BlockEnd;
struct intArray;
struct ValueStack;
struct InstructionVisitor_vtbl;
struct ValueVisitor_vtbl;
struct Instruction_vtbl;
struct ValueType;
struct ValueType_vtbl;
struct LIR_OprDesc;
struct ValueStackStack;
struct LIR_List;
struct IR;
struct FrameMap;
struct ExceptionInfoList;
struct BlockClosure_vtbl;
struct LIR_OprPtr_vtbl;
struct LinearScan;
struct ScopeValue_vtbl;
struct CodeEmitInfo;
struct CodeStub_vtbl;
struct ArrayCopyStub;
struct ciArrayKlass;
struct LIR_Op_vtbl;
struct FpuStackAllocator;
struct DepEdge;
struct PhaseIdealLoop;
struct GraphKit_vtbl;
struct ProfileData_vtbl;
struct StubInterface_vtbl;
struct vframe_vtbl;
struct IndexSet::BitBlock;
struct CellTypeState;
struct GenerateOopMap_vtbl;
struct RetTableEntry;
struct BasicBlock;
struct ShenandoahHeapRegionClosure_vtbl;
struct PhaseCoalesce_vtbl;
struct CompilationPolicy_vtbl;
struct RangeCheckEliminator;
struct NullCheckEliminator;
struct IntervalWalker_vtbl;
struct KlassInfoClosure_vtbl;
struct VM_Operation_vtbl;
struct Stack<ShenandoahVerifierTask,5>_vtbl;
struct TimePartitionPhasesIterator_vtbl;
struct typeArrayOopDesc;
struct ShenandoahStrDedupTableCleanupTask_vtbl;
struct RestorePreservedMarksTaskExecutor_vtbl;
struct SATBBufferClosure_vtbl;
struct AbstractRefProcTaskExecutor::ProcessTask_vtbl;
struct AbstractRefProcTaskExecutor::EnqueueTask_vtbl;
struct AbstractRefProcTaskExecutor_vtbl;
struct YieldClosure_vtbl;
struct ImmutableSpace_vtbl;
struct MutableSpaceMangler;
struct NotifyDoneClosure;
struct NotifyDoneClosure_vtbl;
struct GCTaskQueue_vtbl;
struct GCTask;
struct GCTask_vtbl;
struct SynchronizedGCTaskQueue;
struct GCTaskThread;
struct NoopGCTask;
struct WaitForBarrierGCTask;
struct PSOldGen_vtbl;
struct PSMarkSweepDecorator;
struct PSGenerationCounters;
struct SpaceCounters;
struct PSYoungGen_vtbl;
struct ParMarkBitMapClosure_vtbl;
struct HeapRegionClosure_vtbl;
struct G1SATBCardTableLoggingModRefBS;
struct G1BiasedMappedArray<unsigned int>_vtbl;
struct BlkClosure_vtbl;
struct GenDCmdArgument_vtbl;
struct DCmd_vtbl;
struct DCmdFactory_vtbl;
struct MonitorClosure_vtbl;
struct GrowableElement_vtbl;
struct IUnknown_vtbl;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct tagVARIANT;
struct tagSAFEARRAY;
struct IRecordInfo;
struct _s__RTTIClassHierarchyDescriptor;
struct KlassStream_vtbl;
struct MemoryPool_vtbl;
struct MemoryManager;
struct MemoryManager_vtbl;
struct ThresholdSupport;
struct SensorInfo;
struct SignatureIterator_vtbl;
struct SymbolClosure_vtbl;
struct StubCodeGenerator_vtbl;
struct std::exception_vtbl;
struct GenCollectedHeap::GenClosure_vtbl;
struct SerializeClosure_vtbl;
struct LinkedListNode<MallocSite>;
struct LinkedList<MallocSite>_vtbl;
struct LinkedList<CommittedMemoryRegion>_vtbl;
struct LinkedListNode<ReservedMemoryRegion>;
struct LinkedList<ReservedMemoryRegion>_vtbl;
struct LinkedListNode<VirtualMemoryAllocationSite>;
struct LinkedList<VirtualMemoryAllocationSite>_vtbl;
struct ClassPathEntry_vtbl;
struct SharedPathsMiscInfo_vtbl;
struct tagPROPVARIANT;
struct os::CrashProtectionCallback_vtbl;
struct os::SuspendedThreadTask_vtbl;
struct FieldClosure_vtbl;
struct AttachOperation_vtbl;
struct DepChange_vtbl;
struct VirtualMemoryWalker_vtbl;
struct FreeBlockDictionary<Metachunk>_vtbl;
struct Metaspace::AllocRecordClosure_vtbl;
struct CleanExtraDataClosure_vtbl;
struct AbstractDecoder_vtbl;
struct FileMapInfo::FileMapHeaderBase_vtbl;
struct FileMapInfo::FileMapHeader;
struct SystemProcess_vtbl;
struct MemSummaryReporter_vtbl;
struct MemSummaryDiffReporter_vtbl;
struct MallocSiteWalker_vtbl;
struct ProtectionDomainCacheEntry;
struct OffsetClosure_vtbl;
struct RFrame_vtbl;
struct StackMapFrame;
struct RelocatorListener_vtbl;
struct ChangeItem_vtbl;
struct GrowableArray<ChangeItem *>;
struct JvmtiTagHashmapEntryClosure_vtbl;
struct Stack<_jclass *,7>_vtbl;
struct GuardedMemory_vtbl;
struct InterfaceVisiterClosure_vtbl;
struct Stack<Klass *,5>_vtbl;
struct TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl;
struct TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl;
struct TreeSearchClosure<Metablock,FreeList<Metablock> >_vtbl;
struct TreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl;
struct TreeSearchClosure<Metachunk,FreeList<Metachunk> >_vtbl;
struct TreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl;
struct MethodMatcher_vtbl;
struct PseudoScopeMark_vtbl;
struct _RPC_ASYNC_STATE;
struct _OLESTREAMVTBL;
struct _MIDL_STUB_DESC;
struct $3FA64165D15A4602C29B2D9B0DA4A5E9;
struct ARRAY_INFO;
struct CompactibleSpaceClosure_vtbl;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _wireVARIANT;

/* 1 */
enum Opcodes : __int32
{
  Op_Node = 0x0,
  Op_Set = 0x1,
  Op_RegN = 0x2,
  Op_RegI = 0x3,
  Op_RegP = 0x4,
  Op_RegF = 0x5,
  Op_RegD = 0x6,
  Op_RegL = 0x7,
  Op_VecS = 0x8,
  Op_VecD = 0x9,
  Op_VecX = 0xA,
  Op_VecY = 0xB,
  Op_RegFlags = 0xC,
  _last_machine_leaf = 0xD,
  Op_AbsD = 0xE,
  Op_AbsF = 0xF,
  Op_AbsI = 0x10,
  Op_AddD = 0x11,
  Op_AddF = 0x12,
  Op_AddI = 0x13,
  Op_AddL = 0x14,
  Op_AddP = 0x15,
  Op_Allocate = 0x16,
  Op_AllocateArray = 0x17,
  Op_AndI = 0x18,
  Op_AndL = 0x19,
  Op_AryEq = 0x1A,
  Op_AtanD = 0x1B,
  Op_Binary = 0x1C,
  Op_Bool = 0x1D,
  Op_BoxLock = 0x1E,
  Op_ReverseBytesI = 0x1F,
  Op_ReverseBytesL = 0x20,
  Op_ReverseBytesUS = 0x21,
  Op_ReverseBytesS = 0x22,
  Op_CProj = 0x23,
  Op_CallDynamicJava = 0x24,
  Op_CallJava = 0x25,
  Op_CallLeaf = 0x26,
  Op_CallLeafNoFP = 0x27,
  Op_CallRuntime = 0x28,
  Op_CallStaticJava = 0x29,
  Op_CastII = 0x2A,
  Op_CastX2P = 0x2B,
  Op_CastP2X = 0x2C,
  Op_CastPP = 0x2D,
  Op_Catch = 0x2E,
  Op_CatchProj = 0x2F,
  Op_CheckCastPP = 0x30,
  Op_ClearArray = 0x31,
  Op_ConstraintCast = 0x32,
  Op_CMoveD = 0x33,
  Op_CMoveF = 0x34,
  Op_CMoveI = 0x35,
  Op_CMoveL = 0x36,
  Op_CMoveP = 0x37,
  Op_CMoveN = 0x38,
  Op_CmpN = 0x39,
  Op_CmpD = 0x3A,
  Op_CmpD3 = 0x3B,
  Op_CmpF = 0x3C,
  Op_CmpF3 = 0x3D,
  Op_CmpI = 0x3E,
  Op_CmpL = 0x3F,
  Op_CmpL3 = 0x40,
  Op_CmpLTMask = 0x41,
  Op_CmpP = 0x42,
  Op_CmpU = 0x43,
  Op_CmpUL = 0x44,
  Op_CompareAndSwapI = 0x45,
  Op_CompareAndSwapL = 0x46,
  Op_CompareAndSwapP = 0x47,
  Op_CompareAndSwapN = 0x48,
  Op_GetAndAddI = 0x49,
  Op_GetAndAddL = 0x4A,
  Op_GetAndSetI = 0x4B,
  Op_GetAndSetL = 0x4C,
  Op_GetAndSetP = 0x4D,
  Op_GetAndSetN = 0x4E,
  Op_Con = 0x4F,
  Op_ConN = 0x50,
  Op_ConNKlass = 0x51,
  Op_ConD = 0x52,
  Op_ConF = 0x53,
  Op_ConI = 0x54,
  Op_ConL = 0x55,
  Op_ConP = 0x56,
  Op_Conv2B = 0x57,
  Op_ConvD2F = 0x58,
  Op_ConvD2I = 0x59,
  Op_ConvD2L = 0x5A,
  Op_ConvF2D = 0x5B,
  Op_ConvF2I = 0x5C,
  Op_ConvF2L = 0x5D,
  Op_ConvI2D = 0x5E,
  Op_ConvI2F = 0x5F,
  Op_ConvI2L = 0x60,
  Op_ConvL2D = 0x61,
  Op_ConvL2F = 0x62,
  Op_ConvL2I = 0x63,
  Op_CosD = 0x64,
  Op_CountedLoop = 0x65,
  Op_CountedLoopEnd = 0x66,
  Op_CountLeadingZerosI = 0x67,
  Op_CountLeadingZerosL = 0x68,
  Op_CountTrailingZerosI = 0x69,
  Op_CountTrailingZerosL = 0x6A,
  Op_CreateEx = 0x6B,
  Op_DecodeN = 0x6C,
  Op_DecodeNKlass = 0x6D,
  Op_DivD = 0x6E,
  Op_DivF = 0x6F,
  Op_DivI = 0x70,
  Op_DivL = 0x71,
  Op_DivMod = 0x72,
  Op_DivModI = 0x73,
  Op_DivModL = 0x74,
  Op_EncodeISOArray = 0x75,
  Op_EncodeP = 0x76,
  Op_EncodePKlass = 0x77,
  Op_ExpD = 0x78,
  Op_FastLock = 0x79,
  Op_FastUnlock = 0x7A,
  Op_Goto = 0x7B,
  Op_Halt = 0x7C,
  Op_If = 0x7D,
  Op_IfFalse = 0x7E,
  Op_IfTrue = 0x7F,
  Op_Initialize = 0x80,
  Op_JProj = 0x81,
  Op_Jump = 0x82,
  Op_JumpProj = 0x83,
  Op_LShiftI = 0x84,
  Op_LShiftL = 0x85,
  Op_LoadB = 0x86,
  Op_LoadUB = 0x87,
  Op_LoadUS = 0x88,
  Op_LoadD = 0x89,
  Op_LoadD_unaligned = 0x8A,
  Op_LoadF = 0x8B,
  Op_LoadI = 0x8C,
  Op_LoadKlass = 0x8D,
  Op_LoadNKlass = 0x8E,
  Op_LoadL = 0x8F,
  Op_LoadL_unaligned = 0x90,
  Op_LoadPLocked = 0x91,
  Op_LoadP = 0x92,
  Op_LoadN = 0x93,
  Op_LoadRange = 0x94,
  Op_LoadS = 0x95,
  Op_Lock = 0x96,
  Op_LogD = 0x97,
  Op_Log10D = 0x98,
  Op_Loop = 0x99,
  Op_LoopLimit = 0x9A,
  Op_Mach = 0x9B,
  Op_MachProj = 0x9C,
  Op_MaxI = 0x9D,
  Op_MemBarAcquire = 0x9E,
  Op_LoadFence = 0x9F,
  Op_MemBarAcquireLock = 0xA0,
  Op_MemBarCPUOrder = 0xA1,
  Op_MemBarRelease = 0xA2,
  Op_StoreFence = 0xA3,
  Op_MemBarReleaseLock = 0xA4,
  Op_MemBarVolatile = 0xA5,
  Op_MemBarStoreStore = 0xA6,
  Op_MergeMem = 0xA7,
  Op_MinI = 0xA8,
  Op_ModD = 0xA9,
  Op_ModF = 0xAA,
  Op_ModI = 0xAB,
  Op_ModL = 0xAC,
  Op_MoveI2F = 0xAD,
  Op_MoveF2I = 0xAE,
  Op_MoveL2D = 0xAF,
  Op_MoveD2L = 0xB0,
  Op_MulD = 0xB1,
  Op_MulF = 0xB2,
  Op_MulHiL = 0xB3,
  Op_MulI = 0xB4,
  Op_MulL = 0xB5,
  Op_Multi = 0xB6,
  Op_NegD = 0xB7,
  Op_NegF = 0xB8,
  Op_NeverBranch = 0xB9,
  Op_Opaque1 = 0xBA,
  Op_Opaque2 = 0xBB,
  Op_Opaque3 = 0xBC,
  Op_ProfileBoolean = 0xBD,
  Op_OrI = 0xBE,
  Op_OrL = 0xBF,
  Op_OverflowAddI = 0xC0,
  Op_OverflowSubI = 0xC1,
  Op_OverflowMulI = 0xC2,
  Op_OverflowAddL = 0xC3,
  Op_OverflowSubL = 0xC4,
  Op_OverflowMulL = 0xC5,
  Op_PCTable = 0xC6,
  Op_Parm = 0xC7,
  Op_PartialSubtypeCheck = 0xC8,
  Op_Phi = 0xC9,
  Op_PopCountI = 0xCA,
  Op_PopCountL = 0xCB,
  Op_PowD = 0xCC,
  Op_PrefetchAllocation = 0xCD,
  Op_PrefetchRead = 0xCE,
  Op_PrefetchWrite = 0xCF,
  Op_Proj = 0xD0,
  Op_RShiftI = 0xD1,
  Op_RShiftL = 0xD2,
  Op_Region = 0xD3,
  Op_Rethrow = 0xD4,
  Op_Return = 0xD5,
  Op_Root = 0xD6,
  Op_RoundDouble = 0xD7,
  Op_RoundFloat = 0xD8,
  Op_SafePoint = 0xD9,
  Op_SafePointScalarObject = 0xDA,
  Op_ShenandoahCompareAndSwapN = 0xDB,
  Op_ShenandoahCompareAndSwapP = 0xDC,
  Op_ShenandoahLoadReferenceBarrier = 0xDD,
  Op_SCMemProj = 0xDE,
  Op_SinD = 0xDF,
  Op_SqrtD = 0xE0,
  Op_Start = 0xE1,
  Op_StartOSR = 0xE2,
  Op_StoreB = 0xE3,
  Op_StoreC = 0xE4,
  Op_StoreCM = 0xE5,
  Op_StorePConditional = 0xE6,
  Op_StoreIConditional = 0xE7,
  Op_StoreLConditional = 0xE8,
  Op_StoreD = 0xE9,
  Op_StoreF = 0xEA,
  Op_StoreI = 0xEB,
  Op_StoreL = 0xEC,
  Op_StoreP = 0xED,
  Op_StoreN = 0xEE,
  Op_StoreNKlass = 0xEF,
  Op_StrComp = 0xF0,
  Op_StrEquals = 0xF1,
  Op_StrIndexOf = 0xF2,
  Op_SubD = 0xF3,
  Op_SubF = 0xF4,
  Op_SubI = 0xF5,
  Op_SubL = 0xF6,
  Op_TailCall = 0xF7,
  Op_TailJump = 0xF8,
  Op_TanD = 0xF9,
  Op_ThreadLocal = 0xFA,
  Op_Unlock = 0xFB,
  Op_URShiftI = 0xFC,
  Op_URShiftL = 0xFD,
  Op_XorI = 0xFE,
  Op_XorL = 0xFF,
  Op_Vector = 0x100,
  Op_AddVB = 0x101,
  Op_AddVS = 0x102,
  Op_AddVI = 0x103,
  Op_AddVL = 0x104,
  Op_AddVF = 0x105,
  Op_AddVD = 0x106,
  Op_SubVB = 0x107,
  Op_SubVS = 0x108,
  Op_SubVI = 0x109,
  Op_SubVL = 0x10A,
  Op_SubVF = 0x10B,
  Op_SubVD = 0x10C,
  Op_MulVS = 0x10D,
  Op_MulVI = 0x10E,
  Op_MulVF = 0x10F,
  Op_MulVD = 0x110,
  Op_DivVF = 0x111,
  Op_DivVD = 0x112,
  Op_LShiftCntV = 0x113,
  Op_RShiftCntV = 0x114,
  Op_LShiftVB = 0x115,
  Op_LShiftVS = 0x116,
  Op_LShiftVI = 0x117,
  Op_LShiftVL = 0x118,
  Op_RShiftVB = 0x119,
  Op_RShiftVS = 0x11A,
  Op_RShiftVI = 0x11B,
  Op_RShiftVL = 0x11C,
  Op_URShiftVB = 0x11D,
  Op_URShiftVS = 0x11E,
  Op_URShiftVI = 0x11F,
  Op_URShiftVL = 0x120,
  Op_AndV = 0x121,
  Op_OrV = 0x122,
  Op_XorV = 0x123,
  Op_LoadVector = 0x124,
  Op_StoreVector = 0x125,
  Op_Pack = 0x126,
  Op_PackB = 0x127,
  Op_PackS = 0x128,
  Op_PackI = 0x129,
  Op_PackL = 0x12A,
  Op_PackF = 0x12B,
  Op_PackD = 0x12C,
  Op_Pack2L = 0x12D,
  Op_Pack2D = 0x12E,
  Op_ReplicateB = 0x12F,
  Op_ReplicateS = 0x130,
  Op_ReplicateI = 0x131,
  Op_ReplicateL = 0x132,
  Op_ReplicateF = 0x133,
  Op_ReplicateD = 0x134,
  Op_Extract = 0x135,
  Op_ExtractB = 0x136,
  Op_ExtractUB = 0x137,
  Op_ExtractC = 0x138,
  Op_ExtractS = 0x139,
  Op_ExtractI = 0x13A,
  Op_ExtractL = 0x13B,
  Op_ExtractF = 0x13C,
  Op_ExtractD = 0x13D,
  _last_opcode = 0x13E,
};

/* 2 */
enum MachOpcodes : __int32
{
  Universe_rule = 0x0,
  label_rule = 0x1,
  sRegI_rule = 0x2,
  sRegP_rule = 0x3,
  sRegF_rule = 0x4,
  sRegD_rule = 0x5,
  sRegL_rule = 0x6,
  method_rule = 0x7,
  immI_rule = 0x8,
  immI0_rule = 0x9,
  immI1_rule = 0xA,
  immI_M1_rule = 0xB,
  immI2_rule = 0xC,
  immI8_rule = 0xD,
  immI16_rule = 0xE,
  immU31_rule = 0xF,
  immI_32_rule = 0x10,
  immI_1_31_rule = 0x11,
  immI_32_63_rule = 0x12,
  immI_1_rule = 0x13,
  immI_2_rule = 0x14,
  immI_3_rule = 0x15,
  immP_rule = 0x16,
  immP0_rule = 0x17,
  immL_rule = 0x18,
  immL0_rule = 0x19,
  immL_M1_rule = 0x1A,
  immL_127_rule = 0x1B,
  immL_32bits_rule = 0x1C,
  immL32_rule = 0x1D,
  immDPR0_rule = 0x1E,
  immDPR1_rule = 0x1F,
  immDPR_rule = 0x20,
  immD_rule = 0x21,
  immD0_rule = 0x22,
  immFPR0_rule = 0x23,
  immFPR1_rule = 0x24,
  immFPR_rule = 0x25,
  immF_rule = 0x26,
  immF0_rule = 0x27,
  immI_16_rule = 0x28,
  immI_24_rule = 0x29,
  immI_255_rule = 0x2A,
  immI_65535_rule = 0x2B,
  rRegI_rule = 0x2C,
  xRegI_rule = 0x2D,
  eAXRegI_rule = 0x2E,
  eBXRegI_rule = 0x2F,
  eCXRegI_rule = 0x30,
  eDXRegI_rule = 0x31,
  eDIRegI_rule = 0x32,
  naxRegI_rule = 0x33,
  nadxRegI_rule = 0x34,
  ncxRegI_rule = 0x35,
  eSIRegI_rule = 0x36,
  anyRegP_rule = 0x37,
  eRegP_rule = 0x38,
  eRegP_no_EBP_rule = 0x39,
  naxRegP_rule = 0x3A,
  nabxRegP_rule = 0x3B,
  pRegP_rule = 0x3C,
  eAXRegP_rule = 0x3D,
  eBXRegP_rule = 0x3E,
  eCXRegP_rule = 0x3F,
  eSIRegP_rule = 0x40,
  eDIRegP_rule = 0x41,
  eRegL_rule = 0x42,
  eADXRegL_rule = 0x43,
  eBCXRegL_rule = 0x44,
  eADXRegL_low_only_rule = 0x45,
  eFlagsReg_rule = 0x46,
  eFlagsRegU_rule = 0x47,
  eFlagsRegUCF_rule = 0x48,
  flagsReg_long_LTGE_rule = 0x49,
  flagsReg_long_EQNE_rule = 0x4A,
  flagsReg_long_LEGT_rule = 0x4B,
  flagsReg_ulong_LTGE_rule = 0x4C,
  flagsReg_ulong_EQNE_rule = 0x4D,
  flagsReg_ulong_LEGT_rule = 0x4E,
  regDPR_rule = 0x4F,
  regDPR1_rule = 0x50,
  regDPR2_rule = 0x51,
  regnotDPR1_rule = 0x52,
  regFPR_rule = 0x53,
  regFPR1_rule = 0x54,
  regF_rule = 0x55,
  regD_rule = 0x56,
  direct_rule = 0x57,
  indirect_rule = 0x58,
  indOffset8_rule = 0x59,
  indOffset32_rule = 0x5A,
  indOffset32X_rule = 0x5B,
  indIndexOffset_rule = 0x5C,
  indIndex_rule = 0x5D,
  indIndexScale_rule = 0x5E,
  indIndexScaleOffset_rule = 0x5F,
  load_long_RegP_rule = 0x60,
  load_long_indirect_rule = 0x61,
  load_long_indOffset32_rule = 0x62,
  stackSlotP_rule = 0x63,
  stackSlotI_rule = 0x64,
  stackSlotF_rule = 0x65,
  stackSlotD_rule = 0x66,
  stackSlotL_rule = 0x67,
  indirect_win95_safe_rule = 0x68,
  indOffset8_win95_safe_rule = 0x69,
  indOffset32_win95_safe_rule = 0x6A,
  indIndexOffset_win95_safe_rule = 0x6B,
  indIndexScale_win95_safe_rule = 0x6C,
  indIndexScaleOffset_win95_safe_rule = 0x6D,
  cmpOp_rule = 0x6E,
  cmpOpU_rule = 0x6F,
  cmpOpUCF_rule = 0x70,
  cmpOpUCF2_rule = 0x71,
  cmpOp_fcmov_rule = 0x72,
  cmpOp_commute_rule = 0x73,
  cmpOpU_commute_rule = 0x74,
  vecS_rule = 0x75,
  vecD_rule = 0x76,
  vecX_rule = 0x77,
  vecY_rule = 0x78,
  load_long_memory_rule = 0x79,
  memory_rule = 0x7A,
  long_memory_rule = 0x7B,
  _AddP_eRegP_rRegI_rule = 0x7C,
  _LShiftI_rRegI_immI2_rule = 0x7D,
  _AddP_eRegP__LShiftI_rRegI_immI2_rule = 0x7E,
  _AddP_eRegP_no_EBP_rRegI_rule = 0x7F,
  _AddP_eRegP_no_EBP__LShiftI_rRegI_immI2_rule = 0x80,
  _LoadI_memory__rule = 0x81,
  _LoadL_memory__rule = 0x82,
  _LoadB_memory__rule = 0x83,
  _LoadUB_memory__rule = 0x84,
  _AndI__LoadUB_memory__immI8_rule = 0x85,
  _LoadS_memory__rule = 0x86,
  _LShiftI__LoadS_memory__immI_24_rule = 0x87,
  _LoadUS_memory__rule = 0x88,
  _LShiftI__LoadUS_memory__immI_24_rule = 0x89,
  _AndI__LoadUS_memory__immI_255_rule = 0x8A,
  _AndI__LoadUS_memory__immI16_rule = 0x8B,
  _LShiftI__LoadI_memory__immI_24_rule = 0x8C,
  _LShiftI__LoadI_memory__immI_16_rule = 0x8D,
  _AndI__LoadI_memory__immI_255_rule = 0x8E,
  _AndI__LoadI_memory__immI_65535_rule = 0x8F,
  _AndI__LoadI_memory__immU31_rule = 0x90,
  _ConvI2L__LoadI_memory___rule = 0x91,
  _ConvL2I_eRegL__rule = 0x92,
  _RoundDouble_regDPR1__rule = 0x93,
  _RoundFloat_regFPR1__rule = 0x94,
  _ConvD2F_regDPR1__rule = 0x95,
  _Binary_cmpOp_eFlagsReg_rule = 0x96,
  _Binary_rRegI_rRegI_rule = 0x97,
  _Binary_cmpOpU_eFlagsRegU_rule = 0x98,
  _Binary_cmpOpUCF_eFlagsRegUCF_rule = 0x99,
  _Binary_rRegI__LoadI_memory__rule = 0x9A,
  _Binary_eRegP_eRegP_rule = 0x9B,
  _Binary_cmpOp_fcmov_eFlagsRegU_rule = 0x9C,
  _Binary_regDPR1_regDPR_rule = 0x9D,
  _Binary_regFPR1_regFPR_rule = 0x9E,
  _Binary_regDPR_regDPR_rule = 0x9F,
  _Binary_regFPR_regFPR_rule = 0xA0,
  _Binary_regF_regF_rule = 0xA1,
  _Binary_regD_regD_rule = 0xA2,
  _Binary_eRegL_eRegL_rule = 0xA3,
  _AddI__LoadI_memory__rRegI_rule = 0xA4,
  _AddI_rRegI__LoadI_memory__rule = 0xA5,
  _AddI__LoadI_memory__immI_rule = 0xA6,
  _AddI__LoadI_memory__immI1_rule = 0xA7,
  _AddI__LoadI_memory__immI_M1_rule = 0xA8,
  _Binary_eAXRegP_eRegP_rule = 0xA9,
  _Binary_eAXRegI_rRegI_rule = 0xAA,
  _Binary_eADXRegL_eBCXRegL_rule = 0xAB,
  _Binary_eAXRegP_eCXRegP_rule = 0xAC,
  _Binary_eAXRegI_eCXRegI_rule = 0xAD,
  _SubI__LoadI_memory__rRegI_rule = 0xAE,
  _SubI_immI0_rRegI_rule = 0xAF,
  _ConvI2L_nadxRegI__rule = 0xB0,
  _MulL__ConvI2L_nadxRegI__eADXRegL_low_only_rule = 0xB1,
  _RShiftL__MulL__ConvI2L_nadxRegI__eADXRegL_low_only_immI_32_rule = 0xB2,
  _MulL_eADXRegL_low_only__ConvI2L_nadxRegI__rule = 0xB3,
  _RShiftL__MulL_eADXRegL_low_only__ConvI2L_nadxRegI__immI_32_rule = 0xB4,
  _RShiftL__MulL__ConvI2L_nadxRegI__eADXRegL_low_only_immI_32_63_rule = 0xB5,
  _RShiftL__MulL_eADXRegL_low_only__ConvI2L_nadxRegI__immI_32_63_rule = 0xB6,
  _ConvI2L_eAXRegI__rule = 0xB7,
  _AndL__ConvI2L_eAXRegI__immL_32bits_rule = 0xB8,
  _AndL__ConvI2L_nadxRegI__immL_32bits_rule = 0xB9,
  _RShiftI__LoadI_memory__immI1_rule = 0xBA,
  _RShiftI__LoadI_memory__immI8_rule = 0xBB,
  _LShiftI_xRegI_immI_24_rule = 0xBC,
  _LShiftI_xRegI_immI_16_rule = 0xBD,
  _AndI__LoadI_memory__rRegI_rule = 0xBE,
  _AndI_rRegI__LoadI_memory__rule = 0xBF,
  _AndI__LoadI_memory__immI_rule = 0xC0,
  _XorI_rRegI_immI_M1_rule = 0xC1,
  _SubI_immI0__LoadI_memory__rule = 0xC2,
  _AddI_rRegI_immI_M1_rule = 0xC3,
  _CastP2X_eRegP__rule = 0xC4,
  _OrI__LoadI_memory__rRegI_rule = 0xC5,
  _OrI_rRegI__LoadI_memory__rule = 0xC6,
  _OrI__LoadI_memory__immI_rule = 0xC7,
  _LShiftI_rRegI_immI1_rule = 0xC8,
  _URShiftI_rRegI_immI_M1_rule = 0xC9,
  _LShiftI_rRegI_immI8_rule = 0xCA,
  _URShiftI_rRegI_immI8_rule = 0xCB,
  _LShiftI_ncxRegI_eCXRegI_rule = 0xCC,
  _SubI_immI0_eCXRegI_rule = 0xCD,
  _URShiftI_ncxRegI__SubI_immI0_eCXRegI_rule = 0xCE,
  _SubI_immI_32_eCXRegI_rule = 0xCF,
  _URShiftI_ncxRegI__SubI_immI_32_eCXRegI_rule = 0xD0,
  _URShiftI_rRegI_immI1_rule = 0xD1,
  _LShiftI_rRegI_immI_M1_rule = 0xD2,
  _URShiftI_ncxRegI_eCXRegI_rule = 0xD3,
  _LShiftI_ncxRegI__SubI_immI0_eCXRegI_rule = 0xD4,
  _LShiftI_ncxRegI__SubI_immI_32_eCXRegI_rule = 0xD5,
  _XorI__LoadI_memory__rRegI_rule = 0xD6,
  _XorI_rRegI__LoadI_memory__rule = 0xD7,
  _XorI__LoadI_memory__immI_rule = 0xD8,
  _CmpLTMask_rRegI_rRegI_rule = 0xD9,
  _AndI__CmpLTMask_rRegI_rRegI_rRegI_rule = 0xDA,
  _SubI_rRegI_rRegI_rule = 0xDB,
  _AndI_rRegI__CmpLTMask_rRegI_rRegI_rule = 0xDC,
  _LoadL_load_long_memory__rule = 0xDD,
  _XorL_eRegL_immL_M1_rule = 0xDE,
  _SubL_immL0_eRegL_rule = 0xDF,
  _SubL_immL0__LoadL_memory__rule = 0xE0,
  _AddL_eRegL_immL_M1_rule = 0xE1,
  _AddL__LoadL_memory__immL_M1_rule = 0xE2,
  _LoadD_memory__rule = 0xE3,
  _SubD_regDPR_regDPR_rule = 0xE4,
  _AddD_regDPR_regDPR_rule = 0xE5,
  _AddD__LoadD_memory__regDPR_rule = 0xE6,
  _RoundDouble__AddD__LoadD_memory__regDPR__rule = 0xE7,
  _AddD_regDPR__LoadD_memory__rule = 0xE8,
  _RoundDouble__AddD_regDPR__LoadD_memory___rule = 0xE9,
  _AddD_regDPR_immDPR_rule = 0xEA,
  _MulD_regDPR_regDPR_rule = 0xEB,
  _DivD_regDPR_regDPR_rule = 0xEC,
  _LoadF_memory__rule = 0xED,
  _MulF__LoadF_memory__regFPR_rule = 0xEE,
  _MulF_regFPR__LoadF_memory__rule = 0xEF,
  _MulF_regFPR_regFPR_rule = 0xF0,
  _SubF_regFPR_regFPR_rule = 0xF1,
  _ConvI2L_rRegI__rule = 0xF2,
  _Binary_eDIRegP_eCXRegI_rule = 0xF3,
  _Binary_eSIRegP_eDXRegI_rule = 0xF4,
  _Binary_eDIRegP_eSIRegP_rule = 0xF5,
  _Binary_eDIRegP_eDXRegI_rule = 0xF6,
  _Binary_eSIRegP_immI_rule = 0xF7,
  _Binary_eSIRegP_eAXRegI_rule = 0xF8,
  _AndI_rRegI_immI_rule = 0xF9,
  _AndI_rRegI_memory_rule = 0xFA,
  _LoadP_memory__rule = 0xFB,
  _Binary_nadxRegI_eAXRegI_rule = 0xFC,
  _PartialSubtypeCheck_eSIRegP_eAXRegP_rule = 0xFD,
  _Binary_cmpOp_flagsReg_long_LTGE_rule = 0xFE,
  _Binary_eRegL__LoadL_load_long_memory__rule = 0xFF,
  _Binary_cmpOp_flagsReg_long_EQNE_rule = 0x100,
  _Binary_cmpOp_commute_flagsReg_long_LEGT_rule = 0x101,
  _ConvF2D_regF__rule = 0x102,
  _SqrtD__ConvF2D_regF___rule = 0x103,
  _ConvF2D__LoadF_memory___rule = 0x104,
  _SqrtD__ConvF2D__LoadF_memory____rule = 0x105,
  _ConvF2D_immF__rule = 0x106,
  _SqrtD__ConvF2D_immF___rule = 0x107,
  _LoadVector_memory__rule = 0x108,
  storeSSI_rule = 0x109,
  storeSSP_rule = 0x10A,
  storeSSL_rule = 0x10B,
  leaP8_rule = 0x10C,
  leaP32_rule = 0x10D,
  leaPIdxOff_rule = 0x10E,
  leaPIdxScale_rule = 0x10F,
  leaPIdxScaleOff_rule = 0x110,
  loadConI_rule = 0x111,
  loadConI0_rule = 0x112,
  loadConP_rule = 0x113,
  loadConL_rule = 0x114,
  loadConL0_rule = 0x115,
  loadConFPR_rule = 0x116,
  loadConFPR0_rule = 0x117,
  loadConFPR1_rule = 0x118,
  loadConF_rule = 0x119,
  loadConF0_rule = 0x11A,
  loadConDPR_rule = 0x11B,
  loadConDPR0_rule = 0x11C,
  loadConDPR1_rule = 0x11D,
  loadConD_rule = 0x11E,
  loadConD0_rule = 0x11F,
  loadSSI_rule = 0x120,
  loadSSL_rule = 0x121,
  loadSSP_rule = 0x122,
  loadSSF_rule = 0x123,
  loadSSD_rule = 0x124,
  loadConL_low_only_rule = 0x125,
  membar_volatile_rule = 0x126,
  castX2P_rule = 0x127,
  castP2X_rule = 0x128,
  checkCastPP_rule = 0x129,
  castPP_rule = 0x12A,
  castII_rule = 0x12B,
  storePConditional_rule = 0x12C,
  storeIConditional_rule = 0x12D,
  storeLConditional_rule = 0x12E,
  movI_nocopy_rule = 0x12F,
  movP_nocopy_rule = 0x130,
  overflowAddI_eReg_rule = 0x131,
  overflowAddI_rReg_imm_rule = 0x132,
  overflowSubI_rReg_rule = 0x133,
  overflowSubI_rReg_imm_rule = 0x134,
  overflowNegI_rReg_rule = 0x135,
  overflowMulI_rReg_rule = 0x136,
  overflowMulI_rReg_imm_rule = 0x137,
  cmpDPR_cc_P6_rule = 0x138,
  cmpDPR_cc_P6CF_rule = 0x139,
  cmpDPR_cc_rule = 0x13A,
  cmpD_cc_rule = 0x13B,
  cmpD_ccCF_rule = 0x13C,
  cmpD_ccmem_rule = 0x13D,
  cmpD_ccmemCF_rule = 0x13E,
  absDPR_reg_rule = 0x13F,
  negDPR_reg_rule = 0x140,
  cmpFPR_cc_P6_rule = 0x141,
  cmpFPR_cc_P6CF_rule = 0x142,
  cmpFPR_cc_rule = 0x143,
  cmpF_cc_rule = 0x144,
  cmpF_ccCF_rule = 0x145,
  cmpF_ccmem_rule = 0x146,
  cmpF_ccmemCF_rule = 0x147,
  absFPR_reg_rule = 0x148,
  negFPR_reg_rule = 0x149,
  MoveF2I_stack_reg_rule = 0x14A,
  MoveF2I_reg_reg_sse_rule = 0x14B,
  MoveI2FPR_stack_reg_rule = 0x14C,
  MoveI2F_stack_reg_sse_rule = 0x14D,
  MoveI2F_reg_reg_sse_rule = 0x14E,
  MoveD2L_stack_reg_rule = 0x14F,
  MoveL2DPR_stack_reg_rule = 0x150,
  MoveL2D_stack_reg_sse_rule = 0x151,
  MoveL2D_stack_reg_sse_partial_rule = 0x152,
  compI_eReg_rule = 0x153,
  compI_eReg_imm_rule = 0x154,
  compI_eReg_mem_rule = 0x155,
  testI_reg_rule = 0x156,
  testI_reg_imm_rule = 0x157,
  testI_reg_mem_rule = 0x158,
  compU_eReg_rule = 0x159,
  compU_eReg_imm_rule = 0x15A,
  compU_eReg_mem_rule = 0x15B,
  testU_reg_rule = 0x15C,
  compP_eReg_rule = 0x15D,
  compP_eReg_imm_rule = 0x15E,
  compP_eReg_mem_rule = 0x15F,
  compP_mem_eReg_rule = 0x160,
  testP_reg_rule = 0x161,
  testP_Reg_mem_rule = 0x162,
  partialSubtypeCheck_vs_Zero_rule = 0x163,
  cmpL_zero_flags_LTGE_rule = 0x164,
  cmpL_reg_flags_LTGE_rule = 0x165,
  cmpUL_zero_flags_LTGE_rule = 0x166,
  cmpUL_reg_flags_LTGE_rule = 0x167,
  cmpL_zero_flags_EQNE_rule = 0x168,
  cmpL_reg_flags_EQNE_rule = 0x169,
  cmpUL_zero_flags_EQNE_rule = 0x16A,
  cmpUL_reg_flags_EQNE_rule = 0x16B,
  cmpL_zero_flags_LEGT_rule = 0x16C,
  cmpL_reg_flags_LEGT_rule = 0x16D,
  cmpUL_zero_flags_LEGT_rule = 0x16E,
  cmpUL_reg_flags_LEGT_rule = 0x16F,
  cmpFastLockRTM_rule = 0x170,
  cmpFastLock_rule = 0x171,
  cmpFastUnlock_rule = 0x172,
  safePoint_poll_rule = 0x173,
  absF_reg_rule = 0x174,
  absF_reg_reg_rule = 0x175,
  absD_reg_rule = 0x176,
  absD_reg_reg_rule = 0x177,
  negF_reg_rule = 0x178,
  negF_reg_reg_rule = 0x179,
  negD_reg_rule = 0x17A,
  negD_reg_reg_rule = 0x17B,
  vshiftcnt_rule = 0x17C,
  vshiftcnt_0_rule = 0x17D,
  bytes_reverse_int_rule = 0x17E,
  bytes_reverse_long_rule = 0x17F,
  bytes_reverse_unsigned_short_rule = 0x180,
  bytes_reverse_short_rule = 0x181,
  countLeadingZerosI_rule = 0x182,
  countLeadingZerosI_bsr_rule = 0x183,
  countLeadingZerosL_rule = 0x184,
  countLeadingZerosL_bsr_rule = 0x185,
  countTrailingZerosI_rule = 0x186,
  countTrailingZerosI_bsf_rule = 0x187,
  countTrailingZerosL_rule = 0x188,
  countTrailingZerosL_bsf_rule = 0x189,
  popCountI_rule = 0x18A,
  popCountI_mem_rule = 0x18B,
  popCountL_rule = 0x18C,
  popCountL_mem_rule = 0x18D,
  loadB_rule = 0x18E,
  loadB2L_rule = 0x18F,
  loadUB_rule = 0x190,
  loadUB2L_rule = 0x191,
  loadUB2L_immI8_rule = 0x192,
  loadS_rule = 0x193,
  loadS2B_rule = 0x194,
  loadS2L_rule = 0x195,
  loadUS_rule = 0x196,
  loadUS2B_rule = 0x197,
  loadUS2L_rule = 0x198,
  loadUS2L_immI_255_rule = 0x199,
  loadUS2L_immI16_rule = 0x19A,
  loadI_rule = 0x19B,
  loadI2B_rule = 0x19C,
  loadI2UB_rule = 0x19D,
  loadI2S_rule = 0x19E,
  loadI2US_rule = 0x19F,
  loadI2L_rule = 0x1A0,
  loadI2L_immI_255_rule = 0x1A1,
  loadI2L_immI_65535_rule = 0x1A2,
  loadI2L_immU31_rule = 0x1A3,
  loadUI2L_rule = 0x1A4,
  loadL_rule = 0x1A5,
  loadL_volatile_rule = 0x1A6,
  loadLX_volatile_rule = 0x1A7,
  loadLX_reg_volatile_rule = 0x1A8,
  loadRange_rule = 0x1A9,
  loadP_rule = 0x1AA,
  loadKlass_rule = 0x1AB,
  loadDPR_rule = 0x1AC,
  loadD_rule = 0x1AD,
  loadD_partial_rule = 0x1AE,
  loadF_rule = 0x1AF,
  loadFPR_rule = 0x1B0,
  prefetchr0_rule = 0x1B1,
  prefetchr_rule = 0x1B2,
  prefetchrNTA_rule = 0x1B3,
  prefetchrT0_rule = 0x1B4,
  prefetchrT2_rule = 0x1B5,
  prefetchw0_rule = 0x1B6,
  prefetchw_rule = 0x1B7,
  prefetchwNTA_rule = 0x1B8,
  prefetchAlloc0_rule = 0x1B9,
  prefetchAlloc_rule = 0x1BA,
  prefetchAllocNTA_rule = 0x1BB,
  prefetchAllocT0_rule = 0x1BC,
  prefetchAllocT2_rule = 0x1BD,
  storeB_rule = 0x1BE,
  storeC_rule = 0x1BF,
  storeI_rule = 0x1C0,
  storeL_rule = 0x1C1,
  storeL2I_rule = 0x1C2,
  storeL_volatile_rule = 0x1C3,
  storeLX_volatile_rule = 0x1C4,
  storeLX_reg_volatile_rule = 0x1C5,
  storeP_rule = 0x1C6,
  storeImmI_rule = 0x1C7,
  storeImmI16_rule = 0x1C8,
  storeImmP_rule = 0x1C9,
  storeImmB_rule = 0x1CA,
  storeImmCM_rule = 0x1CB,
  storeDPR_rule = 0x1CC,
  storeDPR_rounded_rule = 0x1CD,
  storeD_rule = 0x1CE,
  storeF_rule = 0x1CF,
  storeFPR_rule = 0x1D0,
  storeFPR_rounded_rule = 0x1D1,
  storeFPR_Drounded_rule = 0x1D2,
  storeFPR_imm_rule = 0x1D3,
  storeF_imm_rule = 0x1D4,
  membar_acquire_rule = 0x1D5,
  membar_acquire_0_rule = 0x1D6,
  membar_acquire_lock_rule = 0x1D7,
  membar_release_rule = 0x1D8,
  membar_release_0_rule = 0x1D9,
  membar_release_lock_rule = 0x1DA,
  unnecessary_membar_volatile_rule = 0x1DB,
  membar_storestore_rule = 0x1DC,
  jmovI_reg_rule = 0x1DD,
  jmovI_regU_rule = 0x1DE,
  cmovI_reg_rule = 0x1DF,
  cmovI_regU_rule = 0x1E0,
  cmovI_regUCF_rule = 0x1E1,
  cmovI_mem_rule = 0x1E2,
  cmovI_memU_rule = 0x1E3,
  cmovI_memUCF_rule = 0x1E4,
  cmovP_reg_rule = 0x1E5,
  cmovP_reg_nonP6_rule = 0x1E6,
  cmovP_regU_rule = 0x1E7,
  cmovP_regUCF_rule = 0x1E8,
  fcmovDPR_regU_rule = 0x1E9,
  fcmovFPR_regU_rule = 0x1EA,
  fcmovDPR_regS_rule = 0x1EB,
  fcmovFPR_regS_rule = 0x1EC,
  fcmovF_regS_rule = 0x1ED,
  fcmovD_regS_rule = 0x1EE,
  fcmovF_regU_rule = 0x1EF,
  fcmovF_regUCF_rule = 0x1F0,
  fcmovD_regU_rule = 0x1F1,
  fcmovD_regUCF_rule = 0x1F2,
  cmovL_reg_rule = 0x1F3,
  cmovL_regU_rule = 0x1F4,
  cmovL_regUCF_rule = 0x1F5,
  addI_eReg_rule = 0x1F6,
  addI_eReg_imm_rule = 0x1F7,
  incI_eReg_rule = 0x1F8,
  leaI_eReg_immI_rule = 0x1F9,
  leaP_eReg_immI_rule = 0x1FA,
  decI_eReg_rule = 0x1FB,
  addP_eReg_rule = 0x1FC,
  addP_eReg_imm_rule = 0x1FD,
  addI_eReg_mem_rule = 0x1FE,
  addI_eReg_mem_0_rule = 0x1FF,
  addI_mem_eReg_rule = 0x200,
  addI_mem_eReg_0_rule = 0x201,
  addI_mem_imm_rule = 0x202,
  incI_mem_rule = 0x203,
  decI_mem_rule = 0x204,
  loadPLocked_rule = 0x205,
  compareAndSwapL_rule = 0x206,
  compareAndSwapP_rule = 0x207,
  compareAndSwapP_shenandoah_rule = 0x208,
  compareAndSwapI_rule = 0x209,
  xaddI_no_res_rule = 0x20A,
  xaddI_rule = 0x20B,
  xchgI_rule = 0x20C,
  xchgP_rule = 0x20D,
  subI_eReg_rule = 0x20E,
  subI_eReg_imm_rule = 0x20F,
  subI_eReg_mem_rule = 0x210,
  subI_mem_eReg_rule = 0x211,
  subP_eReg_rule = 0x212,
  negI_eReg_rule = 0x213,
  mulI_eReg_rule = 0x214,
  mulI_eReg_imm_rule = 0x215,
  mulI_imm_high_rule = 0x216,
  mulI_imm_high_0_rule = 0x217,
  mulI_imm_RShift_high_rule = 0x218,
  mulI_imm_RShift_high_0_rule = 0x219,
  mulI_mem_imm_rule = 0x21A,
  mulI_rule = 0x21B,
  mulI_0_rule = 0x21C,
  mulI2L_rule = 0x21D,
  mulI2L_0_rule = 0x21E,
  mulIS_eReg_rule = 0x21F,
  mulIS_eReg_0_rule = 0x220,
  mulL_eReg_rule = 0x221,
  mulL_eReg_lhi0_rule = 0x222,
  mulL_eReg_rhi0_rule = 0x223,
  mulL_eReg_hi0_rule = 0x224,
  mulL_eReg_con_rule = 0x225,
  divI_eReg_rule = 0x226,
  divL_eReg_rule = 0x227,
  divModI_eReg_divmod_rule = 0x228,
  modI_eReg_rule = 0x229,
  modL_eReg_rule = 0x22A,
  divL_eReg_imm32_rule = 0x22B,
  modL_eReg_imm32_rule = 0x22C,
  shlI_eReg_1_rule = 0x22D,
  salI_eReg_imm_rule = 0x22E,
  salI_eReg_CL_rule = 0x22F,
  sarI_eReg_1_rule = 0x230,
  sarI_mem_1_rule = 0x231,
  sarI_eReg_imm_rule = 0x232,
  sarI_mem_imm_rule = 0x233,
  sarI_eReg_CL_rule = 0x234,
  shrI_eReg_1_rule = 0x235,
  shrI_eReg_imm_rule = 0x236,
  i2b_rule = 0x237,
  i2s_rule = 0x238,
  shrI_eReg_CL_rule = 0x239,
  andI_eReg_rule = 0x23A,
  andI_eReg_imm_rule = 0x23B,
  andI_eReg_mem_rule = 0x23C,
  andI_eReg_mem_0_rule = 0x23D,
  andI_mem_eReg_rule = 0x23E,
  andI_mem_eReg_0_rule = 0x23F,
  andI_mem_imm_rule = 0x240,
  andnI_rReg_rReg_rReg_rule = 0x241,
  andnI_rReg_rReg_rReg_0_rule = 0x242,
  andnI_rReg_rReg_mem_rule = 0x243,
  andnI_rReg_rReg_mem_0_rule = 0x244,
  blsiI_rReg_rReg_rule = 0x245,
  blsiI_rReg_rReg_0_rule = 0x246,
  blsiI_rReg_mem_rule = 0x247,
  blsiI_rReg_mem_0_rule = 0x248,
  blsmskI_rReg_rReg_rule = 0x249,
  blsmskI_rReg_rReg_0_rule = 0x24A,
  blsmskI_rReg_mem_rule = 0x24B,
  blsmskI_rReg_mem_0_rule = 0x24C,
  blsrI_rReg_rReg_rule = 0x24D,
  blsrI_rReg_rReg_0_rule = 0x24E,
  blsrI_rReg_mem_rule = 0x24F,
  blsrI_rReg_mem_0_rule = 0x250,
  orI_eReg_rule = 0x251,
  orI_eReg_castP2X_rule = 0x252,
  orI_eReg_castP2X_0_rule = 0x253,
  orI_eReg_imm_rule = 0x254,
  orI_eReg_mem_rule = 0x255,
  orI_eReg_mem_0_rule = 0x256,
  orI_mem_eReg_rule = 0x257,
  orI_mem_eReg_0_rule = 0x258,
  orI_mem_imm_rule = 0x259,
  rolI_eReg_imm1_rule = 0x25A,
  rolI_eReg_imm8_rule = 0x25B,
  rolI_eReg_CL_rule = 0x25C,
  rolI_eReg_i1_rule = 0x25D,
  rolI_eReg_i1_0_rule = 0x25E,
  rolI_eReg_i8_rule = 0x25F,
  rolI_eReg_i8_0_rule = 0x260,
  rolI_eReg_Var_C0_rule = 0x261,
  rolI_eReg_Var_C0_0_rule = 0x262,
  rolI_eReg_Var_C32_rule = 0x263,
  rolI_eReg_Var_C32_0_rule = 0x264,
  rorI_eReg_imm1_rule = 0x265,
  rorI_eReg_imm8_rule = 0x266,
  rorI_eReg_CL_rule = 0x267,
  rorI_eReg_i1_rule = 0x268,
  rorI_eReg_i1_0_rule = 0x269,
  rorI_eReg_i8_rule = 0x26A,
  rorI_eReg_i8_0_rule = 0x26B,
  rorI_eReg_Var_C0_rule = 0x26C,
  rorI_eReg_Var_C0_0_rule = 0x26D,
  rorI_eReg_Var_C32_rule = 0x26E,
  rorI_eReg_Var_C32_0_rule = 0x26F,
  xorI_eReg_rule = 0x270,
  xorI_eReg_im1_rule = 0x271,
  xorI_eReg_imm_rule = 0x272,
  xorI_eReg_mem_rule = 0x273,
  xorI_eReg_mem_0_rule = 0x274,
  xorI_mem_eReg_rule = 0x275,
  xorI_mem_eReg_0_rule = 0x276,
  xorI_mem_imm_rule = 0x277,
  ci2b_rule = 0x278,
  convI2B_rule = 0x279,
  cp2b_rule = 0x27A,
  convP2B_rule = 0x27B,
  cmpLTMask_rule = 0x27C,
  cmpLTMask0_rule = 0x27D,
  cadd_cmpLTMask_rule = 0x27E,
  cadd_cmpLTMask_1_rule = 0x27F,
  cadd_cmpLTMask_0_rule = 0x280,
  cadd_cmpLTMask_2_rule = 0x281,
  and_cmpLTMask_rule = 0x282,
  and_cmpLTMask_0_rule = 0x283,
  addL_eReg_rule = 0x284,
  addL_eReg_imm_rule = 0x285,
  addL_eReg_mem_rule = 0x286,
  addL_eReg_mem_0_rule = 0x287,
  subL_eReg_rule = 0x288,
  subL_eReg_imm_rule = 0x289,
  subL_eReg_mem_rule = 0x28A,
  negL_eReg_rule = 0x28B,
  andL_eReg_rule = 0x28C,
  andL_eReg_imm_rule = 0x28D,
  andL_eReg_mem_rule = 0x28E,
  andL_eReg_mem_0_rule = 0x28F,
  andnL_eReg_eReg_eReg_rule = 0x290,
  andnL_eReg_eReg_eReg_0_rule = 0x291,
  andnL_eReg_eReg_mem_rule = 0x292,
  andnL_eReg_eReg_mem_0_rule = 0x293,
  blsiL_eReg_eReg_rule = 0x294,
  blsiL_eReg_eReg_0_rule = 0x295,
  blsiL_eReg_mem_rule = 0x296,
  blsiL_eReg_mem_0_rule = 0x297,
  blsmskL_eReg_eReg_rule = 0x298,
  blsmskL_eReg_eReg_0_rule = 0x299,
  blsmskL_eReg_mem_rule = 0x29A,
  blsmskL_eReg_mem_0_rule = 0x29B,
  blsrL_eReg_eReg_rule = 0x29C,
  blsrL_eReg_eReg_0_rule = 0x29D,
  blsrL_eReg_mem_rule = 0x29E,
  blsrL_eReg_mem_0_rule = 0x29F,
  orl_eReg_rule = 0x2A0,
  orl_eReg_imm_rule = 0x2A1,
  orl_eReg_mem_rule = 0x2A2,
  orl_eReg_mem_0_rule = 0x2A3,
  xorl_eReg_rule = 0x2A4,
  xorl_eReg_im1_rule = 0x2A5,
  xorl_eReg_imm_rule = 0x2A6,
  xorl_eReg_mem_rule = 0x2A7,
  xorl_eReg_mem_0_rule = 0x2A8,
  shlL_eReg_1_rule = 0x2A9,
  shlL_eReg_2_rule = 0x2AA,
  shlL_eReg_3_rule = 0x2AB,
  shlL_eReg_1_31_rule = 0x2AC,
  shlL_eReg_32_63_rule = 0x2AD,
  salL_eReg_CL_rule = 0x2AE,
  shrL_eReg_1_31_rule = 0x2AF,
  shrL_eReg_32_63_rule = 0x2B0,
  shrL_eReg_CL_rule = 0x2B1,
  sarL_eReg_1_31_rule = 0x2B2,
  sarL_eReg_32_63_rule = 0x2B3,
  sarL_eReg_CL_rule = 0x2B4,
  cmpDPR_0_rule = 0x2B5,
  cmpDPR_reg_rule = 0x2B6,
  cmpD_reg_rule = 0x2B7,
  cmpD_regmem_rule = 0x2B8,
  subDPR_reg_rule = 0x2B9,
  subDPR_reg_round_rule = 0x2BA,
  subDPR_reg_mem_rule = 0x2BB,
  addDPR_reg_rule = 0x2BC,
  addDPR_reg_round_rule = 0x2BD,
  addDPR_reg_mem_rule = 0x2BE,
  addDPR_reg_mem_0_rule = 0x2BF,
  addDPR_mem_reg_rule = 0x2C0,
  addDPR_mem_reg_0_rule = 0x2C1,
  addDPR_reg_imm1_rule = 0x2C2,
  addDPR_reg_imm_rule = 0x2C3,
  addDPR_reg_imm_round_rule = 0x2C4,
  mulDPR_reg_rule = 0x2C5,
  strictfp_mulDPR_reg_rule = 0x2C6,
  mulDPR_reg_imm_rule = 0x2C7,
  mulDPR_reg_mem_rule = 0x2C8,
  mulDPR_reg_mem_0_rule = 0x2C9,
  mulDPR_reg_mem_cisc_rule = 0x2CA,
  mulDPR_reg_mem_cisc_0_rule = 0x2CB,
  addDPR_mulDPR_reg_rule = 0x2CC,
  addDPR_mulDPR_reg_0_rule = 0x2CD,
  subDPR_mulDPR_reg_rule = 0x2CE,
  divDPR_reg_rule = 0x2CF,
  strictfp_divDPR_reg_rule = 0x2D0,
  divDPR_reg_round_rule = 0x2D1,
  modDPR_reg_rule = 0x2D2,
  modD_reg_rule = 0x2D3,
  sinDPR_reg_rule = 0x2D4,
  sinD_reg_rule = 0x2D5,
  cosDPR_reg_rule = 0x2D6,
  cosD_reg_rule = 0x2D7,
  tanDPR_reg_rule = 0x2D8,
  tanD_reg_rule = 0x2D9,
  atanDPR_reg_rule = 0x2DA,
  atanD_reg_rule = 0x2DB,
  sqrtDPR_reg_rule = 0x2DC,
  powDPR_reg_rule = 0x2DD,
  powD_reg_rule = 0x2DE,
  expDPR_reg_rule = 0x2DF,
  expD_reg_rule = 0x2E0,
  log10DPR_reg_rule = 0x2E1,
  log10D_reg_rule = 0x2E2,
  logDPR_reg_rule = 0x2E3,
  logD_reg_rule = 0x2E4,
  cmpFPR_0_rule = 0x2E5,
  cmpFPR_reg_rule = 0x2E6,
  cmpF_reg_rule = 0x2E7,
  cmpF_regmem_rule = 0x2E8,
  subFPR24_reg_rule = 0x2E9,
  subFPR_reg_rule = 0x2EA,
  addFPR24_reg_rule = 0x2EB,
  addFPR_reg_rule = 0x2EC,
  addFPR24_reg_mem_rule = 0x2ED,
  addFPR24_reg_mem_0_rule = 0x2EE,
  addFPR_reg_mem_rule = 0x2EF,
  addFPR_reg_mem_0_rule = 0x2F0,
  addFPR24_mem_reg_rule = 0x2F1,
  addFPR24_mem_cisc_rule = 0x2F2,
  addFPR24_mem_cisc_0_rule = 0x2F3,
  addFPR24_mem_mem_rule = 0x2F4,
  addFPR24_reg_imm_rule = 0x2F5,
  addFPR_reg_imm_rule = 0x2F6,
  mulFPR24_reg_rule = 0x2F7,
  mulFPR_reg_rule = 0x2F8,
  mulFPR24_reg_mem_rule = 0x2F9,
  mulFPR24_reg_mem_0_rule = 0x2FA,
  mulFPR_reg_mem_rule = 0x2FB,
  mulFPR_reg_mem_0_rule = 0x2FC,
  mulFPR24_mem_mem_rule = 0x2FD,
  mulFPR24_reg_imm_rule = 0x2FE,
  mulFPR_reg_imm_rule = 0x2FF,
  mulFPR_reg_load1_rule = 0x300,
  mulFPR_reg_load1_0_rule = 0x301,
  addFPR_mulFPR_reg_load1_rule = 0x302,
  addFPR_mulFPR_reg_load1_1_rule = 0x303,
  addFPR_mulFPR_reg_load1_0_rule = 0x304,
  addFPR_mulFPR_reg_load1_2_rule = 0x305,
  addFPR_mulFPR_reg_rule = 0x306,
  addFPR_mulFPR_reg_0_rule = 0x307,
  subFPR_divFPR_reg_rule = 0x308,
  divFPR24_reg_rule = 0x309,
  divFPR_reg_rule = 0x30A,
  modFPR24_reg_rule = 0x30B,
  modFPR_reg_rule = 0x30C,
  modF_reg_rule = 0x30D,
  roundFloat_mem_reg_rule = 0x30E,
  roundDouble_mem_reg_rule = 0x30F,
  convDPR2FPR_reg_rule = 0x310,
  convDPR2F_reg_rule = 0x311,
  convD2F_reg_rule = 0x312,
  convFPR2DPR_reg_reg_rule = 0x313,
  convFPR2D_reg_rule = 0x314,
  convF2DPR_reg_rule = 0x315,
  convF2D_reg_rule = 0x316,
  convDPR2I_reg_reg_rule = 0x317,
  convD2I_reg_reg_rule = 0x318,
  convDPR2L_reg_reg_rule = 0x319,
  convD2L_reg_reg_rule = 0x31A,
  convFPR2I_reg_reg_rule = 0x31B,
  convF2I_reg_rule = 0x31C,
  convFPR2L_reg_reg_rule = 0x31D,
  convF2L_reg_reg_rule = 0x31E,
  convI2DPR_reg_rule = 0x31F,
  convI2D_reg_rule = 0x320,
  convI2D_mem_rule = 0x321,
  convXI2D_reg_rule = 0x322,
  convI2DPR_mem_rule = 0x323,
  conv24I2FPR_reg_rule = 0x324,
  convI2FPR_SSF_rule = 0x325,
  convI2FPR_SSF_mem_rule = 0x326,
  convI2FPR_reg_rule = 0x327,
  convI2FPR_mem_rule = 0x328,
  convI2F_reg_rule = 0x329,
  convXI2F_reg_rule = 0x32A,
  convI2L_reg_rule = 0x32B,
  convI2L_reg_zex_rule = 0x32C,
  zerox_long_rule = 0x32D,
  convL2DPR_reg_rule = 0x32E,
  convL2D_reg_rule = 0x32F,
  convL2F_reg_rule = 0x330,
  convL2FPR_reg_rule = 0x331,
  convL2I_reg_rule = 0x332,
  MoveFPR2I_reg_stack_rule = 0x333,
  MoveF2I_reg_stack_sse_rule = 0x334,
  MoveI2F_reg_stack_rule = 0x335,
  MoveDPR2L_reg_stack_rule = 0x336,
  MoveD2L_reg_stack_sse_rule = 0x337,
  MoveD2L_reg_reg_sse_rule = 0x338,
  MoveL2D_reg_stack_rule = 0x339,
  MoveL2D_reg_reg_sse_rule = 0x33A,
  rep_stos_rule = 0x33B,
  rep_fast_stosb_rule = 0x33C,
  string_compare_rule = 0x33D,
  string_equals_rule = 0x33E,
  string_indexof_con_rule = 0x33F,
  string_indexof_rule = 0x340,
  array_equals_rule = 0x341,
  encode_iso_array_rule = 0x342,
  minI_eReg_rule = 0x343,
  maxI_eReg_rule = 0x344,
  loopLimit_eReg_rule = 0x345,
  jumpXtnd_rule = 0x346,
  jmpDir_rule = 0x347,
  jmpCon_rule = 0x348,
  jmpLoopEnd_rule = 0x349,
  jmpLoopEndU_rule = 0x34A,
  jmpLoopEndUCF_rule = 0x34B,
  jmpConU_rule = 0x34C,
  jmpConUCF_rule = 0x34D,
  jmpConUCF2_rule = 0x34E,
  partialSubtypeCheck_rule = 0x34F,
  jmpDir_short_rule = 0x350,
  jmpCon_short_rule = 0x351,
  jmpLoopEnd_short_rule = 0x352,
  jmpLoopEndU_short_rule = 0x353,
  jmpLoopEndUCF_short_rule = 0x354,
  jmpConU_short_rule = 0x355,
  jmpConUCF_short_rule = 0x356,
  jmpConUCF2_short_rule = 0x357,
  cmpL3_reg_reg_rule = 0x358,
  cmpL_LTGE_rule = 0x359,
  cmpUL_LTGE_rule = 0x35A,
  cmovLL_reg_LTGE_rule = 0x35B,
  cmovLL_mem_LTGE_rule = 0x35C,
  cmovII_reg_LTGE_rule = 0x35D,
  cmovII_mem_LTGE_rule = 0x35E,
  cmovPP_reg_LTGE_rule = 0x35F,
  cmovDDPR_reg_LTGE_rule = 0x360,
  cmovDD_reg_LTGE_rule = 0x361,
  cmovFFPR_reg_LTGE_rule = 0x362,
  cmovFF_reg_LTGE_rule = 0x363,
  cmpL_EQNE_rule = 0x364,
  cmpUL_EQNE_rule = 0x365,
  cmovLL_reg_EQNE_rule = 0x366,
  cmovLL_mem_EQNE_rule = 0x367,
  cmovII_reg_EQNE_rule = 0x368,
  cmovII_mem_EQNE_rule = 0x369,
  cmovPP_reg_EQNE_rule = 0x36A,
  cmovDDPR_reg_EQNE_rule = 0x36B,
  cmovDD_reg_EQNE_rule = 0x36C,
  cmovFFPR_reg_EQNE_rule = 0x36D,
  cmovFF_reg_EQNE_rule = 0x36E,
  cmpL_LEGT_rule = 0x36F,
  cmpUL_LEGT_rule = 0x370,
  cmovLL_reg_LEGT_rule = 0x371,
  cmovLL_mem_LEGT_rule = 0x372,
  cmovII_reg_LEGT_rule = 0x373,
  cmovII_mem_LEGT_rule = 0x374,
  cmovPP_reg_LEGT_rule = 0x375,
  cmovDDPR_reg_LEGT_rule = 0x376,
  cmovDD_reg_LEGT_rule = 0x377,
  cmovFFPR_reg_LEGT_rule = 0x378,
  cmovFF_reg_LEGT_rule = 0x379,
  CallStaticJavaDirect_rule = 0x37A,
  CallDynamicJavaDirect_rule = 0x37B,
  CallRuntimeDirect_rule = 0x37C,
  CallLeafDirect_rule = 0x37D,
  CallLeafNoFPDirect_rule = 0x37E,
  Ret_rule = 0x37F,
  TailCalljmpInd_rule = 0x380,
  tailjmpInd_rule = 0x381,
  CreateException_rule = 0x382,
  RethrowException_rule = 0x383,
  tlsLoadP_rule = 0x384,
  ShouldNotReachHere_rule = 0x385,
  addF_reg_rule = 0x386,
  addF_mem_rule = 0x387,
  addF_mem_0_rule = 0x388,
  addF_imm_rule = 0x389,
  addF_reg_reg_rule = 0x38A,
  addF_reg_mem_rule = 0x38B,
  addF_reg_mem_0_rule = 0x38C,
  addF_reg_imm_rule = 0x38D,
  addD_reg_rule = 0x38E,
  addD_mem_rule = 0x38F,
  addD_mem_0_rule = 0x390,
  addD_imm_rule = 0x391,
  addD_reg_reg_rule = 0x392,
  addD_reg_mem_rule = 0x393,
  addD_reg_mem_0_rule = 0x394,
  addD_reg_imm_rule = 0x395,
  subF_reg_rule = 0x396,
  subF_mem_rule = 0x397,
  subF_imm_rule = 0x398,
  subF_reg_reg_rule = 0x399,
  subF_reg_mem_rule = 0x39A,
  subF_reg_imm_rule = 0x39B,
  subD_reg_rule = 0x39C,
  subD_mem_rule = 0x39D,
  subD_imm_rule = 0x39E,
  subD_reg_reg_rule = 0x39F,
  subD_reg_mem_rule = 0x3A0,
  subD_reg_imm_rule = 0x3A1,
  mulF_reg_rule = 0x3A2,
  mulF_mem_rule = 0x3A3,
  mulF_mem_0_rule = 0x3A4,
  mulF_imm_rule = 0x3A5,
  mulF_reg_reg_rule = 0x3A6,
  mulF_reg_mem_rule = 0x3A7,
  mulF_reg_mem_0_rule = 0x3A8,
  mulF_reg_imm_rule = 0x3A9,
  mulD_reg_rule = 0x3AA,
  mulD_mem_rule = 0x3AB,
  mulD_mem_0_rule = 0x3AC,
  mulD_imm_rule = 0x3AD,
  mulD_reg_reg_rule = 0x3AE,
  mulD_reg_mem_rule = 0x3AF,
  mulD_reg_mem_0_rule = 0x3B0,
  mulD_reg_imm_rule = 0x3B1,
  divF_reg_rule = 0x3B2,
  divF_mem_rule = 0x3B3,
  divF_imm_rule = 0x3B4,
  divF_reg_reg_rule = 0x3B5,
  divF_reg_mem_rule = 0x3B6,
  divF_reg_imm_rule = 0x3B7,
  divD_reg_rule = 0x3B8,
  divD_mem_rule = 0x3B9,
  divD_imm_rule = 0x3BA,
  divD_reg_reg_rule = 0x3BB,
  divD_reg_mem_rule = 0x3BC,
  divD_reg_imm_rule = 0x3BD,
  sqrtF_reg_rule = 0x3BE,
  sqrtF_mem_rule = 0x3BF,
  sqrtF_imm_rule = 0x3C0,
  sqrtD_reg_rule = 0x3C1,
  sqrtD_mem_rule = 0x3C2,
  sqrtD_imm_rule = 0x3C3,
  loadV4_rule = 0x3C4,
  loadV8_rule = 0x3C5,
  loadV16_rule = 0x3C6,
  loadV32_rule = 0x3C7,
  storeV4_rule = 0x3C8,
  storeV8_rule = 0x3C9,
  storeV16_rule = 0x3CA,
  storeV32_rule = 0x3CB,
  Repl4B_rule = 0x3CC,
  Repl8B_rule = 0x3CD,
  Repl16B_rule = 0x3CE,
  Repl32B_rule = 0x3CF,
  Repl4B_imm_rule = 0x3D0,
  Repl8B_imm_rule = 0x3D1,
  Repl16B_imm_rule = 0x3D2,
  Repl32B_imm_rule = 0x3D3,
  Repl4B_zero_rule = 0x3D4,
  Repl8B_zero_rule = 0x3D5,
  Repl16B_zero_rule = 0x3D6,
  Repl32B_zero_rule = 0x3D7,
  Repl2S_rule = 0x3D8,
  Repl4S_rule = 0x3D9,
  Repl8S_rule = 0x3DA,
  Repl16S_rule = 0x3DB,
  Repl2S_imm_rule = 0x3DC,
  Repl4S_imm_rule = 0x3DD,
  Repl8S_imm_rule = 0x3DE,
  Repl16S_imm_rule = 0x3DF,
  Repl2S_zero_rule = 0x3E0,
  Repl4S_zero_rule = 0x3E1,
  Repl8S_zero_rule = 0x3E2,
  Repl16S_zero_rule = 0x3E3,
  Repl2I_rule = 0x3E4,
  Repl4I_rule = 0x3E5,
  Repl8I_rule = 0x3E6,
  Repl2I_imm_rule = 0x3E7,
  Repl4I_imm_rule = 0x3E8,
  Repl8I_imm_rule = 0x3E9,
  Repl2I_mem_rule = 0x3EA,
  Repl4I_mem_rule = 0x3EB,
  Repl8I_mem_rule = 0x3EC,
  Repl2I_zero_rule = 0x3ED,
  Repl4I_zero_rule = 0x3EE,
  Repl8I_zero_rule = 0x3EF,
  Repl2L_rule = 0x3F0,
  Repl4L_rule = 0x3F1,
  Repl2L_imm_rule = 0x3F2,
  Repl4L_imm_rule = 0x3F3,
  Repl2L_mem_rule = 0x3F4,
  Repl4L_mem_rule = 0x3F5,
  Repl2L_zero_rule = 0x3F6,
  Repl4L_zero_rule = 0x3F7,
  Repl2F_rule = 0x3F8,
  Repl4F_rule = 0x3F9,
  Repl8F_rule = 0x3FA,
  Repl2F_zero_rule = 0x3FB,
  Repl4F_zero_rule = 0x3FC,
  Repl8F_zero_rule = 0x3FD,
  Repl2D_rule = 0x3FE,
  Repl4D_rule = 0x3FF,
  Repl2D_zero_rule = 0x400,
  Repl4D_zero_rule = 0x401,
  vadd4B_rule = 0x402,
  vadd4B_reg_rule = 0x403,
  vadd8B_rule = 0x404,
  vadd8B_reg_rule = 0x405,
  vadd16B_rule = 0x406,
  vadd16B_reg_rule = 0x407,
  vadd16B_mem_rule = 0x408,
  vadd32B_reg_rule = 0x409,
  vadd32B_mem_rule = 0x40A,
  vadd2S_rule = 0x40B,
  vadd2S_reg_rule = 0x40C,
  vadd4S_rule = 0x40D,
  vadd4S_reg_rule = 0x40E,
  vadd8S_rule = 0x40F,
  vadd8S_reg_rule = 0x410,
  vadd8S_mem_rule = 0x411,
  vadd16S_reg_rule = 0x412,
  vadd16S_mem_rule = 0x413,
  vadd2I_rule = 0x414,
  vadd2I_reg_rule = 0x415,
  vadd4I_rule = 0x416,
  vadd4I_reg_rule = 0x417,
  vadd4I_mem_rule = 0x418,
  vadd8I_reg_rule = 0x419,
  vadd8I_mem_rule = 0x41A,
  vadd2L_rule = 0x41B,
  vadd2L_reg_rule = 0x41C,
  vadd2L_mem_rule = 0x41D,
  vadd4L_reg_rule = 0x41E,
  vadd4L_mem_rule = 0x41F,
  vadd2F_rule = 0x420,
  vadd2F_reg_rule = 0x421,
  vadd4F_rule = 0x422,
  vadd4F_reg_rule = 0x423,
  vadd4F_mem_rule = 0x424,
  vadd8F_reg_rule = 0x425,
  vadd8F_mem_rule = 0x426,
  vadd2D_rule = 0x427,
  vadd2D_reg_rule = 0x428,
  vadd2D_mem_rule = 0x429,
  vadd4D_reg_rule = 0x42A,
  vadd4D_mem_rule = 0x42B,
  vsub4B_rule = 0x42C,
  vsub4B_reg_rule = 0x42D,
  vsub8B_rule = 0x42E,
  vsub8B_reg_rule = 0x42F,
  vsub16B_rule = 0x430,
  vsub16B_reg_rule = 0x431,
  vsub16B_mem_rule = 0x432,
  vsub32B_reg_rule = 0x433,
  vsub32B_mem_rule = 0x434,
  vsub2S_rule = 0x435,
  vsub2S_reg_rule = 0x436,
  vsub4S_rule = 0x437,
  vsub4S_reg_rule = 0x438,
  vsub8S_rule = 0x439,
  vsub8S_reg_rule = 0x43A,
  vsub8S_mem_rule = 0x43B,
  vsub16S_reg_rule = 0x43C,
  vsub16S_mem_rule = 0x43D,
  vsub2I_rule = 0x43E,
  vsub2I_reg_rule = 0x43F,
  vsub4I_rule = 0x440,
  vsub4I_reg_rule = 0x441,
  vsub4I_mem_rule = 0x442,
  vsub8I_reg_rule = 0x443,
  vsub8I_mem_rule = 0x444,
  vsub2L_rule = 0x445,
  vsub2L_reg_rule = 0x446,
  vsub2L_mem_rule = 0x447,
  vsub4L_reg_rule = 0x448,
  vsub4L_mem_rule = 0x449,
  vsub2F_rule = 0x44A,
  vsub2F_reg_rule = 0x44B,
  vsub4F_rule = 0x44C,
  vsub4F_reg_rule = 0x44D,
  vsub4F_mem_rule = 0x44E,
  vsub8F_reg_rule = 0x44F,
  vsub8F_mem_rule = 0x450,
  vsub2D_rule = 0x451,
  vsub2D_reg_rule = 0x452,
  vsub2D_mem_rule = 0x453,
  vsub4D_reg_rule = 0x454,
  vsub4D_mem_rule = 0x455,
  vmul2S_rule = 0x456,
  vmul2S_reg_rule = 0x457,
  vmul4S_rule = 0x458,
  vmul4S_reg_rule = 0x459,
  vmul8S_rule = 0x45A,
  vmul8S_reg_rule = 0x45B,
  vmul8S_mem_rule = 0x45C,
  vmul16S_reg_rule = 0x45D,
  vmul16S_mem_rule = 0x45E,
  vmul2I_rule = 0x45F,
  vmul2I_reg_rule = 0x460,
  vmul4I_rule = 0x461,
  vmul4I_reg_rule = 0x462,
  vmul4I_mem_rule = 0x463,
  vmul8I_reg_rule = 0x464,
  vmul8I_mem_rule = 0x465,
  vmul2F_rule = 0x466,
  vmul2F_reg_rule = 0x467,
  vmul4F_rule = 0x468,
  vmul4F_reg_rule = 0x469,
  vmul4F_mem_rule = 0x46A,
  vmul8F_reg_rule = 0x46B,
  vmul8F_mem_rule = 0x46C,
  vmul2D_rule = 0x46D,
  vmul2D_reg_rule = 0x46E,
  vmul2D_mem_rule = 0x46F,
  vmul4D_reg_rule = 0x470,
  vmul4D_mem_rule = 0x471,
  vdiv2F_rule = 0x472,
  vdiv2F_reg_rule = 0x473,
  vdiv4F_rule = 0x474,
  vdiv4F_reg_rule = 0x475,
  vdiv4F_mem_rule = 0x476,
  vdiv8F_reg_rule = 0x477,
  vdiv8F_mem_rule = 0x478,
  vdiv2D_rule = 0x479,
  vdiv2D_reg_rule = 0x47A,
  vdiv2D_mem_rule = 0x47B,
  vdiv4D_reg_rule = 0x47C,
  vdiv4D_mem_rule = 0x47D,
  vsll2S_rule = 0x47E,
  vsll2S_imm_rule = 0x47F,
  vsll2S_reg_rule = 0x480,
  vsll2S_reg_imm_rule = 0x481,
  vsll4S_rule = 0x482,
  vsll4S_imm_rule = 0x483,
  vsll4S_reg_rule = 0x484,
  vsll4S_reg_imm_rule = 0x485,
  vsll8S_rule = 0x486,
  vsll8S_imm_rule = 0x487,
  vsll8S_reg_rule = 0x488,
  vsll8S_reg_imm_rule = 0x489,
  vsll16S_reg_rule = 0x48A,
  vsll16S_reg_imm_rule = 0x48B,
  vsll2I_rule = 0x48C,
  vsll2I_imm_rule = 0x48D,
  vsll2I_reg_rule = 0x48E,
  vsll2I_reg_imm_rule = 0x48F,
  vsll4I_rule = 0x490,
  vsll4I_imm_rule = 0x491,
  vsll4I_reg_rule = 0x492,
  vsll4I_reg_imm_rule = 0x493,
  vsll8I_reg_rule = 0x494,
  vsll8I_reg_imm_rule = 0x495,
  vsll2L_rule = 0x496,
  vsll2L_imm_rule = 0x497,
  vsll2L_reg_rule = 0x498,
  vsll2L_reg_imm_rule = 0x499,
  vsll4L_reg_rule = 0x49A,
  vsll4L_reg_imm_rule = 0x49B,
  vsrl2S_rule = 0x49C,
  vsrl2S_imm_rule = 0x49D,
  vsrl2S_reg_rule = 0x49E,
  vsrl2S_reg_imm_rule = 0x49F,
  vsrl4S_rule = 0x4A0,
  vsrl4S_imm_rule = 0x4A1,
  vsrl4S_reg_rule = 0x4A2,
  vsrl4S_reg_imm_rule = 0x4A3,
  vsrl8S_rule = 0x4A4,
  vsrl8S_imm_rule = 0x4A5,
  vsrl8S_reg_rule = 0x4A6,
  vsrl8S_reg_imm_rule = 0x4A7,
  vsrl16S_reg_rule = 0x4A8,
  vsrl16S_reg_imm_rule = 0x4A9,
  vsrl2I_rule = 0x4AA,
  vsrl2I_imm_rule = 0x4AB,
  vsrl2I_reg_rule = 0x4AC,
  vsrl2I_reg_imm_rule = 0x4AD,
  vsrl4I_rule = 0x4AE,
  vsrl4I_imm_rule = 0x4AF,
  vsrl4I_reg_rule = 0x4B0,
  vsrl4I_reg_imm_rule = 0x4B1,
  vsrl8I_reg_rule = 0x4B2,
  vsrl8I_reg_imm_rule = 0x4B3,
  vsrl2L_rule = 0x4B4,
  vsrl2L_imm_rule = 0x4B5,
  vsrl2L_reg_rule = 0x4B6,
  vsrl2L_reg_imm_rule = 0x4B7,
  vsrl4L_reg_rule = 0x4B8,
  vsrl4L_reg_imm_rule = 0x4B9,
  vsra2S_rule = 0x4BA,
  vsra2S_imm_rule = 0x4BB,
  vsra2S_reg_rule = 0x4BC,
  vsra2S_reg_imm_rule = 0x4BD,
  vsra4S_rule = 0x4BE,
  vsra4S_imm_rule = 0x4BF,
  vsra4S_reg_rule = 0x4C0,
  vsra4S_reg_imm_rule = 0x4C1,
  vsra8S_rule = 0x4C2,
  vsra8S_imm_rule = 0x4C3,
  vsra8S_reg_rule = 0x4C4,
  vsra8S_reg_imm_rule = 0x4C5,
  vsra16S_reg_rule = 0x4C6,
  vsra16S_reg_imm_rule = 0x4C7,
  vsra2I_rule = 0x4C8,
  vsra2I_imm_rule = 0x4C9,
  vsra2I_reg_rule = 0x4CA,
  vsra2I_reg_imm_rule = 0x4CB,
  vsra4I_rule = 0x4CC,
  vsra4I_imm_rule = 0x4CD,
  vsra4I_reg_rule = 0x4CE,
  vsra4I_reg_imm_rule = 0x4CF,
  vsra8I_reg_rule = 0x4D0,
  vsra8I_reg_imm_rule = 0x4D1,
  vand4B_rule = 0x4D2,
  vand4B_reg_rule = 0x4D3,
  vand8B_rule = 0x4D4,
  vand8B_reg_rule = 0x4D5,
  vand16B_rule = 0x4D6,
  vand16B_reg_rule = 0x4D7,
  vand16B_mem_rule = 0x4D8,
  vand32B_reg_rule = 0x4D9,
  vand32B_mem_rule = 0x4DA,
  vor4B_rule = 0x4DB,
  vor4B_reg_rule = 0x4DC,
  vor8B_rule = 0x4DD,
  vor8B_reg_rule = 0x4DE,
  vor16B_rule = 0x4DF,
  vor16B_reg_rule = 0x4E0,
  vor16B_mem_rule = 0x4E1,
  vor32B_reg_rule = 0x4E2,
  vor32B_mem_rule = 0x4E3,
  vxor4B_rule = 0x4E4,
  vxor4B_reg_rule = 0x4E5,
  vxor8B_rule = 0x4E6,
  vxor8B_reg_rule = 0x4E7,
  vxor16B_rule = 0x4E8,
  vxor16B_reg_rule = 0x4E9,
  vxor16B_mem_rule = 0x4EA,
  vxor32B_reg_rule = 0x4EB,
  vxor32B_mem_rule = 0x4EC,
  _BEGIN_INST_CHAIN_RULE = 0x109,
  _END_INST_CHAIN_RULE = 0x126,
  _BEGIN_REMATERIALIZE = 0x10C,
  _END_REMATERIALIZE = 0x17E,
  _last_Mach_Node = 0x4ED,
};

/* 3 */
enum MachOperands : __int32
{
  UNIVERSE = 0x0,
  LABEL = 0x1,
  SREGI = 0x2,
  SREGP = 0x3,
  SREGF = 0x4,
  SREGD = 0x5,
  SREGL = 0x6,
  METHOD = 0x7,
  IMMI = 0x8,
  IMMI0 = 0x9,
  IMMI1 = 0xA,
  IMMI_M1 = 0xB,
  IMMI2 = 0xC,
  IMMI8 = 0xD,
  IMMI16 = 0xE,
  IMMU31 = 0xF,
  IMMI_32 = 0x10,
  IMMI_1_31 = 0x11,
  IMMI_32_63 = 0x12,
  IMMI_1 = 0x13,
  IMMI_2 = 0x14,
  IMMI_3 = 0x15,
  IMMP = 0x16,
  IMMP0 = 0x17,
  IMML = 0x18,
  IMML0 = 0x19,
  IMML_M1 = 0x1A,
  IMML_127 = 0x1B,
  IMML_32BITS = 0x1C,
  IMML32 = 0x1D,
  IMMDPR0 = 0x1E,
  IMMDPR1 = 0x1F,
  IMMDPR = 0x20,
  IMMD = 0x21,
  IMMD0 = 0x22,
  IMMFPR0 = 0x23,
  IMMFPR1 = 0x24,
  IMMFPR = 0x25,
  IMMF = 0x26,
  IMMF0 = 0x27,
  IMMI_16 = 0x28,
  IMMI_24 = 0x29,
  IMMI_255 = 0x2A,
  IMMI_65535 = 0x2B,
  RREGI = 0x2C,
  XREGI = 0x2D,
  EAXREGI = 0x2E,
  EBXREGI = 0x2F,
  ECXREGI = 0x30,
  EDXREGI = 0x31,
  EDIREGI = 0x32,
  NAXREGI = 0x33,
  NADXREGI = 0x34,
  NCXREGI = 0x35,
  ESIREGI = 0x36,
  ANYREGP = 0x37,
  EREGP = 0x38,
  EREGP_NO_EBP = 0x39,
  NAXREGP = 0x3A,
  NABXREGP = 0x3B,
  PREGP = 0x3C,
  EAXREGP = 0x3D,
  EBXREGP = 0x3E,
  ECXREGP = 0x3F,
  ESIREGP = 0x40,
  EDIREGP = 0x41,
  EREGL = 0x42,
  EADXREGL = 0x43,
  EBCXREGL = 0x44,
  EADXREGL_LOW_ONLY = 0x45,
  EFLAGSREG = 0x46,
  EFLAGSREGU = 0x47,
  EFLAGSREGUCF = 0x48,
  FLAGSREG_LONG_LTGE = 0x49,
  FLAGSREG_LONG_EQNE = 0x4A,
  FLAGSREG_LONG_LEGT = 0x4B,
  FLAGSREG_ULONG_LTGE = 0x4C,
  FLAGSREG_ULONG_EQNE = 0x4D,
  FLAGSREG_ULONG_LEGT = 0x4E,
  REGDPR = 0x4F,
  REGDPR1 = 0x50,
  REGDPR2 = 0x51,
  REGNOTDPR1 = 0x52,
  REGFPR = 0x53,
  REGFPR1 = 0x54,
  REGF = 0x55,
  REGD = 0x56,
  DIRECT = 0x57,
  INDIRECT = 0x58,
  INDOFFSET8 = 0x59,
  INDOFFSET32 = 0x5A,
  INDOFFSET32X = 0x5B,
  INDINDEXOFFSET = 0x5C,
  INDINDEX = 0x5D,
  INDINDEXSCALE = 0x5E,
  INDINDEXSCALEOFFSET = 0x5F,
  LOAD_LONG_REGP = 0x60,
  LOAD_LONG_INDIRECT = 0x61,
  LOAD_LONG_INDOFFSET32 = 0x62,
  STACKSLOTP = 0x63,
  STACKSLOTI = 0x64,
  STACKSLOTF = 0x65,
  STACKSLOTD = 0x66,
  STACKSLOTL = 0x67,
  INDIRECT_WIN95_SAFE = 0x68,
  INDOFFSET8_WIN95_SAFE = 0x69,
  INDOFFSET32_WIN95_SAFE = 0x6A,
  INDINDEXOFFSET_WIN95_SAFE = 0x6B,
  INDINDEXSCALE_WIN95_SAFE = 0x6C,
  INDINDEXSCALEOFFSET_WIN95_SAFE = 0x6D,
  CMPOP = 0x6E,
  CMPOPU = 0x6F,
  CMPOPUCF = 0x70,
  CMPOPUCF2 = 0x71,
  CMPOP_FCMOV = 0x72,
  CMPOP_COMMUTE = 0x73,
  CMPOPU_COMMUTE = 0x74,
  VECS = 0x75,
  VECD = 0x76,
  VECX = 0x77,
  VECY = 0x78,
  LOAD_LONG_MEMORY = 0x79,
  MEMORY = 0x7A,
  LONG_MEMORY = 0x7B,
  _ADDP_EREGP_RREGI = 0x7C,
  _LSHIFTI_RREGI_IMMI2 = 0x7D,
  _ADDP_EREGP__LSHIFTI_RREGI_IMMI2 = 0x7E,
  _ADDP_EREGP_NO_EBP_RREGI = 0x7F,
  _ADDP_EREGP_NO_EBP__LSHIFTI_RREGI_IMMI2 = 0x80,
  _LOADI_MEMORY_ = 0x81,
  _LOADL_MEMORY_ = 0x82,
  _LOADB_MEMORY_ = 0x83,
  _LOADUB_MEMORY_ = 0x84,
  _ANDI__LOADUB_MEMORY__IMMI8 = 0x85,
  _LOADS_MEMORY_ = 0x86,
  _LSHIFTI__LOADS_MEMORY__IMMI_24 = 0x87,
  _LOADUS_MEMORY_ = 0x88,
  _LSHIFTI__LOADUS_MEMORY__IMMI_24 = 0x89,
  _ANDI__LOADUS_MEMORY__IMMI_255 = 0x8A,
  _ANDI__LOADUS_MEMORY__IMMI16 = 0x8B,
  _LSHIFTI__LOADI_MEMORY__IMMI_24 = 0x8C,
  _LSHIFTI__LOADI_MEMORY__IMMI_16 = 0x8D,
  _ANDI__LOADI_MEMORY__IMMI_255 = 0x8E,
  _ANDI__LOADI_MEMORY__IMMI_65535 = 0x8F,
  _ANDI__LOADI_MEMORY__IMMU31 = 0x90,
  _CONVI2L__LOADI_MEMORY__ = 0x91,
  _CONVL2I_EREGL_ = 0x92,
  _ROUNDDOUBLE_REGDPR1_ = 0x93,
  _ROUNDFLOAT_REGFPR1_ = 0x94,
  _CONVD2F_REGDPR1_ = 0x95,
  _BINARY_CMPOP_EFLAGSREG = 0x96,
  _BINARY_RREGI_RREGI = 0x97,
  _BINARY_CMPOPU_EFLAGSREGU = 0x98,
  _BINARY_CMPOPUCF_EFLAGSREGUCF = 0x99,
  _BINARY_RREGI__LOADI_MEMORY_ = 0x9A,
  _BINARY_EREGP_EREGP = 0x9B,
  _BINARY_CMPOP_FCMOV_EFLAGSREGU = 0x9C,
  _BINARY_REGDPR1_REGDPR = 0x9D,
  _BINARY_REGFPR1_REGFPR = 0x9E,
  _BINARY_REGDPR_REGDPR = 0x9F,
  _BINARY_REGFPR_REGFPR = 0xA0,
  _BINARY_REGF_REGF = 0xA1,
  _BINARY_REGD_REGD = 0xA2,
  _BINARY_EREGL_EREGL = 0xA3,
  _ADDI__LOADI_MEMORY__RREGI = 0xA4,
  _ADDI_RREGI__LOADI_MEMORY_ = 0xA5,
  _ADDI__LOADI_MEMORY__IMMI = 0xA6,
  _ADDI__LOADI_MEMORY__IMMI1 = 0xA7,
  _ADDI__LOADI_MEMORY__IMMI_M1 = 0xA8,
  _BINARY_EAXREGP_EREGP = 0xA9,
  _BINARY_EAXREGI_RREGI = 0xAA,
  _BINARY_EADXREGL_EBCXREGL = 0xAB,
  _BINARY_EAXREGP_ECXREGP = 0xAC,
  _BINARY_EAXREGI_ECXREGI = 0xAD,
  _SUBI__LOADI_MEMORY__RREGI = 0xAE,
  _SUBI_IMMI0_RREGI = 0xAF,
  _CONVI2L_NADXREGI_ = 0xB0,
  _MULL__CONVI2L_NADXREGI__EADXREGL_LOW_ONLY = 0xB1,
  _RSHIFTL__MULL__CONVI2L_NADXREGI__EADXREGL_LOW_ONLY_IMMI_32 = 0xB2,
  _MULL_EADXREGL_LOW_ONLY__CONVI2L_NADXREGI_ = 0xB3,
  _RSHIFTL__MULL_EADXREGL_LOW_ONLY__CONVI2L_NADXREGI__IMMI_32 = 0xB4,
  _RSHIFTL__MULL__CONVI2L_NADXREGI__EADXREGL_LOW_ONLY_IMMI_32_63 = 0xB5,
  _RSHIFTL__MULL_EADXREGL_LOW_ONLY__CONVI2L_NADXREGI__IMMI_32_63 = 0xB6,
  _CONVI2L_EAXREGI_ = 0xB7,
  _ANDL__CONVI2L_EAXREGI__IMML_32BITS = 0xB8,
  _ANDL__CONVI2L_NADXREGI__IMML_32BITS = 0xB9,
  _RSHIFTI__LOADI_MEMORY__IMMI1 = 0xBA,
  _RSHIFTI__LOADI_MEMORY__IMMI8 = 0xBB,
  _LSHIFTI_XREGI_IMMI_24 = 0xBC,
  _LSHIFTI_XREGI_IMMI_16 = 0xBD,
  _ANDI__LOADI_MEMORY__RREGI = 0xBE,
  _ANDI_RREGI__LOADI_MEMORY_ = 0xBF,
  _ANDI__LOADI_MEMORY__IMMI = 0xC0,
  _XORI_RREGI_IMMI_M1 = 0xC1,
  _SUBI_IMMI0__LOADI_MEMORY_ = 0xC2,
  _ADDI_RREGI_IMMI_M1 = 0xC3,
  _CASTP2X_EREGP_ = 0xC4,
  _ORI__LOADI_MEMORY__RREGI = 0xC5,
  _ORI_RREGI__LOADI_MEMORY_ = 0xC6,
  _ORI__LOADI_MEMORY__IMMI = 0xC7,
  _LSHIFTI_RREGI_IMMI1 = 0xC8,
  _URSHIFTI_RREGI_IMMI_M1 = 0xC9,
  _LSHIFTI_RREGI_IMMI8 = 0xCA,
  _URSHIFTI_RREGI_IMMI8 = 0xCB,
  _LSHIFTI_NCXREGI_ECXREGI = 0xCC,
  _SUBI_IMMI0_ECXREGI = 0xCD,
  _URSHIFTI_NCXREGI__SUBI_IMMI0_ECXREGI = 0xCE,
  _SUBI_IMMI_32_ECXREGI = 0xCF,
  _URSHIFTI_NCXREGI__SUBI_IMMI_32_ECXREGI = 0xD0,
  _URSHIFTI_RREGI_IMMI1 = 0xD1,
  _LSHIFTI_RREGI_IMMI_M1 = 0xD2,
  _URSHIFTI_NCXREGI_ECXREGI = 0xD3,
  _LSHIFTI_NCXREGI__SUBI_IMMI0_ECXREGI = 0xD4,
  _LSHIFTI_NCXREGI__SUBI_IMMI_32_ECXREGI = 0xD5,
  _XORI__LOADI_MEMORY__RREGI = 0xD6,
  _XORI_RREGI__LOADI_MEMORY_ = 0xD7,
  _XORI__LOADI_MEMORY__IMMI = 0xD8,
  _CMPLTMASK_RREGI_RREGI = 0xD9,
  _ANDI__CMPLTMASK_RREGI_RREGI_RREGI = 0xDA,
  _SUBI_RREGI_RREGI = 0xDB,
  _ANDI_RREGI__CMPLTMASK_RREGI_RREGI = 0xDC,
  _LOADL_LOAD_LONG_MEMORY_ = 0xDD,
  _XORL_EREGL_IMML_M1 = 0xDE,
  _SUBL_IMML0_EREGL = 0xDF,
  _SUBL_IMML0__LOADL_MEMORY_ = 0xE0,
  _ADDL_EREGL_IMML_M1 = 0xE1,
  _ADDL__LOADL_MEMORY__IMML_M1 = 0xE2,
  _LOADD_MEMORY_ = 0xE3,
  _SUBD_REGDPR_REGDPR = 0xE4,
  _ADDD_REGDPR_REGDPR = 0xE5,
  _ADDD__LOADD_MEMORY__REGDPR = 0xE6,
  _ROUNDDOUBLE__ADDD__LOADD_MEMORY__REGDPR_ = 0xE7,
  _ADDD_REGDPR__LOADD_MEMORY_ = 0xE8,
  _ROUNDDOUBLE__ADDD_REGDPR__LOADD_MEMORY__ = 0xE9,
  _ADDD_REGDPR_IMMDPR = 0xEA,
  _MULD_REGDPR_REGDPR = 0xEB,
  _DIVD_REGDPR_REGDPR = 0xEC,
  _LOADF_MEMORY_ = 0xED,
  _MULF__LOADF_MEMORY__REGFPR = 0xEE,
  _MULF_REGFPR__LOADF_MEMORY_ = 0xEF,
  _MULF_REGFPR_REGFPR = 0xF0,
  _SUBF_REGFPR_REGFPR = 0xF1,
  _CONVI2L_RREGI_ = 0xF2,
  _BINARY_EDIREGP_ECXREGI = 0xF3,
  _BINARY_ESIREGP_EDXREGI = 0xF4,
  _BINARY_EDIREGP_ESIREGP = 0xF5,
  _BINARY_EDIREGP_EDXREGI = 0xF6,
  _BINARY_ESIREGP_IMMI = 0xF7,
  _BINARY_ESIREGP_EAXREGI = 0xF8,
  _ANDI_RREGI_IMMI = 0xF9,
  _ANDI_RREGI_MEMORY = 0xFA,
  _LOADP_MEMORY_ = 0xFB,
  _BINARY_NADXREGI_EAXREGI = 0xFC,
  _PARTIALSUBTYPECHECK_ESIREGP_EAXREGP = 0xFD,
  _BINARY_CMPOP_FLAGSREG_LONG_LTGE = 0xFE,
  _BINARY_EREGL__LOADL_LOAD_LONG_MEMORY_ = 0xFF,
  _BINARY_CMPOP_FLAGSREG_LONG_EQNE = 0x100,
  _BINARY_CMPOP_COMMUTE_FLAGSREG_LONG_LEGT = 0x101,
  _CONVF2D_REGF_ = 0x102,
  _SQRTD__CONVF2D_REGF__ = 0x103,
  _CONVF2D__LOADF_MEMORY__ = 0x104,
  _SQRTD__CONVF2D__LOADF_MEMORY___ = 0x105,
  _CONVF2D_IMMF_ = 0x106,
  _SQRTD__CONVF2D_IMMF__ = 0x107,
  _LOADVECTOR_MEMORY_ = 0x108,
  _LAST_MACH_OPER = 0x109,
};

/* 4 */
enum Node::NodeClasses : __int32
{
  Bit_Node = 0x0,
  Class_Node = 0x0,
  ClassMask_Node = 0xFFFF,
  Bit_Multi = 0x1,
  Class_Multi = 0x1,
  ClassMask_Multi = 0x1,
  Bit_SafePoint = 0x2,
  Class_SafePoint = 0x3,
  ClassMask_SafePoint = 0x3,
  Bit_Call = 0x4,
  Class_Call = 0x7,
  ClassMask_Call = 0x7,
  Bit_CallJava = 0x8,
  Class_CallJava = 0xF,
  ClassMask_CallJava = 0xF,
  Bit_CallStaticJava = 0x10,
  Class_CallStaticJava = 0x1F,
  ClassMask_CallStaticJava = 0x1F,
  Bit_CallDynamicJava = 0x20,
  Class_CallDynamicJava = 0x2F,
  ClassMask_CallDynamicJava = 0x3F,
  Bit_CallRuntime = 0x10,
  Class_CallRuntime = 0x17,
  ClassMask_CallRuntime = 0x1F,
  Bit_CallLeaf = 0x20,
  Class_CallLeaf = 0x37,
  ClassMask_CallLeaf = 0x3F,
  Bit_Allocate = 0x20,
  Class_Allocate = 0x27,
  ClassMask_Allocate = 0x3F,
  Bit_AllocateArray = 0x40,
  Class_AllocateArray = 0x67,
  ClassMask_AllocateArray = 0x7F,
  Bit_AbstractLock = 0x40,
  Class_AbstractLock = 0x47,
  ClassMask_AbstractLock = 0x7F,
  Bit_Lock = 0x80,
  Class_Lock = 0xC7,
  ClassMask_Lock = 0xFF,
  Bit_Unlock = 0x100,
  Class_Unlock = 0x147,
  ClassMask_Unlock = 0x1FF,
  Bit_MultiBranch = 0x4,
  Class_MultiBranch = 0x5,
  ClassMask_MultiBranch = 0x7,
  Bit_PCTable = 0x8,
  Class_PCTable = 0xD,
  ClassMask_PCTable = 0xF,
  Bit_Catch = 0x10,
  Class_Catch = 0x1D,
  ClassMask_Catch = 0x1F,
  Bit_Jump = 0x20,
  Class_Jump = 0x2D,
  ClassMask_Jump = 0x3F,
  Bit_If = 0x10,
  Class_If = 0x15,
  ClassMask_If = 0x1F,
  Bit_CountedLoopEnd = 0x20,
  Class_CountedLoopEnd = 0x35,
  ClassMask_CountedLoopEnd = 0x3F,
  Bit_NeverBranch = 0x20,
  Class_NeverBranch = 0x25,
  ClassMask_NeverBranch = 0x3F,
  Bit_Start = 0x8,
  Class_Start = 0x9,
  ClassMask_Start = 0xF,
  Bit_MemBar = 0x10,
  Class_MemBar = 0x11,
  ClassMask_MemBar = 0x1F,
  Bit_Initialize = 0x20,
  Class_Initialize = 0x31,
  ClassMask_Initialize = 0x3F,
  Bit_MemBarStoreStore = 0x40,
  Class_MemBarStoreStore = 0x51,
  ClassMask_MemBarStoreStore = 0x7F,
  Bit_Mach = 0x2,
  Class_Mach = 0x2,
  ClassMask_Mach = 0x3,
  Bit_MachReturn = 0x4,
  Class_MachReturn = 0x6,
  ClassMask_MachReturn = 0x7,
  Bit_MachSafePoint = 0x8,
  Class_MachSafePoint = 0xE,
  ClassMask_MachSafePoint = 0xF,
  Bit_MachCall = 0x10,
  Class_MachCall = 0x1E,
  ClassMask_MachCall = 0x1F,
  Bit_MachCallJava = 0x20,
  Class_MachCallJava = 0x3E,
  ClassMask_MachCallJava = 0x3F,
  Bit_MachCallStaticJava = 0x40,
  Class_MachCallStaticJava = 0x7E,
  ClassMask_MachCallStaticJava = 0x7F,
  Bit_MachCallDynamicJava = 0x80,
  Class_MachCallDynamicJava = 0xBE,
  ClassMask_MachCallDynamicJava = 0xFF,
  Bit_MachCallRuntime = 0x40,
  Class_MachCallRuntime = 0x5E,
  ClassMask_MachCallRuntime = 0x7F,
  Bit_MachCallLeaf = 0x80,
  Class_MachCallLeaf = 0xDE,
  ClassMask_MachCallLeaf = 0xFF,
  Bit_MachBranch = 0x8,
  Class_MachBranch = 0xA,
  ClassMask_MachBranch = 0xF,
  Bit_MachIf = 0x10,
  Class_MachIf = 0x1A,
  ClassMask_MachIf = 0x1F,
  Bit_MachGoto = 0x20,
  Class_MachGoto = 0x2A,
  ClassMask_MachGoto = 0x3F,
  Bit_MachNullCheck = 0x40,
  Class_MachNullCheck = 0x4A,
  ClassMask_MachNullCheck = 0x7F,
  Bit_MachSpillCopy = 0x10,
  Class_MachSpillCopy = 0x12,
  ClassMask_MachSpillCopy = 0x1F,
  Bit_MachTemp = 0x20,
  Class_MachTemp = 0x22,
  ClassMask_MachTemp = 0x3F,
  Bit_MachConstantBase = 0x40,
  Class_MachConstantBase = 0x42,
  ClassMask_MachConstantBase = 0x7F,
  Bit_MachConstant = 0x80,
  Class_MachConstant = 0x82,
  ClassMask_MachConstant = 0xFF,
  Bit_MachMerge = 0x100,
  Class_MachMerge = 0x102,
  ClassMask_MachMerge = 0x1FF,
  Bit_MachMemBar = 0x200,
  Class_MachMemBar = 0x202,
  ClassMask_MachMemBar = 0x3FF,
  Bit_Type = 0x4,
  Class_Type = 0x4,
  ClassMask_Type = 0x7,
  Bit_Phi = 0x8,
  Class_Phi = 0xC,
  ClassMask_Phi = 0xF,
  Bit_ConstraintCast = 0x10,
  Class_ConstraintCast = 0x14,
  ClassMask_ConstraintCast = 0x1F,
  Bit_CastII = 0x20,
  Class_CastII = 0x34,
  ClassMask_CastII = 0x3F,
  Bit_CheckCastPP = 0x20,
  Class_CheckCastPP = 0x24,
  ClassMask_CheckCastPP = 0x3F,
  Bit_CMove = 0x40,
  Class_CMove = 0x44,
  ClassMask_CMove = 0x7F,
  Bit_SafePointScalarObject = 0x80,
  Class_SafePointScalarObject = 0x84,
  ClassMask_SafePointScalarObject = 0xFF,
  Bit_DecodeNarrowPtr = 0x100,
  Class_DecodeNarrowPtr = 0x104,
  ClassMask_DecodeNarrowPtr = 0x1FF,
  Bit_DecodeN = 0x200,
  Class_DecodeN = 0x304,
  ClassMask_DecodeN = 0x3FF,
  Bit_DecodeNKlass = 0x400,
  Class_DecodeNKlass = 0x504,
  ClassMask_DecodeNKlass = 0x7FF,
  Bit_EncodeNarrowPtr = 0x200,
  Class_EncodeNarrowPtr = 0x204,
  ClassMask_EncodeNarrowPtr = 0x3FF,
  Bit_EncodeP = 0x400,
  Class_EncodeP = 0x604,
  ClassMask_EncodeP = 0x7FF,
  Bit_EncodePKlass = 0x800,
  Class_EncodePKlass = 0xA04,
  ClassMask_EncodePKlass = 0xFFF,
  Bit_ShenandoahBarrier = 0x400,
  Class_ShenandoahBarrier = 0x404,
  ClassMask_ShenandoahBarrier = 0x7FF,
  Bit_Proj = 0x8,
  Class_Proj = 0x8,
  ClassMask_Proj = 0xF,
  Bit_CatchProj = 0x10,
  Class_CatchProj = 0x18,
  ClassMask_CatchProj = 0x1F,
  Bit_JumpProj = 0x20,
  Class_JumpProj = 0x28,
  ClassMask_JumpProj = 0x3F,
  Bit_IfProj = 0x40,
  Class_IfProj = 0x48,
  ClassMask_IfProj = 0x7F,
  Bit_IfTrue = 0x80,
  Class_IfTrue = 0xC8,
  ClassMask_IfTrue = 0xFF,
  Bit_IfFalse = 0x100,
  Class_IfFalse = 0x148,
  ClassMask_IfFalse = 0x1FF,
  Bit_Parm = 0x100,
  Class_Parm = 0x108,
  ClassMask_Parm = 0x1FF,
  Bit_MachProj = 0x200,
  Class_MachProj = 0x208,
  ClassMask_MachProj = 0x3FF,
  Bit_Mem = 0x10,
  Class_Mem = 0x10,
  ClassMask_Mem = 0x1F,
  Bit_Load = 0x20,
  Class_Load = 0x30,
  ClassMask_Load = 0x3F,
  Bit_LoadVector = 0x40,
  Class_LoadVector = 0x70,
  ClassMask_LoadVector = 0x7F,
  Bit_Store = 0x40,
  Class_Store = 0x50,
  ClassMask_Store = 0x7F,
  Bit_StoreVector = 0x80,
  Class_StoreVector = 0xD0,
  ClassMask_StoreVector = 0xFF,
  Bit_LoadStore = 0x80,
  Class_LoadStore = 0x90,
  ClassMask_LoadStore = 0xFF,
  Bit_Region = 0x20,
  Class_Region = 0x20,
  ClassMask_Region = 0x3F,
  Bit_Loop = 0x40,
  Class_Loop = 0x60,
  ClassMask_Loop = 0x7F,
  Bit_Root = 0x80,
  Class_Root = 0xE0,
  ClassMask_Root = 0xFF,
  Bit_CountedLoop = 0x100,
  Class_CountedLoop = 0x160,
  ClassMask_CountedLoop = 0x1FF,
  Bit_Sub = 0x40,
  Class_Sub = 0x40,
  ClassMask_Sub = 0x7F,
  Bit_Cmp = 0x80,
  Class_Cmp = 0xC0,
  ClassMask_Cmp = 0xFF,
  Bit_FastLock = 0x100,
  Class_FastLock = 0x1C0,
  ClassMask_FastLock = 0x1FF,
  Bit_FastUnlock = 0x200,
  Class_FastUnlock = 0x2C0,
  ClassMask_FastUnlock = 0x3FF,
  Bit_MergeMem = 0x80,
  Class_MergeMem = 0x80,
  ClassMask_MergeMem = 0xFF,
  Bit_Bool = 0x100,
  Class_Bool = 0x100,
  ClassMask_Bool = 0x1FF,
  Bit_AddP = 0x200,
  Class_AddP = 0x200,
  ClassMask_AddP = 0x3FF,
  Bit_BoxLock = 0x400,
  Class_BoxLock = 0x400,
  ClassMask_BoxLock = 0x7FF,
  Bit_Add = 0x800,
  Class_Add = 0x800,
  ClassMask_Add = 0xFFF,
  Bit_Mul = 0x1000,
  Class_Mul = 0x1000,
  ClassMask_Mul = 0x1FFF,
  Bit_Vector = 0x2000,
  Class_Vector = 0x2000,
  ClassMask_Vector = 0x3FFF,
  Bit_ClearArray = 0x4000,
  Class_ClearArray = 0x4000,
  ClassMask_ClearArray = 0x7FFF,
  _max_classes = 0x7FFF,
};

/* 5 */
enum Bundle::<unnamed_tag> : __int32
{
  _unused_delay = 0x0,
  _use_nop_delay = 0x1,
  _use_unconditional_delay = 0x2,
  _use_conditional_delay = 0x3,
  _used_in_conditional_delay = 0x4,
  _used_in_unconditional_delay = 0x5,
  _used_in_all_conditional_delays = 0x6,
  _use_delay = 0x3,
  _used_in_delay = 0x4,
};

/* 6 */
enum Type::OFFSET_SIGNALS : __int32
{
  OffsetTop = 0x88CA6C00,
  OffsetBot = 0x88CA6BFF,
};

/* 7 */
enum Node::NodeFlags : __int32
{
  Flag_is_Copy = 0x1,
  Flag_rematerialize = 0x2,
  Flag_needs_anti_dependence_check = 0x4,
  Flag_is_macro = 0x8,
  Flag_is_Con = 0x10,
  Flag_is_cisc_alternate = 0x20,
  Flag_is_dead_loop_safe = 0x40,
  Flag_may_be_short_branch = 0x80,
  Flag_avoid_back_to_back_before = 0x100,
  Flag_avoid_back_to_back_after = 0x200,
  Flag_has_call = 0x400,
  Flag_is_expensive = 0x800,
  _max_flags = 0xFFF,
};

/* 8 */
enum AdlcVMDeps::Cisc_Status : __int32
{
  Not_cisc_spillable = 0xFFFFFFFF,
};

/* 9 */
enum NativeJump::Intel_specific_constants : __int32
{
  instruction_code = 0xE9,
  instruction_size = 0x5,
  instruction_offset = 0x0,
  data_offset = 0x1,
  next_instruction_offset = 0x5,
};

/* 10 */
enum relocInfo::relocType : __int32
{
  none = 0x0,
  oop_type = 0x1,
  virtual_call_type = 0x2,
  opt_virtual_call_type = 0x3,
  static_call_type = 0x4,
  static_stub_type = 0x5,
  runtime_call_type = 0x6,
  external_word_type = 0x7,
  internal_word_type = 0x8,
  section_word_type = 0x9,
  poll_type = 0xA,
  poll_return_type = 0xB,
  metadata_type = 0xC,
  trampoline_stub_type = 0xD,
  yet_unused_type_1 = 0xE,
  data_prefix_tag = 0xF,
  type_mask = 0xF,
};

/* 11 */
enum MemNode::<unnamed_tag> : __int32
{
  Control = 0x0,
  Memory = 0x1,
  Address = 0x2,
  ValueIn = 0x3,
  OopStore = 0x4,
};

/* 12 */
enum machPipelineStages : __int32
{
  stage_undefined = 0x0,
  stage_S0 = 0x1,
  stage_S1 = 0x2,
  stage_S2 = 0x3,
  stage_S3 = 0x4,
  stage_S4 = 0x5,
  stage_S5 = 0x6,
  stage_count = 0x6,
};

/* 13 */
enum VM_Version::<unnamed_type_cpuFeatureFlags> : __int32
{
  CPU_CX8 = 0x1,
  CPU_CMOV = 0x2,
  CPU_FXSR = 0x4,
  CPU_HT = 0x8,
  CPU_MMX = 0x10,
  CPU_3DNOW_PREFETCH = 0x20,
  CPU_SSE = 0x40,
  CPU_SSE2 = 0x80,
  CPU_SSE3 = 0x100,
  CPU_SSSE3 = 0x200,
  CPU_SSE4A = 0x400,
  CPU_SSE4_1 = 0x800,
  CPU_SSE4_2 = 0x1000,
  CPU_POPCNT = 0x2000,
  CPU_LZCNT = 0x4000,
  CPU_TSC = 0x8000,
  CPU_TSCINV = 0x10000,
  CPU_AVX = 0x20000,
  CPU_AVX2 = 0x40000,
  CPU_AES = 0x80000,
  CPU_ERMS = 0x100000,
  CPU_CLMUL = 0x200000,
  CPU_BMI1 = 0x400000,
  CPU_BMI2 = 0x800000,
  CPU_RTM = 0x1000000,
  CPU_ADX = 0x2000000,
};

/* 14 */
enum Node::<unnamed_tag> : __int32
{
  NO_HASH = 0x0,
};

/* 15 */
enum MemoryType : __int32
{
  mtJavaHeap = 0x0,
  mtClass = 0x1,
  mtThread = 0x2,
  mtThreadStack = 0x3,
  mtCode = 0x4,
  mtGC = 0x5,
  mtCompiler = 0x6,
  mtInternal = 0x7,
  mtOther = 0x8,
  mtSymbol = 0x9,
  mtNMT = 0xA,
  mtClassShared = 0xB,
  mtChunk = 0xC,
  mtTest = 0xD,
  mtTracing = 0xE,
  mtNone = 0xF,
  mt_number_of_types = 0x10,
};

/* 16 */
enum RTMState : __int32
{
  NoRTM = 0x2,
  UseRTM = 0x1,
  ProfileRTM = 0x0,
};

/* 17 */
enum BasicType : __int32
{
  T_BOOLEAN = 0x4,
  T_CHAR = 0x5,
  T_FLOAT = 0x6,
  T_DOUBLE = 0x7,
  T_BYTE = 0x8,
  T_SHORT = 0x9,
  T_INT = 0xA,
  T_LONG = 0xB,
  T_OBJECT = 0xC,
  T_ARRAY = 0xD,
  T_VOID = 0xE,
  T_ADDRESS = 0xF,
  T_NARROWOOP = 0x10,
  T_METADATA = 0x11,
  T_NARROWKLASS = 0x12,
  T_CONFLICT = 0x13,
  T_ILLEGAL = 0x63,
};

/* 18 */
enum BoolTest::mask : __int32
{
  eq = 0x0,
  ne = 0x4,
  le = 0x5,
  ge = 0x7,
  lt = 0x3,
  gt = 0x1,
  overflow = 0x2,
  no_overflow = 0x6,
  illegal = 0x8,
};

/* 19 */
enum Pipeline::<unnamed_tag> : __int32
{
  _variable_size_instructions = 0x1,
  _fixed_size_instructions = 0x0,
  _branch_has_delay_slot = 0x0,
  _max_instrs_per_bundle = 0x3,
  _max_bundles_per_cycle = 0x1,
  _max_instrs_per_cycle = 0x3,
};

/* 20 */
enum AllocFailStrategy::AllocFailEnum : __int32
{
  EXIT_OOM = 0x0,
  RETURN_NULL = 0x1,
};

/* 21 */
enum RegMask::<unnamed_tag> : __int32
{
  _WordBits = 0x20,
  _LogWordBits = 0x5,
  _RM_SIZE = 0x6,
};

/* 22 */
typedef MemNode::<unnamed_tag> TypeFunc::<unnamed_tag>;

/* 23 */
typedef NativeJump::Intel_specific_constants NativeCall::Intel_specific_constants;

/* 24 */
typedef MemNode::<unnamed_tag> Type::TYPES;

/* 25 */
enum MachRegisterNumbers : __int32
{
  ECX_num = 0x0,
  EBX_num = 0x1,
  EBP_num = 0x2,
  EDI_num = 0x3,
  EAX_num = 0x4,
  EDX_num = 0x5,
  ESI_num = 0x6,
  ESP_num = 0x7,
  FPR0L_num = 0x8,
  FPR0H_num = 0x9,
  FPR1L_num = 0xA,
  FPR1H_num = 0xB,
  FPR2L_num = 0xC,
  FPR2H_num = 0xD,
  FPR3L_num = 0xE,
  FPR3H_num = 0xF,
  FPR4L_num = 0x10,
  FPR4H_num = 0x11,
  FPR5L_num = 0x12,
  FPR5H_num = 0x13,
  FPR6L_num = 0x14,
  FPR6H_num = 0x15,
  FPR7L_num = 0x16,
  FPR7H_num = 0x17,
  XMM0_num = 0x18,
  XMM0b_num = 0x19,
  XMM0c_num = 0x1A,
  XMM0d_num = 0x1B,
  XMM0e_num = 0x1C,
  XMM0f_num = 0x1D,
  XMM0g_num = 0x1E,
  XMM0h_num = 0x1F,
  XMM1_num = 0x20,
  XMM1b_num = 0x21,
  XMM1c_num = 0x22,
  XMM1d_num = 0x23,
  XMM1e_num = 0x24,
  XMM1f_num = 0x25,
  XMM1g_num = 0x26,
  XMM1h_num = 0x27,
  XMM2_num = 0x28,
  XMM2b_num = 0x29,
  XMM2c_num = 0x2A,
  XMM2d_num = 0x2B,
  XMM2e_num = 0x2C,
  XMM2f_num = 0x2D,
  XMM2g_num = 0x2E,
  XMM2h_num = 0x2F,
  XMM3_num = 0x30,
  XMM3b_num = 0x31,
  XMM3c_num = 0x32,
  XMM3d_num = 0x33,
  XMM3e_num = 0x34,
  XMM3f_num = 0x35,
  XMM3g_num = 0x36,
  XMM3h_num = 0x37,
  XMM4_num = 0x38,
  XMM4b_num = 0x39,
  XMM4c_num = 0x3A,
  XMM4d_num = 0x3B,
  XMM4e_num = 0x3C,
  XMM4f_num = 0x3D,
  XMM4g_num = 0x3E,
  XMM4h_num = 0x3F,
  XMM5_num = 0x40,
  XMM5b_num = 0x41,
  XMM5c_num = 0x42,
  XMM5d_num = 0x43,
  XMM5e_num = 0x44,
  XMM5f_num = 0x45,
  XMM5g_num = 0x46,
  XMM5h_num = 0x47,
  XMM6_num = 0x48,
  XMM6b_num = 0x49,
  XMM6c_num = 0x4A,
  XMM6d_num = 0x4B,
  XMM6e_num = 0x4C,
  XMM6f_num = 0x4D,
  XMM6g_num = 0x4E,
  XMM6h_num = 0x4F,
  XMM7_num = 0x50,
  XMM7b_num = 0x51,
  XMM7c_num = 0x52,
  XMM7d_num = 0x53,
  XMM7e_num = 0x54,
  XMM7f_num = 0x55,
  XMM7g_num = 0x56,
  XMM7h_num = 0x57,
  RFLAGS_num = 0x58,
  _last_Mach_Reg = 0x59,
};

/* 26 */
enum MachRegisterEncodes : __int32
{
  ECX_enc = 0x1,
  EBX_enc = 0x3,
  EBP_enc = 0x5,
  EDI_enc = 0x7,
  EAX_enc = 0x0,
  EDX_enc = 0x2,
  ESI_enc = 0x6,
  ESP_enc = 0x4,
  FPR0L_enc = 0x0,
  FPR0H_enc = 0x0,
  FPR1L_enc = 0x1,
  FPR1H_enc = 0x1,
  FPR2L_enc = 0x2,
  FPR2H_enc = 0x2,
  FPR3L_enc = 0x3,
  FPR3H_enc = 0x3,
  FPR4L_enc = 0x4,
  FPR4H_enc = 0x4,
  FPR5L_enc = 0x5,
  FPR5H_enc = 0x5,
  FPR6L_enc = 0x6,
  FPR6H_enc = 0x6,
  FPR7L_enc = 0x7,
  FPR7H_enc = 0x7,
  XMM0_enc = 0x0,
  XMM0b_enc = 0x0,
  XMM0c_enc = 0x0,
  XMM0d_enc = 0x0,
  XMM0e_enc = 0x0,
  XMM0f_enc = 0x0,
  XMM0g_enc = 0x0,
  XMM0h_enc = 0x0,
  XMM1_enc = 0x1,
  XMM1b_enc = 0x1,
  XMM1c_enc = 0x1,
  XMM1d_enc = 0x1,
  XMM1e_enc = 0x1,
  XMM1f_enc = 0x1,
  XMM1g_enc = 0x1,
  XMM1h_enc = 0x1,
  XMM2_enc = 0x2,
  XMM2b_enc = 0x2,
  XMM2c_enc = 0x2,
  XMM2d_enc = 0x2,
  XMM2e_enc = 0x2,
  XMM2f_enc = 0x2,
  XMM2g_enc = 0x2,
  XMM2h_enc = 0x2,
  XMM3_enc = 0x3,
  XMM3b_enc = 0x3,
  XMM3c_enc = 0x3,
  XMM3d_enc = 0x3,
  XMM3e_enc = 0x3,
  XMM3f_enc = 0x3,
  XMM3g_enc = 0x3,
  XMM3h_enc = 0x3,
  XMM4_enc = 0x4,
  XMM4b_enc = 0x4,
  XMM4c_enc = 0x4,
  XMM4d_enc = 0x4,
  XMM4e_enc = 0x4,
  XMM4f_enc = 0x4,
  XMM4g_enc = 0x4,
  XMM4h_enc = 0x4,
  XMM5_enc = 0x5,
  XMM5b_enc = 0x5,
  XMM5c_enc = 0x5,
  XMM5d_enc = 0x5,
  XMM5e_enc = 0x5,
  XMM5f_enc = 0x5,
  XMM5g_enc = 0x5,
  XMM5h_enc = 0x5,
  XMM6_enc = 0x6,
  XMM6b_enc = 0x6,
  XMM6c_enc = 0x6,
  XMM6d_enc = 0x6,
  XMM6e_enc = 0x6,
  XMM6f_enc = 0x6,
  XMM6g_enc = 0x6,
  XMM6h_enc = 0x6,
  XMM7_enc = 0x7,
  XMM7b_enc = 0x7,
  XMM7c_enc = 0x7,
  XMM7d_enc = 0x7,
  XMM7e_enc = 0x7,
  XMM7f_enc = 0x7,
  XMM7g_enc = 0x7,
  XMM7h_enc = 0x7,
  RFLAGS_enc = 0x8,
};

/* 27 */
enum VMRegImpl::<unnamed_tag> : __int32
{
  BAD_REG = 0xFFFFFFFF,
};

/* 28 */
enum ConcreteRegisterImpl::<unnamed_tag> : __int32
{
  number_of_registers = 0x59,
};

/* 29 */
enum RC : __int32
{
  rc_bad = 0x0,
  rc_int = 0x1,
  rc_float = 0x2,
  rc_xmm = 0x3,
  rc_stack = 0x4,
};

/* 30 */
enum CodeOffsets::Entries : __int32
{
  Entry = 0x0,
  Verified_Entry = 0x1,
  Frame_Complete = 0x2,
  OSR_Entry = 0x3,
  Dtrace_trap = 0x3,
  Exceptions = 0x4,
  Deopt = 0x5,
  DeoptMH = 0x6,
  UnwindHandler = 0x7,
  max_Entries = 0x8,
};

/* 31 */
enum OptoReg::<unnamed_tag> : __int32
{
  Physical = 0x0,
  Special = 0xFFFFFFFE,
  Bad = 0xFFFFFFFF,
};

/* 32 */
enum Address::ScaleFactor : __int32
{
  no_scale = 0xFFFFFFFF,
  times_1 = 0x0,
  times_2 = 0x1,
  times_4 = 0x2,
  times_8 = 0x3,
  times_ptr = 0x2,
};

/* 33 */
enum Assembler::Membar_mask_bits : __int32
{
  StoreStore = 0x8,
  LoadStore = 0x4,
  StoreLoad = 0x2,
  LoadLoad = 0x1,
};

/* 34 */
typedef BoolTest::mask Assembler::Condition;

/* 35 */
enum Assembler::WhichOperand : __int32
{
  imm_operand = 0x0,
  disp32_operand = 0x1,
  call32_operand = 0x2,
  _WhichOperand_limit = 0x3,
};

/* 36 */
enum Bytecodes::Code : __int32
{
  _illegal = 0xFFFFFFFF,
  _nop = 0x0,
  _aconst_null = 0x1,
  _iconst_m1 = 0x2,
  _iconst_0 = 0x3,
  _iconst_1 = 0x4,
  _iconst_2 = 0x5,
  _iconst_3 = 0x6,
  _iconst_4 = 0x7,
  _iconst_5 = 0x8,
  _lconst_0 = 0x9,
  _lconst_1 = 0xA,
  _fconst_0 = 0xB,
  _fconst_1 = 0xC,
  _fconst_2 = 0xD,
  _dconst_0 = 0xE,
  _dconst_1 = 0xF,
  _bipush = 0x10,
  _sipush = 0x11,
  _ldc = 0x12,
  _ldc_w = 0x13,
  _ldc2_w = 0x14,
  _iload = 0x15,
  _lload = 0x16,
  _fload = 0x17,
  _dload = 0x18,
  _aload = 0x19,
  _iload_0 = 0x1A,
  _iload_1 = 0x1B,
  _iload_2 = 0x1C,
  _iload_3 = 0x1D,
  _lload_0 = 0x1E,
  _lload_1 = 0x1F,
  _lload_2 = 0x20,
  _lload_3 = 0x21,
  _fload_0 = 0x22,
  _fload_1 = 0x23,
  _fload_2 = 0x24,
  _fload_3 = 0x25,
  _dload_0 = 0x26,
  _dload_1 = 0x27,
  _dload_2 = 0x28,
  _dload_3 = 0x29,
  _aload_0 = 0x2A,
  _aload_1 = 0x2B,
  _aload_2 = 0x2C,
  _aload_3 = 0x2D,
  _iaload = 0x2E,
  _laload = 0x2F,
  _faload = 0x30,
  _daload = 0x31,
  _aaload = 0x32,
  _baload = 0x33,
  _caload = 0x34,
  _saload = 0x35,
  _istore = 0x36,
  _lstore = 0x37,
  _fstore = 0x38,
  _dstore = 0x39,
  _astore = 0x3A,
  _istore_0 = 0x3B,
  _istore_1 = 0x3C,
  _istore_2 = 0x3D,
  _istore_3 = 0x3E,
  _lstore_0 = 0x3F,
  _lstore_1 = 0x40,
  _lstore_2 = 0x41,
  _lstore_3 = 0x42,
  _fstore_0 = 0x43,
  _fstore_1 = 0x44,
  _fstore_2 = 0x45,
  _fstore_3 = 0x46,
  _dstore_0 = 0x47,
  _dstore_1 = 0x48,
  _dstore_2 = 0x49,
  _dstore_3 = 0x4A,
  _astore_0 = 0x4B,
  _astore_1 = 0x4C,
  _astore_2 = 0x4D,
  _astore_3 = 0x4E,
  _iastore = 0x4F,
  _lastore = 0x50,
  _fastore = 0x51,
  _dastore = 0x52,
  _aastore = 0x53,
  _bastore = 0x54,
  _castore = 0x55,
  _sastore = 0x56,
  _pop = 0x57,
  _pop2 = 0x58,
  _dup = 0x59,
  _dup_x1 = 0x5A,
  _dup_x2 = 0x5B,
  _dup2 = 0x5C,
  _dup2_x1 = 0x5D,
  _dup2_x2 = 0x5E,
  _swap = 0x5F,
  _iadd = 0x60,
  _ladd = 0x61,
  _fadd = 0x62,
  _dadd = 0x63,
  _isub = 0x64,
  _lsub = 0x65,
  _fsub = 0x66,
  _dsub = 0x67,
  _imul = 0x68,
  _lmul = 0x69,
  _fmul = 0x6A,
  _dmul = 0x6B,
  _idiv = 0x6C,
  _ldiv = 0x6D,
  _fdiv = 0x6E,
  _ddiv = 0x6F,
  _irem = 0x70,
  _lrem = 0x71,
  _frem = 0x72,
  _drem = 0x73,
  _ineg = 0x74,
  _lneg = 0x75,
  _fneg = 0x76,
  _dneg = 0x77,
  _ishl = 0x78,
  _lshl = 0x79,
  _ishr = 0x7A,
  _lshr = 0x7B,
  _iushr = 0x7C,
  _lushr = 0x7D,
  _iand = 0x7E,
  _land = 0x7F,
  _ior = 0x80,
  _lor = 0x81,
  _ixor = 0x82,
  _lxor = 0x83,
  _iinc = 0x84,
  _i2l = 0x85,
  _i2f = 0x86,
  _i2d = 0x87,
  _l2i = 0x88,
  _l2f = 0x89,
  _l2d = 0x8A,
  _f2i = 0x8B,
  _f2l = 0x8C,
  _f2d = 0x8D,
  _d2i = 0x8E,
  _d2l = 0x8F,
  _d2f = 0x90,
  _i2b = 0x91,
  _i2c = 0x92,
  _i2s = 0x93,
  _lcmp = 0x94,
  _fcmpl = 0x95,
  _fcmpg = 0x96,
  _dcmpl = 0x97,
  _dcmpg = 0x98,
  _ifeq = 0x99,
  _ifne = 0x9A,
  _iflt = 0x9B,
  _ifge = 0x9C,
  _ifgt = 0x9D,
  _ifle = 0x9E,
  _if_icmpeq = 0x9F,
  _if_icmpne = 0xA0,
  _if_icmplt = 0xA1,
  _if_icmpge = 0xA2,
  _if_icmpgt = 0xA3,
  _if_icmple = 0xA4,
  _if_acmpeq = 0xA5,
  _if_acmpne = 0xA6,
  _goto = 0xA7,
  _jsr = 0xA8,
  _ret = 0xA9,
  _tableswitch = 0xAA,
  _lookupswitch = 0xAB,
  _ireturn = 0xAC,
  _lreturn = 0xAD,
  _freturn = 0xAE,
  _dreturn = 0xAF,
  _areturn = 0xB0,
  _return = 0xB1,
  _getstatic = 0xB2,
  _putstatic = 0xB3,
  _getfield = 0xB4,
  _putfield = 0xB5,
  _invokevirtual = 0xB6,
  _invokespecial = 0xB7,
  _invokestatic = 0xB8,
  _invokeinterface = 0xB9,
  _invokedynamic = 0xBA,
  _new = 0xBB,
  _newarray = 0xBC,
  _anewarray = 0xBD,
  _arraylength = 0xBE,
  _athrow = 0xBF,
  _checkcast = 0xC0,
  _instanceof = 0xC1,
  _monitorenter = 0xC2,
  _monitorexit = 0xC3,
  _wide = 0xC4,
  _multianewarray = 0xC5,
  _ifnull = 0xC6,
  _ifnonnull = 0xC7,
  _goto_w = 0xC8,
  _jsr_w = 0xC9,
  _breakpoint = 0xCA,
  number_of_java_codes = 0xCB,
  _fast_agetfield = 0xCB,
  _fast_bgetfield = 0xCC,
  _fast_cgetfield = 0xCD,
  _fast_dgetfield = 0xCE,
  _fast_fgetfield = 0xCF,
  _fast_igetfield = 0xD0,
  _fast_lgetfield = 0xD1,
  _fast_sgetfield = 0xD2,
  _fast_aputfield = 0xD3,
  _fast_bputfield = 0xD4,
  _fast_zputfield = 0xD5,
  _fast_cputfield = 0xD6,
  _fast_dputfield = 0xD7,
  _fast_fputfield = 0xD8,
  _fast_iputfield = 0xD9,
  _fast_lputfield = 0xDA,
  _fast_sputfield = 0xDB,
  _fast_aload_0 = 0xDC,
  _fast_iaccess_0 = 0xDD,
  _fast_aaccess_0 = 0xDE,
  _fast_faccess_0 = 0xDF,
  _fast_iload = 0xE0,
  _fast_iload2 = 0xE1,
  _fast_icaload = 0xE2,
  _fast_invokevfinal = 0xE3,
  _fast_linearswitch = 0xE4,
  _fast_binaryswitch = 0xE5,
  _fast_aldc = 0xE6,
  _fast_aldc_w = 0xE7,
  _return_register_finalizer = 0xE8,
  _invokehandle = 0xE9,
  _shouldnotreachhere = 0xEA,
  number_of_codes = 0xEB,
};

/* 37 */
enum Label::<unnamed_tag> : __int32
{
  PatchCacheSize = 0x4,
};

/* 38 */
enum ResourceObj::allocation_type : __int32
{
  STACK_OR_EMBEDDED = 0x0,
  RESOURCE_AREA = 0x1,
  C_HEAP = 0x2,
  ARENA = 0x3,
  allocation_mask = 0x3,
};

/* 39 */
enum VMErrorType : __int32
{
  INTERNAL_ERROR = 0xE0000000,
  OOM_MALLOC_ERROR = 0xE0000001,
  OOM_MMAP_ERROR = 0xE0000002,
};

/* 40 */
enum NMT_TrackingLevel : __int32
{
  NMT_unknown = 0xFF,
  NMT_off = 0x0,
  NMT_minimal = 0x1,
  NMT_summary = 0x2,
  NMT_detail = 0x3,
};

/* 41 */
enum MemNode::MemOrd : __int32
{
  unordered = 0x0,
  acquire = 0x1,
  release = 0x2,
};

/* 42 */
enum LoadNode::ControlDependency : __int32
{
  Pinned = 0x0,
  DependsOnlyOnTest = 0x1,
};

/* 43 */
enum ciTypeFlow::LocalSet::Constants : __int32
{
  max = 0x3F,
};

/* 44 */
enum Type::WIDEN : __int32
{
  WidenMin = 0x0,
  WidenMax = 0x3,
};

/* 45 */
enum ciTypeFlow::StateVector::<unnamed_tag> : __int32
{
  T_TOP = 0xE,
  T_BOTTOM = 0x13,
  T_LONG2 = 0x9,
  T_DOUBLE2 = 0x5,
  T_NULL = 0x8,
};

/* 46 */
enum SystemDictionary::WKID : __int32
{
  NO_WKID = 0x0,
  Object_klass_knum = 0x1,
  java_lang_Object_knum = 0x1,
  String_klass_knum = 0x2,
  java_lang_String_knum = 0x2,
  Class_klass_knum = 0x3,
  java_lang_Class_knum = 0x3,
  Cloneable_klass_knum = 0x4,
  java_lang_Cloneable_knum = 0x4,
  ClassLoader_klass_knum = 0x5,
  java_lang_ClassLoader_knum = 0x5,
  Serializable_klass_knum = 0x6,
  java_io_Serializable_knum = 0x6,
  System_klass_knum = 0x7,
  java_lang_System_knum = 0x7,
  Throwable_klass_knum = 0x8,
  java_lang_Throwable_knum = 0x8,
  Error_klass_knum = 0x9,
  java_lang_Error_knum = 0x9,
  ThreadDeath_klass_knum = 0xA,
  java_lang_ThreadDeath_knum = 0xA,
  Exception_klass_knum = 0xB,
  java_lang_Exception_knum = 0xB,
  RuntimeException_klass_knum = 0xC,
  java_lang_RuntimeException_knum = 0xC,
  SecurityManager_klass_knum = 0xD,
  java_lang_SecurityManager_knum = 0xD,
  ProtectionDomain_klass_knum = 0xE,
  java_security_ProtectionDomain_knum = 0xE,
  AccessControlContext_klass_knum = 0xF,
  java_security_AccessControlContext_knum = 0xF,
  SecureClassLoader_klass_knum = 0x10,
  java_security_SecureClassLoader_knum = 0x10,
  ClassNotFoundException_klass_knum = 0x11,
  java_lang_ClassNotFoundException_knum = 0x11,
  NoClassDefFoundError_klass_knum = 0x12,
  java_lang_NoClassDefFoundError_knum = 0x12,
  LinkageError_klass_knum = 0x13,
  java_lang_LinkageError_knum = 0x13,
  ClassCastException_klass_knum = 0x14,
  java_lang_ClassCastException_knum = 0x14,
  ArrayStoreException_klass_knum = 0x15,
  java_lang_ArrayStoreException_knum = 0x15,
  VirtualMachineError_klass_knum = 0x16,
  java_lang_VirtualMachineError_knum = 0x16,
  OutOfMemoryError_klass_knum = 0x17,
  java_lang_OutOfMemoryError_knum = 0x17,
  StackOverflowError_klass_knum = 0x18,
  java_lang_StackOverflowError_knum = 0x18,
  IllegalMonitorStateException_klass_knum = 0x19,
  java_lang_IllegalMonitorStateException_knum = 0x19,
  Reference_klass_knum = 0x1A,
  java_lang_ref_Reference_knum = 0x1A,
  SoftReference_klass_knum = 0x1B,
  java_lang_ref_SoftReference_knum = 0x1B,
  WeakReference_klass_knum = 0x1C,
  java_lang_ref_WeakReference_knum = 0x1C,
  FinalReference_klass_knum = 0x1D,
  java_lang_ref_FinalReference_knum = 0x1D,
  PhantomReference_klass_knum = 0x1E,
  java_lang_ref_PhantomReference_knum = 0x1E,
  Cleaner_klass_knum = 0x1F,
  sun_misc_Cleaner_knum = 0x1F,
  Finalizer_klass_knum = 0x20,
  java_lang_ref_Finalizer_knum = 0x20,
  ReferenceQueue_klass_knum = 0x21,
  java_lang_ref_ReferenceQueue_knum = 0x21,
  Thread_klass_knum = 0x22,
  java_lang_Thread_knum = 0x22,
  ThreadGroup_klass_knum = 0x23,
  java_lang_ThreadGroup_knum = 0x23,
  Properties_klass_knum = 0x24,
  java_util_Properties_knum = 0x24,
  reflect_AccessibleObject_klass_knum = 0x25,
  java_lang_reflect_AccessibleObject_knum = 0x25,
  reflect_Field_klass_knum = 0x26,
  java_lang_reflect_Field_knum = 0x26,
  reflect_Parameter_klass_knum = 0x27,
  java_lang_reflect_Parameter_knum = 0x27,
  reflect_Method_klass_knum = 0x28,
  java_lang_reflect_Method_knum = 0x28,
  reflect_Constructor_klass_knum = 0x29,
  java_lang_reflect_Constructor_knum = 0x29,
  reflect_MagicAccessorImpl_klass_knum = 0x2A,
  sun_reflect_MagicAccessorImpl_knum = 0x2A,
  reflect_MethodAccessorImpl_klass_knum = 0x2B,
  sun_reflect_MethodAccessorImpl_knum = 0x2B,
  reflect_ConstructorAccessorImpl_klass_knum = 0x2C,
  sun_reflect_ConstructorAccessorImpl_knum = 0x2C,
  reflect_DelegatingClassLoader_klass_knum = 0x2D,
  sun_reflect_DelegatingClassLoader_knum = 0x2D,
  reflect_ConstantPool_klass_knum = 0x2E,
  sun_reflect_ConstantPool_knum = 0x2E,
  reflect_UnsafeStaticFieldAccessorImpl_klass_knum = 0x2F,
  sun_reflect_UnsafeStaticFieldAccessorImpl_knum = 0x2F,
  reflect_CallerSensitive_klass_knum = 0x30,
  sun_reflect_CallerSensitive_knum = 0x30,
  DirectMethodHandle_klass_knum = 0x31,
  java_lang_invoke_DirectMethodHandle_knum = 0x31,
  MethodHandle_klass_knum = 0x32,
  java_lang_invoke_MethodHandle_knum = 0x32,
  MemberName_klass_knum = 0x33,
  java_lang_invoke_MemberName_knum = 0x33,
  MethodHandleNatives_klass_knum = 0x34,
  java_lang_invoke_MethodHandleNatives_knum = 0x34,
  LambdaForm_klass_knum = 0x35,
  java_lang_invoke_LambdaForm_knum = 0x35,
  MethodType_klass_knum = 0x36,
  java_lang_invoke_MethodType_knum = 0x36,
  BootstrapMethodError_klass_knum = 0x37,
  java_lang_BootstrapMethodError_knum = 0x37,
  CallSite_klass_knum = 0x38,
  java_lang_invoke_CallSite_knum = 0x38,
  ConstantCallSite_klass_knum = 0x39,
  java_lang_invoke_ConstantCallSite_knum = 0x39,
  MutableCallSite_klass_knum = 0x3A,
  java_lang_invoke_MutableCallSite_knum = 0x3A,
  VolatileCallSite_klass_knum = 0x3B,
  java_lang_invoke_VolatileCallSite_knum = 0x3B,
  StringBuffer_klass_knum = 0x3C,
  java_lang_StringBuffer_knum = 0x3C,
  StringBuilder_klass_knum = 0x3D,
  java_lang_StringBuilder_knum = 0x3D,
  misc_Unsafe_klass_knum = 0x3E,
  sun_misc_Unsafe_knum = 0x3E,
  ByteArrayInputStream_klass_knum = 0x3F,
  java_io_ByteArrayInputStream_knum = 0x3F,
  File_klass_knum = 0x40,
  java_io_File_knum = 0x40,
  URLClassLoader_klass_knum = 0x41,
  java_net_URLClassLoader_knum = 0x41,
  URL_klass_knum = 0x42,
  java_net_URL_knum = 0x42,
  Jar_Manifest_klass_knum = 0x43,
  java_util_jar_Manifest_knum = 0x43,
  sun_misc_Launcher_klass_knum = 0x44,
  sun_misc_Launcher_knum = 0x44,
  sun_misc_Launcher_AppClassLoader_klass_knum = 0x45,
  sun_misc_Launcher_AppClassLoader_knum = 0x45,
  sun_misc_Launcher_ExtClassLoader_klass_knum = 0x46,
  sun_misc_Launcher_ExtClassLoader_knum = 0x46,
  CodeSource_klass_knum = 0x47,
  java_security_CodeSource_knum = 0x47,
  StackTraceElement_klass_knum = 0x48,
  java_lang_StackTraceElement_knum = 0x48,
  nio_Buffer_klass_knum = 0x49,
  java_nio_Buffer_knum = 0x49,
  Boolean_klass_knum = 0x4A,
  java_lang_Boolean_knum = 0x4A,
  Character_klass_knum = 0x4B,
  java_lang_Character_knum = 0x4B,
  Float_klass_knum = 0x4C,
  java_lang_Float_knum = 0x4C,
  Double_klass_knum = 0x4D,
  java_lang_Double_knum = 0x4D,
  Byte_klass_knum = 0x4E,
  java_lang_Byte_knum = 0x4E,
  Short_klass_knum = 0x4F,
  java_lang_Short_knum = 0x4F,
  Integer_klass_knum = 0x50,
  java_lang_Integer_knum = 0x50,
  Long_klass_knum = 0x51,
  java_lang_Long_knum = 0x51,
  WKID_LIMIT = 0x52,
  FIRST_WKID = 0x1,
};

/* 47 */
enum MethodCompilation : __int32
{
  InvocationEntryBci = 0xFFFFFFFF,
  InvalidOSREntryBci = 0xFFFFFFFE,
};

/* 48 */
enum ciTypeFlow::CreateOption : __int32
{
  create_public_copy = 0x0,
  create_backedge_copy = 0x1,
  no_create = 0x2,
};

/* 49 */
enum InstanceKlass::<unnamed_tag> : __int32
{
  _misc_rewritten = 0x1,
  _misc_has_nonstatic_fields = 0x2,
  _misc_should_verify_class = 0x4,
  _misc_is_anonymous = 0x8,
  _misc_is_contended = 0x10,
  _misc_has_default_methods = 0x20,
  _misc_declares_default_methods = 0x40,
  _misc_has_been_redefined = 0x80,
};

/* 50 */
enum ConstantPool::<unnamed_tag> : __int32
{
  _has_preresolution = 0x1,
  _on_stack = 0x2,
};

/* 51 */
enum TypePtr::PTR : __int32
{
  TopPTR = 0x0,
  AnyNull = 0x1,
  Constant = 0x2,
  Null = 0x3,
  NotNull = 0x4,
  BotPTR = 0x5,
  lastPTR = 0x6,
};

/* 52 */
enum Klass::<unnamed_tag> : __int32
{
  _lh_neutral_value = 0x0,
  _lh_instance_slow_path_bit = 0x1,
  _lh_log2_element_size_shift = 0x0,
  _lh_log2_element_size_mask = 0x3F,
  _lh_element_type_shift = 0x8,
  _lh_element_type_mask = 0xFF,
  _lh_header_size_shift = 0x10,
  _lh_header_size_mask = 0xFF,
  _lh_array_tag_bits = 0x2,
  _lh_array_tag_shift = 0x1E,
  _lh_array_tag_obj_value = 0xFFFFFFFE,
};

/* 53 */
enum TypeOopPtr::<unnamed_tag> : __int32
{
  InstanceTop = 0xFFFFFFFF,
  InstanceBot = 0x0,
};

/* 54 */
enum ciBlock::<unnamed_tag> : __int32
{
  Processed = 0x1,
  Handler = 0x2,
  MayThrow = 0x4,
  DoesJsr = 0x8,
  DoesRet = 0x10,
  RetTarget = 0x20,
  HasHandler = 0x40,
};

/* 55 */
enum ciTypeFlow::Cell : __int32
{
  Cell_0 = 0x0,
  Cell_max = 0x7FFFFFFF,
};

/* 56 */
enum ciTypeFlow::<unnamed_tag> : __int32
{
  FALL_THROUGH = 0x0,
  IF_NOT_TAKEN = 0x0,
  IF_TAKEN = 0x1,
  GOTO_TARGET = 0x0,
  SWITCH_DEFAULT = 0x0,
  SWITCH_CASES = 0x1,
};

/* 57 */
enum ReferenceType : __int32
{
  REF_NONE = 0x0,
  REF_OTHER = 0x1,
  REF_SOFT = 0x2,
  REF_WEAK = 0x3,
  REF_FINAL = 0x4,
  REF_PHANTOM = 0x5,
  REF_CLEANER = 0x6,
};

/* 58 */
enum DivModNode::<unnamed_tag> : __int32
{
  div_proj_num = 0x0,
  mod_proj_num = 0x1,
};

/* 59 */
enum SWPointer::CMP : __int32
{
  Less = 0x1,
  Greater = 0x2,
  Equal = 0x4,
  NotEqual = 0x3,
  NotComparable = 0x7,
};

/* 60 */
typedef MemNode::<unnamed_tag> AddPNode::<unnamed_tag>;

/* 61 */
enum SuperWord::consts : __int32
{
  top_align = 0xFFFFFFFF,
  bottom_align = 0xFFFFFD66,
};

/* 62 */
enum LoopNode::<unnamed_tag> : __int32
{
  Normal = 0x0,
  Pre = 0x1,
  Main = 0x2,
  Post = 0x3,
  PreMainPostFlagsMask = 0x3,
  MainHasNoPreLoop = 0x4,
  HasExactTripCount = 0x8,
  InnerLoop = 0x10,
  PartialPeelLoop = 0x20,
  PartialPeelFailed = 0x40,
};

/* 63 */
enum CountedLoopEndNode::<unnamed_tag> : __int32
{
  TestControl = 0x0,
  TestValue = 0x1,
};

/* 64 */
enum Deoptimization::<unnamed_tag> : __int32
{
  _action_bits = 0x3,
  _reason_bits = 0x5,
  _action_shift = 0x0,
  _reason_shift = 0x3,
  BC_CASE_LIMIT = 0x1,
};

/* 65 */
enum PhiNode::<unnamed_tag> : __int32
{
  Region = 0x0,
  Input = 0x1,
};

/* 66 */
enum JVMState::<unnamed_tag> : __int32
{
  logMonitorEdges = 0x1,
};

/* 67 */
enum LoadStoreConditionalNode::<unnamed_tag> : __int32
{
  ExpectedIn = 0x4,
};

/* 68 */
typedef MemNode::<unnamed_tag> ShenandoahLoadReferenceBarrierNode::<unnamed_tag>;

/* 69 */
typedef MemNode::<unnamed_tag> CMoveNode::<unnamed_tag>;

/* 70 */
enum Deoptimization::DeoptReason : __int32
{
  Reason_many = 0xFFFFFFFF,
  Reason_none = 0x0,
  Reason_null_check = 0x1,
  Reason_null_assert = 0x2,
  Reason_range_check = 0x3,
  Reason_class_check = 0x4,
  Reason_array_check = 0x5,
  Reason_intrinsic = 0x6,
  Reason_bimorphic = 0x7,
  Reason_unloaded = 0x8,
  Reason_uninitialized = 0x9,
  Reason_unreached = 0xA,
  Reason_unhandled = 0xB,
  Reason_constraint = 0xC,
  Reason_div0_check = 0xD,
  Reason_age = 0xE,
  Reason_predicate = 0xF,
  Reason_loop_limit_check = 0x10,
  Reason_speculate_class_check = 0x11,
  Reason_rtm_state_change = 0x12,
  Reason_unstable_if = 0x13,
  Reason_LIMIT = 0x14,
  Reason_RECORDED_LIMIT = 0x7,
};

/* 71 */
enum Deoptimization::DeoptAction : __int32
{
  Action_none = 0x0,
  Action_maybe_recompile = 0x1,
  Action_reinterpret = 0x2,
  Action_make_not_entrant = 0x3,
  Action_make_not_compilable = 0x4,
  Action_LIMIT = 0x5,
};

/* 72 */
enum GraphKit::<unnamed_tag> : __int32
{
  RC_NO_FP = 0x1,
  RC_NO_IO = 0x2,
  RC_NO_LEAF = 0x4,
  RC_MUST_THROW = 0x8,
  RC_NARROW_MEM = 0x10,
  RC_UNCOMMON = 0x20,
  RC_LEAF = 0x0,
};

/* 73 */
enum ShenandoahLoadReferenceBarrierNode::Strength : __int32
{
  NONE = 0x0,
  STRONG = 0x1,
};

/* 74 */
typedef PhiNode::<unnamed_tag> RegionNode::<unnamed_tag>;

/* 75 */
enum JVMState::ReexecuteState : __int32
{
  Reexecute_Undefined = 0xFFFFFFFF,
  Reexecute_False = 0x0,
  Reexecute_True = 0x1,
};

/* 76 */
enum vmSymbols::SID : __int32
{
  NO_SID = 0x0,
  java_lang_System_enum = 0x1,
  java_lang_Object_enum = 0x2,
  java_lang_Class_enum = 0x3,
  java_lang_String_enum = 0x4,
  java_lang_Thread_enum = 0x5,
  java_lang_ThreadGroup_enum = 0x6,
  java_lang_Cloneable_enum = 0x7,
  java_lang_Throwable_enum = 0x8,
  java_lang_ClassLoader_enum = 0x9,
  java_lang_ClassLoader_NativeLibrary_enum = 0xA,
  java_lang_ThreadDeath_enum = 0xB,
  java_lang_Boolean_enum = 0xC,
  java_lang_Character_enum = 0xD,
  java_lang_Character_CharacterCache_enum = 0xE,
  java_lang_Float_enum = 0xF,
  java_lang_Double_enum = 0x10,
  java_lang_Byte_enum = 0x11,
  java_lang_Byte_ByteCache_enum = 0x12,
  java_lang_Short_enum = 0x13,
  java_lang_Short_ShortCache_enum = 0x14,
  java_lang_Integer_enum = 0x15,
  java_lang_Integer_IntegerCache_enum = 0x16,
  java_lang_Long_enum = 0x17,
  java_lang_Long_LongCache_enum = 0x18,
  java_lang_Shutdown_enum = 0x19,
  java_lang_ref_Reference_enum = 0x1A,
  java_lang_ref_SoftReference_enum = 0x1B,
  java_lang_ref_WeakReference_enum = 0x1C,
  java_lang_ref_FinalReference_enum = 0x1D,
  java_lang_ref_PhantomReference_enum = 0x1E,
  sun_misc_Cleaner_enum = 0x1F,
  java_lang_ref_Finalizer_enum = 0x20,
  java_lang_ref_ReferenceQueue_enum = 0x21,
  java_lang_reflect_AccessibleObject_enum = 0x22,
  java_lang_reflect_Method_enum = 0x23,
  java_lang_reflect_Constructor_enum = 0x24,
  java_lang_reflect_Field_enum = 0x25,
  java_lang_reflect_Parameter_enum = 0x26,
  java_lang_reflect_Array_enum = 0x27,
  java_lang_StringBuffer_enum = 0x28,
  java_lang_StringBuilder_enum = 0x29,
  java_lang_CharSequence_enum = 0x2A,
  java_lang_SecurityManager_enum = 0x2B,
  java_security_AccessControlContext_enum = 0x2C,
  java_security_CodeSource_enum = 0x2D,
  java_security_ProtectionDomain_enum = 0x2E,
  java_security_SecureClassLoader_enum = 0x2F,
  java_net_URLClassLoader_enum = 0x30,
  java_net_URL_enum = 0x31,
  java_util_jar_Manifest_enum = 0x32,
  impliesCreateAccessControlContext_name_enum = 0x33,
  java_io_OutputStream_enum = 0x34,
  java_io_Reader_enum = 0x35,
  java_io_BufferedReader_enum = 0x36,
  java_io_File_enum = 0x37,
  java_io_FileInputStream_enum = 0x38,
  java_io_ByteArrayInputStream_enum = 0x39,
  java_io_Serializable_enum = 0x3A,
  java_util_Arrays_enum = 0x3B,
  java_util_Properties_enum = 0x3C,
  java_util_Vector_enum = 0x3D,
  java_util_AbstractList_enum = 0x3E,
  java_util_Hashtable_enum = 0x3F,
  java_lang_Compiler_enum = 0x40,
  sun_misc_Signal_enum = 0x41,
  sun_misc_Launcher_enum = 0x42,
  java_lang_AssertionStatusDirectives_enum = 0x43,
  getBootClassPathEntryForClass_name_enum = 0x44,
  sun_misc_PostVMInitHook_enum = 0x45,
  sun_misc_Launcher_AppClassLoader_enum = 0x46,
  sun_misc_Launcher_ExtClassLoader_enum = 0x47,
  sun_misc_Version_enum = 0x48,
  java_runtime_name_name_enum = 0x49,
  java_runtime_version_name_enum = 0x4A,
  tag_source_file_enum = 0x4B,
  tag_inner_classes_enum = 0x4C,
  tag_constant_value_enum = 0x4D,
  tag_code_enum = 0x4E,
  tag_exceptions_enum = 0x4F,
  tag_line_number_table_enum = 0x50,
  tag_local_variable_table_enum = 0x51,
  tag_local_variable_type_table_enum = 0x52,
  tag_method_parameters_enum = 0x53,
  tag_stack_map_table_enum = 0x54,
  tag_synthetic_enum = 0x55,
  tag_deprecated_enum = 0x56,
  tag_source_debug_extension_enum = 0x57,
  tag_signature_enum = 0x58,
  tag_runtime_visible_annotations_enum = 0x59,
  tag_runtime_invisible_annotations_enum = 0x5A,
  tag_runtime_visible_parameter_annotations_enum = 0x5B,
  tag_runtime_invisible_parameter_annotations_enum = 0x5C,
  tag_annotation_default_enum = 0x5D,
  tag_runtime_visible_type_annotations_enum = 0x5E,
  tag_runtime_invisible_type_annotations_enum = 0x5F,
  tag_enclosing_method_enum = 0x60,
  tag_bootstrap_methods_enum = 0x61,
  java_lang_ArithmeticException_enum = 0x62,
  java_lang_ArrayIndexOutOfBoundsException_enum = 0x63,
  java_lang_ArrayStoreException_enum = 0x64,
  java_lang_ClassCastException_enum = 0x65,
  java_lang_ClassNotFoundException_enum = 0x66,
  java_lang_CloneNotSupportedException_enum = 0x67,
  java_lang_IllegalAccessException_enum = 0x68,
  java_lang_IllegalArgumentException_enum = 0x69,
  java_lang_IllegalStateException_enum = 0x6A,
  java_lang_IllegalMonitorStateException_enum = 0x6B,
  java_lang_IllegalThreadStateException_enum = 0x6C,
  java_lang_IndexOutOfBoundsException_enum = 0x6D,
  java_lang_InstantiationException_enum = 0x6E,
  java_lang_InstantiationError_enum = 0x6F,
  java_lang_InterruptedException_enum = 0x70,
  java_lang_BootstrapMethodError_enum = 0x71,
  java_lang_LinkageError_enum = 0x72,
  java_lang_NegativeArraySizeException_enum = 0x73,
  java_lang_NoSuchFieldException_enum = 0x74,
  java_lang_NoSuchMethodException_enum = 0x75,
  java_lang_NullPointerException_enum = 0x76,
  java_lang_StringIndexOutOfBoundsException_enum = 0x77,
  java_lang_UnsupportedOperationException_enum = 0x78,
  java_lang_InvalidClassException_enum = 0x79,
  java_lang_reflect_InvocationTargetException_enum = 0x7A,
  java_lang_Exception_enum = 0x7B,
  java_lang_RuntimeException_enum = 0x7C,
  java_io_IOException_enum = 0x7D,
  java_security_PrivilegedActionException_enum = 0x7E,
  java_lang_AbstractMethodError_enum = 0x7F,
  java_lang_ClassCircularityError_enum = 0x80,
  java_lang_ClassFormatError_enum = 0x81,
  java_lang_UnsupportedClassVersionError_enum = 0x82,
  java_lang_Error_enum = 0x83,
  java_lang_ExceptionInInitializerError_enum = 0x84,
  java_lang_IllegalAccessError_enum = 0x85,
  java_lang_IncompatibleClassChangeError_enum = 0x86,
  java_lang_InternalError_enum = 0x87,
  java_lang_NoClassDefFoundError_enum = 0x88,
  java_lang_NoSuchFieldError_enum = 0x89,
  java_lang_NoSuchMethodError_enum = 0x8A,
  java_lang_OutOfMemoryError_enum = 0x8B,
  java_lang_UnsatisfiedLinkError_enum = 0x8C,
  java_lang_VerifyError_enum = 0x8D,
  java_lang_SecurityException_enum = 0x8E,
  java_lang_VirtualMachineError_enum = 0x8F,
  java_lang_StackOverflowError_enum = 0x90,
  java_lang_StackTraceElement_enum = 0x91,
  java_util_concurrent_locks_AbstractOwnableSynchronizer_enum = 0x92,
  java_util_concurrent_atomic_AtomicIntegerFieldUpdater_Impl_enum = 0x93,
  java_util_concurrent_atomic_AtomicLongFieldUpdater_CASUpdater_enum = 0x94,
  java_util_concurrent_atomic_AtomicLongFieldUpdater_LockedUpdater_enum = 0x95,
  java_util_concurrent_atomic_AtomicReferenceFieldUpdater_Impl_enum = 0x96,
  sun_misc_Contended_signature_enum = 0x97,
  java_lang_Math_enum = 0x98,
  java_lang_StrictMath_enum = 0x99,
  java_nio_Buffer_enum = 0x9A,
  sun_nio_cs_iso8859_1_Encoder_enum = 0x9B,
  java_math_BigInteger_enum = 0x9C,
  com_sun_crypto_provider_aescrypt_enum = 0x9D,
  com_sun_crypto_provider_cipherBlockChaining_enum = 0x9E,
  sun_security_provider_sha_enum = 0x9F,
  sun_security_provider_sha2_enum = 0xA0,
  sun_security_provider_sha5_enum = 0xA1,
  sun_security_provider_digestbase_enum = 0xA2,
  com_sun_crypto_provider_ghash_enum = 0xA3,
  java_util_zip_CRC32_enum = 0xA4,
  sun_misc_Unsafe_enum = 0xA5,
  java_lang_invoke_MethodHandleImpl_enum = 0xA6,
  sun_reflect_FieldInfo_enum = 0xA7,
  sun_reflect_MethodInfo_enum = 0xA8,
  sun_reflect_MagicAccessorImpl_enum = 0xA9,
  sun_reflect_MethodAccessorImpl_enum = 0xAA,
  sun_reflect_ConstructorAccessorImpl_enum = 0xAB,
  sun_reflect_SerializationConstructorAccessorImpl_enum = 0xAC,
  sun_reflect_DelegatingClassLoader_enum = 0xAD,
  sun_reflect_Reflection_enum = 0xAE,
  sun_reflect_CallerSensitive_enum = 0xAF,
  sun_reflect_CallerSensitive_signature_enum = 0xB0,
  checkedExceptions_name_enum = 0xB1,
  clazz_name_enum = 0xB2,
  exceptionTypes_name_enum = 0xB3,
  modifiers_name_enum = 0xB4,
  newConstructor_name_enum = 0xB5,
  newConstructor_signature_enum = 0xB6,
  newField_name_enum = 0xB7,
  newField_signature_enum = 0xB8,
  newMethod_name_enum = 0xB9,
  newMethod_signature_enum = 0xBA,
  invokeBasic_name_enum = 0xBB,
  linkToVirtual_name_enum = 0xBC,
  linkToStatic_name_enum = 0xBD,
  linkToSpecial_name_enum = 0xBE,
  linkToInterface_name_enum = 0xBF,
  compiledLambdaForm_name_enum = 0xC0,
  star_name_enum = 0xC1,
  invoke_name_enum = 0xC2,
  override_name_enum = 0xC3,
  parameterTypes_name_enum = 0xC4,
  returnType_name_enum = 0xC5,
  signature_name_enum = 0xC6,
  slot_name_enum = 0xC7,
  annotations_name_enum = 0xC8,
  index_name_enum = 0xC9,
  executable_name_enum = 0xCA,
  parameter_annotations_name_enum = 0xCB,
  annotation_default_name_enum = 0xCC,
  sun_reflect_ConstantPool_enum = 0xCD,
  ConstantPool_name_enum = 0xCE,
  sun_reflect_UnsafeStaticFieldAccessorImpl_enum = 0xCF,
  base_name_enum = 0xD0,
  type_annotations_name_enum = 0xD1,
  java_lang_invoke_CallSite_enum = 0xD2,
  java_lang_invoke_ConstantCallSite_enum = 0xD3,
  java_lang_invoke_DirectMethodHandle_enum = 0xD4,
  java_lang_invoke_MutableCallSite_enum = 0xD5,
  java_lang_invoke_VolatileCallSite_enum = 0xD6,
  java_lang_invoke_MethodHandle_enum = 0xD7,
  java_lang_invoke_MethodType_enum = 0xD8,
  java_lang_invoke_MethodType_signature_enum = 0xD9,
  java_lang_invoke_MemberName_signature_enum = 0xDA,
  java_lang_invoke_LambdaForm_signature_enum = 0xDB,
  java_lang_invoke_MethodHandle_signature_enum = 0xDC,
  java_lang_invoke_MemberName_enum = 0xDD,
  java_lang_invoke_MethodHandleNatives_enum = 0xDE,
  java_lang_invoke_LambdaForm_enum = 0xDF,
  java_lang_invoke_ForceInline_signature_enum = 0xE0,
  java_lang_invoke_DontInline_signature_enum = 0xE1,
  java_lang_invoke_InjectedProfile_signature_enum = 0xE2,
  java_lang_invoke_Stable_signature_enum = 0xE3,
  java_lang_invoke_LambdaForm_Compiled_signature_enum = 0xE4,
  java_lang_invoke_LambdaForm_Hidden_signature_enum = 0xE5,
  findMethodHandleType_name_enum = 0xE6,
  findMethodHandleType_signature_enum = 0xE7,
  linkMethodHandleConstant_name_enum = 0xE8,
  linkMethodHandleConstant_signature_enum = 0xE9,
  linkMethod_name_enum = 0xEA,
  linkMethod_signature_enum = 0xEB,
  linkCallSite_name_enum = 0xEC,
  linkCallSite_signature_enum = 0xED,
  setTargetNormal_name_enum = 0xEE,
  setTargetVolatile_name_enum = 0xEF,
  setTarget_signature_enum = 0xF0,
  object_initializer_name_enum = 0xF1,
  class_initializer_name_enum = 0xF2,
  println_name_enum = 0xF3,
  printStackTrace_name_enum = 0xF4,
  main_name_enum = 0xF5,
  name_name_enum = 0xF6,
  priority_name_enum = 0xF7,
  stillborn_name_enum = 0xF8,
  group_name_enum = 0xF9,
  daemon_name_enum = 0xFA,
  eetop_name_enum = 0xFB,
  thread_status_name_enum = 0xFC,
  run_method_name_enum = 0xFD,
  exit_method_name_enum = 0xFE,
  add_method_name_enum = 0xFF,
  remove_method_name_enum = 0x100,
  parent_name_enum = 0x101,
  threads_name_enum = 0x102,
  groups_name_enum = 0x103,
  maxPriority_name_enum = 0x104,
  destroyed_name_enum = 0x105,
  vmAllowSuspension_name_enum = 0x106,
  nthreads_name_enum = 0x107,
  ngroups_name_enum = 0x108,
  shutdown_method_name_enum = 0x109,
  finalize_method_name_enum = 0x10A,
  reference_lock_name_enum = 0x10B,
  reference_discovered_name_enum = 0x10C,
  run_finalization_name_enum = 0x10D,
  run_finalizers_on_exit_name_enum = 0x10E,
  uncaughtException_name_enum = 0x10F,
  dispatchUncaughtException_name_enum = 0x110,
  initializeSystemClass_name_enum = 0x111,
  loadClass_name_enum = 0x112,
  loadClassInternal_name_enum = 0x113,
  get_name_enum = 0x114,
  put_name_enum = 0x115,
  type_name_enum = 0x116,
  findNative_name_enum = 0x117,
  deadChild_name_enum = 0x118,
  addClass_name_enum = 0x119,
  throwIllegalAccessError_name_enum = 0x11A,
  getFromClass_name_enum = 0x11B,
  dispatch_name_enum = 0x11C,
  getSystemClassLoader_name_enum = 0x11D,
  fillInStackTrace_name_enum = 0x11E,
  fillInStackTrace0_name_enum = 0x11F,
  getCause_name_enum = 0x120,
  initCause_name_enum = 0x121,
  setProperty_name_enum = 0x122,
  getProperty_name_enum = 0x123,
  context_name_enum = 0x124,
  privilegedContext_name_enum = 0x125,
  contextClassLoader_name_enum = 0x126,
  inheritedAccessControlContext_name_enum = 0x127,
  isPrivileged_name_enum = 0x128,
  isAuthorized_name_enum = 0x129,
  getClassContext_name_enum = 0x12A,
  wait_name_enum = 0x12B,
  checkPackageAccess_name_enum = 0x12C,
  stackSize_name_enum = 0x12D,
  thread_id_name_enum = 0x12E,
  newInstance0_name_enum = 0x12F,
  limit_name_enum = 0x130,
  member_name_enum = 0x131,
  forName_name_enum = 0x132,
  forName0_name_enum = 0x133,
  isJavaIdentifierStart_name_enum = 0x134,
  isJavaIdentifierPart_name_enum = 0x135,
  exclusive_owner_thread_name_enum = 0x136,
  park_blocker_name_enum = 0x137,
  park_event_name_enum = 0x138,
  cache_field_name_enum = 0x139,
  value_name_enum = 0x13A,
  offset_name_enum = 0x13B,
  count_name_enum = 0x13C,
  hash_name_enum = 0x13D,
  numberOfLeadingZeros_name_enum = 0x13E,
  numberOfTrailingZeros_name_enum = 0x13F,
  bitCount_name_enum = 0x140,
  profile_name_enum = 0x141,
  equals_name_enum = 0x142,
  target_name_enum = 0x143,
  toString_name_enum = 0x144,
  values_name_enum = 0x145,
  receiver_name_enum = 0x146,
  vmtarget_name_enum = 0x147,
  next_target_name_enum = 0x148,
  vmloader_name_enum = 0x149,
  vmindex_name_enum = 0x14A,
  vmcount_name_enum = 0x14B,
  vmentry_name_enum = 0x14C,
  flags_name_enum = 0x14D,
  rtype_name_enum = 0x14E,
  ptypes_name_enum = 0x14F,
  form_name_enum = 0x150,
  basicType_name_enum = 0x151,
  append_name_enum = 0x152,
  klass_name_enum = 0x153,
  array_klass_name_enum = 0x154,
  oop_size_name_enum = 0x155,
  static_oop_field_count_name_enum = 0x156,
  protection_domain_name_enum = 0x157,
  init_lock_name_enum = 0x158,
  signers_name_enum = 0x159,
  loader_data_name_enum = 0x15A,
  dependencies_name_enum = 0x15B,
  input_stream_void_signature_enum = 0x15C,
  getFileURL_name_enum = 0x15D,
  getFileURL_signature_enum = 0x15E,
  definePackageInternal_name_enum = 0x15F,
  definePackageInternal_signature_enum = 0x160,
  getProtectionDomain_name_enum = 0x161,
  getProtectionDomain_signature_enum = 0x162,
  url_code_signer_array_void_signature_enum = 0x163,
  resolved_references_name_enum = 0x164,
  referencequeue_null_name_enum = 0x165,
  referencequeue_enqueued_name_enum = 0x166,
  register_method_name_enum = 0x167,
  hashCode_name_enum = 0x168,
  getClass_name_enum = 0x169,
  clone_name_enum = 0x16A,
  abs_name_enum = 0x16B,
  sin_name_enum = 0x16C,
  cos_name_enum = 0x16D,
  tan_name_enum = 0x16E,
  atan2_name_enum = 0x16F,
  sqrt_name_enum = 0x170,
  log_name_enum = 0x171,
  log10_name_enum = 0x172,
  pow_name_enum = 0x173,
  exp_name_enum = 0x174,
  min_name_enum = 0x175,
  max_name_enum = 0x176,
  addExact_name_enum = 0x177,
  decrementExact_name_enum = 0x178,
  incrementExact_name_enum = 0x179,
  multiplyExact_name_enum = 0x17A,
  negateExact_name_enum = 0x17B,
  subtractExact_name_enum = 0x17C,
  floatToRawIntBits_name_enum = 0x17D,
  floatToIntBits_name_enum = 0x17E,
  intBitsToFloat_name_enum = 0x17F,
  doubleToRawLongBits_name_enum = 0x180,
  doubleToLongBits_name_enum = 0x181,
  longBitsToDouble_name_enum = 0x182,
  reverseBytes_name_enum = 0x183,
  identityHashCode_name_enum = 0x184,
  currentTimeMillis_name_enum = 0x185,
  nanoTime_name_enum = 0x186,
  arraycopy_name_enum = 0x187,
  isInterrupted_name_enum = 0x188,
  currentThread_name_enum = 0x189,
  isAssignableFrom_name_enum = 0x18A,
  isInstance_name_enum = 0x18B,
  getModifiers_name_enum = 0x18C,
  isInterface_name_enum = 0x18D,
  isArray_name_enum = 0x18E,
  isPrimitive_name_enum = 0x18F,
  getSuperclass_name_enum = 0x190,
  getComponentType_name_enum = 0x191,
  getClassAccessFlags_name_enum = 0x192,
  getLength_name_enum = 0x193,
  getCallerClass_name_enum = 0x194,
  newArray_name_enum = 0x195,
  copyOf_name_enum = 0x196,
  copyOfRange_name_enum = 0x197,
  compareTo_name_enum = 0x198,
  indexOf_name_enum = 0x199,
  checkIndex_name_enum = 0x19A,
  encodeISOArray_name_enum = 0x19B,
  multiplyToLen_name_enum = 0x19C,
  squareToLen_name_enum = 0x19D,
  mulAdd_name_enum = 0x19E,
  montgomeryMultiply_name_enum = 0x19F,
  montgomerySquare_name_enum = 0x1A0,
  encryptBlock_name_enum = 0x1A1,
  decryptBlock_name_enum = 0x1A2,
  encrypt_name_enum = 0x1A3,
  decrypt_name_enum = 0x1A4,
  implCompress_name_enum = 0x1A5,
  implCompressMB_name_enum = 0x1A6,
  processBlocks_name_enum = 0x1A7,
  update_name_enum = 0x1A8,
  updateBytes_name_enum = 0x1A9,
  updateByteBuffer_name_enum = 0x1AA,
  allocateInstance_name_enum = 0x1AB,
  copyMemory_name_enum = 0x1AC,
  park_name_enum = 0x1AD,
  unpark_name_enum = 0x1AE,
  loadFence_name_enum = 0x1AF,
  storeFence_name_enum = 0x1B0,
  fullFence_name_enum = 0x1B1,
  profileBoolean_name_enum = 0x1B2,
  getObject_name_enum = 0x1B3,
  putObject_name_enum = 0x1B4,
  getBoolean_name_enum = 0x1B5,
  putBoolean_name_enum = 0x1B6,
  getByte_name_enum = 0x1B7,
  putByte_name_enum = 0x1B8,
  getShort_name_enum = 0x1B9,
  putShort_name_enum = 0x1BA,
  getChar_name_enum = 0x1BB,
  putChar_name_enum = 0x1BC,
  getInt_name_enum = 0x1BD,
  putInt_name_enum = 0x1BE,
  getLong_name_enum = 0x1BF,
  putLong_name_enum = 0x1C0,
  getFloat_name_enum = 0x1C1,
  putFloat_name_enum = 0x1C2,
  getDouble_name_enum = 0x1C3,
  putDouble_name_enum = 0x1C4,
  getObjectVolatile_name_enum = 0x1C5,
  putObjectVolatile_name_enum = 0x1C6,
  getBooleanVolatile_name_enum = 0x1C7,
  putBooleanVolatile_name_enum = 0x1C8,
  getByteVolatile_name_enum = 0x1C9,
  putByteVolatile_name_enum = 0x1CA,
  getShortVolatile_name_enum = 0x1CB,
  putShortVolatile_name_enum = 0x1CC,
  getCharVolatile_name_enum = 0x1CD,
  putCharVolatile_name_enum = 0x1CE,
  getIntVolatile_name_enum = 0x1CF,
  putIntVolatile_name_enum = 0x1D0,
  getLongVolatile_name_enum = 0x1D1,
  putLongVolatile_name_enum = 0x1D2,
  getFloatVolatile_name_enum = 0x1D3,
  putFloatVolatile_name_enum = 0x1D4,
  getDoubleVolatile_name_enum = 0x1D5,
  putDoubleVolatile_name_enum = 0x1D6,
  getAddress_name_enum = 0x1D7,
  putAddress_name_enum = 0x1D8,
  compareAndSwapObject_name_enum = 0x1D9,
  compareAndSwapLong_name_enum = 0x1DA,
  compareAndSwapInt_name_enum = 0x1DB,
  putOrderedObject_name_enum = 0x1DC,
  putOrderedLong_name_enum = 0x1DD,
  putOrderedInt_name_enum = 0x1DE,
  getAndAddInt_name_enum = 0x1DF,
  getAndAddLong_name_enum = 0x1E0,
  getAndSetInt_name_enum = 0x1E1,
  getAndSetLong_name_enum = 0x1E2,
  getAndSetObject_name_enum = 0x1E3,
  prefetchRead_name_enum = 0x1E4,
  prefetchWrite_name_enum = 0x1E5,
  prefetchReadStatic_name_enum = 0x1E6,
  prefetchWriteStatic_name_enum = 0x1E7,
  booleanValue_name_enum = 0x1E8,
  byteValue_name_enum = 0x1E9,
  charValue_name_enum = 0x1EA,
  shortValue_name_enum = 0x1EB,
  intValue_name_enum = 0x1EC,
  longValue_name_enum = 0x1ED,
  floatValue_name_enum = 0x1EE,
  doubleValue_name_enum = 0x1EF,
  valueOf_name_enum = 0x1F0,
  Boolean_valueOf_signature_enum = 0x1F1,
  Byte_valueOf_signature_enum = 0x1F2,
  Character_valueOf_signature_enum = 0x1F3,
  Short_valueOf_signature_enum = 0x1F4,
  Integer_valueOf_signature_enum = 0x1F5,
  Long_valueOf_signature_enum = 0x1F6,
  Float_valueOf_signature_enum = 0x1F7,
  Double_valueOf_signature_enum = 0x1F8,
  void_method_signature_enum = 0x1F9,
  void_boolean_signature_enum = 0x1FA,
  void_byte_signature_enum = 0x1FB,
  void_char_signature_enum = 0x1FC,
  void_short_signature_enum = 0x1FD,
  void_int_signature_enum = 0x1FE,
  void_long_signature_enum = 0x1FF,
  void_float_signature_enum = 0x200,
  void_double_signature_enum = 0x201,
  int_void_signature_enum = 0x202,
  int_int_signature_enum = 0x203,
  char_char_signature_enum = 0x204,
  short_short_signature_enum = 0x205,
  int_bool_signature_enum = 0x206,
  float_int_signature_enum = 0x207,
  double_long_signature_enum = 0x208,
  double_double_signature_enum = 0x209,
  int_float_signature_enum = 0x20A,
  long_int_signature_enum = 0x20B,
  long_long_signature_enum = 0x20C,
  long_double_signature_enum = 0x20D,
  byte_signature_enum = 0x20E,
  char_signature_enum = 0x20F,
  double_signature_enum = 0x210,
  float_signature_enum = 0x211,
  int_signature_enum = 0x212,
  long_signature_enum = 0x213,
  short_signature_enum = 0x214,
  bool_signature_enum = 0x215,
  void_signature_enum = 0x216,
  byte_array_signature_enum = 0x217,
  char_array_signature_enum = 0x218,
  int_array_signature_enum = 0x219,
  object_void_signature_enum = 0x21A,
  object_int_signature_enum = 0x21B,
  object_boolean_signature_enum = 0x21C,
  string_void_signature_enum = 0x21D,
  string_int_signature_enum = 0x21E,
  throwable_void_signature_enum = 0x21F,
  void_throwable_signature_enum = 0x220,
  throwable_throwable_signature_enum = 0x221,
  class_void_signature_enum = 0x222,
  class_int_signature_enum = 0x223,
  class_long_signature_enum = 0x224,
  class_boolean_signature_enum = 0x225,
  throwable_string_void_signature_enum = 0x226,
  string_array_void_signature_enum = 0x227,
  string_array_string_array_void_signature_enum = 0x228,
  thread_throwable_void_signature_enum = 0x229,
  thread_void_signature_enum = 0x22A,
  threadgroup_runnable_void_signature_enum = 0x22B,
  threadgroup_string_void_signature_enum = 0x22C,
  string_class_signature_enum = 0x22D,
  object_object_object_signature_enum = 0x22E,
  string_string_string_signature_enum = 0x22F,
  string_string_signature_enum = 0x230,
  classloader_string_long_signature_enum = 0x231,
  byte_array_void_signature_enum = 0x232,
  char_array_void_signature_enum = 0x233,
  int_int_void_signature_enum = 0x234,
  long_long_void_signature_enum = 0x235,
  void_classloader_signature_enum = 0x236,
  void_object_signature_enum = 0x237,
  void_class_signature_enum = 0x238,
  void_class_array_signature_enum = 0x239,
  void_string_signature_enum = 0x23A,
  object_array_object_signature_enum = 0x23B,
  object_object_array_object_signature_enum = 0x23C,
  exception_void_signature_enum = 0x23D,
  protectiondomain_signature_enum = 0x23E,
  accesscontrolcontext_signature_enum = 0x23F,
  class_protectiondomain_signature_enum = 0x240,
  thread_signature_enum = 0x241,
  thread_array_signature_enum = 0x242,
  threadgroup_signature_enum = 0x243,
  threadgroup_array_signature_enum = 0x244,
  class_array_signature_enum = 0x245,
  classloader_signature_enum = 0x246,
  object_signature_enum = 0x247,
  object_array_signature_enum = 0x248,
  class_signature_enum = 0x249,
  string_signature_enum = 0x24A,
  reference_signature_enum = 0x24B,
  referencequeue_signature_enum = 0x24C,
  executable_signature_enum = 0x24D,
  concurrenthashmap_signature_enum = 0x24E,
  String_StringBuilder_signature_enum = 0x24F,
  int_StringBuilder_signature_enum = 0x250,
  char_StringBuilder_signature_enum = 0x251,
  String_StringBuffer_signature_enum = 0x252,
  int_StringBuffer_signature_enum = 0x253,
  char_StringBuffer_signature_enum = 0x254,
  int_String_signature_enum = 0x255,
  codesource_permissioncollection_signature_enum = 0x256,
  double2_double_signature_enum = 0x257,
  int2_int_signature_enum = 0x258,
  long2_long_signature_enum = 0x259,
  arraycopy_signature_enum = 0x25A,
  isInterrupted_signature_enum = 0x25B,
  currentThread_signature_enum = 0x25C,
  newArray_signature_enum = 0x25D,
  copyOf_signature_enum = 0x25E,
  copyOfRange_signature_enum = 0x25F,
  equalsC_signature_enum = 0x260,
  encodeISOArray_signature_enum = 0x261,
  multiplyToLen_signature_enum = 0x262,
  squareToLen_signature_enum = 0x263,
  mulAdd_signature_enum = 0x264,
  montgomeryMultiply_signature_enum = 0x265,
  montgomerySquare_signature_enum = 0x266,
  byteArray_int_byteArray_int_signature_enum = 0x267,
  byteArray_int_int_byteArray_int_signature_enum = 0x268,
  implCompress_signature_enum = 0x269,
  implCompressMB_signature_enum = 0x26A,
  ghash_processBlocks_signature_enum = 0x26B,
  updateBytes_signature_enum = 0x26C,
  updateByteBuffer_signature_enum = 0x26D,
  allocateInstance_signature_enum = 0x26E,
  copyMemory_signature_enum = 0x26F,
  park_signature_enum = 0x270,
  profileBoolean_signature_enum = 0x271,
  getObject_signature_enum = 0x272,
  putObject_signature_enum = 0x273,
  getBoolean_signature_enum = 0x274,
  putBoolean_signature_enum = 0x275,
  getByte_signature_enum = 0x276,
  putByte_signature_enum = 0x277,
  getShort_signature_enum = 0x278,
  putShort_signature_enum = 0x279,
  getChar_signature_enum = 0x27A,
  putChar_signature_enum = 0x27B,
  getInt_signature_enum = 0x27C,
  putInt_signature_enum = 0x27D,
  getLong_signature_enum = 0x27E,
  putLong_signature_enum = 0x27F,
  getFloat_signature_enum = 0x280,
  putFloat_signature_enum = 0x281,
  getDouble_signature_enum = 0x282,
  putDouble_signature_enum = 0x283,
  getByte_raw_signature_enum = 0x284,
  putByte_raw_signature_enum = 0x285,
  getShort_raw_signature_enum = 0x286,
  putShort_raw_signature_enum = 0x287,
  getChar_raw_signature_enum = 0x288,
  putChar_raw_signature_enum = 0x289,
  putInt_raw_signature_enum = 0x28A,
  getFloat_raw_signature_enum = 0x28B,
  putFloat_raw_signature_enum = 0x28C,
  putDouble_raw_signature_enum = 0x28D,
  compareAndSwapObject_signature_enum = 0x28E,
  compareAndSwapLong_signature_enum = 0x28F,
  compareAndSwapInt_signature_enum = 0x290,
  getAndAddInt_signature_enum = 0x291,
  getAndAddLong_signature_enum = 0x292,
  getAndSetObject_signature_enum = 0x293,
  prefetch_signature_enum = 0x294,
  dummy_symbol_enum = 0x295,
  unknown_class_name_enum = 0x296,
  parallelCapable_name_enum = 0x297,
  java_lang_StackTraceElement_array_enum = 0x298,
  java_lang_management_ThreadState_enum = 0x299,
  java_lang_management_MemoryUsage_enum = 0x29A,
  java_lang_management_ThreadInfo_enum = 0x29B,
  sun_management_ManagementFactory_enum = 0x29C,
  sun_management_Sensor_enum = 0x29D,
  sun_management_Agent_enum = 0x29E,
  sun_management_DiagnosticCommandImpl_enum = 0x29F,
  sun_management_GarbageCollectorImpl_enum = 0x2A0,
  sun_management_ManagementFactoryHelper_enum = 0x2A1,
  getDiagnosticCommandMBean_name_enum = 0x2A2,
  getDiagnosticCommandMBean_signature_enum = 0x2A3,
  getGcInfoBuilder_name_enum = 0x2A4,
  getGcInfoBuilder_signature_enum = 0x2A5,
  com_sun_management_GcInfo_enum = 0x2A6,
  com_sun_management_GcInfo_constructor_signature_enum = 0x2A7,
  createGCNotification_name_enum = 0x2A8,
  createGCNotification_signature_enum = 0x2A9,
  createDiagnosticFrameworkNotification_name_enum = 0x2AA,
  createMemoryPoolMBean_name_enum = 0x2AB,
  createMemoryManagerMBean_name_enum = 0x2AC,
  createGarbageCollectorMBean_name_enum = 0x2AD,
  createMemoryPoolMBean_signature_enum = 0x2AE,
  createMemoryManagerMBean_signature_enum = 0x2AF,
  createGarbageCollectorMBean_signature_enum = 0x2B0,
  trigger_name_enum = 0x2B1,
  clear_name_enum = 0x2B2,
  trigger_method_signature_enum = 0x2B3,
  startAgent_name_enum = 0x2B4,
  startRemoteAgent_name_enum = 0x2B5,
  startLocalAgent_name_enum = 0x2B6,
  stopRemoteAgent_name_enum = 0x2B7,
  java_lang_management_ThreadInfo_constructor_signature_enum = 0x2B8,
  java_lang_management_ThreadInfo_with_locks_constructor_signature_enum = 0x2B9,
  long_long_long_long_void_signature_enum = 0x2BA,
  finalizer_histogram_klass_enum = 0x2BB,
  void_finalizer_histogram_entry_array_signature_enum = 0x2BC,
  get_finalizer_histogram_name_enum = 0x2BD,
  finalizer_histogram_entry_name_field_enum = 0x2BE,
  finalizer_histogram_entry_count_field_enum = 0x2BF,
  java_lang_management_MemoryPoolMXBean_enum = 0x2C0,
  java_lang_management_MemoryManagerMXBean_enum = 0x2C1,
  java_lang_management_GarbageCollectorMXBean_enum = 0x2C2,
  gcInfoBuilder_name_enum = 0x2C3,
  createMemoryPool_name_enum = 0x2C4,
  createMemoryManager_name_enum = 0x2C5,
  createGarbageCollector_name_enum = 0x2C6,
  createMemoryPool_signature_enum = 0x2C7,
  createMemoryManager_signature_enum = 0x2C8,
  createGarbageCollector_signature_enum = 0x2C9,
  addThreadDumpForMonitors_name_enum = 0x2CA,
  addThreadDumpForSynchronizers_name_enum = 0x2CB,
  addThreadDumpForMonitors_signature_enum = 0x2CC,
  addThreadDumpForSynchronizers_signature_enum = 0x2CD,
  sun_misc_VMSupport_enum = 0x2CE,
  appendToClassPathForInstrumentation_name_enum = 0x2CF,
  serializePropertiesToByteArray_name_enum = 0x2D0,
  serializePropertiesToByteArray_signature_enum = 0x2D1,
  serializeAgentPropertiesToByteArray_name_enum = 0x2D2,
  classRedefinedCount_name_enum = 0x2D3,
  classLoader_name_enum = 0x2D4,
  SID_LIMIT = 0x2D5,
  intptr_signature_enum = 0x212,
  register_method_signature_enum = 0x21A,
  unpark_signature_enum = 0x21A,
  loadFence_signature_enum = 0x1F9,
  storeFence_signature_enum = 0x1F9,
  fullFence_signature_enum = 0x1F9,
  getLong_raw_signature_enum = 0x20C,
  putLong_raw_signature_enum = 0x235,
  getDouble_raw_signature_enum = 0x20D,
  getAddress_raw_signature_enum = 0x20C,
  putAddress_raw_signature_enum = 0x235,
  putOrderedObject_signature_enum = 0x273,
  putOrderedLong_signature_enum = 0x27F,
  putOrderedInt_signature_enum = 0x27D,
  getAndSetInt_signature_enum = 0x291,
  getAndSetLong_signature_enum = 0x292,
  appendToClassPathForInstrumentation_signature_enum = 0x21D,
  FIRST_SID = 0x1,
};

/* 77 */
enum vmIntrinsics::ID : __int32
{
  _none = 0x0,
  _hashCode = 0x1,
  _getClass = 0x2,
  _clone = 0x3,
  _dabs = 0x4,
  _dsin = 0x5,
  _dcos = 0x6,
  _dtan = 0x7,
  _datan2 = 0x8,
  _dsqrt = 0x9,
  _dlog = 0xA,
  _dlog10 = 0xB,
  _dpow = 0xC,
  _dexp = 0xD,
  _min = 0xE,
  _max = 0xF,
  _addExactI = 0x10,
  _addExactL = 0x11,
  _decrementExactI = 0x12,
  _decrementExactL = 0x13,
  _incrementExactI = 0x14,
  _incrementExactL = 0x15,
  _multiplyExactI = 0x16,
  _multiplyExactL = 0x17,
  _negateExactI = 0x18,
  _negateExactL = 0x19,
  _subtractExactI = 0x1A,
  _subtractExactL = 0x1B,
  _floatToRawIntBits = 0x1C,
  _floatToIntBits = 0x1D,
  _intBitsToFloat = 0x1E,
  _doubleToRawLongBits = 0x1F,
  _doubleToLongBits = 0x20,
  _longBitsToDouble = 0x21,
  _numberOfLeadingZeros_i = 0x22,
  _numberOfLeadingZeros_l = 0x23,
  _numberOfTrailingZeros_i = 0x24,
  _numberOfTrailingZeros_l = 0x25,
  _bitCount_i = 0x26,
  _bitCount_l = 0x27,
  _reverseBytes_i = 0x28,
  _reverseBytes_l = 0x29,
  _reverseBytes_c = 0x2A,
  _reverseBytes_s = 0x2B,
  _identityHashCode = 0x2C,
  _currentTimeMillis = 0x2D,
  _nanoTime = 0x2E,
  _arraycopy = 0x2F,
  _isInterrupted = 0x30,
  _currentThread = 0x31,
  _isAssignableFrom = 0x32,
  _isInstance = 0x33,
  _getModifiers = 0x34,
  _isInterface = 0x35,
  _isArray = 0x36,
  _isPrimitive = 0x37,
  _getSuperclass = 0x38,
  _getComponentType = 0x39,
  _getClassAccessFlags = 0x3A,
  _getLength = 0x3B,
  _getCallerClass = 0x3C,
  _newArray = 0x3D,
  _copyOf = 0x3E,
  _copyOfRange = 0x3F,
  _equalsC = 0x40,
  _compareTo = 0x41,
  _indexOf = 0x42,
  _equals = 0x43,
  _checkIndex = 0x44,
  _encodeISOArray = 0x45,
  _multiplyToLen = 0x46,
  _squareToLen = 0x47,
  _mulAdd = 0x48,
  _montgomeryMultiply = 0x49,
  _montgomerySquare = 0x4A,
  _Reference_get = 0x4B,
  _aescrypt_encryptBlock = 0x4C,
  _aescrypt_decryptBlock = 0x4D,
  _cipherBlockChaining_encryptAESCrypt = 0x4E,
  _cipherBlockChaining_decryptAESCrypt = 0x4F,
  _sha_implCompress = 0x50,
  _sha2_implCompress = 0x51,
  _sha5_implCompress = 0x52,
  _digestBase_implCompressMB = 0x53,
  _ghash_processBlocks = 0x54,
  _updateCRC32 = 0x55,
  _updateBytesCRC32 = 0x56,
  _updateByteBufferCRC32 = 0x57,
  _allocateInstance = 0x58,
  _copyMemory = 0x59,
  _park = 0x5A,
  _unpark = 0x5B,
  _loadFence = 0x5C,
  _storeFence = 0x5D,
  _fullFence = 0x5E,
  _profileBoolean = 0x5F,
  _getObject = 0x60,
  _getBoolean = 0x61,
  _getByte = 0x62,
  _getShort = 0x63,
  _getChar = 0x64,
  _getInt = 0x65,
  _getLong = 0x66,
  _getFloat = 0x67,
  _getDouble = 0x68,
  _putObject = 0x69,
  _putBoolean = 0x6A,
  _putByte = 0x6B,
  _putShort = 0x6C,
  _putChar = 0x6D,
  _putInt = 0x6E,
  _putLong = 0x6F,
  _putFloat = 0x70,
  _putDouble = 0x71,
  _getObjectVolatile = 0x72,
  _getBooleanVolatile = 0x73,
  _getByteVolatile = 0x74,
  _getShortVolatile = 0x75,
  _getCharVolatile = 0x76,
  _getIntVolatile = 0x77,
  _getLongVolatile = 0x78,
  _getFloatVolatile = 0x79,
  _getDoubleVolatile = 0x7A,
  _putObjectVolatile = 0x7B,
  _putBooleanVolatile = 0x7C,
  _putByteVolatile = 0x7D,
  _putShortVolatile = 0x7E,
  _putCharVolatile = 0x7F,
  _putIntVolatile = 0x80,
  _putLongVolatile = 0x81,
  _putFloatVolatile = 0x82,
  _putDoubleVolatile = 0x83,
  _getByte_raw = 0x84,
  _getShort_raw = 0x85,
  _getChar_raw = 0x86,
  _getInt_raw = 0x87,
  _getLong_raw = 0x88,
  _getFloat_raw = 0x89,
  _getDouble_raw = 0x8A,
  _getAddress_raw = 0x8B,
  _putByte_raw = 0x8C,
  _putShort_raw = 0x8D,
  _putChar_raw = 0x8E,
  _putInt_raw = 0x8F,
  _putLong_raw = 0x90,
  _putFloat_raw = 0x91,
  _putDouble_raw = 0x92,
  _putAddress_raw = 0x93,
  _compareAndSwapObject = 0x94,
  _compareAndSwapLong = 0x95,
  _compareAndSwapInt = 0x96,
  _putOrderedObject = 0x97,
  _putOrderedLong = 0x98,
  _putOrderedInt = 0x99,
  _getAndAddInt = 0x9A,
  _getAndAddLong = 0x9B,
  _getAndSetInt = 0x9C,
  _getAndSetLong = 0x9D,
  _getAndSetObject = 0x9E,
  _prefetchRead = 0x9F,
  _prefetchWrite = 0xA0,
  _prefetchReadStatic = 0xA1,
  _prefetchWriteStatic = 0xA2,
  _fillInStackTrace = 0xA3,
  _StringBuilder_void = 0xA4,
  _StringBuilder_int = 0xA5,
  _StringBuilder_String = 0xA6,
  _StringBuilder_append_char = 0xA7,
  _StringBuilder_append_int = 0xA8,
  _StringBuilder_append_String = 0xA9,
  _StringBuilder_toString = 0xAA,
  _StringBuffer_void = 0xAB,
  _StringBuffer_int = 0xAC,
  _StringBuffer_String = 0xAD,
  _StringBuffer_append_char = 0xAE,
  _StringBuffer_append_int = 0xAF,
  _StringBuffer_append_String = 0xB0,
  _StringBuffer_toString = 0xB1,
  _Integer_toString = 0xB2,
  _String_String = 0xB3,
  _Object_init = 0xB4,
  _invoke = 0xB5,
  _invokeGeneric = 0xB6,
  _invokeBasic = 0xB7,
  _linkToVirtual = 0xB8,
  _linkToStatic = 0xB9,
  _linkToSpecial = 0xBA,
  _linkToInterface = 0xBB,
  _compiledLambdaForm = 0xBC,
  _booleanValue = 0xBD,
  _byteValue = 0xBE,
  _charValue = 0xBF,
  _shortValue = 0xC0,
  _intValue = 0xC1,
  _longValue = 0xC2,
  _floatValue = 0xC3,
  _doubleValue = 0xC4,
  _Boolean_valueOf = 0xC5,
  _Byte_valueOf = 0xC6,
  _Character_valueOf = 0xC7,
  _Short_valueOf = 0xC8,
  _Integer_valueOf = 0xC9,
  _Long_valueOf = 0xCA,
  _Float_valueOf = 0xCB,
  _Double_valueOf = 0xCC,
  ID_LIMIT = 0xCD,
  LAST_COMPILER_INLINE = 0xA2,
  FIRST_MH_SIG_POLY = 0xB6,
  FIRST_MH_STATIC = 0xB8,
  LAST_MH_SIG_POLY = 0xBB,
  FIRST_ID = 0x1,
};

/* 78 */
enum Phase::PhaseNumber : __int32
{
  Compiler = 0x0,
  Parser = 0x1,
  Remove_Useless = 0x2,
  Remove_Useless_And_Renumber_Live = 0x3,
  Optimistic = 0x4,
  GVN = 0x5,
  Ins_Select = 0x6,
  CFG = 0x7,
  BlockLayout = 0x8,
  Register_Allocation = 0x9,
  LIVE = 0xA,
  StringOpts = 0xB,
  Interference_Graph = 0xC,
  Coalesce = 0xD,
  Ideal_Loop = 0xE,
  Macro_Expand = 0xF,
  Peephole = 0x10,
  last_phase = 0x11,
};

/* 79 */
enum PhaseStringOpts::<unnamed_tag> : __int32
{
  unroll_string_copy_length = 0x6,
};

/* 80 */
enum StringConcat::<unnamed_tag> : __int32
{
  StringMode = 0x0,
  IntMode = 0x1,
  CharMode = 0x2,
  StringNullCheckMode = 0x3,
};

/* 81 */
enum Compile::<unnamed_tag> : __int32
{
  AliasIdxTop = 0x1,
  AliasIdxBot = 0x2,
  AliasIdxRaw = 0x3,
};

/* 82 */
enum CallGenerator::<unnamed_tag> : __int32
{
  xxxunusedxxx = 0x0,
};

/* 83 */
enum CompressedStream::<unnamed_tag> : __int32
{
  lg_H = 0x6,
  H = 0x40,
  L = 0xC0,
  MAX_i = 0x4,
};

/* 84 */
enum JavaThreadState : __int32
{
  _thread_uninitialized = 0x0,
  _thread_new = 0x2,
  _thread_new_trans = 0x3,
  _thread_in_native = 0x4,
  _thread_in_native_trans = 0x5,
  _thread_in_vm = 0x6,
  _thread_in_vm_trans = 0x7,
  _thread_in_Java = 0x8,
  _thread_in_Java_trans = 0x9,
  _thread_blocked = 0xA,
  _thread_blocked_trans = 0xB,
  _thread_max_state = 0xC,
};

/* 85 */
enum RegisterMap::<unnamed_tag> : __int32
{
  reg_count = 0x59,
  location_valid_type_size = 0x40,
  location_valid_size = 0x2,
};

/* 86 */
enum JavaThread::AsyncRequests : __int32
{
  _no_async_condition = 0x0,
  _async_exception = 0x1,
  _async_unsafe_access_error = 0x2,
};

/* 87 */
enum frame::deopt_state : __int32
{
  not_deoptimized = 0x0,
  is_deoptimized = 0x1,
  unknown = 0x2,
};

/* 88 */
enum InstanceKlass::ClassState : __int32
{
  allocated = 0x0,
  loaded = 0x1,
  linked = 0x2,
  being_initialized = 0x3,
  fully_initialized = 0x4,
  initialization_error = 0x5,
};

/* 89 */
enum CounterData::<unnamed_tag> : __int32
{
  count_off = 0x0,
  counter_cell_count = 0x1,
};

/* 90 */
enum VtableStubs::<unnamed_tag> : __int32
{
  N = 0x100,
  mask = 0xFF,
};

/* 91 */
enum ArrayCopyType : __int32
{
  ac_fast = 0x0,
  ac_checkcast = 0x1,
  ac_slow = 0x2,
  ac_generic = 0x3,
};

/* 92 */
enum Thread::SuspendFlags : __int32
{
  _external_suspend = 0x20000000,
  _ext_suspended = 0x40000000,
  _deopt_suspend = 0x10000000,
  _has_async_exception = 0x1,
  _critical_native_unlock = 0x2,
};

/* 93 */
enum RTMLockingCounters::<unnamed_tag> : __int32
{
  ABORT_STATUS_LIMIT = 0x6,
};

/* 94 */
enum SafepointSynchronize::SynchronizeState : __int32
{
  _not_synchronized = 0x0,
  _synchronizing = 0x1,
  _synchronized = 0x2,
};

/* 95 */
enum ReceiverTypeData::<unnamed_tag> : __int32
{
  receiver0_offset = 0x1,
  count0_offset = 0x2,
  receiver_type_row_cell_count = 0x2,
};

/* 96 */
enum ThreadProfilerMark::Region : __int32
{
  noRegion = 0x0,
  classLoaderRegion = 0x1,
  extraRegion = 0x2,
  maxRegion = 0x3,
};

/* 97 */
enum DataLayout::<unnamed_tag> : __int32
{
  counter_increment = 0x1,
};

/* 98 */
enum ThreadProfiler::UnknownTickSites : __int32
{
  ut_null_method = 0x0,
  ut_vtable_stubs = 0x1,
  ut_running_frame = 0x2,
  ut_calling_frame = 0x3,
  ut_no_pc = 0x4,
  ut_no_last_Java_frame = 0x5,
  ut_unknown_thread_state = 0x6,
  ut_end = 0x7,
};

/* 99 */
enum NamedCounter::CounterTag : __int32
{
  NoTag = 0x0,
  LockCounter = 0x1,
  EliminatedLockCounter = 0x2,
  BiasedLockingCounter = 0x3,
  RTMLockingCounter = 0x4,
};

/* 100 */
enum TickPosition : __int32
{
  tp_code = 0x0,
  tp_native = 0x1,
};

/* 101 */
enum FlatProfiler::<unnamed_tag> : __int32
{
  MillisecsPerTick = 0xA,
};

/* 102 */
enum frame::<unnamed_tag> : __int32
{
  pc_return_offset = 0x0,
  link_offset = 0x0,
  return_addr_offset = 0x1,
  sender_sp_offset = 0x2,
  interpreter_frame_result_handler_offset = 0x3,
  interpreter_frame_oop_temp_offset = 0x2,
  interpreter_frame_sender_sp_offset = 0xFFFFFFFF,
  interpreter_frame_last_sp_offset = 0xFFFFFFFE,
  interpreter_frame_method_offset = 0xFFFFFFFD,
  interpreter_frame_mdx_offset = 0xFFFFFFFC,
  interpreter_frame_cache_offset = 0xFFFFFFFB,
  interpreter_frame_locals_offset = 0xFFFFFFFA,
  interpreter_frame_bcx_offset = 0xFFFFFFF9,
  interpreter_frame_initial_sp_offset = 0xFFFFFFF8,
  interpreter_frame_monitor_block_top_offset = 0xFFFFFFF8,
  interpreter_frame_monitor_block_bottom_offset = 0xFFFFFFF8,
  entry_frame_call_wrapper_offset = 0x2,
  native_frame_initial_param_offset = 0x2,
};

/* 103 */
enum CompilerPhaseType : __int32
{
  PHASE_BEFORE_STRINGOPTS = 0x0,
  PHASE_AFTER_STRINGOPTS = 0x1,
  PHASE_BEFORE_REMOVEUSELESS = 0x2,
  PHASE_AFTER_PARSING = 0x3,
  PHASE_ITER_GVN1 = 0x4,
  PHASE_PHASEIDEAL_BEFORE_EA = 0x5,
  PHASE_ITER_GVN_AFTER_EA = 0x6,
  PHASE_ITER_GVN_AFTER_ELIMINATION = 0x7,
  PHASE_PHASEIDEALLOOP1 = 0x8,
  PHASE_PHASEIDEALLOOP2 = 0x9,
  PHASE_PHASEIDEALLOOP3 = 0xA,
  PHASE_CPP1 = 0xB,
  PHASE_ITER_GVN2 = 0xC,
  PHASE_PHASEIDEALLOOP_ITERATIONS = 0xD,
  PHASE_OPTIMIZE_FINISHED = 0xE,
  PHASE_GLOBAL_CODE_MOTION = 0xF,
  PHASE_FINAL_CODE = 0x10,
  PHASE_AFTER_EA = 0x11,
  PHASE_BEFORE_CLOOPS = 0x12,
  PHASE_AFTER_CLOOPS = 0x13,
  PHASE_BEFORE_BEAUTIFY_LOOPS = 0x14,
  PHASE_AFTER_BEAUTIFY_LOOPS = 0x15,
  PHASE_BEFORE_MATCHING = 0x16,
  PHASE_INCREMENTAL_INLINE = 0x17,
  PHASE_INCREMENTAL_BOXING_INLINE = 0x18,
  PHASE_END = 0x19,
  PHASE_FAILURE = 0x1A,
  PHASE_NUM_TYPES = 0x1B,
};

/* 104 */
enum Compile::ScratchBufferBlob : __int32
{
  MAX_inst_size = 0x400,
  MAX_locs_size = 0x80,
  MAX_const_size = 0x80,
  MAX_stubs_size = 0x80,
};

/* 105 */
enum LRG::<unnamed_tag> : __int32
{
  SPILL_REG = 0x752F,
};

/* 106 */
enum CatchProjNode::<unnamed_tag> : __int32
{
  fall_through_index = 0x0,
  catch_all_index = 0x1,
  no_handler_bci = 0xFFFFFFFF,
};

/* 107 */
enum IndexSet::<unnamed_tag> : __int32
{
  preallocated_block_list_size = 0x10,
};

/* 108 */
enum IndexSetIterator::<unnamed_tag> : __int32
{
  window_size = 0x5,
  window_mask = 0x1F,
  table_size = 0x20,
};

/* 109 */
enum MachProjNode::projType : __int32
{
  unmatched_proj = 0x0,
  fat_proj = 0x3E7,
};

/* 110 */
enum PhaseTransform::<unnamed_tag> : __int32
{
  _icon_min = 0xFFFFFFFC,
  _icon_max = 0x40,
  _lcon_min = 0xFFFFFFFC,
  _lcon_max = 0x40,
  _zcon_max = 0x13,
};

/* 111 */
enum PhaseIterGVN::remove_globally_dead_node::__l2::DeleteProgress : __int32
{
  PROCESS_INPUTS = 0x0,
  PROCESS_OUTPUTS = 0x1,
};

/* 112 */
enum MultiBranchData::<unnamed_tag> : __int32
{
  default_count_off_set = 0x0,
  default_disaplacement_off_set = 0x1,
  case_array_start = 0x2,
};

/* 113 */
enum ProfileData::<unnamed_tag> : __int32
{
  cell_size = 0x4,
};

/* 114 */
enum Bytecodes::Flags : __int32
{
  _bc_can_trap = 0x1,
  _bc_can_rewrite = 0x2,
  _fmt_has_c = 0x4,
  _fmt_has_j = 0x8,
  _fmt_has_k = 0x10,
  _fmt_has_i = 0x20,
  _fmt_has_o = 0x40,
  _fmt_has_nbo = 0x80,
  _fmt_has_u2 = 0x100,
  _fmt_has_u4 = 0x200,
  _fmt_not_variable = 0x400,
  _fmt_not_simple = 0x800,
  _all_fmt_bits = 0xFFC,
  _fmt_b = 0x400,
  _fmt_bc = 0x404,
  _fmt_bi = 0x420,
  _fmt_bkk = 0x510,
  _fmt_bJJ = 0x588,
  _fmt_bo2 = 0x540,
  _fmt_bo4 = 0x640,
};

/* 115 */
enum $5B22B5C898918000E87E681B79A5B03A : __int32
{
  JVM_CONSTANT_Invalid = 0x0,
  JVM_CONSTANT_InternalMin = 0x64,
  JVM_CONSTANT_UnresolvedClass = 0x64,
  JVM_CONSTANT_ClassIndex = 0x65,
  JVM_CONSTANT_StringIndex = 0x66,
  JVM_CONSTANT_UnresolvedClassInError = 0x67,
  JVM_CONSTANT_MethodHandleInError = 0x68,
  JVM_CONSTANT_MethodTypeInError = 0x69,
  JVM_CONSTANT_InternalMax = 0x69,
};

/* 116 */
enum BitData::<unnamed_tag> : __int32
{
  null_seen_flag = 0x0,
};

/* 117 */
enum JumpData::<unnamed_tag> : __int32
{
  taken_off_set = 0x0,
  displacement_off_set = 0x1,
  jump_cell_count = 0x2,
};

/* 118 */
enum CellTypeState::<unnamed_tag> : __int32
{
  info_mask = 0xFFFFFFF,
  bits_mask = 0xF0000000,
};

/* 119 */
enum BasicBlock::Constants : __int32
{
  _dead_basic_block = 0xFFFFFFFE,
  _unreached = 0xFFFFFFFF,
};

/* 120 */
typedef ReceiverTypeData::<unnamed_tag> RetData::<unnamed_tag>;

/* 121 */
enum BranchData::<unnamed_tag> : __int32
{
  not_taken_off_set = 0x2,
  branch_cell_count = 0x3,
};

/* 122 */
enum ArrayData::<unnamed_tag> : __int32
{
  array_len_off_set = 0x0,
  array_start_off_set = 0x1,
};

/* 123 */
enum GenerateOopMap::<unnamed_tag> : __int32
{
  bad_monitors = 0xFFFFFFFF,
};

/* 124 */
enum InlineTree::InlineStyle : __int32
{
  Inline_do_not_inline = 0x0,
  Inline_cha_is_monomorphic = 0x1,
  Inline_type_profile_monomorphic = 0x2,
};

/* 125 */
enum $175DE4ED1068220D6C78F2847869DDBD : __int32
{
  JVM_ACC_WRITTEN_FLAGS = 0x7FFF,
  JVM_ACC_MONITOR_MATCH = 0x10000000,
  JVM_ACC_HAS_MONITOR_BYTECODES = 0x20000000,
  JVM_ACC_HAS_LOOPS = 0x40000000,
  JVM_ACC_LOOPS_FLAG_INIT = 0x80000000,
  JVM_ACC_QUEUED = 0x1000000,
  JVM_ACC_NOT_C2_COMPILABLE = 0x2000000,
  JVM_ACC_NOT_C1_COMPILABLE = 0x4000000,
  JVM_ACC_NOT_C2_OSR_COMPILABLE = 0x8000000,
  JVM_ACC_HAS_LINE_NUMBER_TABLE = 0x100000,
  JVM_ACC_HAS_CHECKED_EXCEPTIONS = 0x400000,
  JVM_ACC_HAS_JSRS = 0x800000,
  JVM_ACC_IS_OLD = 0x10000,
  JVM_ACC_IS_OBSOLETE = 0x20000,
  JVM_ACC_IS_PREFIXED_NATIVE = 0x40000,
  JVM_ACC_ON_STACK = 0x80000,
  JVM_ACC_IS_DELETED = 0x8000,
  JVM_ACC_HAS_MIRANDA_METHODS = 0x10000000,
  JVM_ACC_HAS_VANILLA_CONSTRUCTOR = 0x20000000,
  JVM_ACC_HAS_FINALIZER = 0x40000000,
  JVM_ACC_IS_CLONEABLE = 0x80000000,
  JVM_ACC_HAS_FINAL_METHOD = 0x1000000,
  JVM_ACC_HAS_LOCAL_VARIABLE_TABLE = 0x200000,
  JVM_ACC_PROMOTED_FLAGS = 0x200000,
  JVM_ACC_FIELD_ACCESS_WATCHED = 0x2000,
  JVM_ACC_FIELD_MODIFICATION_WATCHED = 0x8000,
  JVM_ACC_FIELD_INTERNAL = 0x400,
  JVM_ACC_FIELD_STABLE = 0x20,
  JVM_ACC_FIELD_INITIALIZED_FINAL_UPDATE = 0x100,
  JVM_ACC_FIELD_HAS_GENERIC_SIGNATURE = 0x800,
  JVM_ACC_FIELD_INTERNAL_FLAGS = 0xAC20,
  JVM_ACC_FIELD_FLAGS = 0xFCFF,
};

/* 126 */
enum MemBarNode::<unnamed_type__kind> : __int32
{
  Standalone = 0x0,
  TrailingLoad = 0x1,
  TrailingStore = 0x2,
  LeadingStore = 0x3,
  TrailingLoadStore = 0x4,
  LeadingLoadStore = 0x5,
};

/* 127 */
enum ciMethodData::<unnamed_tag> : __int32
{
  empty_state = 0x0,
  immature_state = 0x1,
  mature_state = 0x2,
};

/* 128 */
enum Monitor::<unnamed_tag> : __int32
{
  _no_safepoint_check_flag = 0x1,
  _allow_vm_block_flag = 0x1,
  _as_suspend_equivalent_flag = 0x1,
};

/* 129 */
enum MethodData::<unnamed_tag> : __int32
{
  _trap_hist_limit = 0x14,
  _trap_hist_mask = 0xFF,
  _extra_data_count = 0x4,
};

/* 130 */
enum Opaque3Node::<unnamed_tag> : __int32
{
  RTM_OPT = 0x0,
};

/* 131 */
enum BitMap::RangeSizeHint : __int32
{
  unknown_range = 0x0,
  small_range = 0x1,
  large_range = 0x2,
};

/* 132 */
enum $6ACFE3AACD42E0A532FEEC7D82ACB2F3 : __int32
{
  initial_code_capacity = 0x4000,
  initial_stub_capacity = 0x1000,
  initial_const_capacity = 0x1000,
  initial_locs_capacity = 0xC00,
};

/* 133 */
enum relocInfo::<unnamed_tag> : __int32
{
  offset_unit = 0x1,
  format_width = 0x1,
};

/* 134 */
enum CompileBroker::<unnamed_tag> : __int32
{
  stop_compilation = 0x0,
  run_compilation = 0x1,
  shutdown_compilaton = 0x2,
};

/* 135 */
enum machPipelineResources : __int32
{
  resource_D0 = 0x0,
  resource_D1 = 0x1,
  resource_D2 = 0x2,
  resource_MS0 = 0x3,
  resource_MS1 = 0x4,
  resource_BR = 0x5,
  resource_FPU = 0x6,
  resource_ALU0 = 0x7,
  resource_ALU1 = 0x8,
  res_mask_D0 = 0x1,
  res_mask_D1 = 0x2,
  res_mask_D2 = 0x4,
  res_mask_DECODE = 0x7,
  res_mask_MS0 = 0x8,
  res_mask_MS1 = 0x10,
  res_mask_MEM = 0x18,
  res_mask_BR = 0x20,
  res_mask_FPU = 0x40,
  res_mask_ALU0 = 0x80,
  res_mask_ALU1 = 0x100,
  res_mask_ALU = 0x180,
  resource_count = 0x9,
};

/* 136 */
enum CodeBuffer::<unnamed_tag> : __int32
{
  sect_bits = 0x2,
  sect_mask = 0x3,
};

/* 137 */
enum Location::Where : __int32
{
  on_stack = 0x0,
  in_register = 0x1,
};

/* 138 */
enum Location::Type : __int32
{
  invalid = 0x0,
  normal = 0x1,
  oop = 0x2,
  int_in_long = 0x3,
  lng = 0x4,
  float_in_dbl = 0x5,
  dbl = 0x6,
  addr = 0x7,
  narrowoop = 0x8,
};

/* 139 */
enum Location::<unnamed_tag> : __int32
{
  TYPE_MASK = 0xF,
  TYPE_SHIFT = 0x0,
  WHERE_MASK = 0x10,
  WHERE_SHIFT = 0x4,
  OFFSET_MASK = 0xFFFFFFE0,
  OFFSET_SHIFT = 0x5,
};

/* 140 */
enum MachNode::AvoidBackToBackFlag : __int32
{
  AVOID_NONE = 0x0,
  AVOID_BEFORE = 0x100,
  AVOID_AFTER = 0x200,
  AVOID_BEFORE_AND_AFTER = 0x300,
};

/* 141 */
enum SCMemProjNode::<unnamed_tag> : __int32
{
  SCMEMPROJCON = 0xFFFFFFFE,
};

/* 142 */
enum InitializeNode::<unnamed_tag> : __int32
{
  Incomplete = 0x0,
  Complete = 0x1,
  WithArraycopy = 0x2,
};

/* 143 */
enum AllocateNode::<unnamed_tag> : __int32
{
  RawAddress = 0x5,
  AllocSize = 0x5,
  KlassNode = 0x6,
  InitialTest = 0x7,
  ALength = 0x8,
  ParmLimit = 0x9,
};

/* 144 */
enum MemBarNode::<unnamed_tag> : __int32
{
  Precedent = 0x5,
};

/* 145 */
enum Node_State : __int32
{
  Pre_Visit = 0x0,
  Visit = 0x1,
  Post_Visit = 0x2,
  Alt_Post_Visit = 0x3,
};

/* 146 */
enum Chunk::<unnamed_tag> : __int32
{
  slack = 0x14,
  tiny_size = 0xEC,
  init_size = 0x3EC,
  medium_size = 0x27EC,
  size = 0x7FEC,
  non_pool_size = 0x40C,
};

/* 147 */
enum markOopDesc::<unnamed_tag> : __int32
{
  lock_mask = 0x3,
  lock_mask_in_place = 0x3,
  biased_lock_mask = 0x7,
  biased_lock_mask_in_place = 0x7,
  biased_lock_bit_in_place = 0x4,
  age_mask = 0xF,
  age_mask_in_place = 0x78,
  epoch_mask = 0x3,
  epoch_mask_in_place = 0x180,
  cms_mask = 0x0,
  cms_mask_in_place = 0x0,
  hash_mask = 0x1FFFFFF,
  hash_mask_in_place = 0xFFFFFF80,
};

/* 148 */
enum AbstractLockNode::<unnamed_type__kind> : __int32
{
  Regular = 0x0,
  NonEscObj = 0x1,
  Coarsened = 0x2,
  Nested = 0x3,
};

/* 149 */
enum PhaseMacroExpand::prefetch_allocation::__l2::<unnamed_tag> : __int32
{
  fall_in_path = 0x1,
  pf_path = 0x2,
};

/* 150 */
enum PhaseMacroExpand::expand_allocate_common::__l10::<unnamed_tag> : __int32
{
  too_big_or_final_path = 0x1,
  need_gc_path = 0x2,
};

/* 151 */
enum PhaseMacroExpand::expand_allocate_common::__l2::<unnamed_tag> : __int32
{
  slow_result_path = 0x1,
  fast_result_path = 0x2,
};

/* 152 */
typedef PhaseMacroExpand::prefetch_allocation::__l2::<unnamed_tag> PhaseMacroExpand::expand_allocate_common::__l21::<unnamed_tag>;

/* 153 */
enum LoopLimitNode::<unnamed_tag> : __int32
{
  Init = 0x1,
  Limit = 0x2,
  Stride = 0x3,
};

/* 154 */
enum Method::VtableIndexFlag : __int32
{
  itable_index_max = 0xFFFFFFF6,
  pending_itable_index = 0xFFFFFFF7,
  invalid_vtable_index = 0xFFFFFFFC,
  garbage_vtable_index = 0xFFFFFFFD,
  nonvirtual_vtable_index = 0xFFFFFFFE,
};

/* 155 */
enum LibraryCallKit::LoadStoreKind : __int32
{
  LS_xadd = 0x0,
  LS_xchg = 0x1,
  LS_cmpxchg = 0x2,
};

/* 156 */
enum LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> : __int32
{
  _prim_0_path = 0x1,
  _prim_same_path = 0x2,
  _prim_1_path = 0x3,
  _ref_subtype_path = 0x4,
  _both_ref_path = 0x5,
  PATH_LIMIT = 0x6,
};

/* 157 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> LibraryCallKit::inline_native_Class_query::__l2::<unnamed_tag>;

/* 158 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> LibraryCallKit::inline_native_hashcode::__l2::<unnamed_tag>;

/* 159 */
typedef PhaseMacroExpand::expand_allocate_common::__l2::<unnamed_tag> LibraryCallKit::inline_native_isInterrupted::__l2::<unnamed_tag>;

/* 160 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> LibraryCallKit::inline_native_newArray::__l4::<unnamed_tag>;

/* 161 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> LibraryCallKit::generate_arraycopy::__l10::<unnamed_tag>;

/* 162 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> LibraryCallKit::inline_native_clone::__l5::<unnamed_tag>;

/* 163 */
enum Block::<unnamed_tag> : __int32
{
  not_empty = 0x0,
  empty_with_goto = 0x1,
  completely_empty = 0x2,
};

/* 164 */
enum ShenandoahSharedFlag::<unnamed_tag> : __int32
{
  UNSET = 0x0,
  SET = 0x1,
};

/* 165 */
enum CollectedHeap::Name : __int32
{
  Abstract = 0x0,
  SharedHeap = 0x1,
  GenCollectedHeap = 0x2,
  ParallelScavengeHeap = 0x3,
  G1CollectedHeap = 0x4,
  ShenandoahHeap = 0x5,
};

/* 166 */
enum ShenandoahHeap::GCStateBitPos : __int32
{
  HAS_FORWARDED_BITPOS = 0x0,
  MARKING_BITPOS = 0x1,
  EVACUATION_BITPOS = 0x2,
  UPDATEREFS_BITPOS = 0x3,
};

/* 167 */
enum ShenandoahHeap::GCState : __int32
{
  STABLE = 0x0,
  HAS_FORWARDED = 0x1,
  MARKING = 0x2,
  EVACUATION = 0x4,
  UPDATEREFS = 0x8,
};

/* 168 */
enum ShenandoahHeap::ShenandoahDegenPoint : __int32
{
  _degenerated_unset = 0x0,
  _degenerated_outside_cycle = 0x1,
  _degenerated_mark = 0x2,
  _degenerated_evac = 0x3,
  _degenerated_updaterefs = 0x4,
  _DEGENERATED_LIMIT = 0x5,
};

/* 169 */
enum ShenandoahAllocRequest::Type : __int32
{
  _alloc_shared = 0x0,
  _alloc_shared_gc = 0x1,
  _alloc_tlab = 0x2,
  _alloc_gclab = 0x3,
  _ALLOC_LIMIT = 0x4,
};

/* 170 */
enum ShenandoahLock::LockState : __int32
{
  unlocked = 0x0,
  locked = 0x1,
};

/* 171 */
enum VerifyOption : __int32
{
  VerifyOption_Default = 0x0,
  VerifyOption_G1UsePrevMarking = 0x0,
  VerifyOption_G1UseNextMarking = 0x1,
  VerifyOption_G1UseMarkWord = 0x2,
};

/* 172 */
enum GCCause::Cause : __int32
{
  _java_lang_system_gc = 0x0,
  _full_gc_alot = 0x1,
  _scavenge_alot = 0x2,
  _allocation_profiler = 0x3,
  _jvmti_force_gc = 0x4,
  _gc_locker = 0x5,
  _heap_inspection = 0x6,
  _heap_dump = 0x7,
  _wb_young_gc = 0x8,
  _wb_conc_mark = 0x9,
  _update_allocation_context_stats_inc = 0xA,
  _update_allocation_context_stats_full = 0xB,
  _no_gc = 0xC,
  _no_cause_specified = 0xD,
  _allocation_failure = 0xE,
  _tenured_generation_full = 0xF,
  _metadata_GC_threshold = 0x10,
  _cms_generation_full = 0x11,
  _cms_initial_mark = 0x12,
  _cms_final_remark = 0x13,
  _cms_concurrent_mark = 0x14,
  _old_generation_expanded_on_last_scavenge = 0x15,
  _old_generation_too_full_to_scavenge = 0x16,
  _adaptive_size_policy = 0x17,
  _g1_inc_collection_pause = 0x18,
  _g1_humongous_allocation = 0x19,
  _shenandoah_stop_vm = 0x1A,
  _shenandoah_metadata_gc_clear_softrefs = 0x1B,
  _shenandoah_allocation_failure_evac = 0x1C,
  _shenandoah_concurrent_gc = 0x1D,
  _shenandoah_upgrade_to_full_gc = 0x1E,
  _last_ditch_collection = 0x1F,
  _last_gc_cause = 0x20,
};

/* 173 */
enum CardTableModRefBS::CardValues : __int32
{
  clean_card = 0xFFFFFFFF,
  clean_card_mask = 0xFFFFFFE0,
  dirty_card = 0x0,
  precleaned_card = 0x1,
  claimed_card = 0x2,
  deferred_card = 0x4,
  last_card = 0x8,
  CT_MR_BS_last_reserved = 0x10,
};

/* 174 */
enum CardTableModRefBS::SomePublicConstants : __int32
{
  card_shift = 0x9,
  card_size = 0x200,
  card_size_in_words = 0x80,
};

/* 175 */
enum G1SATBCardTableModRefBS::G1CardValues : __int32
{
  g1_young_gen = 0x20,
};

/* 176 */
enum BarrierSet::Name : __int32
{
  ModRef = 0x0,
  CardTableModRef = 0x1,
  CardTableExtension = 0x2,
  G1SATBCT = 0x3,
  G1SATBCTLogging = 0x4,
  ShenandoahBarrierSet = 0x5,
  Other = 0x6,
  Uninit = 0x7,
};

/* 177 */
enum ciCallProfile::<unnamed_tag> : __int32
{
  MorphismLimit = 0x2,
};

/* 178 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> GraphKit::gen_instanceof::__l2::<unnamed_tag>;

/* 179 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> GraphKit::gen_checkcast::__l13::<unnamed_tag>;

/* 180 */
enum PointsToNode::NodeType : __int32
{
  UnknownType = 0x0,
  JavaObject = 0x1,
  LocalVar = 0x2,
  Field = 0x3,
  Arraycopy = 0x4,
};

/* 181 */
enum PointsToNode::EscapeState : __int32
{
  UnknownEscape = 0x0,
  NoEscape = 0x1,
  ArgEscape = 0x2,
  GlobalEscape = 0x3,
};

/* 182 */
enum PointsToNode::NodeFlags : __int32
{
  ScalarReplaceable = 0x1,
  PointsToUnknown = 0x2,
  ArraycopySrc = 0x4,
  ArraycopyDst = 0x8,
};

/* 183 */
enum BCEscapeAnalyzer::<unnamed_tag> : __int32
{
  ARG_OFFSET_MAX = 0x1F,
};

/* 184 */
enum CodeOffsets::<unnamed_tag> : __int32
{
  frame_never_safe = 0xFFFFFFFF,
};

/* 185 */
enum PhiNode::LoopSafety : __int32
{
  Safe = 0x0,
  Unsafe = 0x1,
  UnsafeLoop = 0x2,
};

/* 186 */
enum AbstractCompiler::<unnamed_tag> : __int32
{
  uninitialized = 0x0,
  initializing = 0x1,
  initialized = 0x2,
  failed = 0x3,
  shut_down = 0x4,
};

/* 187 */
typedef relocInfo::relocType OopMapValue::<unnamed_tag>;

/* 188 */
enum CFGEdge::<unnamed_tag> : __int32
{
  _open = 0x0,
  connected = 0x1,
  interior = 0x2,
};

/* 189 */
enum ValueTag : __int32
{
  intTag = 0x0,
  longTag = 0x1,
  floatTag = 0x2,
  doubleTag = 0x3,
  objectTag = 0x4,
  addressTag = 0x5,
  metaDataTag = 0x6,
  number_of_legal_tags = 0x7,
  voidTag = 0x7,
  illegalTag = 0x8,
  number_of_tags = 0x9,
};

/* 190 */
enum ValueStackArray::<unnamed_tag> : __int32
{
  esize = 0x4,
};

/* 191 */
enum Phi::Flag : __int32
{
  no_flag = 0x0,
  visited = 0x1,
  cannot_simplify = 0x2,
};

/* 192 */
typedef ValueStackArray::<unnamed_tag> BlockPairArray::<unnamed_tag>;

/* 193 */
enum Constant::CompareResult : __int32
{
  not_comparable = 0xFFFFFFFF,
  cond_false = 0x0,
  cond_true = 0x1,
};

/* 194 */
typedef ValueStackArray::<unnamed_tag> BlockBeginArray::<unnamed_tag>;

/* 195 */
enum Runtime1::StubID : __int32
{
  dtrace_object_alloc_id = 0x0,
  unwind_exception_id = 0x1,
  forward_exception_id = 0x2,
  throw_range_check_failed_id = 0x3,
  throw_index_exception_id = 0x4,
  throw_div0_exception_id = 0x5,
  throw_null_pointer_exception_id = 0x6,
  register_finalizer_id = 0x7,
  new_instance_id = 0x8,
  fast_new_instance_id = 0x9,
  fast_new_instance_init_check_id = 0xA,
  new_type_array_id = 0xB,
  new_object_array_id = 0xC,
  new_multi_array_id = 0xD,
  handle_exception_nofpu_id = 0xE,
  handle_exception_id = 0xF,
  handle_exception_from_callee_id = 0x10,
  throw_array_store_exception_id = 0x11,
  throw_class_cast_exception_id = 0x12,
  throw_incompatible_class_change_error_id = 0x13,
  slow_subtype_check_id = 0x14,
  monitorenter_id = 0x15,
  monitorenter_nofpu_id = 0x16,
  monitorexit_id = 0x17,
  monitorexit_nofpu_id = 0x18,
  deoptimize_id = 0x19,
  access_field_patching_id = 0x1A,
  load_klass_patching_id = 0x1B,
  load_mirror_patching_id = 0x1C,
  load_appendix_patching_id = 0x1D,
  g1_pre_barrier_slow_id = 0x1E,
  g1_post_barrier_slow_id = 0x1F,
  fpu2long_stub_id = 0x20,
  counter_overflow_id = 0x21,
  predicate_failed_trap_id = 0x22,
  number_of_ids = 0x23,
};

/* 196 */
enum ValueStack::Kind : __int32
{
  Parsing = 0x0,
  CallerState = 0x1,
  StateBefore = 0x2,
  StateAfter = 0x3,
  ExceptionState = 0x4,
  EmptyExceptionState = 0x5,
  BlockBeginState = 0x6,
};

/* 197 */
typedef ValueStackArray::<unnamed_tag> _XHandlerArray::<unnamed_tag>;

/* 198 */
enum Instruction::InstructionFlag : __int32
{
  NeedsNullCheckFlag = 0x0,
  CanTrapFlag = 0x1,
  DirectCompareFlag = 0x2,
  IsEliminatedFlag = 0x3,
  IsSafepointFlag = 0x4,
  IsStaticFlag = 0x5,
  IsStrictfpFlag = 0x6,
  NeedsStoreCheckFlag = 0x7,
  NeedsWriteBarrierFlag = 0x8,
  PreservesStateFlag = 0x9,
  TargetIsFinalFlag = 0xA,
  TargetIsLoadedFlag = 0xB,
  TargetIsStrictfpFlag = 0xC,
  UnorderedIsTrueFlag = 0xD,
  NeedsPatchingFlag = 0xE,
  ThrowIncompatibleClassChangeErrorFlag = 0xF,
  InvokeSpecialReceiverCheckFlag = 0x10,
  ProfileMDOFlag = 0x11,
  IsLinkedInBlockFlag = 0x12,
  NeedsRangeCheckFlag = 0x13,
  InWorkListFlag = 0x14,
  DeoptimizeOnException = 0x15,
  InstructionLastFlag = 0x16,
};

/* 199 */
enum Instruction::PinReason : __int32
{
  PinUnknown = 0x1,
  PinExplicitNullCheck = 0x8,
  PinStackForStateSplit = 0x1000,
  PinStateSplitConstructor = 0x2000,
  PinGlobalValueNumbering = 0x4000,
};

/* 200 */
typedef Phi::Flag BlockBegin::Flag;

/* 201 */
typedef ValueStackArray::<unnamed_tag> IRScopeArray::<unnamed_tag>;

/* 202 */
typedef ValueStackArray::<unnamed_tag> ValueArray::<unnamed_tag>;

/* 203 */
typedef relocInfo::relocType Goto::Direction;

/* 204 */
enum Instruction::Condition : __int32
{
  eql = 0x0,
  neq = 0x1,
  lss = 0x2,
  leq = 0x3,
  gtr = 0x4,
  geq = 0x5,
  aeq = 0x6,
  beq = 0x7,
};

/* 205 */
enum LIR_Code : __int32
{
  lir_none = 0x0,
  begin_op0 = 0x1,
  lir_word_align = 0x2,
  lir_label = 0x3,
  lir_nop = 0x4,
  lir_backwardbranch_target = 0x5,
  lir_std_entry = 0x6,
  lir_osr_entry = 0x7,
  lir_build_frame = 0x8,
  lir_fpop_raw = 0x9,
  lir_24bit_FPU = 0xA,
  lir_reset_FPU = 0xB,
  lir_breakpoint = 0xC,
  lir_rtcall = 0xD,
  lir_membar = 0xE,
  lir_membar_acquire = 0xF,
  lir_membar_release = 0x10,
  lir_membar_loadload = 0x11,
  lir_membar_storestore = 0x12,
  lir_membar_loadstore = 0x13,
  lir_membar_storeload = 0x14,
  lir_get_thread = 0x15,
  end_op0 = 0x16,
  begin_op1 = 0x17,
  lir_fxch = 0x18,
  lir_fld = 0x19,
  lir_ffree = 0x1A,
  lir_push = 0x1B,
  lir_pop = 0x1C,
  lir_null_check = 0x1D,
  lir_return = 0x1E,
  lir_leal = 0x1F,
  lir_neg = 0x20,
  lir_branch = 0x21,
  lir_cond_float_branch = 0x22,
  lir_move = 0x23,
  lir_prefetchr = 0x24,
  lir_prefetchw = 0x25,
  lir_convert = 0x26,
  lir_alloc_object = 0x27,
  lir_monaddr = 0x28,
  lir_roundfp = 0x29,
  lir_safepoint = 0x2A,
  lir_pack64 = 0x2B,
  lir_unpack64 = 0x2C,
  lir_unwind = 0x2D,
  end_op1 = 0x2E,
  begin_op2 = 0x2F,
  lir_cmp = 0x30,
  lir_cmp_l2i = 0x31,
  lir_ucmp_fd2i = 0x32,
  lir_cmp_fd2i = 0x33,
  lir_cmove = 0x34,
  lir_add = 0x35,
  lir_sub = 0x36,
  lir_mul = 0x37,
  lir_mul_strictfp = 0x38,
  lir_div = 0x39,
  lir_div_strictfp = 0x3A,
  lir_rem = 0x3B,
  lir_sqrt = 0x3C,
  lir_abs = 0x3D,
  lir_sin = 0x3E,
  lir_cos = 0x3F,
  lir_tan = 0x40,
  lir_log = 0x41,
  lir_log10 = 0x42,
  lir_exp = 0x43,
  lir_pow = 0x44,
  lir_logic_and = 0x45,
  lir_logic_or = 0x46,
  lir_logic_xor = 0x47,
  lir_shl = 0x48,
  lir_shr = 0x49,
  lir_ushr = 0x4A,
  lir_alloc_array = 0x4B,
  lir_throw = 0x4C,
  lir_compare_to = 0x4D,
  lir_xadd = 0x4E,
  lir_xchg = 0x4F,
  end_op2 = 0x50,
  begin_op3 = 0x51,
  lir_idiv = 0x52,
  lir_irem = 0x53,
  end_op3 = 0x54,
  begin_opJavaCall = 0x55,
  lir_static_call = 0x56,
  lir_optvirtual_call = 0x57,
  lir_icvirtual_call = 0x58,
  lir_virtual_call = 0x59,
  lir_dynamic_call = 0x5A,
  end_opJavaCall = 0x5B,
  begin_opArrayCopy = 0x5C,
  lir_arraycopy = 0x5D,
  end_opArrayCopy = 0x5E,
  begin_opUpdateCRC32 = 0x5F,
  lir_updatecrc32 = 0x60,
  end_opUpdateCRC32 = 0x61,
  begin_opLock = 0x62,
  lir_lock = 0x63,
  lir_unlock = 0x64,
  end_opLock = 0x65,
  begin_delay_slot = 0x66,
  lir_delay_slot = 0x67,
  end_delay_slot = 0x68,
  begin_opTypeCheck = 0x69,
  lir_instanceof = 0x6A,
  lir_checkcast = 0x6B,
  lir_store_check = 0x6C,
  end_opTypeCheck = 0x6D,
  begin_opCompareAndSwap = 0x6E,
  lir_cas_long = 0x6F,
  lir_cas_obj = 0x70,
  lir_cas_int = 0x71,
  end_opCompareAndSwap = 0x72,
  begin_opMDOProfile = 0x73,
  lir_profile_call = 0x74,
  lir_profile_type = 0x75,
  end_opMDOProfile = 0x76,
  begin_opAssert = 0x77,
  lir_assert = 0x78,
  end_opAssert = 0x79,
};

/* 206 */
typedef ValueStackArray::<unnamed_tag> ValueMapEntryArray::<unnamed_tag>;

/* 207 */
typedef ValueStackArray::<unnamed_tag> ValueMapArray::<unnamed_tag>;

/* 208 */
enum Monitor::lock_types : __int32
{
  event = 0x0,
  special = 0x1,
  suspend_resume = 0x2,
  leaf = 0x4,
  safepoint = 0xE,
  barrier = 0xF,
  nonleaf = 0x10,
  max_nonleaf = 0x394,
  native = 0x395,
};

/* 209 */
enum PatchingStub::PatchID : __int32
{
  access_field_id = 0x0,
  load_klass_id = 0x1,
  load_mirror_id = 0x2,
  load_appendix_id = 0x3,
};

/* 210 */
enum CompLevel : __int32
{
  CompLevel_any = 0xFFFFFFFF,
  CompLevel_all = 0xFFFFFFFF,
  CompLevel_none = 0x0,
  CompLevel_simple = 0x1,
  CompLevel_limited_profile = 0x2,
  CompLevel_full_profile = 0x3,
  CompLevel_full_optimization = 0x4,
  CompLevel_highest_tier = 0x4,
  CompLevel_initial_compile = 0x3,
};

/* 211 */
enum FieldInfo::FieldOffset : __int32
{
  access_flags_offset = 0x0,
  name_index_offset = 0x1,
  signature_index_offset = 0x2,
  initval_index_offset = 0x3,
  low_packed_offset = 0x4,
  high_packed_offset = 0x5,
  field_slots = 0x6,
};

/* 212 */
enum vframeStreamCommon::<unnamed_type__mode> : __int32
{
  interpreted_mode = 0x0,
  compiled_mode = 0x1,
  at_end_mode = 0x2,
};

/* 213 */
typedef NativeJump::Intel_specific_constants NativeMovConstReg::Intel_specific_constants;

/* 214 */
typedef NativeJump::Intel_specific_constants NativeMovRegMem::Intel_specific_constants;

/* 215 */
enum JavaThread::StackGuardState : __int32
{
  stack_guard_unused = 0x0,
  stack_guard_yellow_disabled = 0x1,
  stack_guard_enabled = 0x2,
};

/* 216 */
enum LIR_PatchCode : __int32
{
  lir_patch_none = 0x0,
  lir_patch_low = 0x1,
  lir_patch_high = 0x2,
  lir_patch_normal = 0x3,
};

/* 217 */
typedef ValueStackArray::<unnamed_tag> CodeStubArray::<unnamed_tag>;

/* 218 */
enum DebugInformationRecorder::<unnamed_tag> : __int32
{
  serialized_null = 0x0,
};

/* 219 */
enum LIR_OprDesc::OprKind : __int32
{
  pointer_value = 0x0,
  stack_value = 0x1,
  cpu_register = 0x3,
  fpu_register = 0x5,
  illegal_value = 0x7,
};

/* 220 */
typedef relocInfo::relocType LIR_OprDesc::OprMask;

/* 221 */
enum PeriodicTask::<unnamed_tag> : __int32
{
  max_tasks = 0xA,
  interval_gran = 0xA,
  min_interval = 0xA,
  max_interval = 0x2710,
};

/* 222 */
enum LIR_OpVisitState::OprMode : __int32
{
  inputMode = 0x0,
  firstMode = 0x0,
  tempMode = 0x1,
  outputMode = 0x2,
  numModes = 0x3,
  invalidMode = 0xFFFFFFFF,
};

/* 223 */
enum $9237198D3FAE6C440639C12D74E840FA : __int32
{
  no_frame_size = 0xFFFFFFFF,
};

/* 224 */
enum $689EEC8C0F6D02670C570C5E3F3DE01E : __int32
{
  lo_word_offset_in_bytes = 0x0,
  hi_word_offset_in_bytes = 0x4,
};

/* 225 */
enum nmethod::<unnamed_tag> : __int32
{
  in_use = 0x0,
  not_entrant = 0x1,
  zombie = 0x2,
  unloaded = 0x3,
};

/* 226 */
enum ShenandoahHeapRegion::RegionState : __int32
{
  _empty_uncommitted = 0x0,
  _empty_committed = 0x1,
  _regular = 0x2,
  _humongous_start = 0x3,
  _humongous_cont = 0x4,
  _pinned_humongous_start = 0x5,
  _cset = 0x6,
  _pinned = 0x7,
  _pinned_cset = 0x8,
  _trash = 0x9,
};

/* 227 */
enum $AFD5B9E0A1398D5A65E8F282BE7BF08E : __int32
{
  ac_failed = 0xFFFFFFFF,
  ac_ok = 0x0,
};

/* 228 */
enum PatchingStub::constants : __int32
{
  patch_info_size = 0x3,
};

/* 229 */
enum LIR_Condition : __int32
{
  lir_cond_equal = 0x0,
  lir_cond_notEqual = 0x1,
  lir_cond_less = 0x2,
  lir_cond_lessEqual = 0x3,
  lir_cond_greaterEqual = 0x4,
  lir_cond_greater = 0x5,
  lir_cond_belowEqual = 0x6,
  lir_cond_aboveEqual = 0x7,
  lir_cond_always = 0x8,
  lir_cond_unknown = 0xFFFFFFFF,
};

/* 230 */
enum LIR_Assembler::<unnamed_tag> : __int32
{
  call_stub_size = 0xF,
  exception_handler_size = 0xAF,
  deopt_handler_size = 0xA,
};

/* 231 */
typedef relocInfo::relocType ShenandoahControlThread::GCMode;

/* 232 */
enum ConcurrentGCThread::CGC_flag_type : __int32
{
  CGC_nil = 0x0,
  CGC_dont_suspend = 0x1,
  CGC_CGC_safepoint = 0x2,
  CGC_VM_safepoint = 0x4,
};

/* 233 */
enum SurrogateLockerThread::SLT_msg_type : __int32
{
  empty = 0x0,
  acquirePLL = 0x1,
  releaseAndNotifyPLL = 0x2,
};

/* 234 */
enum CallInfo::CallKind : __int32
{
  direct_call = 0x0,
  vtable_call = 0x1,
  itable_call = 0x2,
  unknown_kind = 0xFFFFFFFF,
};

/* 235 */
enum RelocIterator::<unnamed_tag> : __int32
{
  SECT_LIMIT = 0x3,
};

/* 236 */
typedef ValueStackArray::<unnamed_tag> boolArray::<unnamed_tag>;

/* 237 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::BoundArray::<unnamed_tag>;

/* 238 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::BoundMap::<unnamed_tag>;

/* 239 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::AccessIndexedArray::<unnamed_tag>;

/* 240 */
typedef ValueStackArray::<unnamed_tag> intArray::<unnamed_tag>;

/* 241 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::InstructionArray::<unnamed_tag>;

/* 242 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::AccessIndexedInfoArray::<unnamed_tag>;

/* 243 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::BlockBeginArray::<unnamed_tag>;

/* 244 */
typedef ValueStackArray::<unnamed_tag> RangeCheckEliminator::IntegerMap::<unnamed_tag>;

/* 245 */
typedef ValueStackArray::<unnamed_tag> ValueSetArray::<unnamed_tag>;

/* 246 */
typedef ValueStackArray::<unnamed_tag> SwitchRangeArray::<unnamed_tag>;

/* 247 */
typedef ValueStackArray::<unnamed_tag> LIR_OpArray::<unnamed_tag>;

/* 248 */
enum LIRGenerator::VregFlag : __int32
{
  must_start_in_memory = 0x0,
  callee_saved = 0x1,
  byte_reg = 0x2,
  num_vreg_flags = 0x3,
};

/* 249 */
typedef ValueStackArray::<unnamed_tag> NodeArray::<unnamed_tag>;

/* 250 */
enum LIR_MoveKind : __int32
{
  lir_move_normal = 0x0,
  lir_move_volatile = 0x1,
  lir_move_unaligned = 0x2,
  lir_move_wide = 0x3,
  lir_move_max_flag = 0x4,
};

/* 251 */
typedef relocInfo::relocType TypeEntries::<unnamed_tag>;

/* 252 */
typedef ValueStackArray::<unnamed_tag> LIR_OprArray::<unnamed_tag>;

/* 253 */
enum TypeStackSlotEntries::<unnamed_tag> : __int32
{
  stack_slot_entry = 0x0,
  type_entry = 0x1,
  per_arg_cell_count = 0x2,
};

/* 254 */
enum LIR_OprDesc::OprShift : __int32
{
  kind_shift = 0x0,
  type_shift = 0x3,
  size_shift = 0x7,
  destroys_shift = 0x9,
  last_use_shift = 0xA,
  is_fpu_stack_offset_shift = 0xB,
  virtual_shift = 0xC,
  is_xmm_shift = 0xD,
  data_shift = 0xE,
  reg1_shift = 0xE,
  reg2_shift = 0x17,
};

/* 255 */
enum LIR_OprDesc::OprSize : __int32
{
  single_size = 0x0,
  double_size = 0x80,
};

/* 256 */
enum LIR_OprDesc::<unnamed_tag> : __int32
{
  vreg_base = 0x59,
  vreg_max = 0x3FFFF,
};

/* 257 */
enum LIR_OpArrayCopy::Flags : __int32
{
  src_null_check = 0x1,
  dst_null_check = 0x2,
  src_pos_positive_check = 0x4,
  dst_pos_positive_check = 0x8,
  length_positive_check = 0x10,
  src_range_check = 0x20,
  dst_range_check = 0x40,
  type_check = 0x80,
  overlapping = 0x100,
  unaligned = 0x200,
  src_objarray = 0x400,
  dst_objarray = 0x800,
  all_flags = 0xFFF,
};

/* 258 */
typedef relocInfo::relocType LIR_OprDesc::OprType;

/* 259 */
enum InvocationCounter::PublicConstants : __int32
{
  count_increment = 0x8,
  count_mask_value = 0xFFFFFFF8,
  count_shift = 0x3,
  count_limit = 0x10000000,
};

/* 260 */
typedef ValueStackArray::<unnamed_tag> LIRItemArray::<unnamed_tag>;

/* 261 */
typedef Address::ScaleFactor LIR_Address::Scale;

/* 262 */
typedef ValueStackArray::<unnamed_tag> BasicTypeArray::<unnamed_tag>;

/* 263 */
enum LIR_OprDesc::OprBits : __int32
{
  pointer_bits = 0x1,
  kind_bits = 0x3,
  type_bits = 0x4,
  size_bits = 0x2,
  destroys_bits = 0x1,
  virtual_bits = 0x1,
  is_xmm_bits = 0x1,
  last_use_bits = 0x1,
  is_fpu_stack_offset_bits = 0x1,
  non_data_bits = 0xE,
  data_bits = 0x12,
  reg_bits = 0x9,
};

/* 264 */
enum IntervalUseKind : __int32
{
  noUse = 0x0,
  loopEndMarker = 0x1,
  shouldHaveRegister = 0x2,
  mustHaveRegister = 0x3,
  firstValidKind = 0x1,
  lastValidKind = 0x3,
};

/* 265 */
typedef ValueStackArray::<unnamed_tag> UseKindArray::<unnamed_tag>;

/* 266 */
typedef ValueStackArray::<unnamed_tag> IntervalArray::<unnamed_tag>;

/* 267 */
enum LinearScanWalker::<unnamed_tag> : __int32
{
  any_reg = 0xFFFFFFFF,
};

/* 268 */
enum ControlFlowOptimizer::<unnamed_tag> : __int32
{
  ShortLoopSize = 0x5,
};

/* 269 */
enum IntervalKind : __int32
{
  fixedKind = 0x0,
  anyKind = 0x1,
  nofKinds = 0x2,
  firstKind = 0x0,
};

/* 270 */
typedef ValueStackArray::<unnamed_tag> IntervalsArray::<unnamed_tag>;

/* 271 */
enum IntervalState : __int32
{
  unhandledState = 0x0,
  activeState = 0x1,
  inactiveState = 0x2,
  handledState = 0x3,
  invalidState = 0xFFFFFFFF,
};

/* 272 */
enum IntervalSpillState : __int32
{
  noDefinitionFound = 0x0,
  oneDefinitionFound = 0x1,
  oneMoveInserted = 0x2,
  storeAtDefinition = 0x3,
  startInMemory = 0x4,
  noOptimization = 0x5,
};

/* 273 */
typedef LinearScanWalker::<unnamed_tag> LinearScan::<unnamed_tag>;

/* 274 */
typedef ValueStackArray::<unnamed_tag> OopMapArray::<unnamed_tag>;

/* 275 */
enum $C2B708C7E3FC18538B66FB3C44A39503 : __int32
{
  pd_nof_cpu_regs_frame_map = 0x8,
  pd_nof_fpu_regs_frame_map = 0x8,
  pd_nof_xmm_regs_frame_map = 0x8,
  pd_nof_caller_save_cpu_regs_frame_map = 0x6,
  pd_nof_caller_save_fpu_regs_frame_map = 0x8,
  pd_nof_caller_save_xmm_regs_frame_map = 0x8,
  pd_nof_cpu_regs_reg_alloc = 0x6,
  pd_nof_fpu_regs_reg_alloc = 0x6,
  pd_nof_cpu_regs_linearscan = 0x8,
  pd_nof_fpu_regs_linearscan = 0x8,
  pd_nof_xmm_regs_linearscan = 0x8,
  pd_first_cpu_reg = 0x0,
  pd_last_cpu_reg = 0x5,
  pd_first_byte_reg = 0x2,
  pd_last_byte_reg = 0x5,
  pd_first_fpu_reg = 0x8,
  pd_last_fpu_reg = 0xF,
  pd_first_xmm_reg = 0x10,
  pd_last_xmm_reg = 0x17,
};

/* 276 */
enum FrameMap::<unnamed_tag> : __int32
{
  nof_cpu_regs = 0x8,
  nof_fpu_regs = 0x8,
  nof_cpu_regs_reg_alloc = 0x6,
  nof_fpu_regs_reg_alloc = 0x6,
  max_nof_caller_save_cpu_regs = 0x6,
  nof_caller_save_fpu_regs = 0x8,
  spill_slot_size_in_bytes = 0x4,
};

/* 277 */
enum $11B4815E84944E8AF567CC826A1DDA4F : __int32
{
  float_saved_as_double = 0x1,
};

/* 278 */
typedef ValueStackArray::<unnamed_tag> ScopeValueArray::<unnamed_tag>;

/* 279 */
typedef ValueStackArray::<unnamed_tag> LIR_OpListArray::<unnamed_tag>;

/* 280 */
enum LIR_OpVisitState::<unnamed_tag> : __int32
{
  maxNumberOfOperands = 0x14,
  maxNumberOfInfos = 0x4,
};

/* 281 */
enum UseCountComputer::<unnamed_tag> : __int32
{
  max_recurse_depth = 0x14,
};

/* 282 */
enum $0ACE9F85EDE39145047E65A6045D0582 : __int32
{
  strict_fp_requires_explicit_rounding = 0x1,
};

/* 283 */
typedef ValueStackArray::<unnamed_tag> ExceptionInfoArray::<unnamed_tag>;

/* 284 */
enum TimerName : __int32
{
  _t_compile = 0x0,
  _t_setup = 0x1,
  _t_buildIR = 0x2,
  _t_optimize_blocks = 0x3,
  _t_optimize_null_checks = 0x4,
  _t_rangeCheckElimination = 0x5,
  _t_emit_lir = 0x6,
  _t_linearScan = 0x7,
  _t_lirGeneration = 0x8,
  _t_lir_schedule = 0x9,
  _t_codeemit = 0xA,
  _t_codeinstall = 0xB,
  max_phase_timers = 0xC,
};

/* 285 */
enum ShenandoahPhaseTimings::Phase : __int32
{
  conc_reset = 0x0,
  init_mark_gross = 0x1,
  init_mark = 0x2,
  accumulate_stats = 0x3,
  make_parsable = 0x4,
  init_update_region_states = 0x5,
  scan_roots = 0x6,
  scan_TotalWork = 0x7,
  scan_ThreadRoots = 0x8,
  scan_CodeCacheRoots = 0x9,
  scan_UniverseRoots = 0xA,
  scan_JNIRoots = 0xB,
  scan_JVMTIWeakRoots = 0xC,
  scan_JFRWeakRoots = 0xD,
  scan_JNIWeakRoots = 0xE,
  scan_StringTableRoots = 0xF,
  scan_ResolvedMethodTableRoots = 0x10,
  scan_VMGlobalRoots = 0x11,
  scan_VMWeakRoots = 0x12,
  scan_ObjectSynchronizerRoots = 0x13,
  scan_FlatProfilerRoots = 0x14,
  scan_ManagementRoots = 0x15,
  scan_SystemDictionaryRoots = 0x16,
  scan_CLDGRoots = 0x17,
  scan_JVMTIRoots = 0x18,
  scan_StringDedupTableRoots = 0x19,
  scan_StringDedupQueueRoots = 0x1A,
  scan_StringDedupThreadRoots = 0x1B,
  scan_FinishQueues = 0x1C,
  resize_tlabs = 0x1D,
  conc_mark = 0x1E,
  conc_preclean = 0x1F,
  final_mark_gross = 0x20,
  final_mark = 0x21,
  update_roots = 0x22,
  update_TotalWork = 0x23,
  update_ThreadRoots = 0x24,
  update_CodeCacheRoots = 0x25,
  update_UniverseRoots = 0x26,
  update_JNIRoots = 0x27,
  update_JVMTIWeakRoots = 0x28,
  update_JFRWeakRoots = 0x29,
  update_JNIWeakRoots = 0x2A,
  update_StringTableRoots = 0x2B,
  update_ResolvedMethodTableRoots = 0x2C,
  update_VMGlobalRoots = 0x2D,
  update_VMWeakRoots = 0x2E,
  update_ObjectSynchronizerRoots = 0x2F,
  update_FlatProfilerRoots = 0x30,
  update_ManagementRoots = 0x31,
  update_SystemDictionaryRoots = 0x32,
  update_CLDGRoots = 0x33,
  update_JVMTIRoots = 0x34,
  update_StringDedupTableRoots = 0x35,
  update_StringDedupQueueRoots = 0x36,
  update_StringDedupThreadRoots = 0x37,
  update_FinishQueues = 0x38,
  finish_queues = 0x39,
  weakrefs = 0x3A,
  weakrefs_process = 0x3B,
  weakrefs_enqueue = 0x3C,
  weak_roots = 0x3D,
  weak_roots_TotalWork = 0x3E,
  weak_roots_ThreadRoots = 0x3F,
  weak_roots_CodeCacheRoots = 0x40,
  weak_roots_UniverseRoots = 0x41,
  weak_roots_JNIRoots = 0x42,
  weak_roots_JVMTIWeakRoots = 0x43,
  weak_roots_JFRWeakRoots = 0x44,
  weak_roots_JNIWeakRoots = 0x45,
  weak_roots_StringTableRoots = 0x46,
  weak_roots_ResolvedMethodTableRoots = 0x47,
  weak_roots_VMGlobalRoots = 0x48,
  weak_roots_VMWeakRoots = 0x49,
  weak_roots_ObjectSynchronizerRoots = 0x4A,
  weak_roots_FlatProfilerRoots = 0x4B,
  weak_roots_ManagementRoots = 0x4C,
  weak_roots_SystemDictionaryRoots = 0x4D,
  weak_roots_CLDGRoots = 0x4E,
  weak_roots_JVMTIRoots = 0x4F,
  weak_roots_StringDedupTableRoots = 0x50,
  weak_roots_StringDedupQueueRoots = 0x51,
  weak_roots_StringDedupThreadRoots = 0x52,
  weak_roots_FinishQueues = 0x53,
  purge = 0x54,
  purge_class_unload = 0x55,
  purge_par = 0x56,
  purge_metadata = 0x57,
  purge_cldg = 0x58,
  purge_string_dedup = 0x59,
  final_update_region_states = 0x5A,
  retire_tlabs = 0x5B,
  choose_cset = 0x5C,
  final_rebuild_freeset = 0x5D,
  init_evac = 0x5E,
  evac_TotalWork = 0x5F,
  evac_ThreadRoots = 0x60,
  evac_CodeCacheRoots = 0x61,
  evac_UniverseRoots = 0x62,
  evac_JNIRoots = 0x63,
  evac_JVMTIWeakRoots = 0x64,
  evac_JFRWeakRoots = 0x65,
  evac_JNIWeakRoots = 0x66,
  evac_StringTableRoots = 0x67,
  evac_ResolvedMethodTableRoots = 0x68,
  evac_VMGlobalRoots = 0x69,
  evac_VMWeakRoots = 0x6A,
  evac_ObjectSynchronizerRoots = 0x6B,
  evac_FlatProfilerRoots = 0x6C,
  evac_ManagementRoots = 0x6D,
  evac_SystemDictionaryRoots = 0x6E,
  evac_CLDGRoots = 0x6F,
  evac_JVMTIRoots = 0x70,
  evac_StringDedupTableRoots = 0x71,
  evac_StringDedupQueueRoots = 0x72,
  evac_StringDedupThreadRoots = 0x73,
  evac_FinishQueues = 0x74,
  conc_cleanup_early = 0x75,
  conc_evac = 0x76,
  init_update_refs_gross = 0x77,
  init_update_refs = 0x78,
  init_update_refs_retire_gclabs = 0x79,
  init_update_refs_prepare = 0x7A,
  conc_update_refs = 0x7B,
  final_update_refs_gross = 0x7C,
  final_update_refs = 0x7D,
  final_update_refs_finish_work = 0x7E,
  final_update_refs_roots = 0x7F,
  final_update_TotalWork = 0x80,
  final_update_ThreadRoots = 0x81,
  final_update_CodeCacheRoots = 0x82,
  final_update_UniverseRoots = 0x83,
  final_update_JNIRoots = 0x84,
  final_update_JVMTIWeakRoots = 0x85,
  final_update_JFRWeakRoots = 0x86,
  final_update_JNIWeakRoots = 0x87,
  final_update_StringTableRoots = 0x88,
  final_update_ResolvedMethodTableRoots = 0x89,
  final_update_VMGlobalRoots = 0x8A,
  final_update_VMWeakRoots = 0x8B,
  final_update_ObjectSynchronizerRoots = 0x8C,
  final_update_FlatProfilerRoots = 0x8D,
  final_update_ManagementRoots = 0x8E,
  final_update_SystemDictionaryRoots = 0x8F,
  final_update_CLDGRoots = 0x90,
  final_update_JVMTIRoots = 0x91,
  final_update_StringDedupTableRoots = 0x92,
  final_update_StringDedupQueueRoots = 0x93,
  final_update_StringDedupThreadRoots = 0x94,
  final_update_FinishQueues = 0x95,
  final_update_refs_update_region_states = 0x96,
  final_update_refs_trash_cset = 0x97,
  final_update_refs_rebuild_freeset = 0x98,
  conc_cleanup_complete = 0x99,
  degen_gc_gross = 0x9A,
  degen_gc = 0x9B,
  degen_gc_update_roots = 0x9C,
  degen_gc_update_TotalWork = 0x9D,
  degen_gc_update_ThreadRoots = 0x9E,
  degen_gc_update_CodeCacheRoots = 0x9F,
  degen_gc_update_UniverseRoots = 0xA0,
  degen_gc_update_JNIRoots = 0xA1,
  degen_gc_update_JVMTIWeakRoots = 0xA2,
  degen_gc_update_JFRWeakRoots = 0xA3,
  degen_gc_update_JNIWeakRoots = 0xA4,
  degen_gc_update_StringTableRoots = 0xA5,
  degen_gc_update_ResolvedMethodTableRoots = 0xA6,
  degen_gc_update_VMGlobalRoots = 0xA7,
  degen_gc_update_VMWeakRoots = 0xA8,
  degen_gc_update_ObjectSynchronizerRoots = 0xA9,
  degen_gc_update_FlatProfilerRoots = 0xAA,
  degen_gc_update_ManagementRoots = 0xAB,
  degen_gc_update_SystemDictionaryRoots = 0xAC,
  degen_gc_update_CLDGRoots = 0xAD,
  degen_gc_update_JVMTIRoots = 0xAE,
  degen_gc_update_StringDedupTableRoots = 0xAF,
  degen_gc_update_StringDedupQueueRoots = 0xB0,
  degen_gc_update_StringDedupThreadRoots = 0xB1,
  degen_gc_update_FinishQueues = 0xB2,
  full_gc_gross = 0xB3,
  full_gc = 0xB4,
  full_gc_heapdump_pre = 0xB5,
  full_gc_prepare = 0xB6,
  full_gc_scan_roots = 0xB7,
  full_gc_scan_roots_TotalWork = 0xB8,
  full_gc_scan_roots_ThreadRoots = 0xB9,
  full_gc_scan_roots_CodeCacheRoots = 0xBA,
  full_gc_scan_roots_UniverseRoots = 0xBB,
  full_gc_scan_roots_JNIRoots = 0xBC,
  full_gc_scan_roots_JVMTIWeakRoots = 0xBD,
  full_gc_scan_roots_JFRWeakRoots = 0xBE,
  full_gc_scan_roots_JNIWeakRoots = 0xBF,
  full_gc_scan_roots_StringTableRoots = 0xC0,
  full_gc_scan_roots_ResolvedMethodTableRoots = 0xC1,
  full_gc_scan_roots_VMGlobalRoots = 0xC2,
  full_gc_scan_roots_VMWeakRoots = 0xC3,
  full_gc_scan_roots_ObjectSynchronizerRoots = 0xC4,
  full_gc_scan_roots_FlatProfilerRoots = 0xC5,
  full_gc_scan_roots_ManagementRoots = 0xC6,
  full_gc_scan_roots_SystemDictionaryRoots = 0xC7,
  full_gc_scan_roots_CLDGRoots = 0xC8,
  full_gc_scan_roots_JVMTIRoots = 0xC9,
  full_gc_scan_roots_StringDedupTableRoots = 0xCA,
  full_gc_scan_roots_StringDedupQueueRoots = 0xCB,
  full_gc_scan_roots_StringDedupThreadRoots = 0xCC,
  full_gc_scan_roots_FinishQueues = 0xCD,
  full_gc_update_roots = 0xCE,
  full_gc_update_roots_TotalWork = 0xCF,
  full_gc_update_roots_ThreadRoots = 0xD0,
  full_gc_update_roots_CodeCacheRoots = 0xD1,
  full_gc_update_roots_UniverseRoots = 0xD2,
  full_gc_update_roots_JNIRoots = 0xD3,
  full_gc_update_roots_JVMTIWeakRoots = 0xD4,
  full_gc_update_roots_JFRWeakRoots = 0xD5,
  full_gc_update_roots_JNIWeakRoots = 0xD6,
  full_gc_update_roots_StringTableRoots = 0xD7,
  full_gc_update_roots_ResolvedMethodTableRoots = 0xD8,
  full_gc_update_roots_VMGlobalRoots = 0xD9,
  full_gc_update_roots_VMWeakRoots = 0xDA,
  full_gc_update_roots_ObjectSynchronizerRoots = 0xDB,
  full_gc_update_roots_FlatProfilerRoots = 0xDC,
  full_gc_update_roots_ManagementRoots = 0xDD,
  full_gc_update_roots_SystemDictionaryRoots = 0xDE,
  full_gc_update_roots_CLDGRoots = 0xDF,
  full_gc_update_roots_JVMTIRoots = 0xE0,
  full_gc_update_roots_StringDedupTableRoots = 0xE1,
  full_gc_update_roots_StringDedupQueueRoots = 0xE2,
  full_gc_update_roots_StringDedupThreadRoots = 0xE3,
  full_gc_update_roots_FinishQueues = 0xE4,
  full_gc_mark = 0xE5,
  full_gc_mark_finish_queues = 0xE6,
  full_gc_weakrefs = 0xE7,
  full_gc_weakrefs_process = 0xE8,
  full_gc_weakrefs_enqueue = 0xE9,
  full_gc_weak_roots = 0xEA,
  full_gc_weak_roots_TotalWork = 0xEB,
  full_gc_weak_roots_ThreadRoots = 0xEC,
  full_gc_weak_roots_CodeCacheRoots = 0xED,
  full_gc_weak_roots_UniverseRoots = 0xEE,
  full_gc_weak_roots_JNIRoots = 0xEF,
  full_gc_weak_roots_JVMTIWeakRoots = 0xF0,
  full_gc_weak_roots_JFRWeakRoots = 0xF1,
  full_gc_weak_roots_JNIWeakRoots = 0xF2,
  full_gc_weak_roots_StringTableRoots = 0xF3,
  full_gc_weak_roots_ResolvedMethodTableRoots = 0xF4,
  full_gc_weak_roots_VMGlobalRoots = 0xF5,
  full_gc_weak_roots_VMWeakRoots = 0xF6,
  full_gc_weak_roots_ObjectSynchronizerRoots = 0xF7,
  full_gc_weak_roots_FlatProfilerRoots = 0xF8,
  full_gc_weak_roots_ManagementRoots = 0xF9,
  full_gc_weak_roots_SystemDictionaryRoots = 0xFA,
  full_gc_weak_roots_CLDGRoots = 0xFB,
  full_gc_weak_roots_JVMTIRoots = 0xFC,
  full_gc_weak_roots_StringDedupTableRoots = 0xFD,
  full_gc_weak_roots_StringDedupQueueRoots = 0xFE,
  full_gc_weak_roots_StringDedupThreadRoots = 0xFF,
  full_gc_weak_roots_FinishQueues = 0x100,
  full_gc_purge = 0x101,
  full_gc_purge_class_unload = 0x102,
  full_gc_purge_par = 0x103,
  full_gc_purge_metadata = 0x104,
  full_gc_purge_cldg = 0x105,
  full_gc_purge_string_dedup = 0x106,
  full_gc_calculate_addresses = 0x107,
  full_gc_calculate_addresses_regular = 0x108,
  full_gc_calculate_addresses_humong = 0x109,
  full_gc_adjust_pointers = 0x10A,
  full_gc_adjust_roots = 0x10B,
  full_gc_adjust_roots_TotalWork = 0x10C,
  full_gc_adjust_roots_ThreadRoots = 0x10D,
  full_gc_adjust_roots_CodeCacheRoots = 0x10E,
  full_gc_adjust_roots_UniverseRoots = 0x10F,
  full_gc_adjust_roots_JNIRoots = 0x110,
  full_gc_adjust_roots_JVMTIWeakRoots = 0x111,
  full_gc_adjust_roots_JFRWeakRoots = 0x112,
  full_gc_adjust_roots_JNIWeakRoots = 0x113,
  full_gc_adjust_roots_StringTableRoots = 0x114,
  full_gc_adjust_roots_ResolvedMethodTableRoots = 0x115,
  full_gc_adjust_roots_VMGlobalRoots = 0x116,
  full_gc_adjust_roots_VMWeakRoots = 0x117,
  full_gc_adjust_roots_ObjectSynchronizerRoots = 0x118,
  full_gc_adjust_roots_FlatProfilerRoots = 0x119,
  full_gc_adjust_roots_ManagementRoots = 0x11A,
  full_gc_adjust_roots_SystemDictionaryRoots = 0x11B,
  full_gc_adjust_roots_CLDGRoots = 0x11C,
  full_gc_adjust_roots_JVMTIRoots = 0x11D,
  full_gc_adjust_roots_StringDedupTableRoots = 0x11E,
  full_gc_adjust_roots_StringDedupQueueRoots = 0x11F,
  full_gc_adjust_roots_StringDedupThreadRoots = 0x120,
  full_gc_adjust_roots_FinishQueues = 0x121,
  full_gc_copy_objects = 0x122,
  full_gc_copy_objects_regular = 0x123,
  full_gc_copy_objects_humong = 0x124,
  full_gc_copy_objects_reset_complete = 0x125,
  full_gc_copy_objects_rebuild = 0x126,
  full_gc_resize_tlabs = 0x127,
  full_gc_heapdump_post = 0x128,
  conc_uncommit = 0x129,
  heap_iteration_roots = 0x12A,
  heap_iteration_roots_TotalWork = 0x12B,
  heap_iteration_roots_ThreadRoots = 0x12C,
  heap_iteration_roots_CodeCacheRoots = 0x12D,
  heap_iteration_roots_UniverseRoots = 0x12E,
  heap_iteration_roots_JNIRoots = 0x12F,
  heap_iteration_roots_JVMTIWeakRoots = 0x130,
  heap_iteration_roots_JFRWeakRoots = 0x131,
  heap_iteration_roots_JNIWeakRoots = 0x132,
  heap_iteration_roots_StringTableRoots = 0x133,
  heap_iteration_roots_ResolvedMethodTableRoots = 0x134,
  heap_iteration_roots_VMGlobalRoots = 0x135,
  heap_iteration_roots_VMWeakRoots = 0x136,
  heap_iteration_roots_ObjectSynchronizerRoots = 0x137,
  heap_iteration_roots_FlatProfilerRoots = 0x138,
  heap_iteration_roots_ManagementRoots = 0x139,
  heap_iteration_roots_SystemDictionaryRoots = 0x13A,
  heap_iteration_roots_CLDGRoots = 0x13B,
  heap_iteration_roots_JVMTIRoots = 0x13C,
  heap_iteration_roots_StringDedupTableRoots = 0x13D,
  heap_iteration_roots_StringDedupQueueRoots = 0x13E,
  heap_iteration_roots_StringDedupThreadRoots = 0x13F,
  heap_iteration_roots_FinishQueues = 0x140,
  verifier_roots = 0x141,
  verifier_roots_TotalWork = 0x142,
  verifier_roots_ThreadRoots = 0x143,
  verifier_roots_CodeCacheRoots = 0x144,
  verifier_roots_UniverseRoots = 0x145,
  verifier_roots_JNIRoots = 0x146,
  verifier_roots_JVMTIWeakRoots = 0x147,
  verifier_roots_JFRWeakRoots = 0x148,
  verifier_roots_JNIWeakRoots = 0x149,
  verifier_roots_StringTableRoots = 0x14A,
  verifier_roots_ResolvedMethodTableRoots = 0x14B,
  verifier_roots_VMGlobalRoots = 0x14C,
  verifier_roots_VMWeakRoots = 0x14D,
  verifier_roots_ObjectSynchronizerRoots = 0x14E,
  verifier_roots_FlatProfilerRoots = 0x14F,
  verifier_roots_ManagementRoots = 0x150,
  verifier_roots_SystemDictionaryRoots = 0x151,
  verifier_roots_CLDGRoots = 0x152,
  verifier_roots_JVMTIRoots = 0x153,
  verifier_roots_StringDedupTableRoots = 0x154,
  verifier_roots_StringDedupQueueRoots = 0x155,
  verifier_roots_StringDedupThreadRoots = 0x156,
  verifier_roots_FinishQueues = 0x157,
  _num_phases = 0x158,
  _invalid_phase = 0x158,
};

/* 286 */
enum SvcGCMarker::reason_type : __int32
{
  MINOR = 0x0,
  FULL = 0x1,
  OTHER = 0x2,
};

/* 287 */
enum VM_Operation::Mode : __int32
{
  _safepoint = 0x0,
  _no_safepoint = 0x1,
  _concurrent = 0x2,
  _async_safepoint = 0x3,
};

/* 288 */
enum VM_Operation::VMOp_Type : __int32
{
  VMOp_Dummy = 0x0,
  VMOp_ThreadStop = 0x1,
  VMOp_ThreadDump = 0x2,
  VMOp_PrintThreads = 0x3,
  VMOp_FindDeadlocks = 0x4,
  VMOp_ForceSafepoint = 0x5,
  VMOp_ForceAsyncSafepoint = 0x6,
  VMOp_Deoptimize = 0x7,
  VMOp_DeoptimizeFrame = 0x8,
  VMOp_DeoptimizeAll = 0x9,
  VMOp_ZombieAll = 0xA,
  VMOp_UnlinkSymbols = 0xB,
  VMOp_Verify = 0xC,
  VMOp_PrintJNI = 0xD,
  VMOp_HeapDumper = 0xE,
  VMOp_DeoptimizeTheWorld = 0xF,
  VMOp_CollectForMetadataAllocation = 0x10,
  VMOp_GC_HeapInspection = 0x11,
  VMOp_GenCollectFull = 0x12,
  VMOp_GenCollectFullConcurrent = 0x13,
  VMOp_GenCollectForAllocation = 0x14,
  VMOp_ParallelGCFailedAllocation = 0x15,
  VMOp_ParallelGCSystemGC = 0x16,
  VMOp_CGC_Operation = 0x17,
  VMOp_CMS_Initial_Mark = 0x18,
  VMOp_CMS_Final_Remark = 0x19,
  VMOp_G1CollectFull = 0x1A,
  VMOp_G1CollectForAllocation = 0x1B,
  VMOp_G1IncCollectionPause = 0x1C,
  VMOp_DestroyAllocationContext = 0x1D,
  VMOp_EnableBiasedLocking = 0x1E,
  VMOp_RevokeBias = 0x1F,
  VMOp_BulkRevokeBias = 0x20,
  VMOp_PopulateDumpSharedSpace = 0x21,
  VMOp_JNIFunctionTableCopier = 0x22,
  VMOp_RedefineClasses = 0x23,
  VMOp_GetOwnedMonitorInfo = 0x24,
  VMOp_GetObjectMonitorUsage = 0x25,
  VMOp_GetCurrentContendedMonitor = 0x26,
  VMOp_GetStackTrace = 0x27,
  VMOp_GetMultipleStackTraces = 0x28,
  VMOp_GetAllStackTraces = 0x29,
  VMOp_GetThreadListStackTraces = 0x2A,
  VMOp_GetFrameCount = 0x2B,
  VMOp_GetFrameLocation = 0x2C,
  VMOp_ChangeBreakpoints = 0x2D,
  VMOp_GetOrSetLocal = 0x2E,
  VMOp_GetCurrentLocation = 0x2F,
  VMOp_EnterInterpOnlyMode = 0x30,
  VMOp_ChangeSingleStep = 0x31,
  VMOp_HeapWalkOperation = 0x32,
  VMOp_HeapIterateOperation = 0x33,
  VMOp_ReportJavaOutOfMemory = 0x34,
  VMOp_JFRCheckpoint = 0x35,
  VMOp_ShenandoahFullGC = 0x36,
  VMOp_ShenandoahInitMark = 0x37,
  VMOp_ShenandoahFinalMarkStartEvac = 0x38,
  VMOp_ShenandoahInitUpdateRefs = 0x39,
  VMOp_ShenandoahFinalUpdateRefs = 0x3A,
  VMOp_ShenandoahDegeneratedGC = 0x3B,
  VMOp_Exit = 0x3C,
  VMOp_LinuxDllLoad = 0x3D,
  VMOp_RotateGCLog = 0x3E,
  VMOp_WhiteBoxOperation = 0x3F,
  VMOp_ClassLoaderStatsOperation = 0x40,
  VMOp_JFROldObject = 0x41,
  VMOp_Terminating = 0x42,
};

/* 289 */
enum HdrSeq::PrivateConstants : __int32
{
  ValBuckets = 0x200,
  MagBuckets = 0x18,
  MagMinimum = 0xFFFFFFF4,
};

/* 290 */
enum ShenandoahPhaseTimings::ParPhase : __int32
{
  TotalWork = 0x0,
  ThreadRoots = 0x1,
  CodeCacheRoots = 0x2,
  UniverseRoots = 0x3,
  JNIRoots = 0x4,
  JVMTIWeakRoots = 0x5,
  JFRWeakRoots = 0x6,
  JNIWeakRoots = 0x7,
  StringTableRoots = 0x8,
  ResolvedMethodTableRoots = 0x9,
  VMGlobalRoots = 0xA,
  VMWeakRoots = 0xB,
  ObjectSynchronizerRoots = 0xC,
  FlatProfilerRoots = 0xD,
  ManagementRoots = 0xE,
  SystemDictionaryRoots = 0xF,
  CLDGRoots = 0x10,
  JVMTIRoots = 0x11,
  StringDedupTableRoots = 0x12,
  StringDedupQueueRoots = 0x13,
  StringDedupThreadRoots = 0x14,
  FinishQueues = 0x15,
  _num_par_phases = 0x16,
};

/* 291 */
enum KlassSizeStats::<unnamed_tag> : __int32
{
  _index_inst_size = 0x0,
  _index_inst_count = 0x1,
  _index_inst_bytes = 0x2,
  _index_mirror_bytes = 0x3,
  _index_klass_bytes = 0x4,
  _index_secondary_supers_bytes = 0x5,
  _index_vtab_bytes = 0x6,
  _index_itab_bytes = 0x7,
  _index_nonstatic_oopmap_bytes = 0x8,
  _index_methods_array_bytes = 0x9,
  _index_method_ordering_bytes = 0xA,
  _index_default_methods_array_bytes = 0xB,
  _index_default_vtable_indices_bytes = 0xC,
  _index_local_interfaces_bytes = 0xD,
  _index_transitive_interfaces_bytes = 0xE,
  _index_fields_bytes = 0xF,
  _index_inner_classes_bytes = 0x10,
  _index_signers_bytes = 0x11,
  _index_class_annotations_bytes = 0x12,
  _index_class_type_annotations_bytes = 0x13,
  _index_fields_annotations_bytes = 0x14,
  _index_fields_type_annotations_bytes = 0x15,
  _index_methods_annotations_bytes = 0x16,
  _index_methods_parameter_annotations_bytes = 0x17,
  _index_methods_type_annotations_bytes = 0x18,
  _index_methods_default_annotations_bytes = 0x19,
  _index_annotations_bytes = 0x1A,
  _index_cp_bytes = 0x1B,
  _index_cp_tags_bytes = 0x1C,
  _index_cp_cache_bytes = 0x1D,
  _index_cp_operands_bytes = 0x1E,
  _index_cp_refmap_bytes = 0x1F,
  _index_cp_all_bytes = 0x20,
  _index_method_count = 0x21,
  _index_method_bytes = 0x22,
  _index_const_method_bytes = 0x23,
  _index_method_data_bytes = 0x24,
  _index_stackmap_bytes = 0x25,
  _index_bytecode_bytes = 0x26,
  _index_method_all_bytes = 0x27,
  _index_ro_bytes = 0x28,
  _index_rw_bytes = 0x29,
  _index_total_bytes = 0x2A,
  _num_columns = 0x2B,
};

/* 292 */
enum Metaspace::MetadataType : __int32
{
  ClassType = 0x0,
  NonClassType = 0x1,
  MetadataTypeCount = 0x2,
};

/* 293 */
enum ShenandoahVerifier::VerifyMarked : __int32
{
  _verify_marked_disable = 0x0,
  _verify_marked_incomplete = 0x1,
  _verify_marked_complete = 0x2,
};

/* 294 */
enum ShenandoahVerifier::VerifyForwarded : __int32
{
  _verify_forwarded_disable = 0x0,
  _verify_forwarded_none = 0x1,
  _verify_forwarded_allow = 0x2,
};

/* 295 */
enum ShenandoahVerifier::VerifyCollectionSet : __int32
{
  _verify_cset_disable = 0x0,
  _verify_cset_none = 0x1,
  _verify_cset_forwarded = 0x2,
};

/* 296 */
enum ShenandoahVerifier::VerifyLiveness : __int32
{
  _verify_liveness_disable = 0x0,
  _verify_liveness_conservative = 0x1,
  _verify_liveness_complete = 0x2,
};

/* 297 */
enum ShenandoahVerifier::VerifyRegions : __int32
{
  _verify_regions_disable = 0x0,
  _verify_regions_notrash = 0x1,
  _verify_regions_nocset = 0x2,
  _verify_regions_notrash_nocset = 0x3,
};

/* 298 */
enum ShenandoahVerifier::VerifyGCState : __int32
{
  _verify_gcstate_disable = 0x0,
  _verify_gcstate_stable = 0x1,
  _verify_gcstate_forwarded = 0x2,
  _verify_gcstate_evacuation = 0x3,
};

/* 299 */
enum ShenandoahAsserts::SafeLevel : __int32
{
  _safe_unknown = 0x0,
  _safe_oop = 0x1,
  _safe_oop_fwd = 0x2,
  _safe_all = 0x3,
};

/* 300 */
typedef ShenandoahPhaseTimings::ParPhase ShenandoahRootVerifier::RootTypes;

/* 301 */
enum GCName : __int32
{
  ParallelOld = 0x0,
  SerialOld = 0x1,
  PSMarkSweep = 0x2,
  ParallelScavenge = 0x3,
  DefNew = 0x4,
  ParNew = 0x5,
  G1New = 0x6,
  ConcurrentMarkSweep = 0x7,
  G1Old = 0x8,
  Shenandoah = 0x9,
  GCNameEndSentinel = 0xA,
};

/* 302 */
enum GCWhen::Type : __int32
{
  BeforeGC = 0x0,
  AfterGC = 0x1,
  GCWhenEndSentinel = 0x2,
};

/* 303 */
enum TaskQueueSuper<16384,5>::<unnamed_tag> : __int32
{
  MOD_N_MASK = 0x3FFF,
};

/* 304 */
enum ObjectSynchronizer::<unnamed_tag> : __int32
{
  _BLOCKSIZE = 0x80,
};

/* 305 */
enum JavaThread::JNIAttachStates : __int32
{
  _not_attaching_via_jni = 0x1,
  _attaching_via_jni = 0x2,
  _attached_via_jni = 0x3,
};

/* 306 */
typedef ShenandoahLoadReferenceBarrierNode::Strength UpdateRefsMode;

/* 307 */
enum StringDedupMode : __int32
{
  NO_DEDUP = 0x0,
  ENQUEUE_DEDUP = 0x1,
};

/* 308 */
enum CounterNS : __int32
{
  JAVA_NS = 0x0,
  COM_NS = 0x1,
  SUN_NS = 0x2,
  JAVA_GC = 0x3,
  COM_GC = 0x4,
  SUN_GC = 0x5,
  JAVA_CI = 0x6,
  COM_CI = 0x7,
  SUN_CI = 0x8,
  JAVA_CLS = 0x9,
  COM_CLS = 0xA,
  SUN_CLS = 0xB,
  JAVA_RT = 0xC,
  COM_RT = 0xD,
  SUN_RT = 0xE,
  JAVA_OS = 0xF,
  COM_OS = 0x10,
  SUN_OS = 0x11,
  JAVA_THREADS = 0x12,
  COM_THREADS = 0x13,
  SUN_THREADS = 0x14,
  JAVA_PROPERTY = 0x15,
  COM_PROPERTY = 0x16,
  SUN_PROPERTY = 0x17,
  NULL_NS = 0x18,
  COUNTERNS_LAST = 0x18,
};

/* 309 */
enum PerfData::Units : __int32
{
  U_None = 0x1,
  U_Bytes = 0x2,
  U_Ticks = 0x3,
  U_Events = 0x4,
  U_String = 0x5,
  U_Hertz = 0x6,
  U_Last = 0x6,
};

/* 310 */
enum CommandLineFlag : __int32
{
  Flag_CheckCompressedOops = 0x0,
  Flag_HeapBaseMinAddress = 0x1,
  Flag_PrintCompressedOopsMode = 0x2,
  Flag_AssumeMP = 0x3,
  Flag_UseMembar = 0x4,
  Flag_CleanChunkPoolAsync = 0x5,
  Flag_UseMemSetInBOT = 0x6,
  Flag_UnlockDiagnosticVMOptions = 0x7,
  Flag_UnlockExperimentalVMOptions = 0x8,
  Flag_JavaMonitorsInStackTrace = 0x9,
  Flag_UseLargePages = 0xA,
  Flag_UseLargePagesIndividualAllocation = 0xB,
  Flag_LargePagesIndividualAllocationInjectError = 0xC,
  Flag_UseLargePagesInMetaspace = 0xD,
  Flag_TracePageSizes = 0xE,
  Flag_UseNUMA = 0xF,
  Flag_UseNUMAInterleaving = 0x10,
  Flag_NUMAInterleaveGranularity = 0x11,
  Flag_ForceNUMA = 0x12,
  Flag_NUMAChunkResizeWeight = 0x13,
  Flag_NUMASpaceResizeRate = 0x14,
  Flag_UseAdaptiveNUMAChunkSizing = 0x15,
  Flag_NUMAStats = 0x16,
  Flag_NUMAPageScanRate = 0x17,
  Flag_NeedsDeoptSuspend = 0x18,
  Flag_UseSSE = 0x19,
  Flag_UseAES = 0x1A,
  Flag_UseSHA = 0x1B,
  Flag_UseGHASHIntrinsics = 0x1C,
  Flag_LargePageSizeInBytes = 0x1D,
  Flag_LargePageHeapSizeThreshold = 0x1E,
  Flag_ForceTimeHighResolution = 0x1F,
  Flag_TraceItables = 0x20,
  Flag_TracePcPatching = 0x21,
  Flag_TraceJumps = 0x22,
  Flag_TraceRelocator = 0x23,
  Flag_TraceLongCompiles = 0x24,
  Flag_SafepointALot = 0x25,
  Flag_BackgroundCompilation = 0x26,
  Flag_PrintVMQWaitTime = 0x27,
  Flag_NoYieldsInMicrolock = 0x28,
  Flag_TraceOopMapGeneration = 0x29,
  Flag_MethodFlushing = 0x2A,
  Flag_VerifyStack = 0x2B,
  Flag_ForceUnreachable = 0x2C,
  Flag_StressDerivedPointers = 0x2D,
  Flag_TraceDerivedPointers = 0x2E,
  Flag_TraceCodeBlobStacks = 0x2F,
  Flag_PrintJNIResolving = 0x30,
  Flag_PrintRewrites = 0x31,
  Flag_UseInlineCaches = 0x32,
  Flag_InlineArrayCopy = 0x33,
  Flag_InlineObjectHash = 0x34,
  Flag_InlineNatives = 0x35,
  Flag_InlineMathNatives = 0x36,
  Flag_InlineClassNatives = 0x37,
  Flag_InlineThreadNatives = 0x38,
  Flag_InlineUnsafeOps = 0x39,
  Flag_CriticalJNINatives = 0x3A,
  Flag_StressCriticalJNINatives = 0x3B,
  Flag_UseSSE42Intrinsics = 0x3C,
  Flag_UseAESIntrinsics = 0x3D,
  Flag_UseSHA1Intrinsics = 0x3E,
  Flag_UseSHA256Intrinsics = 0x3F,
  Flag_UseSHA512Intrinsics = 0x40,
  Flag_UseCRC32Intrinsics = 0x41,
  Flag_TraceCallFixup = 0x42,
  Flag_DeoptimizeALot = 0x43,
  Flag_DeoptimizeOnlyAt = 0x44,
  Flag_DeoptimizeRandom = 0x45,
  Flag_ZombieALot = 0x46,
  Flag_UnlinkSymbolsALot = 0x47,
  Flag_WalkStackALot = 0x48,
  Flag_Debugging = 0x49,
  Flag_StrictSafepointChecks = 0x4A,
  Flag_VerifyLastFrame = 0x4B,
  Flag_TraceHandleAllocation = 0x4C,
  Flag_UseCompilerSafepoints = 0x4D,
  Flag_FailOverToOldVerifier = 0x4E,
  Flag_ShowSafepointMsgs = 0x4F,
  Flag_SafepointTimeout = 0x50,
  Flag_AbortVMOnSafepointTimeout = 0x51,
  Flag_SuspendRetryCount = 0x52,
  Flag_SuspendRetryDelay = 0x53,
  Flag_AssertOnSuspendWaitFailure = 0x54,
  Flag_TraceSuspendWaitFailures = 0x55,
  Flag_MaxFDLimit = 0x56,
  Flag_LogEvents = 0x57,
  Flag_LogEventsBufferEntries = 0x58,
  Flag_BytecodeVerificationRemote = 0x59,
  Flag_BytecodeVerificationLocal = 0x5A,
  Flag_ForceFloatExceptions = 0x5B,
  Flag_VerifyStackAtCalls = 0x5C,
  Flag_TraceJavaAssertions = 0x5D,
  Flag_CheckAssertionStatusDirectives = 0x5E,
  Flag_PrintMallocFree = 0x5F,
  Flag_PrintOopAddress = 0x60,
  Flag_VerifyCodeCacheOften = 0x61,
  Flag_ZapDeadCompiledLocals = 0x62,
  Flag_ZapDeadLocalsOld = 0x63,
  Flag_CheckOopishValues = 0x64,
  Flag_UseMallocOnly = 0x65,
  Flag_PrintMalloc = 0x66,
  Flag_PrintMallocStatistics = 0x67,
  Flag_ZapResourceArea = 0x68,
  Flag_ZapVMHandleArea = 0x69,
  Flag_ZapJNIHandleArea = 0x6A,
  Flag_ZapStackSegments = 0x6B,
  Flag_ZapUnusedHeapArea = 0x6C,
  Flag_TraceZapUnusedHeapArea = 0x6D,
  Flag_CheckZapUnusedHeapArea = 0x6E,
  Flag_ZapFillerObjects = 0x6F,
  Flag_PrintVMMessages = 0x70,
  Flag_PrintGCApplicationConcurrentTime = 0x71,
  Flag_PrintGCApplicationStoppedTime = 0x72,
  Flag_VerboseVerification = 0x73,
  Flag_ErrorHandlerTest = 0x74,
  Flag_Verbose = 0x75,
  Flag_PrintMiscellaneous = 0x76,
  Flag_WizardMode = 0x77,
  Flag_ShowMessageBoxOnError = 0x78,
  Flag_CreateMinidumpOnCrash = 0x79,
  Flag_UseOSErrorReporting = 0x7A,
  Flag_SuppressFatalErrorMessage = 0x7B,
  Flag_OnError = 0x7C,
  Flag_OnOutOfMemoryError = 0x7D,
  Flag_HeapDumpBeforeFullGC = 0x7E,
  Flag_HeapDumpAfterFullGC = 0x7F,
  Flag_HeapDumpOnOutOfMemoryError = 0x80,
  Flag_HeapDumpPath = 0x81,
  Flag_SegmentedHeapDumpThreshold = 0x82,
  Flag_HeapDumpSegmentSize = 0x83,
  Flag_BreakAtWarning = 0x84,
  Flag_TraceVMOperation = 0x85,
  Flag_UseFakeTimers = 0x86,
  Flag_NativeMemoryTracking = 0x87,
  Flag_PrintNMTStatistics = 0x88,
  Flag_LogCompilation = 0x89,
  Flag_PrintCompilation = 0x8A,
  Flag_TraceNMethodInstalls = 0x8B,
  Flag_ScavengeRootsInCode = 0x8C,
  Flag_AlwaysRestoreFPU = 0x8D,
  Flag_PrintCompilation2 = 0x8E,
  Flag_PrintAdapterHandlers = 0x8F,
  Flag_VerifyAdapterCalls = 0x90,
  Flag_VerifyAdapterSharing = 0x91,
  Flag_PrintAssembly = 0x92,
  Flag_PrintAssemblyOptions = 0x93,
  Flag_PrintNMethods = 0x94,
  Flag_PrintNativeNMethods = 0x95,
  Flag_PrintDebugInfo = 0x96,
  Flag_PrintRelocations = 0x97,
  Flag_PrintDependencies = 0x98,
  Flag_PrintExceptionHandlers = 0x99,
  Flag_StressCompiledExceptionHandlers = 0x9A,
  Flag_InterceptOSException = 0x9B,
  Flag_PrintCodeCache = 0x9C,
  Flag_PrintCodeCache2 = 0x9D,
  Flag_PrintCodeCacheOnCompilation = 0x9E,
  Flag_PrintStubCode = 0x9F,
  Flag_StackTraceInThrowable = 0xA0,
  Flag_OmitStackTraceInFastThrow = 0xA1,
  Flag_ProfilerPrintByteCodeStatistics = 0xA2,
  Flag_ProfilerRecordPC = 0xA3,
  Flag_ProfileVM = 0xA4,
  Flag_ProfileIntervals = 0xA5,
  Flag_ProfilerCheckIntervals = 0xA6,
  Flag_PrintJVMWarnings = 0xA7,
  Flag_PrintWarnings = 0xA8,
  Flag_WarnOnStalledSpinLock = 0xA9,
  Flag_RegisterFinalizersAtInit = 0xAA,
  Flag_RegisterReferences = 0xAB,
  Flag_IgnoreRewrites = 0xAC,
  Flag_PrintCodeCacheExtension = 0xAD,
  Flag_UsePrivilegedStack = 0xAE,
  Flag_ProtectionDomainVerification = 0xAF,
  Flag_ClassUnloading = 0xB0,
  Flag_ClassUnloadingWithConcurrentMark = 0xB1,
  Flag_DisableStartThread = 0xB2,
  Flag_MemProfiling = 0xB3,
  Flag_PrintSystemDictionaryAtExit = 0xB4,
  Flag_PredictedLoadedClassCount = 0xB5,
  Flag_UnsyncloadClass = 0xB6,
  Flag_AlwaysLockClassLoader = 0xB7,
  Flag_AllowParallelDefineClass = 0xB8,
  Flag_MustCallLoadClassInternal = 0xB9,
  Flag_DontYieldALot = 0xBA,
  Flag_ConvertSleepToYield = 0xBB,
  Flag_ConvertYieldToSleep = 0xBC,
  Flag_UseBoundThreads = 0xBD,
  Flag_UseDetachedThreads = 0xBE,
  Flag_DisablePrimordialThreadGuardPages = 0xBF,
  Flag_UseLWPSynchronization = 0xC0,
  Flag_SyncKnobs = 0xC1,
  Flag_EmitSync = 0xC2,
  Flag_MonitorBound = 0xC3,
  Flag_MonitorInUseLists = 0xC4,
  Flag_SyncFlags = 0xC5,
  Flag_SyncVerbose = 0xC6,
  Flag_ClearFPUAtPark = 0xC7,
  Flag_hashCode = 0xC8,
  Flag_WorkAroundNPTLTimedWaitHang = 0xC9,
  Flag_FilterSpuriousWakeups = 0xCA,
  Flag_NativeMonitorTimeout = 0xCB,
  Flag_NativeMonitorFlags = 0xCC,
  Flag_NativeMonitorSpinLimit = 0xCD,
  Flag_UsePthreads = 0xCE,
  Flag_AdjustConcurrency = 0xCF,
  Flag_ReduceSignalUsage = 0xD0,
  Flag_LoadLineNumberTables = 0xD1,
  Flag_LoadLocalVariableTables = 0xD2,
  Flag_LoadLocalVariableTypeTables = 0xD3,
  Flag_AllowUserSignalHandlers = 0xD4,
  Flag_UseSignalChaining = 0xD5,
  Flag_UseAltSigs = 0xD6,
  Flag_AllowJNIEnvProxy = 0xD7,
  Flag_JNIDetachReleasesMonitors = 0xD8,
  Flag_RestoreMXCSROnJNICalls = 0xD9,
  Flag_CheckJNICalls = 0xDA,
  Flag_CheckEndorsedAndExtDirs = 0xDB,
  Flag_UseFastJNIAccessors = 0xDC,
  Flag_MaxJNILocalCapacity = 0xDD,
  Flag_EagerXrunInit = 0xDE,
  Flag_PreserveAllAnnotations = 0xDF,
  Flag_PreallocatedOutOfMemoryErrorCount = 0xE0,
  Flag_LazyBootClassLoader = 0xE1,
  Flag_UseXMMForArrayCopy = 0xE2,
  Flag_FieldsAllocationStyle = 0xE3,
  Flag_CompactFields = 0xE4,
  Flag_PrintFieldLayout = 0xE5,
  Flag_ContendedPaddingWidth = 0xE6,
  Flag_EnableContended = 0xE7,
  Flag_RestrictContended = 0xE8,
  Flag_UseBiasedLocking = 0xE9,
  Flag_BiasedLockingStartupDelay = 0xEA,
  Flag_PrintBiasedLockingStatistics = 0xEB,
  Flag_BiasedLockingBulkRebiasThreshold = 0xEC,
  Flag_BiasedLockingBulkRevokeThreshold = 0xED,
  Flag_BiasedLockingDecayTime = 0xEE,
  Flag_ExitOnOutOfMemoryError = 0xEF,
  Flag_CrashOnOutOfMemoryError = 0xF0,
  Flag_TraceRuntimeCalls = 0xF1,
  Flag_TraceJNICalls = 0xF2,
  Flag_StressRewriter = 0xF3,
  Flag_TraceJVMCalls = 0xF4,
  Flag_TraceJVMTI = 0xF5,
  Flag_StressLdcRewrite = 0xF6,
  Flag_TraceRedefineClasses = 0xF7,
  Flag_StressMethodComparator = 0xF8,
  Flag_VerifyMergedCPBytecodes = 0xF9,
  Flag_TraceJNIHandleAllocation = 0xFA,
  Flag_TraceThreadEvents = 0xFB,
  Flag_TraceBytecodes = 0xFC,
  Flag_TraceClassInitialization = 0xFD,
  Flag_TraceExceptions = 0xFE,
  Flag_TraceICs = 0xFF,
  Flag_TraceInvocationCounterOverflow = 0x100,
  Flag_TraceInlineCacheClearing = 0x101,
  Flag_TraceDependencies = 0x102,
  Flag_VerifyDependencies = 0x103,
  Flag_TraceNewOopMapGeneration = 0x104,
  Flag_TraceNewOopMapGenerationDetailed = 0x105,
  Flag_TimeOopMap = 0x106,
  Flag_TimeOopMap2 = 0x107,
  Flag_TraceMonitorMismatch = 0x108,
  Flag_TraceOopMapRewrites = 0x109,
  Flag_TraceSafepoint = 0x10A,
  Flag_TraceICBuffer = 0x10B,
  Flag_TraceCompiledIC = 0x10C,
  Flag_TraceZapDeadLocals = 0x10D,
  Flag_TraceStartupTime = 0x10E,
  Flag_TraceProtectionDomainVerification = 0x10F,
  Flag_TraceClearedExceptions = 0x110,
  Flag_TraceClassResolution = 0x111,
  Flag_TraceBiasedLocking = 0x112,
  Flag_TraceMonitorInflation = 0x113,
  Flag_UseSerialGC = 0x114,
  Flag_UseG1GC = 0x115,
  Flag_UseParallelGC = 0x116,
  Flag_UseParallelOldGC = 0x117,
  Flag_UseShenandoahGC = 0x118,
  Flag_HeapMaximumCompactionInterval = 0x119,
  Flag_HeapFirstMaximumCompactionCount = 0x11A,
  Flag_UseMaximumCompactionOnSystemGC = 0x11B,
  Flag_ParallelOldDeadWoodLimiterMean = 0x11C,
  Flag_ParallelOldDeadWoodLimiterStdDev = 0x11D,
  Flag_ParallelGCThreads = 0x11E,
  Flag_UseDynamicNumberOfGCThreads = 0x11F,
  Flag_ForceDynamicNumberOfGCThreads = 0x120,
  Flag_HeapSizePerGCThread = 0x121,
  Flag_TraceDynamicGCThreads = 0x122,
  Flag_ParallelOldGCSplitALot = 0x123,
  Flag_ParallelOldGCSplitInterval = 0x124,
  Flag_ConcGCThreads = 0x125,
  Flag_YoungPLABSize = 0x126,
  Flag_OldPLABSize = 0x127,
  Flag_GCTaskTimeStampEntries = 0x128,
  Flag_AlwaysTenure = 0x129,
  Flag_NeverTenure = 0x12A,
  Flag_ScavengeBeforeFullGC = 0x12B,
  Flag_ScavengeWithObjectsInToSpace = 0x12C,
  Flag_UseConcMarkSweepGC = 0x12D,
  Flag_ExplicitGCInvokesConcurrent = 0x12E,
  Flag_ExplicitGCInvokesConcurrentAndUnloadsClasses = 0x12F,
  Flag_GCLockerInvokesConcurrent = 0x130,
  Flag_GCLockerEdenExpansionPercent = 0x131,
  Flag_GCLockerRetryAllocationCount = 0x132,
  Flag_UseCMSAdaptiveFreeLists = 0x133,
  Flag_UseAsyncConcMarkSweepGC = 0x134,
  Flag_RotateCMSCollectionTypes = 0x135,
  Flag_UseCMSBestFit = 0x136,
  Flag_UseCMSCollectionPassing = 0x137,
  Flag_UseParNewGC = 0x138,
  Flag_ParallelGCVerbose = 0x139,
  Flag_ParallelGCBufferWastePct = 0x13A,
  Flag_ParallelGCRetainPLAB = 0x13B,
  Flag_TargetPLABWastePct = 0x13C,
  Flag_PLABWeight = 0x13D,
  Flag_ResizePLAB = 0x13E,
  Flag_PrintPLAB = 0x13F,
  Flag_ParGCArrayScanChunk = 0x140,
  Flag_ParGCUseLocalOverflow = 0x141,
  Flag_ParGCTrimOverflow = 0x142,
  Flag_ParGCWorkQueueOverflowALot = 0x143,
  Flag_ParGCWorkQueueOverflowInterval = 0x144,
  Flag_ParGCDesiredObjsFromOverflowList = 0x145,
  Flag_ParGCStridesPerThread = 0x146,
  Flag_ParGCCardsPerStrideChunk = 0x147,
  Flag_CMSParPromoteBlocksToClaim = 0x148,
  Flag_OldPLABWeight = 0x149,
  Flag_ResizeOldPLAB = 0x14A,
  Flag_PrintOldPLAB = 0x14B,
  Flag_CMSOldPLABMin = 0x14C,
  Flag_CMSOldPLABMax = 0x14D,
  Flag_CMSOldPLABNumRefills = 0x14E,
  Flag_CMSOldPLABResizeQuicker = 0x14F,
  Flag_CMSOldPLABToleranceFactor = 0x150,
  Flag_CMSOldPLABReactivityFactor = 0x151,
  Flag_AlwaysPreTouch = 0x152,
  Flag_CMSYoungGenPerWorker = 0x153,
  Flag_CMSIncrementalMode = 0x154,
  Flag_CMSIncrementalDutyCycle = 0x155,
  Flag_CMSIncrementalPacing = 0x156,
  Flag_CMSIncrementalDutyCycleMin = 0x157,
  Flag_CMSIncrementalSafetyFactor = 0x158,
  Flag_CMSIncrementalOffset = 0x159,
  Flag_CMSExpAvgFactor = 0x15A,
  Flag_CMS_FLSWeight = 0x15B,
  Flag_CMS_FLSPadding = 0x15C,
  Flag_FLSCoalescePolicy = 0x15D,
  Flag_FLSAlwaysCoalesceLarge = 0x15E,
  Flag_FLSLargestBlockCoalesceProximity = 0x15F,
  Flag_CMSSmallCoalSurplusPercent = 0x160,
  Flag_CMSLargeCoalSurplusPercent = 0x161,
  Flag_CMSSmallSplitSurplusPercent = 0x162,
  Flag_CMSLargeSplitSurplusPercent = 0x163,
  Flag_CMSExtrapolateSweep = 0x164,
  Flag_CMS_SweepWeight = 0x165,
  Flag_CMS_SweepPadding = 0x166,
  Flag_CMS_SweepTimerThresholdMillis = 0x167,
  Flag_CMSTraceIncrementalMode = 0x168,
  Flag_CMSTraceIncrementalPacing = 0x169,
  Flag_CMSTraceThreadState = 0x16A,
  Flag_CMSClassUnloadingEnabled = 0x16B,
  Flag_CMSClassUnloadingMaxInterval = 0x16C,
  Flag_CMSCompactWhenClearAllSoftRefs = 0x16D,
  Flag_UseCMSCompactAtFullCollection = 0x16E,
  Flag_CMSFullGCsBeforeCompaction = 0x16F,
  Flag_CMSDictionaryChoice = 0x170,
  Flag_CMSIndexedFreeListReplenish = 0x171,
  Flag_CMSReplenishIntermediate = 0x172,
  Flag_CMSSplitIndexedFreeListBlocks = 0x173,
  Flag_CMSLoopWarn = 0x174,
  Flag_CMSOverflowEarlyRestoration = 0x175,
  Flag_MarkStackSize = 0x176,
  Flag_MarkStackSizeMax = 0x177,
  Flag_CMSMarkStackOverflowALot = 0x178,
  Flag_CMSMarkStackOverflowInterval = 0x179,
  Flag_CMSMaxAbortablePrecleanLoops = 0x17A,
  Flag_CMSMaxAbortablePrecleanTime = 0x17B,
  Flag_CMSAbortablePrecleanMinWorkPerIteration = 0x17C,
  Flag_CMSAbortablePrecleanWaitMillis = 0x17D,
  Flag_CMSRescanMultiple = 0x17E,
  Flag_CMSConcMarkMultiple = 0x17F,
  Flag_CMSAbortSemantics = 0x180,
  Flag_CMSParallelInitialMarkEnabled = 0x181,
  Flag_CMSParallelRemarkEnabled = 0x182,
  Flag_CMSParallelSurvivorRemarkEnabled = 0x183,
  Flag_CMSPLABRecordAlways = 0x184,
  Flag_CMSEdenChunksRecordAlways = 0x185,
  Flag_CMSPrintEdenSurvivorChunks = 0x186,
  Flag_CMSConcurrentMTEnabled = 0x187,
  Flag_CMSPrecleaningEnabled = 0x188,
  Flag_CMSPrecleanIter = 0x189,
  Flag_CMSPrecleanNumerator = 0x18A,
  Flag_CMSPrecleanDenominator = 0x18B,
  Flag_CMSPrecleanRefLists1 = 0x18C,
  Flag_CMSPrecleanRefLists2 = 0x18D,
  Flag_CMSPrecleanSurvivors1 = 0x18E,
  Flag_CMSPrecleanSurvivors2 = 0x18F,
  Flag_CMSPrecleanThreshold = 0x190,
  Flag_CMSCleanOnEnter = 0x191,
  Flag_CMSRemarkVerifyVariant = 0x192,
  Flag_CMSScheduleRemarkEdenSizeThreshold = 0x193,
  Flag_CMSScheduleRemarkEdenPenetration = 0x194,
  Flag_CMSScheduleRemarkSamplingRatio = 0x195,
  Flag_CMSSamplingGrain = 0x196,
  Flag_CMSScavengeBeforeRemark = 0x197,
  Flag_CMSTraceSweeper = 0x198,
  Flag_CMSWorkQueueDrainThreshold = 0x199,
  Flag_CMSWaitDuration = 0x19A,
  Flag_CMSCheckInterval = 0x19B,
  Flag_CMSYield = 0x19C,
  Flag_CMSBitMapYieldQuantum = 0x19D,
  Flag_CMSDumpAtPromotionFailure = 0x19E,
  Flag_CMSPrintChunksInDump = 0x19F,
  Flag_CMSPrintObjectsInDump = 0x1A0,
  Flag_FLSVerifyAllHeapReferences = 0x1A1,
  Flag_FLSVerifyLists = 0x1A2,
  Flag_FLSVerifyIndexTable = 0x1A3,
  Flag_FLSVerifyDictionary = 0x1A4,
  Flag_VerifyBlockOffsetArray = 0x1A5,
  Flag_BlockOffsetArrayUseUnallocatedBlock = 0x1A6,
  Flag_TraceCMSState = 0x1A7,
  Flag_RefDiscoveryPolicy = 0x1A8,
  Flag_ParallelRefProcEnabled = 0x1A9,
  Flag_ParallelRefProcBalancingEnabled = 0x1AA,
  Flag_CMSTriggerRatio = 0x1AB,
  Flag_CMSBootstrapOccupancy = 0x1AC,
  Flag_CMSInitiatingOccupancyFraction = 0x1AD,
  Flag_InitiatingHeapOccupancyPercent = 0x1AE,
  Flag_CMSTriggerInterval = 0x1AF,
  Flag_UseCMSInitiatingOccupancyOnly = 0x1B0,
  Flag_CMSIsTooFullPercentage = 0x1B1,
  Flag_CMSTestInFreeList = 0x1B2,
  Flag_CMSVerifyReturnedBytes = 0x1B3,
  Flag_ScavengeALot = 0x1B4,
  Flag_FullGCALot = 0x1B5,
  Flag_GCALotAtAllSafepoints = 0x1B6,
  Flag_PrintPromotionFailure = 0x1B7,
  Flag_PromotionFailureALot = 0x1B8,
  Flag_PromotionFailureALotCount = 0x1B9,
  Flag_PromotionFailureALotInterval = 0x1BA,
  Flag_WorkStealingSleepMillis = 0x1BB,
  Flag_WorkStealingYieldsBeforeSleep = 0x1BC,
  Flag_WorkStealingHardSpins = 0x1BD,
  Flag_WorkStealingSpinToYieldRatio = 0x1BE,
  Flag_ObjArrayMarkingStride = 0x1BF,
  Flag_MetadataAllocationFailALot = 0x1C0,
  Flag_MetadataAllocationFailALotInterval = 0x1C1,
  Flag_TraceMetadataChunkAllocation = 0x1C2,
  Flag_TraceMetadataHumongousAllocation = 0x1C3,
  Flag_TraceMetavirtualspaceAllocation = 0x1C4,
  Flag_ExecuteInternalVMTests = 0x1C5,
  Flag_VerboseInternalVMTests = 0x1C6,
  Flag_UseTLAB = 0x1C7,
  Flag_ResizeTLAB = 0x1C8,
  Flag_ZeroTLAB = 0x1C9,
  Flag_FastTLABRefill = 0x1CA,
  Flag_PrintTLAB = 0x1CB,
  Flag_TLABStats = 0x1CC,
  Flag_NeverActAsServerClassMachine = 0x1CD,
  Flag_AlwaysActAsServerClassMachine = 0x1CE,
  Flag_MaxRAM = 0x1CF,
  Flag_AggressiveHeap = 0x1D0,
  Flag_ErgoHeapSizeLimit = 0x1D1,
  Flag_UseCGroupMemoryLimitForHeap = 0x1D2,
  Flag_PrintContainerInfo = 0x1D3,
  Flag_PrintActiveCpus = 0x1D4,
  Flag_MaxRAMFraction = 0x1D5,
  Flag_DefaultMaxRAMFraction = 0x1D6,
  Flag_MinRAMFraction = 0x1D7,
  Flag_InitialRAMFraction = 0x1D8,
  Flag_MaxRAMPercentage = 0x1D9,
  Flag_MinRAMPercentage = 0x1DA,
  Flag_InitialRAMPercentage = 0x1DB,
  Flag_ActiveProcessorCount = 0x1DC,
  Flag_MaxVirtMemFraction = 0x1DD,
  Flag_UseAutoGCSelectPolicy = 0x1DE,
  Flag_AutoGCSelectPauseMillis = 0x1DF,
  Flag_UseAdaptiveSizePolicy = 0x1E0,
  Flag_UsePSAdaptiveSurvivorSizePolicy = 0x1E1,
  Flag_UseAdaptiveGenerationSizePolicyAtMinorCollection = 0x1E2,
  Flag_UseAdaptiveGenerationSizePolicyAtMajorCollection = 0x1E3,
  Flag_UseAdaptiveSizePolicyWithSystemGC = 0x1E4,
  Flag_UseAdaptiveGCBoundary = 0x1E5,
  Flag_TraceAdaptiveGCBoundary = 0x1E6,
  Flag_PSAdaptiveSizePolicyResizeVirtualSpaceAlot = 0x1E7,
  Flag_AdaptiveSizeThroughPutPolicy = 0x1E8,
  Flag_AdaptiveSizePausePolicy = 0x1E9,
  Flag_PSAdjustTenuredGenForMinorPause = 0x1EA,
  Flag_PSAdjustYoungGenForMajorPause = 0x1EB,
  Flag_AdaptiveSizePolicyInitializingSteps = 0x1EC,
  Flag_AdaptiveSizePolicyReadyThreshold = 0x1ED,
  Flag_AdaptiveSizePolicyOutputInterval = 0x1EE,
  Flag_UseAdaptiveSizePolicyFootprintGoal = 0x1EF,
  Flag_AdaptiveSizePolicyWeight = 0x1F0,
  Flag_AdaptiveTimeWeight = 0x1F1,
  Flag_PausePadding = 0x1F2,
  Flag_PromotedPadding = 0x1F3,
  Flag_SurvivorPadding = 0x1F4,
  Flag_ThresholdTolerance = 0x1F5,
  Flag_AdaptiveSizePolicyCollectionCostMargin = 0x1F6,
  Flag_YoungGenerationSizeIncrement = 0x1F7,
  Flag_YoungGenerationSizeSupplement = 0x1F8,
  Flag_YoungGenerationSizeSupplementDecay = 0x1F9,
  Flag_TenuredGenerationSizeIncrement = 0x1FA,
  Flag_TenuredGenerationSizeSupplement = 0x1FB,
  Flag_TenuredGenerationSizeSupplementDecay = 0x1FC,
  Flag_MaxGCPauseMillis = 0x1FD,
  Flag_GCPauseIntervalMillis = 0x1FE,
  Flag_MaxGCMinorPauseMillis = 0x1FF,
  Flag_GCTimeRatio = 0x200,
  Flag_AdaptiveSizeDecrementScaleFactor = 0x201,
  Flag_UseAdaptiveSizeDecayMajorGCCost = 0x202,
  Flag_AdaptiveSizeMajorGCDecayTimeScale = 0x203,
  Flag_MinSurvivorRatio = 0x204,
  Flag_InitialSurvivorRatio = 0x205,
  Flag_BaseFootPrintEstimate = 0x206,
  Flag_UseGCOverheadLimit = 0x207,
  Flag_GCTimeLimit = 0x208,
  Flag_GCHeapFreeLimit = 0x209,
  Flag_AdaptiveSizePolicyGCTimeLimitThreshold = 0x20A,
  Flag_PrintAdaptiveSizePolicy = 0x20B,
  Flag_PrefetchCopyIntervalInBytes = 0x20C,
  Flag_PrefetchScanIntervalInBytes = 0x20D,
  Flag_PrefetchFieldsAhead = 0x20E,
  Flag_VerifySilently = 0x20F,
  Flag_VerifyDuringStartup = 0x210,
  Flag_VerifyBeforeExit = 0x211,
  Flag_VerifyBeforeGC = 0x212,
  Flag_VerifyAfterGC = 0x213,
  Flag_VerifyDuringGC = 0x214,
  Flag_VerifySubSet = 0x215,
  Flag_GCParallelVerificationEnabled = 0x216,
  Flag_DeferInitialCardMark = 0x217,
  Flag_VerifyRememberedSets = 0x218,
  Flag_VerifyObjectStartArray = 0x219,
  Flag_DisableExplicitGC = 0x21A,
  Flag_CheckMemoryInitialization = 0x21B,
  Flag_CollectGen0First = 0x21C,
  Flag_BindCMSThreadToCPU = 0x21D,
  Flag_CPUForCMSThread = 0x21E,
  Flag_BindGCTaskThreadsToCPUs = 0x21F,
  Flag_UseGCTaskAffinity = 0x220,
  Flag_ProcessDistributionStride = 0x221,
  Flag_CMSCoordinatorYieldSleepCount = 0x222,
  Flag_CMSYieldSleepCount = 0x223,
  Flag_PrintGC = 0x224,
  Flag_PrintGCDetails = 0x225,
  Flag_PrintGCDateStamps = 0x226,
  Flag_PrintGCTimeStamps = 0x227,
  Flag_PrintGCID = 0x228,
  Flag_PrintGCTaskTimeStamps = 0x229,
  Flag_ConcGCYieldTimeout = 0x22A,
  Flag_TraceMarkSweep = 0x22B,
  Flag_PrintReferenceGC = 0x22C,
  Flag_TraceReferenceGC = 0x22D,
  Flag_TraceFinalizerRegistration = 0x22E,
  Flag_TraceScavenge = 0x22F,
  Flag_IgnoreEmptyClassPaths = 0x230,
  Flag_TraceClassPaths = 0x231,
  Flag_TraceClassLoading = 0x232,
  Flag_TraceClassLoadingPreorder = 0x233,
  Flag_TraceClassUnloading = 0x234,
  Flag_TraceLoaderConstraints = 0x235,
  Flag_TraceClassLoaderData = 0x236,
  Flag_InitialBootClassLoaderMetaspaceSize = 0x237,
  Flag_TraceGen0Time = 0x238,
  Flag_TraceGen1Time = 0x239,
  Flag_PrintTenuringDistribution = 0x23A,
  Flag_PrintHeapAtGC = 0x23B,
  Flag_PrintHeapAtGCExtended = 0x23C,
  Flag_PrintHeapAtSIGBREAK = 0x23D,
  Flag_PrintClassHistogramBeforeFullGC = 0x23E,
  Flag_PrintClassHistogramAfterFullGC = 0x23F,
  Flag_PrintClassHistogram = 0x240,
  Flag_TraceWorkGang = 0x241,
  Flag_TraceParallelOldGCTasks = 0x242,
  Flag_TraceBlockOffsetTable = 0x243,
  Flag_TraceCardTableModRefBS = 0x244,
  Flag_TraceGCTaskManager = 0x245,
  Flag_TraceGCTaskQueue = 0x246,
  Flag_TraceGCTaskThread = 0x247,
  Flag_PrintParallelOldGCPhaseTimes = 0x248,
  Flag_TraceParallelOldGCMarkingPhase = 0x249,
  Flag_TraceParallelOldGCSummaryPhase = 0x24A,
  Flag_TraceParallelOldGCCompactionPhase = 0x24B,
  Flag_TraceParallelOldGCDensePrefix = 0x24C,
  Flag_IgnoreLibthreadGPFault = 0x24D,
  Flag_PrintJNIGCStalls = 0x24E,
  Flag_ObjectCountCutOffPercent = 0x24F,
  Flag_UseGCLogFileRotation = 0x250,
  Flag_NumberOfGCLogFiles = 0x251,
  Flag_GCLogFileSize = 0x252,
  Flag_TraceJVMTIObjectTagging = 0x253,
  Flag_VerifyBeforeIteration = 0x254,
  Flag_CIPrintCompilerName = 0x255,
  Flag_CIPrintCompileQueue = 0x256,
  Flag_CIPrintRequests = 0x257,
  Flag_CITime = 0x258,
  Flag_CITimeEach = 0x259,
  Flag_CICountOSR = 0x25A,
  Flag_CICompileNatives = 0x25B,
  Flag_CICompileOSR = 0x25C,
  Flag_CIPrintMethodCodes = 0x25D,
  Flag_CIPrintTypeFlow = 0x25E,
  Flag_CITraceTypeFlow = 0x25F,
  Flag_OSROnlyBCI = 0x260,
  Flag_CICompilerCount = 0x261,
  Flag_CompilationPolicyChoice = 0x262,
  Flag_UseStackBanging = 0x263,
  Flag_UseStrictFP = 0x264,
  Flag_GenerateSynchronizationCode = 0x265,
  Flag_GenerateCompilerNullChecks = 0x266,
  Flag_GenerateRangeChecks = 0x267,
  Flag_ImplicitNullChecks = 0x268,
  Flag_TrapBasedNullChecks = 0x269,
  Flag_PrintSafepointStatistics = 0x26A,
  Flag_PrintSafepointStatisticsCount = 0x26B,
  Flag_PrintSafepointStatisticsTimeout = 0x26C,
  Flag_TraceSafepointCleanupTime = 0x26D,
  Flag_Inline = 0x26E,
  Flag_ClipInlining = 0x26F,
  Flag_UseCHA = 0x270,
  Flag_UseTypeProfile = 0x271,
  Flag_TimeCompiler = 0x272,
  Flag_PrintInlining = 0x273,
  Flag_UsePopCountInstruction = 0x274,
  Flag_EagerInitialization = 0x275,
  Flag_TraceMethodReplacement = 0x276,
  Flag_PrintMethodFlushing = 0x277,
  Flag_PrintMethodFlushingStatistics = 0x278,
  Flag_UseRelocIndex = 0x279,
  Flag_StressCodeBuffers = 0x27A,
  Flag_DebugNonSafepoints = 0x27B,
  Flag_PrintVMOptions = 0x27C,
  Flag_IgnoreUnrecognizedVMOptions = 0x27D,
  Flag_PrintCommandLineFlags = 0x27E,
  Flag_PrintFlagsInitial = 0x27F,
  Flag_PrintFlagsFinal = 0x280,
  Flag_PrintFlagsWithComments = 0x281,
  Flag_SerializeVMOutput = 0x282,
  Flag_DisplayVMOutput = 0x283,
  Flag_LogVMOutput = 0x284,
  Flag_LogFile = 0x285,
  Flag_ErrorFile = 0x286,
  Flag_DisplayVMOutputToStderr = 0x287,
  Flag_DisplayVMOutputToStdout = 0x288,
  Flag_UseHeavyMonitors = 0x289,
  Flag_PrintStringTableStatistics = 0x28A,
  Flag_VerifyStringTableAtExit = 0x28B,
  Flag_PrintSymbolTableSizeHistogram = 0x28C,
  Flag_ExitVMOnVerifyError = 0x28D,
  Flag_AbortVMOnException = 0x28E,
  Flag_AbortVMOnExceptionMessage = 0x28F,
  Flag_DebugVtables = 0x290,
  Flag_PrintVtables = 0x291,
  Flag_PrintVtableStats = 0x292,
  Flag_TraceCreateZombies = 0x293,
  Flag_IgnoreLockingAssertions = 0x294,
  Flag_RangeCheckElimination = 0x295,
  Flag_UncommonNullCast = 0x296,
  Flag_TypeProfileCasts = 0x297,
  Flag_DelayCompilationDuringStartup = 0x298,
  Flag_CompileTheWorld = 0x299,
  Flag_CompileTheWorldPreloadClasses = 0x29A,
  Flag_CompileTheWorldSafepointInterval = 0x29B,
  Flag_FillDelaySlots = 0x29C,
  Flag_TimeLivenessAnalysis = 0x29D,
  Flag_TraceLivenessGen = 0x29E,
  Flag_TraceLivenessQuery = 0x29F,
  Flag_CollectIndexSetStatistics = 0x2A0,
  Flag_UseLoopSafepoints = 0x2A1,
  Flag_FastAllocateSizeLimit = 0x2A2,
  Flag_AggressiveOpts = 0x2A3,
  Flag_TypeProfileLevel = 0x2A4,
  Flag_TypeProfileArgsLimit = 0x2A5,
  Flag_TypeProfileParmsLimit = 0x2A6,
  Flag_CountCompiledCalls = 0x2A7,
  Flag_CountRuntimeCalls = 0x2A8,
  Flag_CountJNICalls = 0x2A9,
  Flag_CountJVMCalls = 0x2AA,
  Flag_CountRemovableExceptions = 0x2AB,
  Flag_ICMissHistogram = 0x2AC,
  Flag_PrintClassStatistics = 0x2AD,
  Flag_PrintMethodStatistics = 0x2AE,
  Flag_ClearInterpreterLocals = 0x2AF,
  Flag_RewriteBytecodes = 0x2B0,
  Flag_RewriteFrequentPairs = 0x2B1,
  Flag_PrintInterpreter = 0x2B2,
  Flag_UseInterpreter = 0x2B3,
  Flag_UseFastSignatureHandlers = 0x2B4,
  Flag_UseLoopCounter = 0x2B5,
  Flag_UseFastEmptyMethods = 0x2B6,
  Flag_UseFastAccessorMethods = 0x2B7,
  Flag_UseOnStackReplacement = 0x2B8,
  Flag_TraceOnStackReplacement = 0x2B9,
  Flag_PreferInterpreterNativeStubs = 0x2BA,
  Flag_CountBytecodes = 0x2BB,
  Flag_PrintBytecodeHistogram = 0x2BC,
  Flag_PrintBytecodePairHistogram = 0x2BD,
  Flag_PrintSignatureHandlers = 0x2BE,
  Flag_VerifyOops = 0x2BF,
  Flag_CheckUnhandledOops = 0x2C0,
  Flag_VerifyJNIFields = 0x2C1,
  Flag_VerifyJNIEnvThread = 0x2C2,
  Flag_VerifyFPU = 0x2C3,
  Flag_VerifyThread = 0x2C4,
  Flag_VerifyActivationFrameSize = 0x2C5,
  Flag_TraceFrequencyInlining = 0x2C6,
  Flag_InlineIntrinsics = 0x2C7,
  Flag_ProfileInterpreter = 0x2C8,
  Flag_TraceProfileInterpreter = 0x2C9,
  Flag_ProfileTraps = 0x2CA,
  Flag_ProfileMaturityPercentage = 0x2CB,
  Flag_PrintMethodData = 0x2CC,
  Flag_VerifyDataPointer = 0x2CD,
  Flag_VerifyCompiledCode = 0x2CE,
  Flag_CrashGCForDumpingJavaThread = 0x2CF,
  Flag_UseCompiler = 0x2D0,
  Flag_TraceCompilationPolicy = 0x2D1,
  Flag_TimeCompilationPolicy = 0x2D2,
  Flag_UseCounterDecay = 0x2D3,
  Flag_CounterHalfLifeTime = 0x2D4,
  Flag_CounterDecayMinIntervalLength = 0x2D5,
  Flag_AlwaysCompileLoopMethods = 0x2D6,
  Flag_DontCompileHugeMethods = 0x2D7,
  Flag_EstimateArgEscape = 0x2D8,
  Flag_BCEATraceLevel = 0x2D9,
  Flag_MaxBCEAEstimateLevel = 0x2DA,
  Flag_MaxBCEAEstimateSize = 0x2DB,
  Flag_AllocatePrefetchStyle = 0x2DC,
  Flag_AllocatePrefetchDistance = 0x2DD,
  Flag_AllocatePrefetchLines = 0x2DE,
  Flag_AllocateInstancePrefetchLines = 0x2DF,
  Flag_AllocatePrefetchStepSize = 0x2E0,
  Flag_AllocatePrefetchInstr = 0x2E1,
  Flag_TraceDeoptimization = 0x2E2,
  Flag_DebugDeoptimization = 0x2E3,
  Flag_SelfDestructTimer = 0x2E4,
  Flag_MaxJavaStackTraceDepth = 0x2E5,
  Flag_GuaranteedSafepointInterval = 0x2E6,
  Flag_SafepointTimeoutDelay = 0x2E7,
  Flag_NmethodSweepFraction = 0x2E8,
  Flag_NmethodSweepCheckInterval = 0x2E9,
  Flag_NmethodSweepActivity = 0x2EA,
  Flag_LogSweeper = 0x2EB,
  Flag_SweeperLogEntries = 0x2EC,
  Flag_MemProfilingInterval = 0x2ED,
  Flag_MallocCatchPtr = 0x2EE,
  Flag_AssertRepeat = 0x2EF,
  Flag_SuppressErrorAt = 0x2F0,
  Flag_HandleAllocationLimit = 0x2F1,
  Flag_TotalHandleAllocationLimit = 0x2F2,
  Flag_StackPrintLimit = 0x2F3,
  Flag_MaxElementPrintSize = 0x2F4,
  Flag_MaxSubklassPrintSize = 0x2F5,
  Flag_MaxInlineLevel = 0x2F6,
  Flag_MaxRecursiveInlineLevel = 0x2F7,
  Flag_MaxForceInlineLevel = 0x2F8,
  Flag_InlineSmallCode = 0x2F9,
  Flag_MaxInlineSize = 0x2FA,
  Flag_FreqInlineSize = 0x2FB,
  Flag_MaxTrivialSize = 0x2FC,
  Flag_MinInliningThreshold = 0x2FD,
  Flag_MethodHistogramCutoff = 0x2FE,
  Flag_ProfilerNumberOfInterpretedMethods = 0x2FF,
  Flag_ProfilerNumberOfCompiledMethods = 0x300,
  Flag_ProfilerNumberOfStubMethods = 0x301,
  Flag_ProfilerNumberOfRuntimeStubNodes = 0x302,
  Flag_ProfileIntervalsTicks = 0x303,
  Flag_ScavengeALotInterval = 0x304,
  Flag_FullGCALotInterval = 0x305,
  Flag_FullGCALotStart = 0x306,
  Flag_FullGCALotDummies = 0x307,
  Flag_DontYieldALotInterval = 0x308,
  Flag_MinSleepInterval = 0x309,
  Flag_ProfilerPCTickThreshold = 0x30A,
  Flag_DeoptimizeALotInterval = 0x30B,
  Flag_ZombieALotInterval = 0x30C,
  Flag_MallocVerifyInterval = 0x30D,
  Flag_MallocVerifyStart = 0x30E,
  Flag_MallocMaxTestWords = 0x30F,
  Flag_TypeProfileWidth = 0x310,
  Flag_BciProfileWidth = 0x311,
  Flag_PerMethodRecompilationCutoff = 0x312,
  Flag_PerBytecodeRecompilationCutoff = 0x313,
  Flag_PerMethodTrapLimit = 0x314,
  Flag_PerMethodSpecTrapLimit = 0x315,
  Flag_PerBytecodeTrapLimit = 0x316,
  Flag_SpecTrapLimitExtraEntries = 0x317,
  Flag_InlineFrequencyRatio = 0x318,
  Flag_InlineFrequencyCount = 0x319,
  Flag_InlineThrowCount = 0x31A,
  Flag_InlineThrowMaxSize = 0x31B,
  Flag_ProfilerNodeSize = 0x31C,
  Flag_PreInflateSpin = 0x31D,
  Flag_InitialHeapSize = 0x31E,
  Flag_MaxHeapSize = 0x31F,
  Flag_OldSize = 0x320,
  Flag_NewSize = 0x321,
  Flag_MaxNewSize = 0x322,
  Flag_PretenureSizeThreshold = 0x323,
  Flag_TLABSize = 0x324,
  Flag_MinTLABSize = 0x325,
  Flag_TLABAllocationWeight = 0x326,
  Flag_TLABWasteTargetPercent = 0x327,
  Flag_TLABRefillWasteFraction = 0x328,
  Flag_TLABWasteIncrement = 0x329,
  Flag_SurvivorRatio = 0x32A,
  Flag_NewRatio = 0x32B,
  Flag_NewSizeThreadIncrease = 0x32C,
  Flag_MetaspaceSize = 0x32D,
  Flag_MaxMetaspaceSize = 0x32E,
  Flag_CompressedClassSpaceSize = 0x32F,
  Flag_MinHeapFreeRatio = 0x330,
  Flag_MaxHeapFreeRatio = 0x331,
  Flag_SoftRefLRUPolicyMSPerMB = 0x332,
  Flag_MinHeapDeltaBytes = 0x333,
  Flag_MinMetaspaceExpansion = 0x334,
  Flag_MinMetaspaceFreeRatio = 0x335,
  Flag_MaxMetaspaceFreeRatio = 0x336,
  Flag_MaxMetaspaceExpansion = 0x337,
  Flag_QueuedAllocationWarningCount = 0x338,
  Flag_VerifyGCStartAt = 0x339,
  Flag_VerifyGCLevel = 0x33A,
  Flag_MaxTenuringThreshold = 0x33B,
  Flag_InitialTenuringThreshold = 0x33C,
  Flag_TargetSurvivorRatio = 0x33D,
  Flag_MarkSweepDeadRatio = 0x33E,
  Flag_MarkSweepAlwaysCompactCount = 0x33F,
  Flag_PrintCMSStatistics = 0x340,
  Flag_PrintCMSInitiationStatistics = 0x341,
  Flag_PrintFLSStatistics = 0x342,
  Flag_PrintFLSCensus = 0x343,
  Flag_GCExpandToAllocateDelayMillis = 0x344,
  Flag_GCWorkerDelayMillis = 0x345,
  Flag_DeferThrSuspendLoopCount = 0x346,
  Flag_DeferPollingPageLoopCount = 0x347,
  Flag_SafepointSpinBeforeYield = 0x348,
  Flag_PSChunkLargeArrays = 0x349,
  Flag_GCDrainStackTargetSize = 0x34A,
  Flag_StackYellowPages = 0x34B,
  Flag_StackRedPages = 0x34C,
  Flag_StackShadowPages = 0x34D,
  Flag_ThreadStackSize = 0x34E,
  Flag_VMThreadStackSize = 0x34F,
  Flag_CompilerThreadStackSize = 0x350,
  Flag_JVMInvokeMethodSlack = 0x351,
  Flag_ThreadSafetyMargin = 0x352,
  Flag_CodeCacheSegmentSize = 0x353,
  Flag_CodeEntryAlignment = 0x354,
  Flag_OptoLoopAlignment = 0x355,
  Flag_InitialCodeCacheSize = 0x356,
  Flag_CodeCacheMinimumUseSpace = 0x357,
  Flag_ReservedCodeCacheSize = 0x358,
  Flag_CodeCacheMinimumFreeSpace = 0x359,
  Flag_CodeCacheExpansionSize = 0x35A,
  Flag_CodeCacheMinBlockLength = 0x35B,
  Flag_ExitOnFullCodeCache = 0x35C,
  Flag_UseCodeCacheFlushing = 0x35D,
  Flag_BinarySwitchThreshold = 0x35E,
  Flag_StopInterpreterAt = 0x35F,
  Flag_TraceBytecodesAt = 0x360,
  Flag_CIStart = 0x361,
  Flag_CIStop = 0x362,
  Flag_CIStartOSR = 0x363,
  Flag_CIStopOSR = 0x364,
  Flag_CIBreakAtOSR = 0x365,
  Flag_CIBreakAt = 0x366,
  Flag_CompileOnly = 0x367,
  Flag_CompileCommandFile = 0x368,
  Flag_CompileCommand = 0x369,
  Flag_ReplayCompiles = 0x36A,
  Flag_ReplayDataFile = 0x36B,
  Flag_InlineDataFile = 0x36C,
  Flag_ReplaySuppressInitializers = 0x36D,
  Flag_ReplayIgnoreInitErrors = 0x36E,
  Flag_DumpReplayDataOnError = 0x36F,
  Flag_CICompilerCountPerCPU = 0x370,
  Flag_CIFireOOMAt = 0x371,
  Flag_CICrashAt = 0x372,
  Flag_CIObjectFactoryVerify = 0x373,
  Flag_UseThreadPriorities = 0x374,
  Flag_ThreadPriorityPolicy = 0x375,
  Flag_ThreadPriorityVerbose = 0x376,
  Flag_DefaultThreadPriority = 0x377,
  Flag_CompilerThreadPriority = 0x378,
  Flag_VMThreadPriority = 0x379,
  Flag_CompilerThreadHintNoPreempt = 0x37A,
  Flag_VMThreadHintNoPreempt = 0x37B,
  Flag_JavaPriority1_To_OSPriority = 0x37C,
  Flag_JavaPriority2_To_OSPriority = 0x37D,
  Flag_JavaPriority3_To_OSPriority = 0x37E,
  Flag_JavaPriority4_To_OSPriority = 0x37F,
  Flag_JavaPriority5_To_OSPriority = 0x380,
  Flag_JavaPriority6_To_OSPriority = 0x381,
  Flag_JavaPriority7_To_OSPriority = 0x382,
  Flag_JavaPriority8_To_OSPriority = 0x383,
  Flag_JavaPriority9_To_OSPriority = 0x384,
  Flag_JavaPriority10_To_OSPriority = 0x385,
  Flag_UseCriticalJavaThreadPriority = 0x386,
  Flag_UseCriticalCompilerThreadPriority = 0x387,
  Flag_UseCriticalCMSThreadPriority = 0x388,
  Flag_CompileTheWorldStartAt = 0x389,
  Flag_CompileTheWorldStopAt = 0x38A,
  Flag_NewCodeParameter = 0x38B,
  Flag_MinOopMapAllocation = 0x38C,
  Flag_LongCompileThreshold = 0x38D,
  Flag_StarvationMonitorInterval = 0x38E,
  Flag_CompileThreshold = 0x38F,
  Flag_BackEdgeThreshold = 0x390,
  Flag_Tier0InvokeNotifyFreqLog = 0x391,
  Flag_Tier2InvokeNotifyFreqLog = 0x392,
  Flag_Tier3InvokeNotifyFreqLog = 0x393,
  Flag_Tier23InlineeNotifyFreqLog = 0x394,
  Flag_Tier0BackedgeNotifyFreqLog = 0x395,
  Flag_Tier2BackedgeNotifyFreqLog = 0x396,
  Flag_Tier3BackedgeNotifyFreqLog = 0x397,
  Flag_Tier2CompileThreshold = 0x398,
  Flag_Tier2BackEdgeThreshold = 0x399,
  Flag_Tier3InvocationThreshold = 0x39A,
  Flag_Tier3MinInvocationThreshold = 0x39B,
  Flag_Tier3CompileThreshold = 0x39C,
  Flag_Tier3BackEdgeThreshold = 0x39D,
  Flag_Tier4InvocationThreshold = 0x39E,
  Flag_Tier4MinInvocationThreshold = 0x39F,
  Flag_Tier4CompileThreshold = 0x3A0,
  Flag_Tier4BackEdgeThreshold = 0x3A1,
  Flag_Tier3DelayOn = 0x3A2,
  Flag_Tier3DelayOff = 0x3A3,
  Flag_Tier3LoadFeedback = 0x3A4,
  Flag_Tier4LoadFeedback = 0x3A5,
  Flag_TieredCompileTaskTimeout = 0x3A6,
  Flag_TieredStopAtLevel = 0x3A7,
  Flag_Tier0ProfilingStartPercentage = 0x3A8,
  Flag_IncreaseFirstTierCompileThresholdAt = 0x3A9,
  Flag_TieredRateUpdateMinTime = 0x3AA,
  Flag_TieredRateUpdateMaxTime = 0x3AB,
  Flag_TieredCompilation = 0x3AC,
  Flag_PrintTieredEvents = 0x3AD,
  Flag_OnStackReplacePercentage = 0x3AE,
  Flag_InterpreterProfilePercentage = 0x3AF,
  Flag_MaxRecompilationSearchLength = 0x3B0,
  Flag_MaxInterpretedSearchLength = 0x3B1,
  Flag_DesiredMethodLimit = 0x3B2,
  Flag_HugeMethodLimit = 0x3B3,
  Flag_UseNewReflection = 0x3B4,
  Flag_VerifyReflectionBytecodes = 0x3B5,
  Flag_ReflectionWrapResolutionErrors = 0x3B6,
  Flag_FastSuperclassLimit = 0x3B7,
  Flag_MaxDirectMemorySize = 0x3B8,
  Flag_UseNewCode = 0x3B9,
  Flag_UseNewCode2 = 0x3BA,
  Flag_UseNewCode3 = 0x3BB,
  Flag_UsePerfData = 0x3BC,
  Flag_PerfDataSaveToFile = 0x3BD,
  Flag_PerfDataSaveFile = 0x3BE,
  Flag_PerfDataSamplingInterval = 0x3BF,
  Flag_PerfTraceDataCreation = 0x3C0,
  Flag_PerfTraceMemOps = 0x3C1,
  Flag_PerfDisableSharedMem = 0x3C2,
  Flag_PerfDataMemorySize = 0x3C3,
  Flag_PerfMaxStringConstLength = 0x3C4,
  Flag_PerfAllowAtExitRegistration = 0x3C5,
  Flag_PerfBypassFileSystemCheck = 0x3C6,
  Flag_UnguardOnExecutionViolation = 0x3C7,
  Flag_ManagementServer = 0x3C8,
  Flag_DisableAttachMechanism = 0x3C9,
  Flag_StartAttachListener = 0x3CA,
  Flag_PrintConcurrentLocks = 0x3CB,
  Flag_TransmitErrorReport = 0x3CC,
  Flag_ErrorReportServer = 0x3CD,
  Flag_UseSharedSpaces = 0x3CE,
  Flag_VerifySharedSpaces = 0x3CF,
  Flag_RequireSharedSpaces = 0x3D0,
  Flag_DumpSharedSpaces = 0x3D1,
  Flag_PrintSharedSpaces = 0x3D2,
  Flag_PrintSharedArchiveAndExit = 0x3D3,
  Flag_PrintSharedDictionary = 0x3D4,
  Flag_SharedReadWriteSize = 0x3D5,
  Flag_SharedReadOnlySize = 0x3D6,
  Flag_SharedMiscDataSize = 0x3D7,
  Flag_SharedMiscCodeSize = 0x3D8,
  Flag_SharedBaseAddress = 0x3D9,
  Flag_EnableInvokeDynamic = 0x3DA,
  Flag_IgnoreUnverifiableClassesDuringDump = 0x3DB,
  Flag_PrintMethodHandleStubs = 0x3DC,
  Flag_TraceMethodHandles = 0x3DD,
  Flag_VerifyMethodHandles = 0x3DE,
  Flag_ShowHiddenFrames = 0x3DF,
  Flag_TrustFinalNonStaticFields = 0x3E0,
  Flag_FoldStableValues = 0x3E1,
  Flag_TraceInvokeDynamic = 0x3E2,
  Flag_PauseAtStartup = 0x3E3,
  Flag_PauseAtStartupFile = 0x3E4,
  Flag_PauseAtExit = 0x3E5,
  Flag_ExtendedDTraceProbes = 0x3E6,
  Flag_DTraceMethodProbes = 0x3E7,
  Flag_DTraceAllocProbes = 0x3E8,
  Flag_DTraceMonitorProbes = 0x3E9,
  Flag_RelaxAccessControlCheck = 0x3EA,
  Flag_PrintDTraceDOF = 0x3EB,
  Flag_StringTableSize = 0x3EC,
  Flag_SymbolTableSize = 0x3ED,
  Flag_UseStringDeduplication = 0x3EE,
  Flag_PrintStringDeduplicationStatistics = 0x3EF,
  Flag_StringDeduplicationAgeThreshold = 0x3F0,
  Flag_StringDeduplicationResizeALot = 0x3F1,
  Flag_StringDeduplicationRehashALot = 0x3F2,
  Flag_TraceDefaultMethods = 0x3F3,
  Flag_VerifyGenericSignatures = 0x3F4,
  Flag_UseVMInterruptibleIO = 0x3F5,
  Flag_WhiteBoxAPI = 0x3F6,
  Flag_PrintGCCause = 0x3F7,
  Flag_SurvivorAlignmentInBytes = 0x3F8,
  Flag_AllowNonVirtualCalls = 0x3F9,
  Flag_DumpLoadedClassList = 0x3FA,
  Flag_SharedClassListFile = 0x3FB,
  Flag_SharedArchiveFile = 0x3FC,
  Flag_ExtraSharedClassListFile = 0x3FD,
  Flag_ArrayAllocatorMallocLimit = 0x3FE,
  Flag_PreserveFramePointer = 0x3FF,
  Flag_EnableTracing = 0x400,
  Flag_UseLockedTracing = 0x401,
  Flag_UseFastUnorderedTimeStamps = 0x402,
  Flag_UseUTCFileTimestamp = 0x403,
  Flag_G1ConfidencePercent = 0x404,
  Flag_G1MarkingOverheadPercent = 0x405,
  Flag_G1MarkingVerboseLevel = 0x406,
  Flag_G1PrintReachableAtInitialMark = 0x407,
  Flag_G1VerifyDuringGCPrintReachable = 0x408,
  Flag_G1PrintReachableBaseFile = 0x409,
  Flag_G1TraceMarkStackOverflow = 0x40A,
  Flag_G1TraceHeapRegionRememberedSet = 0x40B,
  Flag_G1SummarizeConcMark = 0x40C,
  Flag_G1SummarizeRSetStats = 0x40D,
  Flag_G1SummarizeRSetStatsPeriod = 0x40E,
  Flag_G1TraceConcRefinement = 0x40F,
  Flag_G1TraceStringSymbolTableScrubbing = 0x410,
  Flag_G1ConcMarkStepDurationMillis = 0x411,
  Flag_G1RefProcDrainInterval = 0x412,
  Flag_G1UseConcMarkReferenceProcessing = 0x413,
  Flag_G1SATBBufferSize = 0x414,
  Flag_G1SATBProcessCompletedThreshold = 0x415,
  Flag_G1SATBBufferEnqueueingThresholdPercent = 0x416,
  Flag_G1SATBPrintStubs = 0x417,
  Flag_G1ExpandByPercentOfAvailable = 0x418,
  Flag_G1RSBarrierRegionFilter = 0x419,
  Flag_G1RSLogCheckCardTable = 0x41A,
  Flag_G1PrintRegionLivenessInfo = 0x41B,
  Flag_G1UpdateBufferSize = 0x41C,
  Flag_G1ConcRefinementYellowZone = 0x41D,
  Flag_G1ConcRefinementRedZone = 0x41E,
  Flag_G1ConcRefinementGreenZone = 0x41F,
  Flag_G1ConcRefinementServiceIntervalMillis = 0x420,
  Flag_G1ConcRefinementThresholdStep = 0x421,
  Flag_G1RSetUpdatingPauseTimePercent = 0x422,
  Flag_G1UseAdaptiveConcRefinement = 0x423,
  Flag_G1ConcRSLogCacheSize = 0x424,
  Flag_G1ConcRSHotCardLimit = 0x425,
  Flag_G1RSetRegionEntriesBase = 0x426,
  Flag_G1RSetRegionEntries = 0x427,
  Flag_G1RSetSparseRegionEntriesBase = 0x428,
  Flag_G1RSetSparseRegionEntries = 0x429,
  Flag_G1RecordHRRSOops = 0x42A,
  Flag_G1RecordHRRSEvents = 0x42B,
  Flag_G1MaxVerifyFailures = 0x42C,
  Flag_G1ScrubRemSets = 0x42D,
  Flag_G1RSScrubVerbose = 0x42E,
  Flag_G1YoungSurvRateVerbose = 0x42F,
  Flag_G1YoungSurvRateNumRegionsSummary = 0x430,
  Flag_G1ReservePercent = 0x431,
  Flag_G1PrintHeapRegions = 0x432,
  Flag_G1HRRSUseSparseTable = 0x433,
  Flag_G1HRRSFlushLogBuffersOnVerify = 0x434,
  Flag_G1FailOnFPError = 0x435,
  Flag_G1HeapRegionSize = 0x436,
  Flag_G1ConcRefinementThreads = 0x437,
  Flag_G1VerifyCTCleanup = 0x438,
  Flag_G1RSetScanBlockSize = 0x439,
  Flag_G1SecondaryFreeListAppendLength = 0x43A,
  Flag_G1ConcRegionFreeingVerbose = 0x43B,
  Flag_G1StressConcRegionFreeing = 0x43C,
  Flag_G1StressConcRegionFreeingDelayMillis = 0x43D,
  Flag_G1DummyRegionsPerGC = 0x43E,
  Flag_G1ExitOnExpansionFailure = 0x43F,
  Flag_G1ConcMarkForceOverflow = 0x440,
  Flag_G1NewSizePercent = 0x441,
  Flag_G1MaxNewSizePercent = 0x442,
  Flag_G1MixedGCLiveThresholdPercent = 0x443,
  Flag_G1HeapWastePercent = 0x444,
  Flag_G1MixedGCCountTarget = 0x445,
  Flag_G1EagerReclaimHumongousObjects = 0x446,
  Flag_G1EagerReclaimHumongousObjectsWithStaleRefs = 0x447,
  Flag_G1TraceEagerReclaimHumongousObjects = 0x448,
  Flag_G1OldCSetRegionThresholdPercent = 0x449,
  Flag_G1LogLevel = 0x44A,
  Flag_G1EvacuationFailureALot = 0x44B,
  Flag_G1EvacuationFailureALotCount = 0x44C,
  Flag_G1EvacuationFailureALotInterval = 0x44D,
  Flag_G1EvacuationFailureALotDuringConcMark = 0x44E,
  Flag_G1EvacuationFailureALotDuringInitialMark = 0x44F,
  Flag_G1EvacuationFailureALotDuringYoungGC = 0x450,
  Flag_G1EvacuationFailureALotDuringMixedGC = 0x451,
  Flag_G1VerifyRSetsDuringFullGC = 0x452,
  Flag_G1VerifyHeapRegionCodeRoots = 0x453,
  Flag_G1VerifyBitmaps = 0x454,
  Flag_ShenandoahRegionSize = 0x455,
  Flag_ShenandoahTargetNumRegions = 0x456,
  Flag_ShenandoahMinRegionSize = 0x457,
  Flag_ShenandoahMaxRegionSize = 0x458,
  Flag_ShenandoahHumongousThreshold = 0x459,
  Flag_ShenandoahGCMode = 0x45A,
  Flag_ShenandoahGCHeuristics = 0x45B,
  Flag_ShenandoahRefProcFrequency = 0x45C,
  Flag_ShenandoahUnloadClassesFrequency = 0x45D,
  Flag_ShenandoahGarbageThreshold = 0x45E,
  Flag_ShenandoahInitFreeThreshold = 0x45F,
  Flag_ShenandoahMinFreeThreshold = 0x460,
  Flag_ShenandoahAllocationThreshold = 0x461,
  Flag_ShenandoahAllocSpikeFactor = 0x462,
  Flag_ShenandoahLearningSteps = 0x463,
  Flag_ShenandoahImmediateThreshold = 0x464,
  Flag_ShenandoahGuaranteedGCInterval = 0x465,
  Flag_ShenandoahAlwaysClearSoftRefs = 0x466,
  Flag_ShenandoahUncommit = 0x467,
  Flag_ShenandoahUncommitDelay = 0x468,
  Flag_ShenandoahRegionSampling = 0x469,
  Flag_ShenandoahRegionSamplingRate = 0x46A,
  Flag_ShenandoahControlIntervalMin = 0x46B,
  Flag_ShenandoahControlIntervalMax = 0x46C,
  Flag_ShenandoahControlIntervalAdjustPeriod = 0x46D,
  Flag_ShenandoahCriticalControlThreadPriority = 0x46E,
  Flag_ShenandoahVerify = 0x46F,
  Flag_ShenandoahVerifyLevel = 0x470,
  Flag_ShenandoahElasticTLAB = 0x471,
  Flag_ShenandoahEvacReserve = 0x472,
  Flag_ShenandoahEvacWaste = 0x473,
  Flag_ShenandoahEvacReserveOverflow = 0x474,
  Flag_ShenandoahPacing = 0x475,
  Flag_ShenandoahPacingMaxDelay = 0x476,
  Flag_ShenandoahPacingIdleSlack = 0x477,
  Flag_ShenandoahPacingCycleSlack = 0x478,
  Flag_ShenandoahPacingSurcharge = 0x479,
  Flag_ShenandoahCriticalFreeThreshold = 0x47A,
  Flag_ShenandoahDegeneratedGC = 0x47B,
  Flag_ShenandoahFullGCThreshold = 0x47C,
  Flag_ShenandoahImplicitGCInvokesConcurrent = 0x47D,
  Flag_ShenandoahHumongousMoves = 0x47E,
  Flag_ShenandoahOOMDuringEvacALot = 0x47F,
  Flag_ShenandoahAllocFailureALot = 0x480,
  Flag_ShenandoahMarkScanPrefetch = 0x481,
  Flag_ShenandoahMarkLoopStride = 0x482,
  Flag_ShenandoahParallelRegionStride = 0x483,
  Flag_ShenandoahSATBBufferSize = 0x484,
  Flag_ShenandoahSATBBufferFlushInterval = 0x485,
  Flag_ShenandoahPreclean = 0x486,
  Flag_ShenandoahSATBBarrier = 0x487,
  Flag_ShenandoahStoreValEnqueueBarrier = 0x488,
  Flag_ShenandoahCASBarrier = 0x489,
  Flag_ShenandoahCloneBarrier = 0x48A,
  Flag_ShenandoahLoadRefBarrier = 0x48B,
  Flag_ShenandoahCodeRootsStyle = 0x48C,
  Flag_ShenandoahOptimizeStaticFinals = 0x48D,
  Flag_ShenandoahVerifyOptoBarriers = 0x48E,
  Flag_ShenandoahLogTrace = 0x48F,
  Flag_ShenandoahLogDebug = 0x490,
  Flag_ShenandoahLogInfo = 0x491,
  Flag_ShenandoahLogWarning = 0x492,
  Flag_PrintC1Statistics = 0x493,
  Flag_PrintInitialBlockList = 0x494,
  Flag_PrintCFG = 0x495,
  Flag_PrintCFG0 = 0x496,
  Flag_PrintCFG1 = 0x497,
  Flag_PrintCFG2 = 0x498,
  Flag_PrintIRDuringConstruction = 0x499,
  Flag_PrintPhiFunctions = 0x49A,
  Flag_PrintIR = 0x49B,
  Flag_PrintIR0 = 0x49C,
  Flag_PrintIR1 = 0x49D,
  Flag_PrintIR2 = 0x49E,
  Flag_PrintSimpleStubs = 0x49F,
  Flag_UseC1Optimizations = 0x4A0,
  Flag_SelectivePhiFunctions = 0x4A1,
  Flag_OptimizeIfOps = 0x4A2,
  Flag_DoCEE = 0x4A3,
  Flag_PrintCEE = 0x4A4,
  Flag_UseLocalValueNumbering = 0x4A5,
  Flag_UseGlobalValueNumbering = 0x4A6,
  Flag_UseLoopInvariantCodeMotion = 0x4A7,
  Flag_TracePredicateFailedTraps = 0x4A8,
  Flag_StressLoopInvariantCodeMotion = 0x4A9,
  Flag_TraceRangeCheckElimination = 0x4AA,
  Flag_AssertRangeCheckElimination = 0x4AB,
  Flag_StressRangeCheckElimination = 0x4AC,
  Flag_PrintValueNumbering = 0x4AD,
  Flag_ValueMapInitialSize = 0x4AE,
  Flag_ValueMapMaxLoopSize = 0x4AF,
  Flag_EliminateBlocks = 0x4B0,
  Flag_PrintBlockElimination = 0x4B1,
  Flag_EliminateNullChecks = 0x4B2,
  Flag_PrintNullCheckElimination = 0x4B3,
  Flag_EliminateFieldAccess = 0x4B4,
  Flag_InlineMethodsWithExceptionHandlers = 0x4B5,
  Flag_InlineSynchronizedMethods = 0x4B6,
  Flag_InlineNIOCheckIndex = 0x4B7,
  Flag_CanonicalizeNodes = 0x4B8,
  Flag_PrintCanonicalization = 0x4B9,
  Flag_UseTableRanges = 0x4BA,
  Flag_RoundFPResults = 0x4BB,
  Flag_NestedInliningSizeRatio = 0x4BC,
  Flag_PrintIRWithLIR = 0x4BD,
  Flag_PrintLIRWithAssembly = 0x4BE,
  Flag_CommentedAssembly = 0x4BF,
  Flag_LIRTracePeephole = 0x4C0,
  Flag_LIRTraceExecution = 0x4C1,
  Flag_LIRFillDelaySlots = 0x4C2,
  Flag_CSEArrayLength = 0x4C3,
  Flag_TwoOperandLIRForm = 0x4C4,
  Flag_TraceLinearScanLevel = 0x4C5,
  Flag_StressLinearScan = 0x4C6,
  Flag_TimeLinearScan = 0x4C7,
  Flag_TimeEachLinearScan = 0x4C8,
  Flag_CountLinearScan = 0x4C9,
  Flag_C1Breakpoint = 0x4CA,
  Flag_ImplicitDiv0Checks = 0x4CB,
  Flag_PinAllInstructions = 0x4CC,
  Flag_UseFastNewInstance = 0x4CD,
  Flag_UseFastNewTypeArray = 0x4CE,
  Flag_UseFastNewObjectArray = 0x4CF,
  Flag_UseFastLocking = 0x4D0,
  Flag_UseSlowPath = 0x4D1,
  Flag_GenerateArrayStoreCheck = 0x4D2,
  Flag_DeoptC1 = 0x4D3,
  Flag_PrintBailouts = 0x4D4,
  Flag_TracePatching = 0x4D5,
  Flag_PatchALot = 0x4D6,
  Flag_PrintNotLoaded = 0x4D7,
  Flag_PrintLIR = 0x4D8,
  Flag_BailoutAfterHIR = 0x4D9,
  Flag_BailoutAfterLIR = 0x4DA,
  Flag_BailoutOnExceptionHandlers = 0x4DB,
  Flag_InstallMethods = 0x4DC,
  Flag_NMethodSizeLimit = 0x4DD,
  Flag_TraceFPUStack = 0x4DE,
  Flag_TraceFPURegisterUsage = 0x4DF,
  Flag_OptimizeUnsafes = 0x4E0,
  Flag_PrintUnsafeOptimization = 0x4E1,
  Flag_InstructionCountCutoff = 0x4E2,
  Flag_SafepointPollOffset = 0x4E3,
  Flag_ComputeExactFPURegisterUsage = 0x4E4,
  Flag_C1ProfileCalls = 0x4E5,
  Flag_C1ProfileVirtualCalls = 0x4E6,
  Flag_C1ProfileInlinedCalls = 0x4E7,
  Flag_C1ProfileBranches = 0x4E8,
  Flag_C1ProfileCheckcasts = 0x4E9,
  Flag_C1OptimizeVirtualCallProfiling = 0x4EA,
  Flag_C1UpdateMethodData = 0x4EB,
  Flag_PrintCFGToFile = 0x4EC,
  Flag_C1PatchInvokeDynamic = 0x4ED,
  Flag_StressLCM = 0x4EE,
  Flag_StressGCM = 0x4EF,
  Flag_CompileZapFirst = 0x4F0,
  Flag_CompileZapLast = 0x4F1,
  Flag_ZapDeadCompiledLocalsFirst = 0x4F2,
  Flag_ZapDeadCompiledLocalsLast = 0x4F3,
  Flag_OptoPrologueNops = 0x4F4,
  Flag_InteriorEntryAlignment = 0x4F5,
  Flag_MaxLoopPad = 0x4F6,
  Flag_MaxVectorSize = 0x4F7,
  Flag_AlignVector = 0x4F8,
  Flag_NumberOfLoopInstrToAlign = 0x4F9,
  Flag_IndexSetWatch = 0x4FA,
  Flag_OptoNodeListSize = 0x4FB,
  Flag_OptoBlockListSize = 0x4FC,
  Flag_OptoPeepholeAt = 0x4FD,
  Flag_PrintIdeal = 0x4FE,
  Flag_PrintOpto = 0x4FF,
  Flag_PrintOptoInlining = 0x500,
  Flag_VerifyOpto = 0x501,
  Flag_VerifyIdealNodeCount = 0x502,
  Flag_PrintIdealNodeCount = 0x503,
  Flag_VerifyOptoOopOffsets = 0x504,
  Flag_IdealizedNumerics = 0x505,
  Flag_OptoBreakpoint = 0x506,
  Flag_OptoBreakpointOSR = 0x507,
  Flag_BreakAtNode = 0x508,
  Flag_OptoBreakpointC2R = 0x509,
  Flag_OptoNoExecute = 0x50A,
  Flag_PrintOptoStatistics = 0x50B,
  Flag_PrintOptoAssembly = 0x50C,
  Flag_OptoPeephole = 0x50D,
  Flag_OptoRemoveUseless = 0x50E,
  Flag_PrintFrameConverterAssembly = 0x50F,
  Flag_PrintParseStatistics = 0x510,
  Flag_PrintOptoPeephole = 0x511,
  Flag_PrintCFGBlockFreq = 0x512,
  Flag_TraceOptoParse = 0x513,
  Flag_LoopUnrollLimit = 0x514,
  Flag_LoopMaxUnroll = 0x515,
  Flag_LoopUnrollMin = 0x516,
  Flag_UnrollLimitForProfileCheck = 0x517,
  Flag_MultiArrayExpandLimit = 0x518,
  Flag_TraceProfileTripCount = 0x519,
  Flag_UseCountedLoopSafepoints = 0x51A,
  Flag_UseLoopPredicate = 0x51B,
  Flag_TraceLoopPredicate = 0x51C,
  Flag_TraceLoopOpts = 0x51D,
  Flag_LoopLimitCheck = 0x51E,
  Flag_TraceLoopLimitCheck = 0x51F,
  Flag_RangeLimitCheck = 0x520,
  Flag_TraceRangeLimitCheck = 0x521,
  Flag_UnrollLimitCheck = 0x522,
  Flag_OptimizeFill = 0x523,
  Flag_TraceOptimizeFill = 0x524,
  Flag_OptoCoalesce = 0x525,
  Flag_UseUniqueSubclasses = 0x526,
  Flag_UseExactTypes = 0x527,
  Flag_TrackedInitializationLimit = 0x528,
  Flag_ReduceFieldZeroing = 0x529,
  Flag_ReduceInitialCardMarks = 0x52A,
  Flag_ReduceBulkZeroing = 0x52B,
  Flag_UseFPUForSpilling = 0x52C,
  Flag_RegisterCostAreaRatio = 0x52D,
  Flag_UseCISCSpill = 0x52E,
  Flag_VerifyGraphEdges = 0x52F,
  Flag_VerifyDUIterators = 0x530,
  Flag_VerifyHashTableKeys = 0x531,
  Flag_VerifyRegisterAllocator = 0x532,
  Flag_FLOATPRESSURE = 0x533,
  Flag_INTPRESSURE = 0x534,
  Flag_TraceOptoPipelining = 0x535,
  Flag_TraceOptoOutput = 0x536,
  Flag_OptoScheduling = 0x537,
  Flag_PartialPeelLoop = 0x538,
  Flag_PartialPeelNewPhiDelta = 0x539,
  Flag_TracePartialPeeling = 0x53A,
  Flag_PartialPeelAtUnsignedTests = 0x53B,
  Flag_ReassociateInvariants = 0x53C,
  Flag_LoopUnswitching = 0x53D,
  Flag_TraceLoopUnswitching = 0x53E,
  Flag_UseSuperWord = 0x53F,
  Flag_SuperWordRTDepCheck = 0x540,
  Flag_TraceSuperWord = 0x541,
  Flag_TraceNewVectors = 0x542,
  Flag_OptoBundling = 0x543,
  Flag_ConditionalMoveLimit = 0x544,
  Flag_BranchOnRegister = 0x545,
  Flag_SparcV9RegsHiBitsZero = 0x546,
  Flag_UseRDPCForConstantTableBase = 0x547,
  Flag_PrintIdealGraphLevel = 0x548,
  Flag_PrintIdealGraphPort = 0x549,
  Flag_PrintIdealGraphAddress = 0x54A,
  Flag_PrintIdealGraphFile = 0x54B,
  Flag_UseBimorphicInlining = 0x54C,
  Flag_UseOnlyInlinedBimorphic = 0x54D,
  Flag_InsertMemBarAfterArraycopy = 0x54E,
  Flag_SubsumeLoads = 0x54F,
  Flag_StressRecompilation = 0x550,
  Flag_ImplicitNullCheckThreshold = 0x551,
  Flag_LoopOptsCount = 0x552,
  Flag_NodeCountInliningCutoff = 0x553,
  Flag_NodeCountInliningStep = 0x554,
  Flag_InlineWarmCalls = 0x555,
  Flag_HotCallCountThreshold = 0x556,
  Flag_HotCallProfitThreshold = 0x557,
  Flag_HotCallTrivialWork = 0x558,
  Flag_HotCallTrivialSize = 0x559,
  Flag_WarmCallMinCount = 0x55A,
  Flag_WarmCallMinProfit = 0x55B,
  Flag_WarmCallMaxWork = 0x55C,
  Flag_WarmCallMaxSize = 0x55D,
  Flag_MaxNodeLimit = 0x55E,
  Flag_NodeLimitFudgeFactor = 0x55F,
  Flag_UseJumpTables = 0x560,
  Flag_UseDivMod = 0x561,
  Flag_MinJumpTableSize = 0x562,
  Flag_MaxJumpTableSize = 0x563,
  Flag_MaxJumpTableSparseness = 0x564,
  Flag_EliminateLocks = 0x565,
  Flag_EliminateNestedLocks = 0x566,
  Flag_PrintLockStatistics = 0x567,
  Flag_PrintPreciseBiasedLockingStatistics = 0x568,
  Flag_PrintPreciseRTMLockingStatistics = 0x569,
  Flag_PrintEliminateLocks = 0x56A,
  Flag_EliminateAutoBox = 0x56B,
  Flag_UseImplicitStableValues = 0x56C,
  Flag_AutoBoxCacheMax = 0x56D,
  Flag_AggressiveUnboxing = 0x56E,
  Flag_TracePostallocExpand = 0x56F,
  Flag_DoEscapeAnalysis = 0x570,
  Flag_EscapeAnalysisTimeout = 0x571,
  Flag_ExitEscapeAnalysisOnTimeout = 0x572,
  Flag_PrintEscapeAnalysis = 0x573,
  Flag_EliminateAllocations = 0x574,
  Flag_PrintEliminateAllocations = 0x575,
  Flag_EliminateAllocationArraySizeLimit = 0x576,
  Flag_OptimizePtrCompare = 0x577,
  Flag_PrintOptimizePtrCompare = 0x578,
  Flag_VerifyConnectionGraph = 0x579,
  Flag_UseOptoBiasInlining = 0x57A,
  Flag_OptimizeStringConcat = 0x57B,
  Flag_PrintOptimizeStringConcat = 0x57C,
  Flag_ValueSearchLimit = 0x57D,
  Flag_MaxLabelRootDepth = 0x57E,
  Flag_DominatorSearchLimit = 0x57F,
  Flag_BlockLayoutByFrequency = 0x580,
  Flag_BlockLayoutMinDiamondPercentage = 0x581,
  Flag_BlockLayoutRotateLoops = 0x582,
  Flag_InlineReflectionGetCallerClass = 0x583,
  Flag_InlineObjectCopy = 0x584,
  Flag_SpecialStringCompareTo = 0x585,
  Flag_SpecialStringIndexOf = 0x586,
  Flag_SpecialStringEquals = 0x587,
  Flag_SpecialArraysEquals = 0x588,
  Flag_SpecialEncodeISOArray = 0x589,
  Flag_BailoutToInterpreterForThrows = 0x58A,
  Flag_ConvertCmpD2CmpF = 0x58B,
  Flag_ConvertFloat2IntClipping = 0x58C,
  Flag_Use24BitFPMode = 0x58D,
  Flag_Use24BitFP = 0x58E,
  Flag_MonomorphicArrayCheck = 0x58F,
  Flag_TracePhaseCCP = 0x590,
  Flag_PrintDominators = 0x591,
  Flag_TraceSpilling = 0x592,
  Flag_TraceTypeProfile = 0x593,
  Flag_PoisonOSREntry = 0x594,
  Flag_UseCondCardMark = 0x595,
  Flag_SoftMatchFailure = 0x596,
  Flag_InlineAccessors = 0x597,
  Flag_TypeProfileMajorReceiverPercent = 0x598,
  Flag_TimeCompiler2 = 0x599,
  Flag_PrintIntrinsics = 0x59A,
  Flag_DisableIntrinsic = 0x59B,
  Flag_StressReflectiveCode = 0x59C,
  Flag_DebugInlinedCalls = 0x59D,
  Flag_VerifyLoopOptimizations = 0x59E,
  Flag_ProfileDynamicTypes = 0x59F,
  Flag_TraceIterativeGVN = 0x5A0,
  Flag_VerifyIterativeGVN = 0x5A1,
  Flag_TraceCISCSpill = 0x5A2,
  Flag_SplitIfBlocks = 0x5A3,
  Flag_FreqCountInvocations = 0x5A4,
  Flag_AliasLevel = 0x5A5,
  Flag_VerifyAliases = 0x5A6,
  Flag_IncrementalInline = 0x5A7,
  Flag_AlwaysIncrementalInline = 0x5A8,
  Flag_LiveNodeCountInliningCutoff = 0x5A9,
  Flag_OptimizeExpensiveOps = 0x5AA,
  Flag_UseMathExactIntrinsics = 0x5AB,
  Flag_UseMultiplyToLenIntrinsic = 0x5AC,
  Flag_UseSquareToLenIntrinsic = 0x5AD,
  Flag_UseMulAddIntrinsic = 0x5AE,
  Flag_UseMontgomeryMultiplyIntrinsic = 0x5AF,
  Flag_UseMontgomerySquareIntrinsic = 0x5B0,
  Flag_UseTypeSpeculation = 0x5B1,
  Flag_UseInlineDepthForSpeculativeTypes = 0x5B2,
  Flag_TrapBasedRangeChecks = 0x5B3,
  Flag_RenumberLiveNodes = 0x5B4,
  Flag_IEEEPrecision = 0x5B5,
  Flag_FenceInstruction = 0x5B6,
  Flag_ReadPrefetchInstr = 0x5B7,
  Flag_UseStoreImmI16 = 0x5B8,
  Flag_UseAVX = 0x5B9,
  Flag_UseCLMUL = 0x5BA,
  Flag_UseIncDec = 0x5BB,
  Flag_UseNewLongLShift = 0x5BC,
  Flag_UseAddressNop = 0x5BD,
  Flag_UseXmmLoadAndClearUpper = 0x5BE,
  Flag_UseXmmRegToRegMoveAll = 0x5BF,
  Flag_UseXmmI2D = 0x5C0,
  Flag_UseXmmI2F = 0x5C1,
  Flag_UseUnalignedLoadStores = 0x5C2,
  Flag_UseFastStosb = 0x5C3,
  Flag_UseRTMLocking = 0x5C4,
  Flag_UseRTMForStackLocks = 0x5C5,
  Flag_UseRTMDeopt = 0x5C6,
  Flag_RTMRetryCount = 0x5C7,
  Flag_RTMSpinLoopCount = 0x5C8,
  Flag_RTMAbortThreshold = 0x5C9,
  Flag_RTMLockingThreshold = 0x5CA,
  Flag_RTMAbortRatio = 0x5CB,
  Flag_RTMTotalCountIncrRate = 0x5CC,
  Flag_RTMLockingCalculationDelay = 0x5CD,
  Flag_UseRTMXendForLockBusy = 0x5CE,
  Flag_Use486InstrsOnly = 0x5CF,
  Flag_UseCountLeadingZerosInstruction = 0x5D0,
  Flag_UseCountTrailingZerosInstruction = 0x5D1,
  Flag_UseBMI1Instructions = 0x5D2,
  Flag_UseBMI2Instructions = 0x5D3,
  NUM_CommandLineFlag = 0x5D4,
};

/* 311 */
enum os::ThreadType : __int32
{
  vm_thread = 0x0,
  cgc_thread = 0x1,
  pgc_thread = 0x2,
  java_thread = 0x3,
  compiler_thread = 0x4,
  watcher_thread = 0x5,
  os_thread = 0x6,
};

/* 312 */
enum ThreadPriority : __int32
{
  NoPriority = 0xFFFFFFFF,
  MinPriority = 0x1,
  NormPriority = 0x5,
  NearMaxPriority = 0x9,
  MaxPriority = 0xA,
  CriticalPriority = 0xB,
};

/* 313 */
enum ObjArrayChunkedTask::<unnamed_tag> : __int32
{
  chunk_bits = 0xA,
  pow_bits = 0x5,
};

/* 314 */
enum CollectorPolicy::Name : __int32
{
  CollectorPolicyKind = 0x0,
  TwoGenerationCollectorPolicyKind = 0x1,
  ConcurrentMarkSweepPolicyKind = 0x2,
  ASConcurrentMarkSweepPolicyKind = 0x3,
  G1CollectorPolicyKind = 0x4,
};

/* 315 */
typedef TaskQueueSuper<16384,5>::<unnamed_tag> TaskQueueSuper<16384,1>::<unnamed_tag>;

/* 316 */
typedef BarrierSet::Name GenRemSet::Name;

/* 317 */
enum ObjectStartArray::BlockSizeConstants : __int32
{
  block_shift = 0x9,
  block_size = 0x200,
  block_size_in_words = 0x80,
};

/* 318 */
enum CardTableRS::ExtendedCardValue : __int32
{
  youngergen_card = 0x11,
  youngergenP1_card = 0x12,
  youngergenP2_card = 0x13,
  youngergenP3_card = 0x14,
  cur_youngergen_and_prev_nonclean_card = 0x15,
};

/* 319 */
enum StarTask::<unnamed_tag> : __int32
{
  COMPRESSED_OOP_MASK = 0x1,
};

/* 320 */
enum GenCollectedHeap::ScanningOption : __int32
{
  SO_None = 0x0,
  SO_AllCodeCache = 0x8,
  SO_ScavengeCodeCache = 0x10,
};

/* 321 */
typedef CardTableRS::ExtendedCardValue CardTableExtension::ExtendedCardValue;

/* 322 */
enum PSPromotionLAB::LabState : __int32
{
  needs_flush = 0x0,
  flushed = 0x1,
  zero_size = 0x2,
};

/* 323 */
typedef GCName Generation::Name;

/* 324 */
enum PSScavenge::ScavengeSkippedCause : __int32
{
  not_skipped = 0x0,
  to_space_not_empty = 0x1,
  promoted_too_large = 0x2,
  full_follows_scavenge = 0x3,
};

/* 325 */
enum Prefetch::style : __int32
{
  do_none = 0x0,
  do_read = 0x1,
  do_write = 0x2,
};

/* 326 */
enum CardTableModRefBS::PrecisionStyle : __int32
{
  Precise = 0x0,
  ObjHeadPreciseArray = 0x1,
};

/* 327 */
enum AdaptiveSizePolicy::GCPolicyKind : __int32
{
  _gc_adaptive_size_policy = 0x0,
  _gc_ps_adaptive_size_policy = 0x1,
  _gc_cms_adaptive_size_policy = 0x2,
};

/* 328 */
typedef ShenandoahLoadReferenceBarrierNode::Strength GCPolicyCounters::Name;

/* 329 */
enum ScavengeRootsTask::RootType : __int32
{
  universe = 0x1,
  jni_handles = 0x2,
  threads = 0x3,
  object_synchronizer = 0x4,
  flat_profiler = 0x5,
  system_dictionary = 0x6,
  class_loader_data = 0x7,
  management = 0x8,
  jvmti = 0x9,
  code_cache = 0xA,
};

/* 330 */
enum GCTask::Kind::kind : __int32
{
  unknown_task = 0x0,
  ordinary_task = 0x1,
  barrier_task = 0x2,
  noop_task = 0x3,
  idle_task = 0x4,
};

/* 331 */
enum PSParallelCompact::SpaceId : __int32
{
  old_space_id = 0x0,
  eden_space_id = 0x1,
  from_space_id = 0x2,
  to_space_id = 0x3,
  last_space_id = 0x4,
};

/* 332 */
enum ParMarkBitMap::IterationStatus : __int32
{
  incomplete = 0x0,
  complete = 0x1,
  full = 0x2,
  would_overflow = 0x3,
};

/* 333 */
typedef TaskQueueSuper<16384,5>::<unnamed_tag> TaskQueueSuper<4096,5>::<unnamed_tag>;

/* 334 */
typedef ScavengeRootsTask::RootType MarkFromRootsTask::RootType;

/* 335 */
typedef TaskQueueSuper<16384,5>::<unnamed_tag> TaskQueueSuper<16384,7>::<unnamed_tag>;

/* 336 */
enum ObjectStartArray::BlockValueConstants : __int32
{
  clean_block = 0xFFFFFFFF,
};

/* 337 */
enum ParCompactionManager::Action : __int32
{
  Update = 0x0,
  Copy = 0x1,
  UpdateAndCopy = 0x2,
  CopyAndUpdate = 0x3,
  NotValid = 0x4,
};

/* 338 */
enum AdaptiveSizePolicy::SizePolicyTrueValues : __int32
{
  decrease_old_gen_for_throughput_true = 0xFFFFFFF9,
  decrease_young_gen_for_througput_true = 0xFFFFFFFA,
  increase_old_gen_for_min_pauses_true = 0xFFFFFFFB,
  decrease_old_gen_for_min_pauses_true = 0xFFFFFFFC,
  decrease_young_gen_for_maj_pauses_true = 0xFFFFFFFD,
  increase_young_gen_for_min_pauses_true = 0xFFFFFFFE,
  increase_old_gen_for_maj_pauses_true = 0xFFFFFFFF,
  decrease_young_gen_for_min_pauses_true = 0x1,
  decrease_old_gen_for_maj_pauses_true = 0x2,
  increase_young_gen_for_maj_pauses_true = 0x3,
  increase_old_gen_for_throughput_true = 0x4,
  increase_young_gen_for_througput_true = 0x5,
  decrease_young_gen_for_footprint_true = 0x6,
  decrease_old_gen_for_footprint_true = 0x7,
  decide_at_full_gc_true = 0x8,
};

/* 339 */
enum Flag::Flags : __int32
{
  DEFAULT = 0x0,
  COMMAND_LINE = 0x1,
  ENVIRON_VAR = 0x2,
  CONFIG_FILE = 0x3,
  MANAGEMENT = 0x4,
  ERGONOMIC = 0x5,
  ATTACH_ON_DEMAND = 0x6,
  INTERNAL = 0x7,
  LAST_VALUE_ORIGIN = 0x7,
  VALUE_ORIGIN_BITS = 0x4,
  VALUE_ORIGIN_MASK = 0xF,
  KIND_PRODUCT = 0x10,
  KIND_MANAGEABLE = 0x20,
  KIND_DIAGNOSTIC = 0x40,
  KIND_EXPERIMENTAL = 0x80,
  KIND_NOT_PRODUCT = 0x100,
  KIND_DEVELOP = 0x200,
  KIND_PLATFORM_DEPENDENT = 0x400,
  KIND_READ_WRITE = 0x800,
  KIND_C1 = 0x1000,
  KIND_C2 = 0x2000,
  KIND_ARCH = 0x4000,
  KIND_SHARK = 0x8000,
  KIND_LP64_PRODUCT = 0x10000,
  KIND_COMMERCIAL = 0x20000,
  KIND_MASK = 0xFFFFFFF0,
};

/* 340 */
enum CommandLineFlagWithType : __int32
{
  Flag_CheckCompressedOops_bool = 0x0,
  Flag_HeapBaseMinAddress_uintx = 0x1,
  Flag_PrintCompressedOopsMode_bool = 0x2,
  Flag_AssumeMP_bool = 0x3,
  Flag_UseMembar_bool = 0x4,
  Flag_CleanChunkPoolAsync_bool = 0x5,
  Flag_UseMemSetInBOT_bool = 0x6,
  Flag_UnlockDiagnosticVMOptions_bool = 0x7,
  Flag_UnlockExperimentalVMOptions_bool = 0x8,
  Flag_JavaMonitorsInStackTrace_bool = 0x9,
  Flag_UseLargePages_bool = 0xA,
  Flag_UseLargePagesIndividualAllocation_bool = 0xB,
  Flag_LargePagesIndividualAllocationInjectError_bool = 0xC,
  Flag_UseLargePagesInMetaspace_bool = 0xD,
  Flag_TracePageSizes_bool = 0xE,
  Flag_UseNUMA_bool = 0xF,
  Flag_UseNUMAInterleaving_bool = 0x10,
  Flag_NUMAInterleaveGranularity_uintx = 0x11,
  Flag_ForceNUMA_bool = 0x12,
  Flag_NUMAChunkResizeWeight_uintx = 0x13,
  Flag_NUMASpaceResizeRate_uintx = 0x14,
  Flag_UseAdaptiveNUMAChunkSizing_bool = 0x15,
  Flag_NUMAStats_bool = 0x16,
  Flag_NUMAPageScanRate_uintx = 0x17,
  Flag_NeedsDeoptSuspend_bool = 0x18,
  Flag_UseSSE_intx = 0x19,
  Flag_UseAES_bool = 0x1A,
  Flag_UseSHA_bool = 0x1B,
  Flag_UseGHASHIntrinsics_bool = 0x1C,
  Flag_LargePageSizeInBytes_uintx = 0x1D,
  Flag_LargePageHeapSizeThreshold_uintx = 0x1E,
  Flag_ForceTimeHighResolution_bool = 0x1F,
  Flag_TraceItables_bool = 0x20,
  Flag_TracePcPatching_bool = 0x21,
  Flag_TraceJumps_bool = 0x22,
  Flag_TraceRelocator_bool = 0x23,
  Flag_TraceLongCompiles_bool = 0x24,
  Flag_SafepointALot_bool = 0x25,
  Flag_BackgroundCompilation_bool = 0x26,
  Flag_PrintVMQWaitTime_bool = 0x27,
  Flag_NoYieldsInMicrolock_bool = 0x28,
  Flag_TraceOopMapGeneration_bool = 0x29,
  Flag_MethodFlushing_bool = 0x2A,
  Flag_VerifyStack_bool = 0x2B,
  Flag_ForceUnreachable_bool = 0x2C,
  Flag_StressDerivedPointers_bool = 0x2D,
  Flag_TraceDerivedPointers_bool = 0x2E,
  Flag_TraceCodeBlobStacks_bool = 0x2F,
  Flag_PrintJNIResolving_bool = 0x30,
  Flag_PrintRewrites_bool = 0x31,
  Flag_UseInlineCaches_bool = 0x32,
  Flag_InlineArrayCopy_bool = 0x33,
  Flag_InlineObjectHash_bool = 0x34,
  Flag_InlineNatives_bool = 0x35,
  Flag_InlineMathNatives_bool = 0x36,
  Flag_InlineClassNatives_bool = 0x37,
  Flag_InlineThreadNatives_bool = 0x38,
  Flag_InlineUnsafeOps_bool = 0x39,
  Flag_CriticalJNINatives_bool = 0x3A,
  Flag_StressCriticalJNINatives_bool = 0x3B,
  Flag_UseSSE42Intrinsics_bool = 0x3C,
  Flag_UseAESIntrinsics_bool = 0x3D,
  Flag_UseSHA1Intrinsics_bool = 0x3E,
  Flag_UseSHA256Intrinsics_bool = 0x3F,
  Flag_UseSHA512Intrinsics_bool = 0x40,
  Flag_UseCRC32Intrinsics_bool = 0x41,
  Flag_TraceCallFixup_bool = 0x42,
  Flag_DeoptimizeALot_bool = 0x43,
  Flag_DeoptimizeOnlyAt_ccstrlist = 0x44,
  Flag_DeoptimizeRandom_bool = 0x45,
  Flag_ZombieALot_bool = 0x46,
  Flag_UnlinkSymbolsALot_bool = 0x47,
  Flag_WalkStackALot_bool = 0x48,
  Flag_Debugging_bool = 0x49,
  Flag_StrictSafepointChecks_bool = 0x4A,
  Flag_VerifyLastFrame_bool = 0x4B,
  Flag_TraceHandleAllocation_bool = 0x4C,
  Flag_UseCompilerSafepoints_bool = 0x4D,
  Flag_FailOverToOldVerifier_bool = 0x4E,
  Flag_ShowSafepointMsgs_bool = 0x4F,
  Flag_SafepointTimeout_bool = 0x50,
  Flag_AbortVMOnSafepointTimeout_bool = 0x51,
  Flag_SuspendRetryCount_intx = 0x52,
  Flag_SuspendRetryDelay_intx = 0x53,
  Flag_AssertOnSuspendWaitFailure_bool = 0x54,
  Flag_TraceSuspendWaitFailures_bool = 0x55,
  Flag_MaxFDLimit_bool = 0x56,
  Flag_LogEvents_bool = 0x57,
  Flag_LogEventsBufferEntries_uintx = 0x58,
  Flag_BytecodeVerificationRemote_bool = 0x59,
  Flag_BytecodeVerificationLocal_bool = 0x5A,
  Flag_ForceFloatExceptions_bool = 0x5B,
  Flag_VerifyStackAtCalls_bool = 0x5C,
  Flag_TraceJavaAssertions_bool = 0x5D,
  Flag_CheckAssertionStatusDirectives_bool = 0x5E,
  Flag_PrintMallocFree_bool = 0x5F,
  Flag_PrintOopAddress_bool = 0x60,
  Flag_VerifyCodeCacheOften_bool = 0x61,
  Flag_ZapDeadCompiledLocals_bool = 0x62,
  Flag_ZapDeadLocalsOld_bool = 0x63,
  Flag_CheckOopishValues_bool = 0x64,
  Flag_UseMallocOnly_bool = 0x65,
  Flag_PrintMalloc_bool = 0x66,
  Flag_PrintMallocStatistics_bool = 0x67,
  Flag_ZapResourceArea_bool = 0x68,
  Flag_ZapVMHandleArea_bool = 0x69,
  Flag_ZapJNIHandleArea_bool = 0x6A,
  Flag_ZapStackSegments_bool = 0x6B,
  Flag_ZapUnusedHeapArea_bool = 0x6C,
  Flag_TraceZapUnusedHeapArea_bool = 0x6D,
  Flag_CheckZapUnusedHeapArea_bool = 0x6E,
  Flag_ZapFillerObjects_bool = 0x6F,
  Flag_PrintVMMessages_bool = 0x70,
  Flag_PrintGCApplicationConcurrentTime_bool = 0x71,
  Flag_PrintGCApplicationStoppedTime_bool = 0x72,
  Flag_VerboseVerification_bool = 0x73,
  Flag_ErrorHandlerTest_uintx = 0x74,
  Flag_Verbose_bool = 0x75,
  Flag_PrintMiscellaneous_bool = 0x76,
  Flag_WizardMode_bool = 0x77,
  Flag_ShowMessageBoxOnError_bool = 0x78,
  Flag_CreateMinidumpOnCrash_bool = 0x79,
  Flag_UseOSErrorReporting_bool = 0x7A,
  Flag_SuppressFatalErrorMessage_bool = 0x7B,
  Flag_OnError_ccstrlist = 0x7C,
  Flag_OnOutOfMemoryError_ccstrlist = 0x7D,
  Flag_HeapDumpBeforeFullGC_bool = 0x7E,
  Flag_HeapDumpAfterFullGC_bool = 0x7F,
  Flag_HeapDumpOnOutOfMemoryError_bool = 0x80,
  Flag_HeapDumpPath_ccstr = 0x81,
  Flag_SegmentedHeapDumpThreshold_uintx = 0x82,
  Flag_HeapDumpSegmentSize_uintx = 0x83,
  Flag_BreakAtWarning_bool = 0x84,
  Flag_TraceVMOperation_bool = 0x85,
  Flag_UseFakeTimers_bool = 0x86,
  Flag_NativeMemoryTracking_ccstr = 0x87,
  Flag_PrintNMTStatistics_bool = 0x88,
  Flag_LogCompilation_bool = 0x89,
  Flag_PrintCompilation_bool = 0x8A,
  Flag_TraceNMethodInstalls_bool = 0x8B,
  Flag_ScavengeRootsInCode_intx = 0x8C,
  Flag_AlwaysRestoreFPU_bool = 0x8D,
  Flag_PrintCompilation2_bool = 0x8E,
  Flag_PrintAdapterHandlers_bool = 0x8F,
  Flag_VerifyAdapterCalls_bool = 0x90,
  Flag_VerifyAdapterSharing_bool = 0x91,
  Flag_PrintAssembly_bool = 0x92,
  Flag_PrintAssemblyOptions_ccstr = 0x93,
  Flag_PrintNMethods_bool = 0x94,
  Flag_PrintNativeNMethods_bool = 0x95,
  Flag_PrintDebugInfo_bool = 0x96,
  Flag_PrintRelocations_bool = 0x97,
  Flag_PrintDependencies_bool = 0x98,
  Flag_PrintExceptionHandlers_bool = 0x99,
  Flag_StressCompiledExceptionHandlers_bool = 0x9A,
  Flag_InterceptOSException_bool = 0x9B,
  Flag_PrintCodeCache_bool = 0x9C,
  Flag_PrintCodeCache2_bool = 0x9D,
  Flag_PrintCodeCacheOnCompilation_bool = 0x9E,
  Flag_PrintStubCode_bool = 0x9F,
  Flag_StackTraceInThrowable_bool = 0xA0,
  Flag_OmitStackTraceInFastThrow_bool = 0xA1,
  Flag_ProfilerPrintByteCodeStatistics_bool = 0xA2,
  Flag_ProfilerRecordPC_bool = 0xA3,
  Flag_ProfileVM_bool = 0xA4,
  Flag_ProfileIntervals_bool = 0xA5,
  Flag_ProfilerCheckIntervals_bool = 0xA6,
  Flag_PrintJVMWarnings_bool = 0xA7,
  Flag_PrintWarnings_bool = 0xA8,
  Flag_WarnOnStalledSpinLock_uintx = 0xA9,
  Flag_RegisterFinalizersAtInit_bool = 0xAA,
  Flag_RegisterReferences_bool = 0xAB,
  Flag_IgnoreRewrites_bool = 0xAC,
  Flag_PrintCodeCacheExtension_bool = 0xAD,
  Flag_UsePrivilegedStack_bool = 0xAE,
  Flag_ProtectionDomainVerification_bool = 0xAF,
  Flag_ClassUnloading_bool = 0xB0,
  Flag_ClassUnloadingWithConcurrentMark_bool = 0xB1,
  Flag_DisableStartThread_bool = 0xB2,
  Flag_MemProfiling_bool = 0xB3,
  Flag_PrintSystemDictionaryAtExit_bool = 0xB4,
  Flag_PredictedLoadedClassCount_intx = 0xB5,
  Flag_UnsyncloadClass_bool = 0xB6,
  Flag_AlwaysLockClassLoader_bool = 0xB7,
  Flag_AllowParallelDefineClass_bool = 0xB8,
  Flag_MustCallLoadClassInternal_bool = 0xB9,
  Flag_DontYieldALot_bool = 0xBA,
  Flag_ConvertSleepToYield_bool = 0xBB,
  Flag_ConvertYieldToSleep_bool = 0xBC,
  Flag_UseBoundThreads_bool = 0xBD,
  Flag_UseDetachedThreads_bool = 0xBE,
  Flag_DisablePrimordialThreadGuardPages_bool = 0xBF,
  Flag_UseLWPSynchronization_bool = 0xC0,
  Flag_SyncKnobs_ccstr = 0xC1,
  Flag_EmitSync_intx = 0xC2,
  Flag_MonitorBound_intx = 0xC3,
  Flag_MonitorInUseLists_bool = 0xC4,
  Flag_SyncFlags_intx = 0xC5,
  Flag_SyncVerbose_intx = 0xC6,
  Flag_ClearFPUAtPark_intx = 0xC7,
  Flag_hashCode_intx = 0xC8,
  Flag_WorkAroundNPTLTimedWaitHang_intx = 0xC9,
  Flag_FilterSpuriousWakeups_bool = 0xCA,
  Flag_NativeMonitorTimeout_intx = 0xCB,
  Flag_NativeMonitorFlags_intx = 0xCC,
  Flag_NativeMonitorSpinLimit_intx = 0xCD,
  Flag_UsePthreads_bool = 0xCE,
  Flag_AdjustConcurrency_bool = 0xCF,
  Flag_ReduceSignalUsage_bool = 0xD0,
  Flag_LoadLineNumberTables_bool = 0xD1,
  Flag_LoadLocalVariableTables_bool = 0xD2,
  Flag_LoadLocalVariableTypeTables_bool = 0xD3,
  Flag_AllowUserSignalHandlers_bool = 0xD4,
  Flag_UseSignalChaining_bool = 0xD5,
  Flag_UseAltSigs_bool = 0xD6,
  Flag_AllowJNIEnvProxy_bool = 0xD7,
  Flag_JNIDetachReleasesMonitors_bool = 0xD8,
  Flag_RestoreMXCSROnJNICalls_bool = 0xD9,
  Flag_CheckJNICalls_bool = 0xDA,
  Flag_CheckEndorsedAndExtDirs_bool = 0xDB,
  Flag_UseFastJNIAccessors_bool = 0xDC,
  Flag_MaxJNILocalCapacity_intx = 0xDD,
  Flag_EagerXrunInit_bool = 0xDE,
  Flag_PreserveAllAnnotations_bool = 0xDF,
  Flag_PreallocatedOutOfMemoryErrorCount_uintx = 0xE0,
  Flag_LazyBootClassLoader_bool = 0xE1,
  Flag_UseXMMForArrayCopy_bool = 0xE2,
  Flag_FieldsAllocationStyle_intx = 0xE3,
  Flag_CompactFields_bool = 0xE4,
  Flag_PrintFieldLayout_bool = 0xE5,
  Flag_ContendedPaddingWidth_intx = 0xE6,
  Flag_EnableContended_bool = 0xE7,
  Flag_RestrictContended_bool = 0xE8,
  Flag_UseBiasedLocking_bool = 0xE9,
  Flag_BiasedLockingStartupDelay_intx = 0xEA,
  Flag_PrintBiasedLockingStatistics_bool = 0xEB,
  Flag_BiasedLockingBulkRebiasThreshold_intx = 0xEC,
  Flag_BiasedLockingBulkRevokeThreshold_intx = 0xED,
  Flag_BiasedLockingDecayTime_intx = 0xEE,
  Flag_ExitOnOutOfMemoryError_bool = 0xEF,
  Flag_CrashOnOutOfMemoryError_bool = 0xF0,
  Flag_TraceRuntimeCalls_bool = 0xF1,
  Flag_TraceJNICalls_bool = 0xF2,
  Flag_StressRewriter_bool = 0xF3,
  Flag_TraceJVMCalls_bool = 0xF4,
  Flag_TraceJVMTI_ccstr = 0xF5,
  Flag_StressLdcRewrite_bool = 0xF6,
  Flag_TraceRedefineClasses_intx = 0xF7,
  Flag_StressMethodComparator_bool = 0xF8,
  Flag_VerifyMergedCPBytecodes_bool = 0xF9,
  Flag_TraceJNIHandleAllocation_bool = 0xFA,
  Flag_TraceThreadEvents_bool = 0xFB,
  Flag_TraceBytecodes_bool = 0xFC,
  Flag_TraceClassInitialization_bool = 0xFD,
  Flag_TraceExceptions_bool = 0xFE,
  Flag_TraceICs_bool = 0xFF,
  Flag_TraceInvocationCounterOverflow_bool = 0x100,
  Flag_TraceInlineCacheClearing_bool = 0x101,
  Flag_TraceDependencies_bool = 0x102,
  Flag_VerifyDependencies_bool = 0x103,
  Flag_TraceNewOopMapGeneration_bool = 0x104,
  Flag_TraceNewOopMapGenerationDetailed_bool = 0x105,
  Flag_TimeOopMap_bool = 0x106,
  Flag_TimeOopMap2_bool = 0x107,
  Flag_TraceMonitorMismatch_bool = 0x108,
  Flag_TraceOopMapRewrites_bool = 0x109,
  Flag_TraceSafepoint_bool = 0x10A,
  Flag_TraceICBuffer_bool = 0x10B,
  Flag_TraceCompiledIC_bool = 0x10C,
  Flag_TraceZapDeadLocals_bool = 0x10D,
  Flag_TraceStartupTime_bool = 0x10E,
  Flag_TraceProtectionDomainVerification_bool = 0x10F,
  Flag_TraceClearedExceptions_bool = 0x110,
  Flag_TraceClassResolution_bool = 0x111,
  Flag_TraceBiasedLocking_bool = 0x112,
  Flag_TraceMonitorInflation_bool = 0x113,
  Flag_UseSerialGC_bool = 0x114,
  Flag_UseG1GC_bool = 0x115,
  Flag_UseParallelGC_bool = 0x116,
  Flag_UseParallelOldGC_bool = 0x117,
  Flag_UseShenandoahGC_bool = 0x118,
  Flag_HeapMaximumCompactionInterval_uintx = 0x119,
  Flag_HeapFirstMaximumCompactionCount_uintx = 0x11A,
  Flag_UseMaximumCompactionOnSystemGC_bool = 0x11B,
  Flag_ParallelOldDeadWoodLimiterMean_uintx = 0x11C,
  Flag_ParallelOldDeadWoodLimiterStdDev_uintx = 0x11D,
  Flag_ParallelGCThreads_uintx = 0x11E,
  Flag_UseDynamicNumberOfGCThreads_bool = 0x11F,
  Flag_ForceDynamicNumberOfGCThreads_bool = 0x120,
  Flag_HeapSizePerGCThread_uintx = 0x121,
  Flag_TraceDynamicGCThreads_bool = 0x122,
  Flag_ParallelOldGCSplitALot_bool = 0x123,
  Flag_ParallelOldGCSplitInterval_uintx = 0x124,
  Flag_ConcGCThreads_uintx = 0x125,
  Flag_YoungPLABSize_uintx = 0x126,
  Flag_OldPLABSize_uintx = 0x127,
  Flag_GCTaskTimeStampEntries_uintx = 0x128,
  Flag_AlwaysTenure_bool = 0x129,
  Flag_NeverTenure_bool = 0x12A,
  Flag_ScavengeBeforeFullGC_bool = 0x12B,
  Flag_ScavengeWithObjectsInToSpace_bool = 0x12C,
  Flag_UseConcMarkSweepGC_bool = 0x12D,
  Flag_ExplicitGCInvokesConcurrent_bool = 0x12E,
  Flag_ExplicitGCInvokesConcurrentAndUnloadsClasses_bool = 0x12F,
  Flag_GCLockerInvokesConcurrent_bool = 0x130,
  Flag_GCLockerEdenExpansionPercent_uintx = 0x131,
  Flag_GCLockerRetryAllocationCount_uintx = 0x132,
  Flag_UseCMSAdaptiveFreeLists_bool = 0x133,
  Flag_UseAsyncConcMarkSweepGC_bool = 0x134,
  Flag_RotateCMSCollectionTypes_bool = 0x135,
  Flag_UseCMSBestFit_bool = 0x136,
  Flag_UseCMSCollectionPassing_bool = 0x137,
  Flag_UseParNewGC_bool = 0x138,
  Flag_ParallelGCVerbose_bool = 0x139,
  Flag_ParallelGCBufferWastePct_uintx = 0x13A,
  Flag_ParallelGCRetainPLAB_bool = 0x13B,
  Flag_TargetPLABWastePct_uintx = 0x13C,
  Flag_PLABWeight_uintx = 0x13D,
  Flag_ResizePLAB_bool = 0x13E,
  Flag_PrintPLAB_bool = 0x13F,
  Flag_ParGCArrayScanChunk_intx = 0x140,
  Flag_ParGCUseLocalOverflow_bool = 0x141,
  Flag_ParGCTrimOverflow_bool = 0x142,
  Flag_ParGCWorkQueueOverflowALot_bool = 0x143,
  Flag_ParGCWorkQueueOverflowInterval_uintx = 0x144,
  Flag_ParGCDesiredObjsFromOverflowList_uintx = 0x145,
  Flag_ParGCStridesPerThread_uintx = 0x146,
  Flag_ParGCCardsPerStrideChunk_intx = 0x147,
  Flag_CMSParPromoteBlocksToClaim_uintx = 0x148,
  Flag_OldPLABWeight_uintx = 0x149,
  Flag_ResizeOldPLAB_bool = 0x14A,
  Flag_PrintOldPLAB_bool = 0x14B,
  Flag_CMSOldPLABMin_uintx = 0x14C,
  Flag_CMSOldPLABMax_uintx = 0x14D,
  Flag_CMSOldPLABNumRefills_uintx = 0x14E,
  Flag_CMSOldPLABResizeQuicker_bool = 0x14F,
  Flag_CMSOldPLABToleranceFactor_uintx = 0x150,
  Flag_CMSOldPLABReactivityFactor_uintx = 0x151,
  Flag_AlwaysPreTouch_bool = 0x152,
  Flag_CMSYoungGenPerWorker_uintx = 0x153,
  Flag_CMSIncrementalMode_bool = 0x154,
  Flag_CMSIncrementalDutyCycle_uintx = 0x155,
  Flag_CMSIncrementalPacing_bool = 0x156,
  Flag_CMSIncrementalDutyCycleMin_uintx = 0x157,
  Flag_CMSIncrementalSafetyFactor_uintx = 0x158,
  Flag_CMSIncrementalOffset_uintx = 0x159,
  Flag_CMSExpAvgFactor_uintx = 0x15A,
  Flag_CMS_FLSWeight_uintx = 0x15B,
  Flag_CMS_FLSPadding_uintx = 0x15C,
  Flag_FLSCoalescePolicy_uintx = 0x15D,
  Flag_FLSAlwaysCoalesceLarge_bool = 0x15E,
  Flag_FLSLargestBlockCoalesceProximity_double = 0x15F,
  Flag_CMSSmallCoalSurplusPercent_double = 0x160,
  Flag_CMSLargeCoalSurplusPercent_double = 0x161,
  Flag_CMSSmallSplitSurplusPercent_double = 0x162,
  Flag_CMSLargeSplitSurplusPercent_double = 0x163,
  Flag_CMSExtrapolateSweep_bool = 0x164,
  Flag_CMS_SweepWeight_uintx = 0x165,
  Flag_CMS_SweepPadding_uintx = 0x166,
  Flag_CMS_SweepTimerThresholdMillis_uintx = 0x167,
  Flag_CMSTraceIncrementalMode_bool = 0x168,
  Flag_CMSTraceIncrementalPacing_bool = 0x169,
  Flag_CMSTraceThreadState_bool = 0x16A,
  Flag_CMSClassUnloadingEnabled_bool = 0x16B,
  Flag_CMSClassUnloadingMaxInterval_uintx = 0x16C,
  Flag_CMSCompactWhenClearAllSoftRefs_bool = 0x16D,
  Flag_UseCMSCompactAtFullCollection_bool = 0x16E,
  Flag_CMSFullGCsBeforeCompaction_uintx = 0x16F,
  Flag_CMSDictionaryChoice_intx = 0x170,
  Flag_CMSIndexedFreeListReplenish_uintx = 0x171,
  Flag_CMSReplenishIntermediate_bool = 0x172,
  Flag_CMSSplitIndexedFreeListBlocks_bool = 0x173,
  Flag_CMSLoopWarn_bool = 0x174,
  Flag_CMSOverflowEarlyRestoration_bool = 0x175,
  Flag_MarkStackSize_uintx = 0x176,
  Flag_MarkStackSizeMax_uintx = 0x177,
  Flag_CMSMarkStackOverflowALot_bool = 0x178,
  Flag_CMSMarkStackOverflowInterval_uintx = 0x179,
  Flag_CMSMaxAbortablePrecleanLoops_uintx = 0x17A,
  Flag_CMSMaxAbortablePrecleanTime_intx = 0x17B,
  Flag_CMSAbortablePrecleanMinWorkPerIteration_uintx = 0x17C,
  Flag_CMSAbortablePrecleanWaitMillis_intx = 0x17D,
  Flag_CMSRescanMultiple_uintx = 0x17E,
  Flag_CMSConcMarkMultiple_uintx = 0x17F,
  Flag_CMSAbortSemantics_bool = 0x180,
  Flag_CMSParallelInitialMarkEnabled_bool = 0x181,
  Flag_CMSParallelRemarkEnabled_bool = 0x182,
  Flag_CMSParallelSurvivorRemarkEnabled_bool = 0x183,
  Flag_CMSPLABRecordAlways_bool = 0x184,
  Flag_CMSEdenChunksRecordAlways_bool = 0x185,
  Flag_CMSPrintEdenSurvivorChunks_bool = 0x186,
  Flag_CMSConcurrentMTEnabled_bool = 0x187,
  Flag_CMSPrecleaningEnabled_bool = 0x188,
  Flag_CMSPrecleanIter_uintx = 0x189,
  Flag_CMSPrecleanNumerator_uintx = 0x18A,
  Flag_CMSPrecleanDenominator_uintx = 0x18B,
  Flag_CMSPrecleanRefLists1_bool = 0x18C,
  Flag_CMSPrecleanRefLists2_bool = 0x18D,
  Flag_CMSPrecleanSurvivors1_bool = 0x18E,
  Flag_CMSPrecleanSurvivors2_bool = 0x18F,
  Flag_CMSPrecleanThreshold_uintx = 0x190,
  Flag_CMSCleanOnEnter_bool = 0x191,
  Flag_CMSRemarkVerifyVariant_uintx = 0x192,
  Flag_CMSScheduleRemarkEdenSizeThreshold_uintx = 0x193,
  Flag_CMSScheduleRemarkEdenPenetration_uintx = 0x194,
  Flag_CMSScheduleRemarkSamplingRatio_uintx = 0x195,
  Flag_CMSSamplingGrain_uintx = 0x196,
  Flag_CMSScavengeBeforeRemark_bool = 0x197,
  Flag_CMSTraceSweeper_bool = 0x198,
  Flag_CMSWorkQueueDrainThreshold_uintx = 0x199,
  Flag_CMSWaitDuration_intx = 0x19A,
  Flag_CMSCheckInterval_uintx = 0x19B,
  Flag_CMSYield_bool = 0x19C,
  Flag_CMSBitMapYieldQuantum_uintx = 0x19D,
  Flag_CMSDumpAtPromotionFailure_bool = 0x19E,
  Flag_CMSPrintChunksInDump_bool = 0x19F,
  Flag_CMSPrintObjectsInDump_bool = 0x1A0,
  Flag_FLSVerifyAllHeapReferences_bool = 0x1A1,
  Flag_FLSVerifyLists_bool = 0x1A2,
  Flag_FLSVerifyIndexTable_bool = 0x1A3,
  Flag_FLSVerifyDictionary_bool = 0x1A4,
  Flag_VerifyBlockOffsetArray_bool = 0x1A5,
  Flag_BlockOffsetArrayUseUnallocatedBlock_bool = 0x1A6,
  Flag_TraceCMSState_bool = 0x1A7,
  Flag_RefDiscoveryPolicy_intx = 0x1A8,
  Flag_ParallelRefProcEnabled_bool = 0x1A9,
  Flag_ParallelRefProcBalancingEnabled_bool = 0x1AA,
  Flag_CMSTriggerRatio_uintx = 0x1AB,
  Flag_CMSBootstrapOccupancy_uintx = 0x1AC,
  Flag_CMSInitiatingOccupancyFraction_intx = 0x1AD,
  Flag_InitiatingHeapOccupancyPercent_uintx = 0x1AE,
  Flag_CMSTriggerInterval_intx = 0x1AF,
  Flag_UseCMSInitiatingOccupancyOnly_bool = 0x1B0,
  Flag_CMSIsTooFullPercentage_uintx = 0x1B1,
  Flag_CMSTestInFreeList_bool = 0x1B2,
  Flag_CMSVerifyReturnedBytes_bool = 0x1B3,
  Flag_ScavengeALot_bool = 0x1B4,
  Flag_FullGCALot_bool = 0x1B5,
  Flag_GCALotAtAllSafepoints_bool = 0x1B6,
  Flag_PrintPromotionFailure_bool = 0x1B7,
  Flag_PromotionFailureALot_bool = 0x1B8,
  Flag_PromotionFailureALotCount_uintx = 0x1B9,
  Flag_PromotionFailureALotInterval_uintx = 0x1BA,
  Flag_WorkStealingSleepMillis_uintx = 0x1BB,
  Flag_WorkStealingYieldsBeforeSleep_uintx = 0x1BC,
  Flag_WorkStealingHardSpins_uintx = 0x1BD,
  Flag_WorkStealingSpinToYieldRatio_uintx = 0x1BE,
  Flag_ObjArrayMarkingStride_uintx = 0x1BF,
  Flag_MetadataAllocationFailALot_bool = 0x1C0,
  Flag_MetadataAllocationFailALotInterval_uintx = 0x1C1,
  Flag_TraceMetadataChunkAllocation_bool = 0x1C2,
  Flag_TraceMetadataHumongousAllocation_bool = 0x1C3,
  Flag_TraceMetavirtualspaceAllocation_bool = 0x1C4,
  Flag_ExecuteInternalVMTests_bool = 0x1C5,
  Flag_VerboseInternalVMTests_bool = 0x1C6,
  Flag_UseTLAB_bool = 0x1C7,
  Flag_ResizeTLAB_bool = 0x1C8,
  Flag_ZeroTLAB_bool = 0x1C9,
  Flag_FastTLABRefill_bool = 0x1CA,
  Flag_PrintTLAB_bool = 0x1CB,
  Flag_TLABStats_bool = 0x1CC,
  Flag_NeverActAsServerClassMachine_bool = 0x1CD,
  Flag_AlwaysActAsServerClassMachine_bool = 0x1CE,
  Flag_MaxRAM_uint64_t = 0x1CF,
  Flag_AggressiveHeap_bool = 0x1D0,
  Flag_ErgoHeapSizeLimit_uintx = 0x1D1,
  Flag_UseCGroupMemoryLimitForHeap_bool = 0x1D2,
  Flag_PrintContainerInfo_bool = 0x1D3,
  Flag_PrintActiveCpus_bool = 0x1D4,
  Flag_MaxRAMFraction_uintx = 0x1D5,
  Flag_DefaultMaxRAMFraction_uintx = 0x1D6,
  Flag_MinRAMFraction_uintx = 0x1D7,
  Flag_InitialRAMFraction_uintx = 0x1D8,
  Flag_MaxRAMPercentage_double = 0x1D9,
  Flag_MinRAMPercentage_double = 0x1DA,
  Flag_InitialRAMPercentage_double = 0x1DB,
  Flag_ActiveProcessorCount_intx = 0x1DC,
  Flag_MaxVirtMemFraction_uintx = 0x1DD,
  Flag_UseAutoGCSelectPolicy_bool = 0x1DE,
  Flag_AutoGCSelectPauseMillis_uintx = 0x1DF,
  Flag_UseAdaptiveSizePolicy_bool = 0x1E0,
  Flag_UsePSAdaptiveSurvivorSizePolicy_bool = 0x1E1,
  Flag_UseAdaptiveGenerationSizePolicyAtMinorCollection_bool = 0x1E2,
  Flag_UseAdaptiveGenerationSizePolicyAtMajorCollection_bool = 0x1E3,
  Flag_UseAdaptiveSizePolicyWithSystemGC_bool = 0x1E4,
  Flag_UseAdaptiveGCBoundary_bool = 0x1E5,
  Flag_TraceAdaptiveGCBoundary_bool = 0x1E6,
  Flag_PSAdaptiveSizePolicyResizeVirtualSpaceAlot_intx = 0x1E7,
  Flag_AdaptiveSizeThroughPutPolicy_uintx = 0x1E8,
  Flag_AdaptiveSizePausePolicy_uintx = 0x1E9,
  Flag_PSAdjustTenuredGenForMinorPause_bool = 0x1EA,
  Flag_PSAdjustYoungGenForMajorPause_bool = 0x1EB,
  Flag_AdaptiveSizePolicyInitializingSteps_uintx = 0x1EC,
  Flag_AdaptiveSizePolicyReadyThreshold_uintx = 0x1ED,
  Flag_AdaptiveSizePolicyOutputInterval_uintx = 0x1EE,
  Flag_UseAdaptiveSizePolicyFootprintGoal_bool = 0x1EF,
  Flag_AdaptiveSizePolicyWeight_uintx = 0x1F0,
  Flag_AdaptiveTimeWeight_uintx = 0x1F1,
  Flag_PausePadding_uintx = 0x1F2,
  Flag_PromotedPadding_uintx = 0x1F3,
  Flag_SurvivorPadding_uintx = 0x1F4,
  Flag_ThresholdTolerance_uintx = 0x1F5,
  Flag_AdaptiveSizePolicyCollectionCostMargin_uintx = 0x1F6,
  Flag_YoungGenerationSizeIncrement_uintx = 0x1F7,
  Flag_YoungGenerationSizeSupplement_uintx = 0x1F8,
  Flag_YoungGenerationSizeSupplementDecay_uintx = 0x1F9,
  Flag_TenuredGenerationSizeIncrement_uintx = 0x1FA,
  Flag_TenuredGenerationSizeSupplement_uintx = 0x1FB,
  Flag_TenuredGenerationSizeSupplementDecay_uintx = 0x1FC,
  Flag_MaxGCPauseMillis_uintx = 0x1FD,
  Flag_GCPauseIntervalMillis_uintx = 0x1FE,
  Flag_MaxGCMinorPauseMillis_uintx = 0x1FF,
  Flag_GCTimeRatio_uintx = 0x200,
  Flag_AdaptiveSizeDecrementScaleFactor_uintx = 0x201,
  Flag_UseAdaptiveSizeDecayMajorGCCost_bool = 0x202,
  Flag_AdaptiveSizeMajorGCDecayTimeScale_uintx = 0x203,
  Flag_MinSurvivorRatio_uintx = 0x204,
  Flag_InitialSurvivorRatio_uintx = 0x205,
  Flag_BaseFootPrintEstimate_uintx = 0x206,
  Flag_UseGCOverheadLimit_bool = 0x207,
  Flag_GCTimeLimit_uintx = 0x208,
  Flag_GCHeapFreeLimit_uintx = 0x209,
  Flag_AdaptiveSizePolicyGCTimeLimitThreshold_uintx = 0x20A,
  Flag_PrintAdaptiveSizePolicy_bool = 0x20B,
  Flag_PrefetchCopyIntervalInBytes_intx = 0x20C,
  Flag_PrefetchScanIntervalInBytes_intx = 0x20D,
  Flag_PrefetchFieldsAhead_intx = 0x20E,
  Flag_VerifySilently_bool = 0x20F,
  Flag_VerifyDuringStartup_bool = 0x210,
  Flag_VerifyBeforeExit_bool = 0x211,
  Flag_VerifyBeforeGC_bool = 0x212,
  Flag_VerifyAfterGC_bool = 0x213,
  Flag_VerifyDuringGC_bool = 0x214,
  Flag_VerifySubSet_ccstrlist = 0x215,
  Flag_GCParallelVerificationEnabled_bool = 0x216,
  Flag_DeferInitialCardMark_bool = 0x217,
  Flag_VerifyRememberedSets_bool = 0x218,
  Flag_VerifyObjectStartArray_bool = 0x219,
  Flag_DisableExplicitGC_bool = 0x21A,
  Flag_CheckMemoryInitialization_bool = 0x21B,
  Flag_CollectGen0First_bool = 0x21C,
  Flag_BindCMSThreadToCPU_bool = 0x21D,
  Flag_CPUForCMSThread_uintx = 0x21E,
  Flag_BindGCTaskThreadsToCPUs_bool = 0x21F,
  Flag_UseGCTaskAffinity_bool = 0x220,
  Flag_ProcessDistributionStride_uintx = 0x221,
  Flag_CMSCoordinatorYieldSleepCount_uintx = 0x222,
  Flag_CMSYieldSleepCount_uintx = 0x223,
  Flag_PrintGC_bool = 0x224,
  Flag_PrintGCDetails_bool = 0x225,
  Flag_PrintGCDateStamps_bool = 0x226,
  Flag_PrintGCTimeStamps_bool = 0x227,
  Flag_PrintGCID_bool = 0x228,
  Flag_PrintGCTaskTimeStamps_bool = 0x229,
  Flag_ConcGCYieldTimeout_intx = 0x22A,
  Flag_TraceMarkSweep_bool = 0x22B,
  Flag_PrintReferenceGC_bool = 0x22C,
  Flag_TraceReferenceGC_bool = 0x22D,
  Flag_TraceFinalizerRegistration_bool = 0x22E,
  Flag_TraceScavenge_bool = 0x22F,
  Flag_IgnoreEmptyClassPaths_bool = 0x230,
  Flag_TraceClassPaths_bool = 0x231,
  Flag_TraceClassLoading_bool = 0x232,
  Flag_TraceClassLoadingPreorder_bool = 0x233,
  Flag_TraceClassUnloading_bool = 0x234,
  Flag_TraceLoaderConstraints_bool = 0x235,
  Flag_TraceClassLoaderData_bool = 0x236,
  Flag_InitialBootClassLoaderMetaspaceSize_uintx = 0x237,
  Flag_TraceGen0Time_bool = 0x238,
  Flag_TraceGen1Time_bool = 0x239,
  Flag_PrintTenuringDistribution_bool = 0x23A,
  Flag_PrintHeapAtGC_bool = 0x23B,
  Flag_PrintHeapAtGCExtended_bool = 0x23C,
  Flag_PrintHeapAtSIGBREAK_bool = 0x23D,
  Flag_PrintClassHistogramBeforeFullGC_bool = 0x23E,
  Flag_PrintClassHistogramAfterFullGC_bool = 0x23F,
  Flag_PrintClassHistogram_bool = 0x240,
  Flag_TraceWorkGang_bool = 0x241,
  Flag_TraceParallelOldGCTasks_bool = 0x242,
  Flag_TraceBlockOffsetTable_bool = 0x243,
  Flag_TraceCardTableModRefBS_bool = 0x244,
  Flag_TraceGCTaskManager_bool = 0x245,
  Flag_TraceGCTaskQueue_bool = 0x246,
  Flag_TraceGCTaskThread_bool = 0x247,
  Flag_PrintParallelOldGCPhaseTimes_bool = 0x248,
  Flag_TraceParallelOldGCMarkingPhase_bool = 0x249,
  Flag_TraceParallelOldGCSummaryPhase_bool = 0x24A,
  Flag_TraceParallelOldGCCompactionPhase_bool = 0x24B,
  Flag_TraceParallelOldGCDensePrefix_bool = 0x24C,
  Flag_IgnoreLibthreadGPFault_bool = 0x24D,
  Flag_PrintJNIGCStalls_bool = 0x24E,
  Flag_ObjectCountCutOffPercent_double = 0x24F,
  Flag_UseGCLogFileRotation_bool = 0x250,
  Flag_NumberOfGCLogFiles_uintx = 0x251,
  Flag_GCLogFileSize_uintx = 0x252,
  Flag_TraceJVMTIObjectTagging_bool = 0x253,
  Flag_VerifyBeforeIteration_bool = 0x254,
  Flag_CIPrintCompilerName_bool = 0x255,
  Flag_CIPrintCompileQueue_bool = 0x256,
  Flag_CIPrintRequests_bool = 0x257,
  Flag_CITime_bool = 0x258,
  Flag_CITimeEach_bool = 0x259,
  Flag_CICountOSR_bool = 0x25A,
  Flag_CICompileNatives_bool = 0x25B,
  Flag_CICompileOSR_bool = 0x25C,
  Flag_CIPrintMethodCodes_bool = 0x25D,
  Flag_CIPrintTypeFlow_bool = 0x25E,
  Flag_CITraceTypeFlow_bool = 0x25F,
  Flag_OSROnlyBCI_intx = 0x260,
  Flag_CICompilerCount_intx = 0x261,
  Flag_CompilationPolicyChoice_intx = 0x262,
  Flag_UseStackBanging_bool = 0x263,
  Flag_UseStrictFP_bool = 0x264,
  Flag_GenerateSynchronizationCode_bool = 0x265,
  Flag_GenerateCompilerNullChecks_bool = 0x266,
  Flag_GenerateRangeChecks_bool = 0x267,
  Flag_ImplicitNullChecks_bool = 0x268,
  Flag_TrapBasedNullChecks_bool = 0x269,
  Flag_PrintSafepointStatistics_bool = 0x26A,
  Flag_PrintSafepointStatisticsCount_intx = 0x26B,
  Flag_PrintSafepointStatisticsTimeout_intx = 0x26C,
  Flag_TraceSafepointCleanupTime_bool = 0x26D,
  Flag_Inline_bool = 0x26E,
  Flag_ClipInlining_bool = 0x26F,
  Flag_UseCHA_bool = 0x270,
  Flag_UseTypeProfile_bool = 0x271,
  Flag_TimeCompiler_bool = 0x272,
  Flag_PrintInlining_bool = 0x273,
  Flag_UsePopCountInstruction_bool = 0x274,
  Flag_EagerInitialization_bool = 0x275,
  Flag_TraceMethodReplacement_bool = 0x276,
  Flag_PrintMethodFlushing_bool = 0x277,
  Flag_PrintMethodFlushingStatistics_bool = 0x278,
  Flag_UseRelocIndex_bool = 0x279,
  Flag_StressCodeBuffers_bool = 0x27A,
  Flag_DebugNonSafepoints_bool = 0x27B,
  Flag_PrintVMOptions_bool = 0x27C,
  Flag_IgnoreUnrecognizedVMOptions_bool = 0x27D,
  Flag_PrintCommandLineFlags_bool = 0x27E,
  Flag_PrintFlagsInitial_bool = 0x27F,
  Flag_PrintFlagsFinal_bool = 0x280,
  Flag_PrintFlagsWithComments_bool = 0x281,
  Flag_SerializeVMOutput_bool = 0x282,
  Flag_DisplayVMOutput_bool = 0x283,
  Flag_LogVMOutput_bool = 0x284,
  Flag_LogFile_ccstr = 0x285,
  Flag_ErrorFile_ccstr = 0x286,
  Flag_DisplayVMOutputToStderr_bool = 0x287,
  Flag_DisplayVMOutputToStdout_bool = 0x288,
  Flag_UseHeavyMonitors_bool = 0x289,
  Flag_PrintStringTableStatistics_bool = 0x28A,
  Flag_VerifyStringTableAtExit_bool = 0x28B,
  Flag_PrintSymbolTableSizeHistogram_bool = 0x28C,
  Flag_ExitVMOnVerifyError_bool = 0x28D,
  Flag_AbortVMOnException_ccstr = 0x28E,
  Flag_AbortVMOnExceptionMessage_ccstr = 0x28F,
  Flag_DebugVtables_bool = 0x290,
  Flag_PrintVtables_bool = 0x291,
  Flag_PrintVtableStats_bool = 0x292,
  Flag_TraceCreateZombies_bool = 0x293,
  Flag_IgnoreLockingAssertions_bool = 0x294,
  Flag_RangeCheckElimination_bool = 0x295,
  Flag_UncommonNullCast_bool = 0x296,
  Flag_TypeProfileCasts_bool = 0x297,
  Flag_DelayCompilationDuringStartup_bool = 0x298,
  Flag_CompileTheWorld_bool = 0x299,
  Flag_CompileTheWorldPreloadClasses_bool = 0x29A,
  Flag_CompileTheWorldSafepointInterval_intx = 0x29B,
  Flag_FillDelaySlots_bool = 0x29C,
  Flag_TimeLivenessAnalysis_bool = 0x29D,
  Flag_TraceLivenessGen_bool = 0x29E,
  Flag_TraceLivenessQuery_bool = 0x29F,
  Flag_CollectIndexSetStatistics_bool = 0x2A0,
  Flag_UseLoopSafepoints_bool = 0x2A1,
  Flag_FastAllocateSizeLimit_intx = 0x2A2,
  Flag_AggressiveOpts_bool = 0x2A3,
  Flag_TypeProfileLevel_uintx = 0x2A4,
  Flag_TypeProfileArgsLimit_intx = 0x2A5,
  Flag_TypeProfileParmsLimit_intx = 0x2A6,
  Flag_CountCompiledCalls_bool = 0x2A7,
  Flag_CountRuntimeCalls_bool = 0x2A8,
  Flag_CountJNICalls_bool = 0x2A9,
  Flag_CountJVMCalls_bool = 0x2AA,
  Flag_CountRemovableExceptions_bool = 0x2AB,
  Flag_ICMissHistogram_bool = 0x2AC,
  Flag_PrintClassStatistics_bool = 0x2AD,
  Flag_PrintMethodStatistics_bool = 0x2AE,
  Flag_ClearInterpreterLocals_bool = 0x2AF,
  Flag_RewriteBytecodes_bool = 0x2B0,
  Flag_RewriteFrequentPairs_bool = 0x2B1,
  Flag_PrintInterpreter_bool = 0x2B2,
  Flag_UseInterpreter_bool = 0x2B3,
  Flag_UseFastSignatureHandlers_bool = 0x2B4,
  Flag_UseLoopCounter_bool = 0x2B5,
  Flag_UseFastEmptyMethods_bool = 0x2B6,
  Flag_UseFastAccessorMethods_bool = 0x2B7,
  Flag_UseOnStackReplacement_bool = 0x2B8,
  Flag_TraceOnStackReplacement_bool = 0x2B9,
  Flag_PreferInterpreterNativeStubs_bool = 0x2BA,
  Flag_CountBytecodes_bool = 0x2BB,
  Flag_PrintBytecodeHistogram_bool = 0x2BC,
  Flag_PrintBytecodePairHistogram_bool = 0x2BD,
  Flag_PrintSignatureHandlers_bool = 0x2BE,
  Flag_VerifyOops_bool = 0x2BF,
  Flag_CheckUnhandledOops_bool = 0x2C0,
  Flag_VerifyJNIFields_bool = 0x2C1,
  Flag_VerifyJNIEnvThread_bool = 0x2C2,
  Flag_VerifyFPU_bool = 0x2C3,
  Flag_VerifyThread_bool = 0x2C4,
  Flag_VerifyActivationFrameSize_bool = 0x2C5,
  Flag_TraceFrequencyInlining_bool = 0x2C6,
  Flag_InlineIntrinsics_bool = 0x2C7,
  Flag_ProfileInterpreter_bool = 0x2C8,
  Flag_TraceProfileInterpreter_bool = 0x2C9,
  Flag_ProfileTraps_bool = 0x2CA,
  Flag_ProfileMaturityPercentage_intx = 0x2CB,
  Flag_PrintMethodData_bool = 0x2CC,
  Flag_VerifyDataPointer_bool = 0x2CD,
  Flag_VerifyCompiledCode_bool = 0x2CE,
  Flag_CrashGCForDumpingJavaThread_bool = 0x2CF,
  Flag_UseCompiler_bool = 0x2D0,
  Flag_TraceCompilationPolicy_bool = 0x2D1,
  Flag_TimeCompilationPolicy_bool = 0x2D2,
  Flag_UseCounterDecay_bool = 0x2D3,
  Flag_CounterHalfLifeTime_intx = 0x2D4,
  Flag_CounterDecayMinIntervalLength_intx = 0x2D5,
  Flag_AlwaysCompileLoopMethods_bool = 0x2D6,
  Flag_DontCompileHugeMethods_bool = 0x2D7,
  Flag_EstimateArgEscape_bool = 0x2D8,
  Flag_BCEATraceLevel_intx = 0x2D9,
  Flag_MaxBCEAEstimateLevel_intx = 0x2DA,
  Flag_MaxBCEAEstimateSize_intx = 0x2DB,
  Flag_AllocatePrefetchStyle_intx = 0x2DC,
  Flag_AllocatePrefetchDistance_intx = 0x2DD,
  Flag_AllocatePrefetchLines_intx = 0x2DE,
  Flag_AllocateInstancePrefetchLines_intx = 0x2DF,
  Flag_AllocatePrefetchStepSize_intx = 0x2E0,
  Flag_AllocatePrefetchInstr_intx = 0x2E1,
  Flag_TraceDeoptimization_bool = 0x2E2,
  Flag_DebugDeoptimization_bool = 0x2E3,
  Flag_SelfDestructTimer_intx = 0x2E4,
  Flag_MaxJavaStackTraceDepth_intx = 0x2E5,
  Flag_GuaranteedSafepointInterval_intx = 0x2E6,
  Flag_SafepointTimeoutDelay_intx = 0x2E7,
  Flag_NmethodSweepFraction_intx = 0x2E8,
  Flag_NmethodSweepCheckInterval_intx = 0x2E9,
  Flag_NmethodSweepActivity_intx = 0x2EA,
  Flag_LogSweeper_bool = 0x2EB,
  Flag_SweeperLogEntries_intx = 0x2EC,
  Flag_MemProfilingInterval_intx = 0x2ED,
  Flag_MallocCatchPtr_intx = 0x2EE,
  Flag_AssertRepeat_intx = 0x2EF,
  Flag_SuppressErrorAt_ccstrlist = 0x2F0,
  Flag_HandleAllocationLimit_uintx = 0x2F1,
  Flag_TotalHandleAllocationLimit_uintx = 0x2F2,
  Flag_StackPrintLimit_intx = 0x2F3,
  Flag_MaxElementPrintSize_intx = 0x2F4,
  Flag_MaxSubklassPrintSize_intx = 0x2F5,
  Flag_MaxInlineLevel_intx = 0x2F6,
  Flag_MaxRecursiveInlineLevel_intx = 0x2F7,
  Flag_MaxForceInlineLevel_intx = 0x2F8,
  Flag_InlineSmallCode_intx = 0x2F9,
  Flag_MaxInlineSize_intx = 0x2FA,
  Flag_FreqInlineSize_intx = 0x2FB,
  Flag_MaxTrivialSize_intx = 0x2FC,
  Flag_MinInliningThreshold_intx = 0x2FD,
  Flag_MethodHistogramCutoff_intx = 0x2FE,
  Flag_ProfilerNumberOfInterpretedMethods_intx = 0x2FF,
  Flag_ProfilerNumberOfCompiledMethods_intx = 0x300,
  Flag_ProfilerNumberOfStubMethods_intx = 0x301,
  Flag_ProfilerNumberOfRuntimeStubNodes_intx = 0x302,
  Flag_ProfileIntervalsTicks_intx = 0x303,
  Flag_ScavengeALotInterval_intx = 0x304,
  Flag_FullGCALotInterval_intx = 0x305,
  Flag_FullGCALotStart_intx = 0x306,
  Flag_FullGCALotDummies_intx = 0x307,
  Flag_DontYieldALotInterval_intx = 0x308,
  Flag_MinSleepInterval_intx = 0x309,
  Flag_ProfilerPCTickThreshold_intx = 0x30A,
  Flag_DeoptimizeALotInterval_intx = 0x30B,
  Flag_ZombieALotInterval_intx = 0x30C,
  Flag_MallocVerifyInterval_intx = 0x30D,
  Flag_MallocVerifyStart_intx = 0x30E,
  Flag_MallocMaxTestWords_uintx = 0x30F,
  Flag_TypeProfileWidth_intx = 0x310,
  Flag_BciProfileWidth_intx = 0x311,
  Flag_PerMethodRecompilationCutoff_intx = 0x312,
  Flag_PerBytecodeRecompilationCutoff_intx = 0x313,
  Flag_PerMethodTrapLimit_intx = 0x314,
  Flag_PerMethodSpecTrapLimit_intx = 0x315,
  Flag_PerBytecodeTrapLimit_intx = 0x316,
  Flag_SpecTrapLimitExtraEntries_intx = 0x317,
  Flag_InlineFrequencyRatio_intx = 0x318,
  Flag_InlineFrequencyCount_intx = 0x319,
  Flag_InlineThrowCount_intx = 0x31A,
  Flag_InlineThrowMaxSize_intx = 0x31B,
  Flag_ProfilerNodeSize_intx = 0x31C,
  Flag_PreInflateSpin_intx = 0x31D,
  Flag_InitialHeapSize_uintx = 0x31E,
  Flag_MaxHeapSize_uintx = 0x31F,
  Flag_OldSize_uintx = 0x320,
  Flag_NewSize_uintx = 0x321,
  Flag_MaxNewSize_uintx = 0x322,
  Flag_PretenureSizeThreshold_uintx = 0x323,
  Flag_TLABSize_uintx = 0x324,
  Flag_MinTLABSize_uintx = 0x325,
  Flag_TLABAllocationWeight_uintx = 0x326,
  Flag_TLABWasteTargetPercent_uintx = 0x327,
  Flag_TLABRefillWasteFraction_uintx = 0x328,
  Flag_TLABWasteIncrement_uintx = 0x329,
  Flag_SurvivorRatio_uintx = 0x32A,
  Flag_NewRatio_uintx = 0x32B,
  Flag_NewSizeThreadIncrease_uintx = 0x32C,
  Flag_MetaspaceSize_uintx = 0x32D,
  Flag_MaxMetaspaceSize_uintx = 0x32E,
  Flag_CompressedClassSpaceSize_uintx = 0x32F,
  Flag_MinHeapFreeRatio_uintx = 0x330,
  Flag_MaxHeapFreeRatio_uintx = 0x331,
  Flag_SoftRefLRUPolicyMSPerMB_intx = 0x332,
  Flag_MinHeapDeltaBytes_uintx = 0x333,
  Flag_MinMetaspaceExpansion_uintx = 0x334,
  Flag_MinMetaspaceFreeRatio_uintx = 0x335,
  Flag_MaxMetaspaceFreeRatio_uintx = 0x336,
  Flag_MaxMetaspaceExpansion_uintx = 0x337,
  Flag_QueuedAllocationWarningCount_uintx = 0x338,
  Flag_VerifyGCStartAt_uintx = 0x339,
  Flag_VerifyGCLevel_intx = 0x33A,
  Flag_MaxTenuringThreshold_uintx = 0x33B,
  Flag_InitialTenuringThreshold_uintx = 0x33C,
  Flag_TargetSurvivorRatio_uintx = 0x33D,
  Flag_MarkSweepDeadRatio_uintx = 0x33E,
  Flag_MarkSweepAlwaysCompactCount_uintx = 0x33F,
  Flag_PrintCMSStatistics_intx = 0x340,
  Flag_PrintCMSInitiationStatistics_bool = 0x341,
  Flag_PrintFLSStatistics_intx = 0x342,
  Flag_PrintFLSCensus_intx = 0x343,
  Flag_GCExpandToAllocateDelayMillis_uintx = 0x344,
  Flag_GCWorkerDelayMillis_uintx = 0x345,
  Flag_DeferThrSuspendLoopCount_intx = 0x346,
  Flag_DeferPollingPageLoopCount_intx = 0x347,
  Flag_SafepointSpinBeforeYield_intx = 0x348,
  Flag_PSChunkLargeArrays_bool = 0x349,
  Flag_GCDrainStackTargetSize_uintx = 0x34A,
  Flag_StackYellowPages_intx = 0x34B,
  Flag_StackRedPages_intx = 0x34C,
  Flag_StackShadowPages_intx = 0x34D,
  Flag_ThreadStackSize_intx = 0x34E,
  Flag_VMThreadStackSize_intx = 0x34F,
  Flag_CompilerThreadStackSize_intx = 0x350,
  Flag_JVMInvokeMethodSlack_uintx = 0x351,
  Flag_ThreadSafetyMargin_uintx = 0x352,
  Flag_CodeCacheSegmentSize_uintx = 0x353,
  Flag_CodeEntryAlignment_intx = 0x354,
  Flag_OptoLoopAlignment_intx = 0x355,
  Flag_InitialCodeCacheSize_uintx = 0x356,
  Flag_CodeCacheMinimumUseSpace_uintx = 0x357,
  Flag_ReservedCodeCacheSize_uintx = 0x358,
  Flag_CodeCacheMinimumFreeSpace_uintx = 0x359,
  Flag_CodeCacheExpansionSize_uintx = 0x35A,
  Flag_CodeCacheMinBlockLength_uintx = 0x35B,
  Flag_ExitOnFullCodeCache_bool = 0x35C,
  Flag_UseCodeCacheFlushing_bool = 0x35D,
  Flag_BinarySwitchThreshold_intx = 0x35E,
  Flag_StopInterpreterAt_intx = 0x35F,
  Flag_TraceBytecodesAt_intx = 0x360,
  Flag_CIStart_intx = 0x361,
  Flag_CIStop_intx = 0x362,
  Flag_CIStartOSR_intx = 0x363,
  Flag_CIStopOSR_intx = 0x364,
  Flag_CIBreakAtOSR_intx = 0x365,
  Flag_CIBreakAt_intx = 0x366,
  Flag_CompileOnly_ccstrlist = 0x367,
  Flag_CompileCommandFile_ccstr = 0x368,
  Flag_CompileCommand_ccstrlist = 0x369,
  Flag_ReplayCompiles_bool = 0x36A,
  Flag_ReplayDataFile_ccstr = 0x36B,
  Flag_InlineDataFile_ccstr = 0x36C,
  Flag_ReplaySuppressInitializers_intx = 0x36D,
  Flag_ReplayIgnoreInitErrors_bool = 0x36E,
  Flag_DumpReplayDataOnError_bool = 0x36F,
  Flag_CICompilerCountPerCPU_bool = 0x370,
  Flag_CIFireOOMAt_intx = 0x371,
  Flag_CICrashAt_intx = 0x372,
  Flag_CIObjectFactoryVerify_bool = 0x373,
  Flag_UseThreadPriorities_bool = 0x374,
  Flag_ThreadPriorityPolicy_intx = 0x375,
  Flag_ThreadPriorityVerbose_bool = 0x376,
  Flag_DefaultThreadPriority_intx = 0x377,
  Flag_CompilerThreadPriority_intx = 0x378,
  Flag_VMThreadPriority_intx = 0x379,
  Flag_CompilerThreadHintNoPreempt_bool = 0x37A,
  Flag_VMThreadHintNoPreempt_bool = 0x37B,
  Flag_JavaPriority1_To_OSPriority_intx = 0x37C,
  Flag_JavaPriority2_To_OSPriority_intx = 0x37D,
  Flag_JavaPriority3_To_OSPriority_intx = 0x37E,
  Flag_JavaPriority4_To_OSPriority_intx = 0x37F,
  Flag_JavaPriority5_To_OSPriority_intx = 0x380,
  Flag_JavaPriority6_To_OSPriority_intx = 0x381,
  Flag_JavaPriority7_To_OSPriority_intx = 0x382,
  Flag_JavaPriority8_To_OSPriority_intx = 0x383,
  Flag_JavaPriority9_To_OSPriority_intx = 0x384,
  Flag_JavaPriority10_To_OSPriority_intx = 0x385,
  Flag_UseCriticalJavaThreadPriority_bool = 0x386,
  Flag_UseCriticalCompilerThreadPriority_bool = 0x387,
  Flag_UseCriticalCMSThreadPriority_bool = 0x388,
  Flag_CompileTheWorldStartAt_intx = 0x389,
  Flag_CompileTheWorldStopAt_intx = 0x38A,
  Flag_NewCodeParameter_intx = 0x38B,
  Flag_MinOopMapAllocation_intx = 0x38C,
  Flag_LongCompileThreshold_intx = 0x38D,
  Flag_StarvationMonitorInterval_intx = 0x38E,
  Flag_CompileThreshold_intx = 0x38F,
  Flag_BackEdgeThreshold_intx = 0x390,
  Flag_Tier0InvokeNotifyFreqLog_intx = 0x391,
  Flag_Tier2InvokeNotifyFreqLog_intx = 0x392,
  Flag_Tier3InvokeNotifyFreqLog_intx = 0x393,
  Flag_Tier23InlineeNotifyFreqLog_intx = 0x394,
  Flag_Tier0BackedgeNotifyFreqLog_intx = 0x395,
  Flag_Tier2BackedgeNotifyFreqLog_intx = 0x396,
  Flag_Tier3BackedgeNotifyFreqLog_intx = 0x397,
  Flag_Tier2CompileThreshold_intx = 0x398,
  Flag_Tier2BackEdgeThreshold_intx = 0x399,
  Flag_Tier3InvocationThreshold_intx = 0x39A,
  Flag_Tier3MinInvocationThreshold_intx = 0x39B,
  Flag_Tier3CompileThreshold_intx = 0x39C,
  Flag_Tier3BackEdgeThreshold_intx = 0x39D,
  Flag_Tier4InvocationThreshold_intx = 0x39E,
  Flag_Tier4MinInvocationThreshold_intx = 0x39F,
  Flag_Tier4CompileThreshold_intx = 0x3A0,
  Flag_Tier4BackEdgeThreshold_intx = 0x3A1,
  Flag_Tier3DelayOn_intx = 0x3A2,
  Flag_Tier3DelayOff_intx = 0x3A3,
  Flag_Tier3LoadFeedback_intx = 0x3A4,
  Flag_Tier4LoadFeedback_intx = 0x3A5,
  Flag_TieredCompileTaskTimeout_intx = 0x3A6,
  Flag_TieredStopAtLevel_intx = 0x3A7,
  Flag_Tier0ProfilingStartPercentage_intx = 0x3A8,
  Flag_IncreaseFirstTierCompileThresholdAt_uintx = 0x3A9,
  Flag_TieredRateUpdateMinTime_intx = 0x3AA,
  Flag_TieredRateUpdateMaxTime_intx = 0x3AB,
  Flag_TieredCompilation_bool = 0x3AC,
  Flag_PrintTieredEvents_bool = 0x3AD,
  Flag_OnStackReplacePercentage_intx = 0x3AE,
  Flag_InterpreterProfilePercentage_intx = 0x3AF,
  Flag_MaxRecompilationSearchLength_intx = 0x3B0,
  Flag_MaxInterpretedSearchLength_intx = 0x3B1,
  Flag_DesiredMethodLimit_intx = 0x3B2,
  Flag_HugeMethodLimit_intx = 0x3B3,
  Flag_UseNewReflection_bool = 0x3B4,
  Flag_VerifyReflectionBytecodes_bool = 0x3B5,
  Flag_ReflectionWrapResolutionErrors_bool = 0x3B6,
  Flag_FastSuperclassLimit_intx = 0x3B7,
  Flag_MaxDirectMemorySize_uintx = 0x3B8,
  Flag_UseNewCode_bool = 0x3B9,
  Flag_UseNewCode2_bool = 0x3BA,
  Flag_UseNewCode3_bool = 0x3BB,
  Flag_UsePerfData_bool = 0x3BC,
  Flag_PerfDataSaveToFile_bool = 0x3BD,
  Flag_PerfDataSaveFile_ccstr = 0x3BE,
  Flag_PerfDataSamplingInterval_intx = 0x3BF,
  Flag_PerfTraceDataCreation_bool = 0x3C0,
  Flag_PerfTraceMemOps_bool = 0x3C1,
  Flag_PerfDisableSharedMem_bool = 0x3C2,
  Flag_PerfDataMemorySize_intx = 0x3C3,
  Flag_PerfMaxStringConstLength_intx = 0x3C4,
  Flag_PerfAllowAtExitRegistration_bool = 0x3C5,
  Flag_PerfBypassFileSystemCheck_bool = 0x3C6,
  Flag_UnguardOnExecutionViolation_intx = 0x3C7,
  Flag_ManagementServer_bool = 0x3C8,
  Flag_DisableAttachMechanism_bool = 0x3C9,
  Flag_StartAttachListener_bool = 0x3CA,
  Flag_PrintConcurrentLocks_bool = 0x3CB,
  Flag_TransmitErrorReport_bool = 0x3CC,
  Flag_ErrorReportServer_ccstr = 0x3CD,
  Flag_UseSharedSpaces_bool = 0x3CE,
  Flag_VerifySharedSpaces_bool = 0x3CF,
  Flag_RequireSharedSpaces_bool = 0x3D0,
  Flag_DumpSharedSpaces_bool = 0x3D1,
  Flag_PrintSharedSpaces_bool = 0x3D2,
  Flag_PrintSharedArchiveAndExit_bool = 0x3D3,
  Flag_PrintSharedDictionary_bool = 0x3D4,
  Flag_SharedReadWriteSize_uintx = 0x3D5,
  Flag_SharedReadOnlySize_uintx = 0x3D6,
  Flag_SharedMiscDataSize_uintx = 0x3D7,
  Flag_SharedMiscCodeSize_uintx = 0x3D8,
  Flag_SharedBaseAddress_uintx = 0x3D9,
  Flag_EnableInvokeDynamic_bool = 0x3DA,
  Flag_IgnoreUnverifiableClassesDuringDump_bool = 0x3DB,
  Flag_PrintMethodHandleStubs_bool = 0x3DC,
  Flag_TraceMethodHandles_bool = 0x3DD,
  Flag_VerifyMethodHandles_bool = 0x3DE,
  Flag_ShowHiddenFrames_bool = 0x3DF,
  Flag_TrustFinalNonStaticFields_bool = 0x3E0,
  Flag_FoldStableValues_bool = 0x3E1,
  Flag_TraceInvokeDynamic_bool = 0x3E2,
  Flag_PauseAtStartup_bool = 0x3E3,
  Flag_PauseAtStartupFile_ccstr = 0x3E4,
  Flag_PauseAtExit_bool = 0x3E5,
  Flag_ExtendedDTraceProbes_bool = 0x3E6,
  Flag_DTraceMethodProbes_bool = 0x3E7,
  Flag_DTraceAllocProbes_bool = 0x3E8,
  Flag_DTraceMonitorProbes_bool = 0x3E9,
  Flag_RelaxAccessControlCheck_bool = 0x3EA,
  Flag_PrintDTraceDOF_bool = 0x3EB,
  Flag_StringTableSize_uintx = 0x3EC,
  Flag_SymbolTableSize_uintx = 0x3ED,
  Flag_UseStringDeduplication_bool = 0x3EE,
  Flag_PrintStringDeduplicationStatistics_bool = 0x3EF,
  Flag_StringDeduplicationAgeThreshold_uintx = 0x3F0,
  Flag_StringDeduplicationResizeALot_bool = 0x3F1,
  Flag_StringDeduplicationRehashALot_bool = 0x3F2,
  Flag_TraceDefaultMethods_bool = 0x3F3,
  Flag_VerifyGenericSignatures_bool = 0x3F4,
  Flag_UseVMInterruptibleIO_bool = 0x3F5,
  Flag_WhiteBoxAPI_bool = 0x3F6,
  Flag_PrintGCCause_bool = 0x3F7,
  Flag_SurvivorAlignmentInBytes_intx = 0x3F8,
  Flag_AllowNonVirtualCalls_bool = 0x3F9,
  Flag_DumpLoadedClassList_ccstr = 0x3FA,
  Flag_SharedClassListFile_ccstr = 0x3FB,
  Flag_SharedArchiveFile_ccstr = 0x3FC,
  Flag_ExtraSharedClassListFile_ccstr = 0x3FD,
  Flag_ArrayAllocatorMallocLimit_uintx = 0x3FE,
  Flag_PreserveFramePointer_bool = 0x3FF,
  Flag_EnableTracing_bool = 0x400,
  Flag_UseLockedTracing_bool = 0x401,
  Flag_UseFastUnorderedTimeStamps_bool = 0x402,
  Flag_UseUTCFileTimestamp_bool = 0x403,
  Flag_G1ConfidencePercent_uintx = 0x404,
  Flag_G1MarkingOverheadPercent_intx = 0x405,
  Flag_G1MarkingVerboseLevel_intx = 0x406,
  Flag_G1PrintReachableAtInitialMark_bool = 0x407,
  Flag_G1VerifyDuringGCPrintReachable_bool = 0x408,
  Flag_G1PrintReachableBaseFile_ccstr = 0x409,
  Flag_G1TraceMarkStackOverflow_bool = 0x40A,
  Flag_G1TraceHeapRegionRememberedSet_bool = 0x40B,
  Flag_G1SummarizeConcMark_bool = 0x40C,
  Flag_G1SummarizeRSetStats_bool = 0x40D,
  Flag_G1SummarizeRSetStatsPeriod_intx = 0x40E,
  Flag_G1TraceConcRefinement_bool = 0x40F,
  Flag_G1TraceStringSymbolTableScrubbing_bool = 0x410,
  Flag_G1ConcMarkStepDurationMillis_double = 0x411,
  Flag_G1RefProcDrainInterval_intx = 0x412,
  Flag_G1UseConcMarkReferenceProcessing_bool = 0x413,
  Flag_G1SATBBufferSize_intx = 0x414,
  Flag_G1SATBProcessCompletedThreshold_intx = 0x415,
  Flag_G1SATBBufferEnqueueingThresholdPercent_uintx = 0x416,
  Flag_G1SATBPrintStubs_bool = 0x417,
  Flag_G1ExpandByPercentOfAvailable_intx = 0x418,
  Flag_G1RSBarrierRegionFilter_bool = 0x419,
  Flag_G1RSLogCheckCardTable_bool = 0x41A,
  Flag_G1PrintRegionLivenessInfo_bool = 0x41B,
  Flag_G1UpdateBufferSize_intx = 0x41C,
  Flag_G1ConcRefinementYellowZone_intx = 0x41D,
  Flag_G1ConcRefinementRedZone_intx = 0x41E,
  Flag_G1ConcRefinementGreenZone_intx = 0x41F,
  Flag_G1ConcRefinementServiceIntervalMillis_intx = 0x420,
  Flag_G1ConcRefinementThresholdStep_intx = 0x421,
  Flag_G1RSetUpdatingPauseTimePercent_intx = 0x422,
  Flag_G1UseAdaptiveConcRefinement_bool = 0x423,
  Flag_G1ConcRSLogCacheSize_uintx = 0x424,
  Flag_G1ConcRSHotCardLimit_uintx = 0x425,
  Flag_G1RSetRegionEntriesBase_intx = 0x426,
  Flag_G1RSetRegionEntries_intx = 0x427,
  Flag_G1RSetSparseRegionEntriesBase_intx = 0x428,
  Flag_G1RSetSparseRegionEntries_intx = 0x429,
  Flag_G1RecordHRRSOops_bool = 0x42A,
  Flag_G1RecordHRRSEvents_bool = 0x42B,
  Flag_G1MaxVerifyFailures_intx = 0x42C,
  Flag_G1ScrubRemSets_bool = 0x42D,
  Flag_G1RSScrubVerbose_bool = 0x42E,
  Flag_G1YoungSurvRateVerbose_bool = 0x42F,
  Flag_G1YoungSurvRateNumRegionsSummary_intx = 0x430,
  Flag_G1ReservePercent_uintx = 0x431,
  Flag_G1PrintHeapRegions_bool = 0x432,
  Flag_G1HRRSUseSparseTable_bool = 0x433,
  Flag_G1HRRSFlushLogBuffersOnVerify_bool = 0x434,
  Flag_G1FailOnFPError_bool = 0x435,
  Flag_G1HeapRegionSize_uintx = 0x436,
  Flag_G1ConcRefinementThreads_uintx = 0x437,
  Flag_G1VerifyCTCleanup_bool = 0x438,
  Flag_G1RSetScanBlockSize_uintx = 0x439,
  Flag_G1SecondaryFreeListAppendLength_uintx = 0x43A,
  Flag_G1ConcRegionFreeingVerbose_bool = 0x43B,
  Flag_G1StressConcRegionFreeing_bool = 0x43C,
  Flag_G1StressConcRegionFreeingDelayMillis_uintx = 0x43D,
  Flag_G1DummyRegionsPerGC_uintx = 0x43E,
  Flag_G1ExitOnExpansionFailure_bool = 0x43F,
  Flag_G1ConcMarkForceOverflow_uintx = 0x440,
  Flag_G1NewSizePercent_uintx = 0x441,
  Flag_G1MaxNewSizePercent_uintx = 0x442,
  Flag_G1MixedGCLiveThresholdPercent_uintx = 0x443,
  Flag_G1HeapWastePercent_uintx = 0x444,
  Flag_G1MixedGCCountTarget_uintx = 0x445,
  Flag_G1EagerReclaimHumongousObjects_bool = 0x446,
  Flag_G1EagerReclaimHumongousObjectsWithStaleRefs_bool = 0x447,
  Flag_G1TraceEagerReclaimHumongousObjects_bool = 0x448,
  Flag_G1OldCSetRegionThresholdPercent_uintx = 0x449,
  Flag_G1LogLevel_ccstr = 0x44A,
  Flag_G1EvacuationFailureALot_bool = 0x44B,
  Flag_G1EvacuationFailureALotCount_uintx = 0x44C,
  Flag_G1EvacuationFailureALotInterval_uintx = 0x44D,
  Flag_G1EvacuationFailureALotDuringConcMark_bool = 0x44E,
  Flag_G1EvacuationFailureALotDuringInitialMark_bool = 0x44F,
  Flag_G1EvacuationFailureALotDuringYoungGC_bool = 0x450,
  Flag_G1EvacuationFailureALotDuringMixedGC_bool = 0x451,
  Flag_G1VerifyRSetsDuringFullGC_bool = 0x452,
  Flag_G1VerifyHeapRegionCodeRoots_bool = 0x453,
  Flag_G1VerifyBitmaps_bool = 0x454,
  Flag_ShenandoahRegionSize_uintx = 0x455,
  Flag_ShenandoahTargetNumRegions_uintx = 0x456,
  Flag_ShenandoahMinRegionSize_uintx = 0x457,
  Flag_ShenandoahMaxRegionSize_uintx = 0x458,
  Flag_ShenandoahHumongousThreshold_intx = 0x459,
  Flag_ShenandoahGCMode_ccstr = 0x45A,
  Flag_ShenandoahGCHeuristics_ccstr = 0x45B,
  Flag_ShenandoahRefProcFrequency_uintx = 0x45C,
  Flag_ShenandoahUnloadClassesFrequency_uintx = 0x45D,
  Flag_ShenandoahGarbageThreshold_uintx = 0x45E,
  Flag_ShenandoahInitFreeThreshold_uintx = 0x45F,
  Flag_ShenandoahMinFreeThreshold_uintx = 0x460,
  Flag_ShenandoahAllocationThreshold_uintx = 0x461,
  Flag_ShenandoahAllocSpikeFactor_uintx = 0x462,
  Flag_ShenandoahLearningSteps_uintx = 0x463,
  Flag_ShenandoahImmediateThreshold_uintx = 0x464,
  Flag_ShenandoahGuaranteedGCInterval_uintx = 0x465,
  Flag_ShenandoahAlwaysClearSoftRefs_bool = 0x466,
  Flag_ShenandoahUncommit_bool = 0x467,
  Flag_ShenandoahUncommitDelay_uintx = 0x468,
  Flag_ShenandoahRegionSampling_bool = 0x469,
  Flag_ShenandoahRegionSamplingRate_int = 0x46A,
  Flag_ShenandoahControlIntervalMin_uintx = 0x46B,
  Flag_ShenandoahControlIntervalMax_uintx = 0x46C,
  Flag_ShenandoahControlIntervalAdjustPeriod_uintx = 0x46D,
  Flag_ShenandoahCriticalControlThreadPriority_bool = 0x46E,
  Flag_ShenandoahVerify_bool = 0x46F,
  Flag_ShenandoahVerifyLevel_intx = 0x470,
  Flag_ShenandoahElasticTLAB_bool = 0x471,
  Flag_ShenandoahEvacReserve_uintx = 0x472,
  Flag_ShenandoahEvacWaste_double = 0x473,
  Flag_ShenandoahEvacReserveOverflow_bool = 0x474,
  Flag_ShenandoahPacing_bool = 0x475,
  Flag_ShenandoahPacingMaxDelay_uintx = 0x476,
  Flag_ShenandoahPacingIdleSlack_uintx = 0x477,
  Flag_ShenandoahPacingCycleSlack_uintx = 0x478,
  Flag_ShenandoahPacingSurcharge_double = 0x479,
  Flag_ShenandoahCriticalFreeThreshold_uintx = 0x47A,
  Flag_ShenandoahDegeneratedGC_bool = 0x47B,
  Flag_ShenandoahFullGCThreshold_uintx = 0x47C,
  Flag_ShenandoahImplicitGCInvokesConcurrent_bool = 0x47D,
  Flag_ShenandoahHumongousMoves_bool = 0x47E,
  Flag_ShenandoahOOMDuringEvacALot_bool = 0x47F,
  Flag_ShenandoahAllocFailureALot_bool = 0x480,
  Flag_ShenandoahMarkScanPrefetch_intx = 0x481,
  Flag_ShenandoahMarkLoopStride_uintx = 0x482,
  Flag_ShenandoahParallelRegionStride_uintx = 0x483,
  Flag_ShenandoahSATBBufferSize_intx = 0x484,
  Flag_ShenandoahSATBBufferFlushInterval_uintx = 0x485,
  Flag_ShenandoahPreclean_bool = 0x486,
  Flag_ShenandoahSATBBarrier_bool = 0x487,
  Flag_ShenandoahStoreValEnqueueBarrier_bool = 0x488,
  Flag_ShenandoahCASBarrier_bool = 0x489,
  Flag_ShenandoahCloneBarrier_bool = 0x48A,
  Flag_ShenandoahLoadRefBarrier_bool = 0x48B,
  Flag_ShenandoahCodeRootsStyle_uintx = 0x48C,
  Flag_ShenandoahOptimizeStaticFinals_bool = 0x48D,
  Flag_ShenandoahVerifyOptoBarriers_bool = 0x48E,
  Flag_ShenandoahLogTrace_bool = 0x48F,
  Flag_ShenandoahLogDebug_bool = 0x490,
  Flag_ShenandoahLogInfo_bool = 0x491,
  Flag_ShenandoahLogWarning_bool = 0x492,
  Flag_PrintC1Statistics_bool = 0x493,
  Flag_PrintInitialBlockList_bool = 0x494,
  Flag_PrintCFG_bool = 0x495,
  Flag_PrintCFG0_bool = 0x496,
  Flag_PrintCFG1_bool = 0x497,
  Flag_PrintCFG2_bool = 0x498,
  Flag_PrintIRDuringConstruction_bool = 0x499,
  Flag_PrintPhiFunctions_bool = 0x49A,
  Flag_PrintIR_bool = 0x49B,
  Flag_PrintIR0_bool = 0x49C,
  Flag_PrintIR1_bool = 0x49D,
  Flag_PrintIR2_bool = 0x49E,
  Flag_PrintSimpleStubs_bool = 0x49F,
  Flag_UseC1Optimizations_bool = 0x4A0,
  Flag_SelectivePhiFunctions_bool = 0x4A1,
  Flag_OptimizeIfOps_bool = 0x4A2,
  Flag_DoCEE_bool = 0x4A3,
  Flag_PrintCEE_bool = 0x4A4,
  Flag_UseLocalValueNumbering_bool = 0x4A5,
  Flag_UseGlobalValueNumbering_bool = 0x4A6,
  Flag_UseLoopInvariantCodeMotion_bool = 0x4A7,
  Flag_TracePredicateFailedTraps_bool = 0x4A8,
  Flag_StressLoopInvariantCodeMotion_bool = 0x4A9,
  Flag_TraceRangeCheckElimination_bool = 0x4AA,
  Flag_AssertRangeCheckElimination_bool = 0x4AB,
  Flag_StressRangeCheckElimination_bool = 0x4AC,
  Flag_PrintValueNumbering_bool = 0x4AD,
  Flag_ValueMapInitialSize_intx = 0x4AE,
  Flag_ValueMapMaxLoopSize_intx = 0x4AF,
  Flag_EliminateBlocks_bool = 0x4B0,
  Flag_PrintBlockElimination_bool = 0x4B1,
  Flag_EliminateNullChecks_bool = 0x4B2,
  Flag_PrintNullCheckElimination_bool = 0x4B3,
  Flag_EliminateFieldAccess_bool = 0x4B4,
  Flag_InlineMethodsWithExceptionHandlers_bool = 0x4B5,
  Flag_InlineSynchronizedMethods_bool = 0x4B6,
  Flag_InlineNIOCheckIndex_bool = 0x4B7,
  Flag_CanonicalizeNodes_bool = 0x4B8,
  Flag_PrintCanonicalization_bool = 0x4B9,
  Flag_UseTableRanges_bool = 0x4BA,
  Flag_RoundFPResults_bool = 0x4BB,
  Flag_NestedInliningSizeRatio_intx = 0x4BC,
  Flag_PrintIRWithLIR_bool = 0x4BD,
  Flag_PrintLIRWithAssembly_bool = 0x4BE,
  Flag_CommentedAssembly_bool = 0x4BF,
  Flag_LIRTracePeephole_bool = 0x4C0,
  Flag_LIRTraceExecution_bool = 0x4C1,
  Flag_LIRFillDelaySlots_bool = 0x4C2,
  Flag_CSEArrayLength_bool = 0x4C3,
  Flag_TwoOperandLIRForm_bool = 0x4C4,
  Flag_TraceLinearScanLevel_intx = 0x4C5,
  Flag_StressLinearScan_bool = 0x4C6,
  Flag_TimeLinearScan_bool = 0x4C7,
  Flag_TimeEachLinearScan_bool = 0x4C8,
  Flag_CountLinearScan_bool = 0x4C9,
  Flag_C1Breakpoint_bool = 0x4CA,
  Flag_ImplicitDiv0Checks_bool = 0x4CB,
  Flag_PinAllInstructions_bool = 0x4CC,
  Flag_UseFastNewInstance_bool = 0x4CD,
  Flag_UseFastNewTypeArray_bool = 0x4CE,
  Flag_UseFastNewObjectArray_bool = 0x4CF,
  Flag_UseFastLocking_bool = 0x4D0,
  Flag_UseSlowPath_bool = 0x4D1,
  Flag_GenerateArrayStoreCheck_bool = 0x4D2,
  Flag_DeoptC1_bool = 0x4D3,
  Flag_PrintBailouts_bool = 0x4D4,
  Flag_TracePatching_bool = 0x4D5,
  Flag_PatchALot_bool = 0x4D6,
  Flag_PrintNotLoaded_bool = 0x4D7,
  Flag_PrintLIR_bool = 0x4D8,
  Flag_BailoutAfterHIR_bool = 0x4D9,
  Flag_BailoutAfterLIR_bool = 0x4DA,
  Flag_BailoutOnExceptionHandlers_bool = 0x4DB,
  Flag_InstallMethods_bool = 0x4DC,
  Flag_NMethodSizeLimit_intx = 0x4DD,
  Flag_TraceFPUStack_bool = 0x4DE,
  Flag_TraceFPURegisterUsage_bool = 0x4DF,
  Flag_OptimizeUnsafes_bool = 0x4E0,
  Flag_PrintUnsafeOptimization_bool = 0x4E1,
  Flag_InstructionCountCutoff_intx = 0x4E2,
  Flag_SafepointPollOffset_intx = 0x4E3,
  Flag_ComputeExactFPURegisterUsage_bool = 0x4E4,
  Flag_C1ProfileCalls_bool = 0x4E5,
  Flag_C1ProfileVirtualCalls_bool = 0x4E6,
  Flag_C1ProfileInlinedCalls_bool = 0x4E7,
  Flag_C1ProfileBranches_bool = 0x4E8,
  Flag_C1ProfileCheckcasts_bool = 0x4E9,
  Flag_C1OptimizeVirtualCallProfiling_bool = 0x4EA,
  Flag_C1UpdateMethodData_bool = 0x4EB,
  Flag_PrintCFGToFile_bool = 0x4EC,
  Flag_C1PatchInvokeDynamic_bool = 0x4ED,
  Flag_StressLCM_bool = 0x4EE,
  Flag_StressGCM_bool = 0x4EF,
  Flag_CompileZapFirst_intx = 0x4F0,
  Flag_CompileZapLast_intx = 0x4F1,
  Flag_ZapDeadCompiledLocalsFirst_intx = 0x4F2,
  Flag_ZapDeadCompiledLocalsLast_intx = 0x4F3,
  Flag_OptoPrologueNops_intx = 0x4F4,
  Flag_InteriorEntryAlignment_intx = 0x4F5,
  Flag_MaxLoopPad_intx = 0x4F6,
  Flag_MaxVectorSize_intx = 0x4F7,
  Flag_AlignVector_bool = 0x4F8,
  Flag_NumberOfLoopInstrToAlign_intx = 0x4F9,
  Flag_IndexSetWatch_intx = 0x4FA,
  Flag_OptoNodeListSize_intx = 0x4FB,
  Flag_OptoBlockListSize_intx = 0x4FC,
  Flag_OptoPeepholeAt_intx = 0x4FD,
  Flag_PrintIdeal_bool = 0x4FE,
  Flag_PrintOpto_bool = 0x4FF,
  Flag_PrintOptoInlining_bool = 0x500,
  Flag_VerifyOpto_bool = 0x501,
  Flag_VerifyIdealNodeCount_bool = 0x502,
  Flag_PrintIdealNodeCount_bool = 0x503,
  Flag_VerifyOptoOopOffsets_bool = 0x504,
  Flag_IdealizedNumerics_bool = 0x505,
  Flag_OptoBreakpoint_bool = 0x506,
  Flag_OptoBreakpointOSR_bool = 0x507,
  Flag_BreakAtNode_intx = 0x508,
  Flag_OptoBreakpointC2R_bool = 0x509,
  Flag_OptoNoExecute_bool = 0x50A,
  Flag_PrintOptoStatistics_bool = 0x50B,
  Flag_PrintOptoAssembly_bool = 0x50C,
  Flag_OptoPeephole_bool = 0x50D,
  Flag_OptoRemoveUseless_bool = 0x50E,
  Flag_PrintFrameConverterAssembly_bool = 0x50F,
  Flag_PrintParseStatistics_bool = 0x510,
  Flag_PrintOptoPeephole_bool = 0x511,
  Flag_PrintCFGBlockFreq_bool = 0x512,
  Flag_TraceOptoParse_bool = 0x513,
  Flag_LoopUnrollLimit_intx = 0x514,
  Flag_LoopMaxUnroll_intx = 0x515,
  Flag_LoopUnrollMin_intx = 0x516,
  Flag_UnrollLimitForProfileCheck_intx = 0x517,
  Flag_MultiArrayExpandLimit_intx = 0x518,
  Flag_TraceProfileTripCount_bool = 0x519,
  Flag_UseCountedLoopSafepoints_bool = 0x51A,
  Flag_UseLoopPredicate_bool = 0x51B,
  Flag_TraceLoopPredicate_bool = 0x51C,
  Flag_TraceLoopOpts_bool = 0x51D,
  Flag_LoopLimitCheck_bool = 0x51E,
  Flag_TraceLoopLimitCheck_bool = 0x51F,
  Flag_RangeLimitCheck_bool = 0x520,
  Flag_TraceRangeLimitCheck_bool = 0x521,
  Flag_UnrollLimitCheck_bool = 0x522,
  Flag_OptimizeFill_bool = 0x523,
  Flag_TraceOptimizeFill_bool = 0x524,
  Flag_OptoCoalesce_bool = 0x525,
  Flag_UseUniqueSubclasses_bool = 0x526,
  Flag_UseExactTypes_bool = 0x527,
  Flag_TrackedInitializationLimit_intx = 0x528,
  Flag_ReduceFieldZeroing_bool = 0x529,
  Flag_ReduceInitialCardMarks_bool = 0x52A,
  Flag_ReduceBulkZeroing_bool = 0x52B,
  Flag_UseFPUForSpilling_bool = 0x52C,
  Flag_RegisterCostAreaRatio_intx = 0x52D,
  Flag_UseCISCSpill_bool = 0x52E,
  Flag_VerifyGraphEdges_bool = 0x52F,
  Flag_VerifyDUIterators_bool = 0x530,
  Flag_VerifyHashTableKeys_bool = 0x531,
  Flag_VerifyRegisterAllocator_bool = 0x532,
  Flag_FLOATPRESSURE_intx = 0x533,
  Flag_INTPRESSURE_intx = 0x534,
  Flag_TraceOptoPipelining_bool = 0x535,
  Flag_TraceOptoOutput_bool = 0x536,
  Flag_OptoScheduling_bool = 0x537,
  Flag_PartialPeelLoop_bool = 0x538,
  Flag_PartialPeelNewPhiDelta_intx = 0x539,
  Flag_TracePartialPeeling_bool = 0x53A,
  Flag_PartialPeelAtUnsignedTests_bool = 0x53B,
  Flag_ReassociateInvariants_bool = 0x53C,
  Flag_LoopUnswitching_bool = 0x53D,
  Flag_TraceLoopUnswitching_bool = 0x53E,
  Flag_UseSuperWord_bool = 0x53F,
  Flag_SuperWordRTDepCheck_bool = 0x540,
  Flag_TraceSuperWord_bool = 0x541,
  Flag_TraceNewVectors_bool = 0x542,
  Flag_OptoBundling_bool = 0x543,
  Flag_ConditionalMoveLimit_intx = 0x544,
  Flag_BranchOnRegister_bool = 0x545,
  Flag_SparcV9RegsHiBitsZero_bool = 0x546,
  Flag_UseRDPCForConstantTableBase_bool = 0x547,
  Flag_PrintIdealGraphLevel_intx = 0x548,
  Flag_PrintIdealGraphPort_intx = 0x549,
  Flag_PrintIdealGraphAddress_ccstr = 0x54A,
  Flag_PrintIdealGraphFile_ccstr = 0x54B,
  Flag_UseBimorphicInlining_bool = 0x54C,
  Flag_UseOnlyInlinedBimorphic_bool = 0x54D,
  Flag_InsertMemBarAfterArraycopy_bool = 0x54E,
  Flag_SubsumeLoads_bool = 0x54F,
  Flag_StressRecompilation_bool = 0x550,
  Flag_ImplicitNullCheckThreshold_intx = 0x551,
  Flag_LoopOptsCount_intx = 0x552,
  Flag_NodeCountInliningCutoff_intx = 0x553,
  Flag_NodeCountInliningStep_intx = 0x554,
  Flag_InlineWarmCalls_bool = 0x555,
  Flag_HotCallCountThreshold_intx = 0x556,
  Flag_HotCallProfitThreshold_intx = 0x557,
  Flag_HotCallTrivialWork_intx = 0x558,
  Flag_HotCallTrivialSize_intx = 0x559,
  Flag_WarmCallMinCount_intx = 0x55A,
  Flag_WarmCallMinProfit_intx = 0x55B,
  Flag_WarmCallMaxWork_intx = 0x55C,
  Flag_WarmCallMaxSize_intx = 0x55D,
  Flag_MaxNodeLimit_intx = 0x55E,
  Flag_NodeLimitFudgeFactor_intx = 0x55F,
  Flag_UseJumpTables_bool = 0x560,
  Flag_UseDivMod_bool = 0x561,
  Flag_MinJumpTableSize_intx = 0x562,
  Flag_MaxJumpTableSize_intx = 0x563,
  Flag_MaxJumpTableSparseness_intx = 0x564,
  Flag_EliminateLocks_bool = 0x565,
  Flag_EliminateNestedLocks_bool = 0x566,
  Flag_PrintLockStatistics_bool = 0x567,
  Flag_PrintPreciseBiasedLockingStatistics_bool = 0x568,
  Flag_PrintPreciseRTMLockingStatistics_bool = 0x569,
  Flag_PrintEliminateLocks_bool = 0x56A,
  Flag_EliminateAutoBox_bool = 0x56B,
  Flag_UseImplicitStableValues_bool = 0x56C,
  Flag_AutoBoxCacheMax_intx = 0x56D,
  Flag_AggressiveUnboxing_bool = 0x56E,
  Flag_TracePostallocExpand_bool = 0x56F,
  Flag_DoEscapeAnalysis_bool = 0x570,
  Flag_EscapeAnalysisTimeout_double = 0x571,
  Flag_ExitEscapeAnalysisOnTimeout_bool = 0x572,
  Flag_PrintEscapeAnalysis_bool = 0x573,
  Flag_EliminateAllocations_bool = 0x574,
  Flag_PrintEliminateAllocations_bool = 0x575,
  Flag_EliminateAllocationArraySizeLimit_intx = 0x576,
  Flag_OptimizePtrCompare_bool = 0x577,
  Flag_PrintOptimizePtrCompare_bool = 0x578,
  Flag_VerifyConnectionGraph_bool = 0x579,
  Flag_UseOptoBiasInlining_bool = 0x57A,
  Flag_OptimizeStringConcat_bool = 0x57B,
  Flag_PrintOptimizeStringConcat_bool = 0x57C,
  Flag_ValueSearchLimit_intx = 0x57D,
  Flag_MaxLabelRootDepth_intx = 0x57E,
  Flag_DominatorSearchLimit_intx = 0x57F,
  Flag_BlockLayoutByFrequency_bool = 0x580,
  Flag_BlockLayoutMinDiamondPercentage_intx = 0x581,
  Flag_BlockLayoutRotateLoops_bool = 0x582,
  Flag_InlineReflectionGetCallerClass_bool = 0x583,
  Flag_InlineObjectCopy_bool = 0x584,
  Flag_SpecialStringCompareTo_bool = 0x585,
  Flag_SpecialStringIndexOf_bool = 0x586,
  Flag_SpecialStringEquals_bool = 0x587,
  Flag_SpecialArraysEquals_bool = 0x588,
  Flag_SpecialEncodeISOArray_bool = 0x589,
  Flag_BailoutToInterpreterForThrows_bool = 0x58A,
  Flag_ConvertCmpD2CmpF_bool = 0x58B,
  Flag_ConvertFloat2IntClipping_bool = 0x58C,
  Flag_Use24BitFPMode_bool = 0x58D,
  Flag_Use24BitFP_bool = 0x58E,
  Flag_MonomorphicArrayCheck_bool = 0x58F,
  Flag_TracePhaseCCP_bool = 0x590,
  Flag_PrintDominators_bool = 0x591,
  Flag_TraceSpilling_bool = 0x592,
  Flag_TraceTypeProfile_bool = 0x593,
  Flag_PoisonOSREntry_bool = 0x594,
  Flag_UseCondCardMark_bool = 0x595,
  Flag_SoftMatchFailure_bool = 0x596,
  Flag_InlineAccessors_bool = 0x597,
  Flag_TypeProfileMajorReceiverPercent_intx = 0x598,
  Flag_TimeCompiler2_bool = 0x599,
  Flag_PrintIntrinsics_bool = 0x59A,
  Flag_DisableIntrinsic_ccstrlist = 0x59B,
  Flag_StressReflectiveCode_bool = 0x59C,
  Flag_DebugInlinedCalls_bool = 0x59D,
  Flag_VerifyLoopOptimizations_bool = 0x59E,
  Flag_ProfileDynamicTypes_bool = 0x59F,
  Flag_TraceIterativeGVN_bool = 0x5A0,
  Flag_VerifyIterativeGVN_bool = 0x5A1,
  Flag_TraceCISCSpill_bool = 0x5A2,
  Flag_SplitIfBlocks_bool = 0x5A3,
  Flag_FreqCountInvocations_intx = 0x5A4,
  Flag_AliasLevel_intx = 0x5A5,
  Flag_VerifyAliases_bool = 0x5A6,
  Flag_IncrementalInline_bool = 0x5A7,
  Flag_AlwaysIncrementalInline_bool = 0x5A8,
  Flag_LiveNodeCountInliningCutoff_intx = 0x5A9,
  Flag_OptimizeExpensiveOps_bool = 0x5AA,
  Flag_UseMathExactIntrinsics_bool = 0x5AB,
  Flag_UseMultiplyToLenIntrinsic_bool = 0x5AC,
  Flag_UseSquareToLenIntrinsic_bool = 0x5AD,
  Flag_UseMulAddIntrinsic_bool = 0x5AE,
  Flag_UseMontgomeryMultiplyIntrinsic_bool = 0x5AF,
  Flag_UseMontgomerySquareIntrinsic_bool = 0x5B0,
  Flag_UseTypeSpeculation_bool = 0x5B1,
  Flag_UseInlineDepthForSpeculativeTypes_bool = 0x5B2,
  Flag_TrapBasedRangeChecks_bool = 0x5B3,
  Flag_RenumberLiveNodes_bool = 0x5B4,
  Flag_IEEEPrecision_bool = 0x5B5,
  Flag_FenceInstruction_intx = 0x5B6,
  Flag_ReadPrefetchInstr_intx = 0x5B7,
  Flag_UseStoreImmI16_bool = 0x5B8,
  Flag_UseAVX_intx = 0x5B9,
  Flag_UseCLMUL_bool = 0x5BA,
  Flag_UseIncDec_bool = 0x5BB,
  Flag_UseNewLongLShift_bool = 0x5BC,
  Flag_UseAddressNop_bool = 0x5BD,
  Flag_UseXmmLoadAndClearUpper_bool = 0x5BE,
  Flag_UseXmmRegToRegMoveAll_bool = 0x5BF,
  Flag_UseXmmI2D_bool = 0x5C0,
  Flag_UseXmmI2F_bool = 0x5C1,
  Flag_UseUnalignedLoadStores_bool = 0x5C2,
  Flag_UseFastStosb_bool = 0x5C3,
  Flag_UseRTMLocking_bool = 0x5C4,
  Flag_UseRTMForStackLocks_bool = 0x5C5,
  Flag_UseRTMDeopt_bool = 0x5C6,
  Flag_RTMRetryCount_uintx = 0x5C7,
  Flag_RTMSpinLoopCount_intx = 0x5C8,
  Flag_RTMAbortThreshold_intx = 0x5C9,
  Flag_RTMLockingThreshold_intx = 0x5CA,
  Flag_RTMAbortRatio_intx = 0x5CB,
  Flag_RTMTotalCountIncrRate_intx = 0x5CC,
  Flag_RTMLockingCalculationDelay_intx = 0x5CD,
  Flag_UseRTMXendForLockBusy_bool = 0x5CE,
  Flag_Use486InstrsOnly_bool = 0x5CF,
  Flag_UseCountLeadingZerosInstruction_bool = 0x5D0,
  Flag_UseCountTrailingZerosInstruction_bool = 0x5D1,
  Flag_UseBMI1Instructions_bool = 0x5D2,
  Flag_UseBMI2Instructions_bool = 0x5D3,
  NUM_CommandLineFlagWithType = 0x5D4,
};

/* 341 */
enum G1Log::LogLevel : __int32
{
  LevelNone = 0x0,
  LevelFine = 0x1,
  LevelFiner = 0x2,
  LevelFinest = 0x3,
};

/* 342 */
typedef InitializeNode::<unnamed_tag> HeapRegionRemSet::ParIterState;

/* 343 */
enum SparsePRTEntry::SomePublicConstants : __int32
{
  NullEntry = 0xFFFFFFFF,
  UnrollFactor = 0x4,
};

/* 344 */
typedef BoolTest::mask SparsePRTEntry::AddCardResult;

/* 345 */
typedef SparsePRTEntry::SomePublicConstants RSHashTable::SomePrivateConstants;

/* 346 */
enum SparsePRT::SomeAdditionalPrivateConstants : __int32
{
  InitialCapacity = 0x10,
};

/* 347 */
enum FromCardCache::<unnamed_tag> : __int32
{
  InvalidCard = 0xFFFFFFFF,
};

/* 348 */
enum HeapRegionRemSet::Event : __int32
{
  Event_EvacStart = 0x0,
  Event_EvacEnd = 0x1,
  Event_RSUpdateEnd = 0x2,
  Event_illegal = 0x3,
};

/* 349 */
enum HeapRegionRemSetIterator::IterState : __int32
{
  Sparse = 0x0,
  Fine = 0x1,
  Coarse = 0x2,
};

/* 350 */
enum HeapRegionType::Tag : __int32
{
  FreeTag = 0x0,
  YoungMask = 0x2,
  EdenTag = 0x2,
  SurvTag = 0x3,
  HumMask = 0x4,
  HumStartsTag = 0x4,
  HumContTag = 0x5,
  OldTag = 0x8,
};

/* 351 */
enum G1HeapRegionTraceType::Type : __int32
{
  Free = 0x0,
  Eden = 0x1,
  Survivor = 0x2,
  StartsHumongous = 0x3,
  ContinuesHumongous = 0x4,
  Old = 0x5,
  G1HeapRegionTypeEndSentinel = 0x6,
};

/* 352 */
enum G1BlockOffsetSharedArray::SomePublicConstants : __int32
{
  LogN = 0x9,
  LogN_words = 0x7,
  N_bytes = 0x200,
  N_words = 0x80,
};

/* 353 */
enum G1HRPrinter::ActionType : __int32
{
  Alloc = 0x0,
  AllocForce = 0x1,
  Retire = 0x2,
  Reuse = 0x3,
  CSet = 0x4,
  EvacFailure = 0x5,
  Cleanup = 0x6,
  PostCompaction = 0x7,
  Commit = 0x8,
  Uncommit = 0x9,
};

/* 354 */
enum HeapRegion::ClaimValues : __int32
{
  InitialClaimValue = 0x0,
  FinalCountClaimValue = 0x1,
  NoteEndClaimValue = 0x2,
  ScrubRemSetClaimValue = 0x3,
  ParVerifyClaimValue = 0x4,
  RebuildRSClaimValue = 0x5,
  ParEvacFailureClaimValue = 0x6,
  AggregateCountClaimValue = 0x7,
  VerifyCountClaimValue = 0x8,
  ParMarkRootClaimValue = 0x9,
};

/* 355 */
typedef G1HeapRegionTraceType::Type InCSetState::<unnamed_tag>;

/* 356 */
enum CMVerboseLevel : __int32
{
  no_verbose = 0x0,
  stats_verbose = 0x1,
  low_verbose = 0x2,
  medium_verbose = 0x3,
  high_verbose = 0x4,
};

/* 357 */
enum G1RemSet::SomePrivateConstants : __int32
{
  UpdateRStoMergeSync = 0x0,
  MergeRStoDoDirtySync = 0x1,
  DoDirtySync = 0x2,
  LastSync = 0x3,
  SeqTask = 0x0,
  NumSeqTasks = 0x1,
};

/* 358 */
typedef ShenandoahPhaseTimings::ParPhase G1GCPhaseTimes::GCParPhases;

/* 359 */
enum G1RootProcessor::G1H_process_roots_tasks : __int32
{
  G1RP_PS_Universe_oops_do = 0x0,
  G1RP_PS_JNIHandles_oops_do = 0x1,
  G1RP_PS_ObjectSynchronizer_oops_do = 0x2,
  G1RP_PS_FlatProfiler_oops_do = 0x3,
  G1RP_PS_Management_oops_do = 0x4,
  G1RP_PS_SystemDictionary_oops_do = 0x5,
  G1RP_PS_ClassLoaderDataGraph_oops_do = 0x6,
  G1RP_PS_jvmti_oops_do = 0x7,
  G1RP_PS_CodeCache_oops_do = 0x8,
  G1RP_PS_filter_satb_buffers = 0x9,
  G1RP_PS_refProcessor_oops_do = 0xA,
  G1RP_PS_NumElements = 0xB,
};

/* 360 */
enum G1MMUTrackerQueue::PrivateConstants : __int32
{
  QueueLength = 0x40,
};

/* 361 */
typedef G1HeapRegionTraceType::Type G1HRPrinter::RegionType;

/* 362 */
enum G1HRPrinter::PhaseType : __int32
{
  StartGC = 0x0,
  EndGC = 0x1,
  StartFullGC = 0x2,
  EndFullGC = 0x3,
};

/* 363 */
enum ErgoLevel : __int32
{
  ErgoLevelShift = 0x8,
  ErgoLevelMask = 0xFFFFFF00,
  ErgoLow = 0x0,
  ErgoHigh = 0x100,
};

/* 364 */
enum ErgoHeuristic : __int32
{
  ErgoHeuristicMask = 0xFF,
  ErgoHeapSizing = 0x0,
  ErgoCSetConstruction = 0x1,
  ErgoConcCycles = 0x2,
  ErgoMixedGCs = 0x3,
  ErgoHeuristicNum = 0x4,
};

/* 365 */
enum G1YoungGenSizer::SizerKind : __int32
{
  SizerDefaults = 0x0,
  SizerNewSizeOnly = 0x1,
  SizerMaxNewSizeOnly = 0x2,
  SizerMaxAndNewSize = 0x3,
  SizerNewRatio = 0x4,
};

/* 366 */
enum G1CollectorPolicy::SomePrivateConstants : __int32
{
  NumPrevPausesForHeuristics = 0xA,
};

/* 367 */
enum G1CollectorPolicy::PredictionConstants : __int32
{
  TruncatedSeqLength = 0xA,
};

/* 368 */
enum G1CollectorPolicy::CSetBuildType : __int32
{
  Active = 0x0,
  Inactive = 0x1,
};

/* 369 */
enum G1Barrier : __int32
{
  G1BarrierNone = 0x0,
  G1BarrierEvac = 0x1,
  G1BarrierKlass = 0x2,
};

/* 370 */
enum G1Mark : __int32
{
  G1MarkNone = 0x0,
  G1MarkFromRoot = 0x1,
  G1MarkPromotedFromRoot = 0x2,
};

/* 371 */
typedef LoopNode::<unnamed_tag> G1YCType;

/* 372 */
typedef G1BlockOffsetSharedArray::SomePublicConstants G1BlockOffsetArray::SomePrivateConstants;

/* 373 */
typedef G1BlockOffsetSharedArray::SomePublicConstants BlockOffsetArray::SomePrivateConstants;

/* 374 */
enum CMTask::PrivateConstants : __int32
{
  words_scanned_period = 0x3000,
  refs_reached_period = 0x180,
  init_hash_seed = 0x11,
  global_stack_transfer_size = 0x10,
};

/* 375 */
enum CMSCollector::CMS_op_type : __int32
{
  CMS_op_checkpointRootsInitial = 0x0,
  CMS_op_checkpointRootsFinal = 0x1,
};

/* 376 */
enum CMSStats::<unnamed_tag> : __int32
{
  _GC0_VALID = 0x1,
  _CMS_VALID = 0x2,
  _ALL_VALID = 0x3,
};

/* 377 */
enum ConcurrentMarkSweepThread::CMS_flag_type : __int32
{
  CMS_nil = 0x0,
  CMS_cms_wants_token = 0x1,
  CMS_cms_has_token = 0x2,
  CMS_vm_wants_token = 0x4,
  CMS_vm_has_token = 0x8,
};

/* 378 */
enum CMSCollector::CollectorState : __int32
{
  Resizing = 0x0,
  Resetting = 0x1,
  Idling = 0x2,
  InitialMarking = 0x3,
  Marking = 0x4,
  Precleaning = 0x5,
  AbortablePreclean = 0x6,
  FinalMarking = 0x7,
  Sweeping = 0x8,
};

/* 379 */
enum PromotedObject::<unnamed_tag> : __int32
{
  promoted_mask = 0x3,
  displaced_mark = 0x4,
  next_mask = 0xFFFFFFF8,
};

/* 380 */
typedef GCCause::Cause CMSExpansionCause::Cause;

/* 381 */
enum ConcurrentMarkSweepGeneration::CollectionTypes : __int32
{
  Concurrent_collection_type = 0x0,
  MS_foreground_collection_type = 0x1,
  MSC_foreground_collection_type = 0x2,
  Unknown_collection_type = 0x3,
};

/* 382 */
enum Status : __int32
{
  INACTIVE = 0x0,
  ACTIVE = 0x1,
  YIELDING = 0x2,
  YIELDED = 0x3,
  ABORTING = 0x4,
  ABORTED = 0x5,
  COMPLETING = 0x6,
  COMPLETED = 0x7,
};

/* 383 */
enum FreeBlockDictionary<FreeChunk>::DictionaryChoice : __int32
{
  dictionaryBinaryTree = 0x0,
  dictionarySplayTree = 0x1,
  dictionarySkipList = 0x2,
};

/* 384 */
enum CompactibleFreeListSpace::SomeConstants : __int32
{
  SmallForLinearAlloc = 0x10,
  SmallForDictionary = 0x101,
  IndexSetSize = 0x101,
};

/* 385 */
enum CompactibleFreeListSpace::FitStrategyOptions : __int32
{
  FreeBlockStrategyNone = 0x0,
  FreeBlockBestFitFirst = 0x1,
};

/* 386 */
enum FreeBlockDictionary<FreeChunk>::Dither : __int32
{
  atLeast = 0x0,
  exactly = 0x1,
  roughly = 0x2,
};

/* 387 */
typedef G1BlockOffsetSharedArray::SomePublicConstants BlockOffsetSharedArray::SomePrivateConstants;

/* 388 */
enum Generation::SomePublicConstants : __int32
{
  LogOfGenGrain = 0x10,
  GenGrain = 0x10000,
};

/* 389 */
typedef LibraryCallKit::inline_native_subtype_check::__l2::<unnamed_tag> ShenandoahBarrierC2Support::pin_and_expand::__l99::<unnamed_tag>;

/* 390 */
enum JavaThread::TerminatedTypes : __int32
{
  _not_terminated = 0xDEAB,
  _thread_exiting = 0xDEAC,
  _thread_terminated = 0xDEAD,
  _vm_exited = 0xDEAE,
};

/* 391 */
enum DCmdSource : __int32
{
  DCmd_Source_Internal = 0x1,
  DCmd_Source_AttachAPI = 0x2,
  DCmd_Source_MBean = 0x4,
};

/* 392 */
enum JvmtiClassLoadKind : __int32
{
  jvmti_class_load_kind_load = 0x64,
  jvmti_class_load_kind_retransform = 0x65,
  jvmti_class_load_kind_redefine = 0x66,
};

/* 393 */
enum TosState : __int32
{
  btos = 0x0,
  ztos = 0x1,
  ctos = 0x2,
  stos = 0x3,
  itos = 0x4,
  ltos = 0x5,
  ftos = 0x6,
  dtos = 0x7,
  atos = 0x8,
  vtos = 0x9,
  number_of_states = 0xA,
  ilgl = 0xB,
};

/* 394 */
enum JvmtiTrace::<unnamed_tag> : __int32
{
  SHOW_IN = 0x1,
  SHOW_OUT = 0x2,
  SHOW_ERROR = 0x4,
  SHOW_IN_DETAIL = 0x8,
  SHOW_OUT_DETAIL = 0x10,
  SHOW_EVENT_TRIGGER = 0x20,
  SHOW_EVENT_SENT = 0x40,
};

/* 395 */
enum JvmtiThreadState::EarlyretState : __int32
{
  earlyret_inactive = 0x0,
  earlyret_pending = 0x1,
};

/* 396 */
enum jvmtiPhase : __int32
{
  JVMTI_PHASE_ONLOAD = 0x1,
  JVMTI_PHASE_PRIMORDIAL = 0x2,
  JVMTI_PHASE_START = 0x6,
  JVMTI_PHASE_LIVE = 0x4,
  JVMTI_PHASE_DEAD = 0x8,
};

/* 397 */
enum $15553D4034D92A3BB28FE018E3CD4A1A : __int32
{
  JVMTI_VERSION_1 = 0x30010000,
  JVMTI_VERSION_1_0 = 0x30010000,
  JVMTI_VERSION_1_1 = 0x30010100,
  JVMTI_VERSION_1_2 = 0x30010200,
  JVMTI_VERSION = 0x30010203,
};

/* 398 */
enum JvmtiDeferredEvent::Type : __int32
{
  TYPE_NONE = 0x0,
  TYPE_COMPILED_METHOD_LOAD = 0x1,
  TYPE_COMPILED_METHOD_UNLOAD = 0x2,
  TYPE_DYNAMIC_CODE_GENERATED = 0x3,
};

/* 399 */
enum jvmtiError : __int32
{
  JVMTI_ERROR_NONE = 0x0,
  JVMTI_ERROR_INVALID_THREAD = 0xA,
  JVMTI_ERROR_INVALID_THREAD_GROUP = 0xB,
  JVMTI_ERROR_INVALID_PRIORITY = 0xC,
  JVMTI_ERROR_THREAD_NOT_SUSPENDED = 0xD,
  JVMTI_ERROR_THREAD_SUSPENDED = 0xE,
  JVMTI_ERROR_THREAD_NOT_ALIVE = 0xF,
  JVMTI_ERROR_INVALID_OBJECT = 0x14,
  JVMTI_ERROR_INVALID_CLASS = 0x15,
  JVMTI_ERROR_CLASS_NOT_PREPARED = 0x16,
  JVMTI_ERROR_INVALID_METHODID = 0x17,
  JVMTI_ERROR_INVALID_LOCATION = 0x18,
  JVMTI_ERROR_INVALID_FIELDID = 0x19,
  JVMTI_ERROR_NO_MORE_FRAMES = 0x1F,
  JVMTI_ERROR_OPAQUE_FRAME = 0x20,
  JVMTI_ERROR_TYPE_MISMATCH = 0x22,
  JVMTI_ERROR_INVALID_SLOT = 0x23,
  JVMTI_ERROR_DUPLICATE = 0x28,
  JVMTI_ERROR_NOT_FOUND = 0x29,
  JVMTI_ERROR_INVALID_MONITOR = 0x32,
  JVMTI_ERROR_NOT_MONITOR_OWNER = 0x33,
  JVMTI_ERROR_INTERRUPT = 0x34,
  JVMTI_ERROR_INVALID_CLASS_FORMAT = 0x3C,
  JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION = 0x3D,
  JVMTI_ERROR_FAILS_VERIFICATION = 0x3E,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED = 0x3F,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED = 0x40,
  JVMTI_ERROR_INVALID_TYPESTATE = 0x41,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED = 0x42,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED = 0x43,
  JVMTI_ERROR_UNSUPPORTED_VERSION = 0x44,
  JVMTI_ERROR_NAMES_DONT_MATCH = 0x45,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED = 0x46,
  JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED = 0x47,
  JVMTI_ERROR_UNMODIFIABLE_CLASS = 0x4F,
  JVMTI_ERROR_NOT_AVAILABLE = 0x62,
  JVMTI_ERROR_MUST_POSSESS_CAPABILITY = 0x63,
  JVMTI_ERROR_NULL_POINTER = 0x64,
  JVMTI_ERROR_ABSENT_INFORMATION = 0x65,
  JVMTI_ERROR_INVALID_EVENT_TYPE = 0x66,
  JVMTI_ERROR_ILLEGAL_ARGUMENT = 0x67,
  JVMTI_ERROR_NATIVE_METHOD = 0x68,
  JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED = 0x6A,
  JVMTI_ERROR_OUT_OF_MEMORY = 0x6E,
  JVMTI_ERROR_ACCESS_DENIED = 0x6F,
  JVMTI_ERROR_WRONG_PHASE = 0x70,
  JVMTI_ERROR_INTERNAL = 0x71,
  JVMTI_ERROR_UNATTACHED_THREAD = 0x73,
  JVMTI_ERROR_INVALID_ENVIRONMENT = 0x74,
  JVMTI_ERROR_MAX = 0x74,
};

/* 400 */
enum jvmtiEventMode : __int32
{
  JVMTI_ENABLE = 0x1,
  JVMTI_DISABLE = 0x0,
};

/* 401 */
enum jvmtiEvent : __int32
{
  JVMTI_MIN_EVENT_TYPE_VAL = 0x32,
  JVMTI_EVENT_VM_INIT = 0x32,
  JVMTI_EVENT_VM_DEATH = 0x33,
  JVMTI_EVENT_THREAD_START = 0x34,
  JVMTI_EVENT_THREAD_END = 0x35,
  JVMTI_EVENT_CLASS_FILE_LOAD_HOOK = 0x36,
  JVMTI_EVENT_CLASS_LOAD = 0x37,
  JVMTI_EVENT_CLASS_PREPARE = 0x38,
  JVMTI_EVENT_VM_START = 0x39,
  JVMTI_EVENT_EXCEPTION = 0x3A,
  JVMTI_EVENT_EXCEPTION_CATCH = 0x3B,
  JVMTI_EVENT_SINGLE_STEP = 0x3C,
  JVMTI_EVENT_FRAME_POP = 0x3D,
  JVMTI_EVENT_BREAKPOINT = 0x3E,
  JVMTI_EVENT_FIELD_ACCESS = 0x3F,
  JVMTI_EVENT_FIELD_MODIFICATION = 0x40,
  JVMTI_EVENT_METHOD_ENTRY = 0x41,
  JVMTI_EVENT_METHOD_EXIT = 0x42,
  JVMTI_EVENT_NATIVE_METHOD_BIND = 0x43,
  JVMTI_EVENT_COMPILED_METHOD_LOAD = 0x44,
  JVMTI_EVENT_COMPILED_METHOD_UNLOAD = 0x45,
  JVMTI_EVENT_DYNAMIC_CODE_GENERATED = 0x46,
  JVMTI_EVENT_DATA_DUMP_REQUEST = 0x47,
  JVMTI_EVENT_MONITOR_WAIT = 0x49,
  JVMTI_EVENT_MONITOR_WAITED = 0x4A,
  JVMTI_EVENT_MONITOR_CONTENDED_ENTER = 0x4B,
  JVMTI_EVENT_MONITOR_CONTENDED_ENTERED = 0x4C,
  JVMTI_EVENT_RESOURCE_EXHAUSTED = 0x50,
  JVMTI_EVENT_GARBAGE_COLLECTION_START = 0x51,
  JVMTI_EVENT_GARBAGE_COLLECTION_FINISH = 0x52,
  JVMTI_EVENT_OBJECT_FREE = 0x53,
  JVMTI_EVENT_VM_OBJECT_ALLOC = 0x54,
  JVMTI_MAX_EVENT_TYPE_VAL = 0x54,
};

/* 402 */
enum jvmtiIterationControl : __int32
{
  JVMTI_ITERATION_CONTINUE = 0x1,
  JVMTI_ITERATION_IGNORE = 0x2,
  JVMTI_ITERATION_ABORT = 0x0,
};

/* 403 */
enum jvmtiObjectReferenceKind : __int32
{
  JVMTI_REFERENCE_CLASS = 0x1,
  JVMTI_REFERENCE_FIELD = 0x2,
  JVMTI_REFERENCE_ARRAY_ELEMENT = 0x3,
  JVMTI_REFERENCE_CLASS_LOADER = 0x4,
  JVMTI_REFERENCE_SIGNERS = 0x5,
  JVMTI_REFERENCE_PROTECTION_DOMAIN = 0x6,
  JVMTI_REFERENCE_INTERFACE = 0x7,
  JVMTI_REFERENCE_STATIC_FIELD = 0x8,
  JVMTI_REFERENCE_CONSTANT_POOL = 0x9,
};

/* 404 */
enum jvmtiHeapRootKind : __int32
{
  JVMTI_HEAP_ROOT_JNI_GLOBAL = 0x1,
  JVMTI_HEAP_ROOT_SYSTEM_CLASS = 0x2,
  JVMTI_HEAP_ROOT_MONITOR = 0x3,
  JVMTI_HEAP_ROOT_STACK_LOCAL = 0x4,
  JVMTI_HEAP_ROOT_JNI_LOCAL = 0x5,
  JVMTI_HEAP_ROOT_THREAD = 0x6,
  JVMTI_HEAP_ROOT_OTHER = 0x7,
};

/* 405 */
enum jvmtiHeapObjectFilter : __int32
{
  JVMTI_HEAP_OBJECT_TAGGED = 0x1,
  JVMTI_HEAP_OBJECT_UNTAGGED = 0x2,
  JVMTI_HEAP_OBJECT_EITHER = 0x3,
};

/* 406 */
enum jvmtiJlocationFormat : __int32
{
  JVMTI_JLOCATION_JVMBCI = 0x1,
  JVMTI_JLOCATION_MACHINEPC = 0x2,
  JVMTI_JLOCATION_OTHER = 0x0,
};

/* 407 */
enum jvmtiVerboseFlag : __int32
{
  JVMTI_VERBOSE_OTHER = 0x0,
  JVMTI_VERBOSE_GC = 0x1,
  JVMTI_VERBOSE_CLASS = 0x2,
  JVMTI_VERBOSE_JNI = 0x4,
};

/* 408 */
enum jvmtiExtEvent : __int32
{
  EXT_EVENT_CLASS_UNLOAD = 0x31,
  EXT_MIN_EVENT_TYPE_VAL = 0x31,
  EXT_MAX_EVENT_TYPE_VAL = 0x31,
};

/* 409 */
enum JvmtiEnvBase::<unnamed_tag> : __int32
{
  JDK15_JVMTI_VERSION = 0x30010021,
  JDK16_JVMTI_VERSION = 0x30010166,
  JDK17_JVMTI_VERSION = 0x30010202,
};

/* 410 */
enum VM_ChangeBreakpoints::<unnamed_tag> : __int32
{
  SET_BREAKPOINT = 0x0,
  CLEAR_BREAKPOINT = 0x1,
};

/* 411 */
enum JvmtiRawMonitor::<unnamed_tag> : __int32
{
  JVMTI_RM_MAGIC = 0x5449524D,
};

/* 412 */
enum ReplacesCorHdrNumericDefines : __int32
{
  COMIMAGE_FLAGS_ILONLY = 0x1,
  COMIMAGE_FLAGS_32BITREQUIRED = 0x2,
  COMIMAGE_FLAGS_IL_LIBRARY = 0x4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x10,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COR_VERSION_MAJOR_V2 = 0x2,
  COR_VERSION_MAJOR = 0x2,
  COR_VERSION_MINOR = 0x0,
  COR_DELETED_NAME_LENGTH = 0x8,
  COR_VTABLEGAP_NAME_LENGTH = 0x8,
  NATIVE_TYPE_MAX_CB = 0x1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
  IMAGE_COR_MIH_METHODRVA = 0x1,
  IMAGE_COR_MIH_EHRVA = 0x2,
  IMAGE_COR_MIH_BASICBLOCK = 0x8,
  COR_VTABLE_32BIT = 0x1,
  COR_VTABLE_64BIT = 0x2,
  COR_VTABLE_FROM_UNMANAGED = 0x4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x8,
  COR_VTABLE_CALL_MOST_DERIVED = 0x10,
  IMAGE_COR_EATJ_THUNK_SIZE = 0x20,
  MAX_CLASS_NAME = 0x400,
  MAX_PACKAGE_NAME = 0x400,
};

/* 413 */
enum $F972C8AFAE1F862F59797960CA404992 : __int32
{
  noreg_RegisterEnumValue = 0xFFFFFFFF,
};

/* 414 */
enum tagBINDSTRING : __int32
{
  BINDSTRING_HEADERS = 0x1,
  BINDSTRING_ACCEPT_MIMES = 0x2,
  BINDSTRING_EXTRA_URL = 0x3,
  BINDSTRING_LANGUAGE = 0x4,
  BINDSTRING_USERNAME = 0x5,
  BINDSTRING_PASSWORD = 0x6,
  BINDSTRING_UA_PIXELS = 0x7,
  BINDSTRING_UA_COLOR = 0x8,
  BINDSTRING_OS = 0x9,
  BINDSTRING_USER_AGENT = 0xA,
  BINDSTRING_ACCEPT_ENCODINGS = 0xB,
  BINDSTRING_POST_COOKIE = 0xC,
  BINDSTRING_POST_DATA_MIME = 0xD,
  BINDSTRING_URL = 0xE,
  BINDSTRING_IID = 0xF,
  BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,
  BINDSTRING_PTR_BIND_CONTEXT = 0x11,
  BINDSTRING_XDR_ORIGIN = 0x12,
};

/* 415 */
enum tagDESCKIND : __int32
{
  DESCKIND_NONE = 0x0,
  DESCKIND_FUNCDESC = 0x1,
  DESCKIND_VARDESC = 0x2,
  DESCKIND_TYPECOMP = 0x3,
  DESCKIND_IMPLICITAPPOBJ = 0x4,
  DESCKIND_MAX = 0x5,
};

/* 416 */
enum _tagPARSEACTION : __int32
{
  PARSE_CANONICALIZE = 0x1,
  PARSE_FRIENDLY = 0x2,
  PARSE_SECURITY_URL = 0x3,
  PARSE_ROOTDOCUMENT = 0x4,
  PARSE_DOCUMENT = 0x5,
  PARSE_ANCHOR = 0x6,
  PARSE_ENCODE_IS_UNESCAPE = 0x7,
  PARSE_DECODE_IS_ESCAPE = 0x8,
  PARSE_PATH_FROM_URL = 0x9,
  PARSE_URL_FROM_PATH = 0xA,
  PARSE_MIME = 0xB,
  PARSE_SERVER = 0xC,
  PARSE_SCHEMA = 0xD,
  PARSE_SITE = 0xE,
  PARSE_DOMAIN = 0xF,
  PARSE_LOCATION = 0x10,
  PARSE_SECURITY_DOMAIN = 0x11,
  PARSE_ESCAPE = 0x12,
  PARSE_UNESCAPE = 0x13,
};

/* 417 */
enum tagDOMNodeType : __int32
{
  NODE_INVALID = 0x0,
  NODE_ELEMENT = 0x1,
  NODE_ATTRIBUTE = 0x2,
  NODE_TEXT = 0x3,
  NODE_CDATA_SECTION = 0x4,
  NODE_ENTITY_REFERENCE = 0x5,
  NODE_ENTITY = 0x6,
  NODE_PROCESSING_INSTRUCTION = 0x7,
  NODE_COMMENT = 0x8,
  NODE_DOCUMENT = 0x9,
  NODE_DOCUMENT_TYPE = 0xA,
  NODE_DOCUMENT_FRAGMENT = 0xB,
  NODE_NOTATION = 0xC,
};

/* 418 */
enum _tagPSUACTION : __int32
{
  PSU_DEFAULT = 0x1,
  PSU_SECURITY_URL_ONLY = 0x2,
};

/* 419 */
enum tagXMLEMEM_TYPE : __int32
{
  XMLELEMTYPE_ELEMENT = 0x0,
  XMLELEMTYPE_TEXT = 0x1,
  XMLELEMTYPE_COMMENT = 0x2,
  XMLELEMTYPE_DOCUMENT = 0x3,
  XMLELEMTYPE_DTD = 0x4,
  XMLELEMTYPE_PI = 0x5,
  XMLELEMTYPE_OTHER = 0x6,
};

/* 420 */
enum _tagQUERYOPTION : __int32
{
  QUERY_EXPIRATION_DATE = 0x1,
  QUERY_TIME_OF_LAST_CHANGE = 0x2,
  QUERY_CONTENT_ENCODING = 0x3,
  QUERY_CONTENT_TYPE = 0x4,
  QUERY_REFRESH = 0x5,
  QUERY_RECOMBINE = 0x6,
  QUERY_CAN_NAVIGATE = 0x7,
  QUERY_USES_NETWORK = 0x8,
  QUERY_IS_CACHED = 0x9,
  QUERY_IS_INSTALLEDENTRY = 0xA,
  QUERY_IS_CACHED_OR_MAPPED = 0xB,
  QUERY_USES_CACHE = 0xC,
  QUERY_IS_SECURE = 0xD,
  QUERY_IS_SAFE = 0xE,
  QUERY_USES_HISTORYFOLDER = 0xF,
};

/* 421 */
enum vc_attributes::YesNoMaybe : __int32
{
  No = 0xFFF0001,
  Maybe = 0xFFF0010,
  Yes = 0xFFF0100,
};

/* 422 */
enum vc_attributes::AccessType : __int32
{
  NoAccess = 0x0,
  Read = 0x1,
  Write = 0x2,
  ReadWrite = 0x3,
};

/* 423 */
enum $57E55ED1007535B40780059E2CF8DD16 : __int32
{
  JVMTI_THREAD_STATE_ALIVE = 0x1,
  JVMTI_THREAD_STATE_TERMINATED = 0x2,
  JVMTI_THREAD_STATE_RUNNABLE = 0x4,
  JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER = 0x400,
  JVMTI_THREAD_STATE_WAITING = 0x80,
  JVMTI_THREAD_STATE_WAITING_INDEFINITELY = 0x10,
  JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT = 0x20,
  JVMTI_THREAD_STATE_SLEEPING = 0x40,
  JVMTI_THREAD_STATE_IN_OBJECT_WAIT = 0x100,
  JVMTI_THREAD_STATE_PARKED = 0x200,
  JVMTI_THREAD_STATE_SUSPENDED = 0x100000,
  JVMTI_THREAD_STATE_INTERRUPTED = 0x200000,
  JVMTI_THREAD_STATE_IN_NATIVE = 0x400000,
  JVMTI_THREAD_STATE_VENDOR_1 = 0x10000000,
  JVMTI_THREAD_STATE_VENDOR_2 = 0x20000000,
  JVMTI_THREAD_STATE_VENDOR_3 = 0x40000000,
};

/* 424 */
enum tagBINDSTATUS : __int32
{
  BINDSTATUS_FINDINGRESOURCE = 0x1,
  BINDSTATUS_CONNECTING = 0x2,
  BINDSTATUS_REDIRECTING = 0x3,
  BINDSTATUS_BEGINDOWNLOADDATA = 0x4,
  BINDSTATUS_DOWNLOADINGDATA = 0x5,
  BINDSTATUS_ENDDOWNLOADDATA = 0x6,
  BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,
  BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,
  BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,
  BINDSTATUS_USINGCACHEDCOPY = 0xA,
  BINDSTATUS_SENDINGREQUEST = 0xB,
  BINDSTATUS_CLASSIDAVAILABLE = 0xC,
  BINDSTATUS_MIMETYPEAVAILABLE = 0xD,
  BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,
  BINDSTATUS_BEGINSYNCOPERATION = 0xF,
  BINDSTATUS_ENDSYNCOPERATION = 0x10,
  BINDSTATUS_BEGINUPLOADDATA = 0x11,
  BINDSTATUS_UPLOADINGDATA = 0x12,
  BINDSTATUS_ENDUPLOADDATA = 0x13,
  BINDSTATUS_PROTOCOLCLASSID = 0x14,
  BINDSTATUS_ENCODING = 0x15,
  BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,
  BINDSTATUS_CLASSINSTALLLOCATION = 0x17,
  BINDSTATUS_DECODING = 0x18,
  BINDSTATUS_LOADINGMIMEHANDLER = 0x19,
  BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,
  BINDSTATUS_FILTERREPORTMIMETYPE = 0x1B,
  BINDSTATUS_CLSIDCANINSTANTIATE = 0x1C,
  BINDSTATUS_IUNKNOWNAVAILABLE = 0x1D,
  BINDSTATUS_DIRECTBIND = 0x1E,
  BINDSTATUS_RAWMIMETYPE = 0x1F,
  BINDSTATUS_PROXYDETECTING = 0x20,
  BINDSTATUS_ACCEPTRANGES = 0x21,
  BINDSTATUS_COOKIE_SENT = 0x22,
  BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,
  BINDSTATUS_COOKIE_SUPPRESSED = 0x24,
  BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,
  BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,
  BINDSTATUS_COOKIE_STATE_REJECT = 0x27,
  BINDSTATUS_COOKIE_STATE_PROMPT = 0x28,
  BINDSTATUS_COOKIE_STATE_LEASH = 0x29,
  BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2A,
  BINDSTATUS_POLICY_HREF = 0x2B,
  BINDSTATUS_P3P_HEADER = 0x2C,
  BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2D,
  BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2E,
  BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2F,
  BINDSTATUS_CACHECONTROL = 0x30,
  BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x31,
  BINDSTATUS_MIMETEXTPLAINMISMATCH = 0x32,
  BINDSTATUS_PUBLISHERAVAILABLE = 0x33,
  BINDSTATUS_DISPLAYNAMEAVAILABLE = 0x34,
  BINDSTATUS_SSLUX_NAVBLOCKED = 0x35,
  BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 0x36,
  BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 0x37,
  BINDSTATUS_64BIT_PROGRESS = 0x38,
};

/* 425 */
enum tagSYSKIND : __int32
{
  SYS_WIN16 = 0x0,
  SYS_WIN32 = 0x1,
  SYS_MAC = 0x2,
  SYS_WIN64 = 0x3,
};

/* 426 */
enum ThreadState : __int32
{
  ALLOCATED = 0x0,
  INITIALIZED = 0x1,
  RUNNABLE = 0x2,
  MONITOR_WAIT = 0x3,
  CONDVAR_WAIT = 0x4,
  OBJECT_WAIT = 0x5,
  BREAKPOINTED = 0x6,
  SLEEPING = 0x7,
  ZOMBIE = 0x8,
};

/* 427 */
enum tagURLZONE : __int32
{
  URLZONE_INVALID = 0xFFFFFFFF,
  URLZONE_PREDEFINED_MIN = 0x0,
  URLZONE_LOCAL_MACHINE = 0x0,
  URLZONE_INTRANET = 0x1,
  URLZONE_TRUSTED = 0x2,
  URLZONE_INTERNET = 0x3,
  URLZONE_UNTRUSTED = 0x4,
  URLZONE_PREDEFINED_MAX = 0x3E7,
  URLZONE_USER_MIN = 0x3E8,
  URLZONE_USER_MAX = 0x2710,
};

/* 428 */
enum $01044E49D872A6B00E72B99339082682 : __int32
{
  JVM_CONSTANT_Utf8 = 0x1,
  JVM_CONSTANT_Unicode = 0x2,
  JVM_CONSTANT_Integer = 0x3,
  JVM_CONSTANT_Float = 0x4,
  JVM_CONSTANT_Long = 0x5,
  JVM_CONSTANT_Double = 0x6,
  JVM_CONSTANT_Class = 0x7,
  JVM_CONSTANT_String = 0x8,
  JVM_CONSTANT_Fieldref = 0x9,
  JVM_CONSTANT_Methodref = 0xA,
  JVM_CONSTANT_InterfaceMethodref = 0xB,
  JVM_CONSTANT_NameAndType = 0xC,
  JVM_CONSTANT_MethodHandle = 0xF,
  JVM_CONSTANT_MethodType = 0x10,
  JVM_CONSTANT_InvokeDynamic = 0x12,
  JVM_CONSTANT_ExternalMax = 0x12,
};

/* 429 */
enum VARENUM : __int32
{
  VT_EMPTY = 0x0,
  VT_NULL = 0x1,
  VT_I2 = 0x2,
  VT_I4 = 0x3,
  VT_R4 = 0x4,
  VT_R8 = 0x5,
  VT_CY = 0x6,
  VT_DATE = 0x7,
  VT_BSTR = 0x8,
  VT_DISPATCH = 0x9,
  VT_ERROR = 0xA,
  VT_BOOL = 0xB,
  VT_VARIANT = 0xC,
  VT_UNKNOWN = 0xD,
  VT_DECIMAL = 0xE,
  VT_I1 = 0x10,
  VT_UI1 = 0x11,
  VT_UI2 = 0x12,
  VT_UI4 = 0x13,
  VT_I8 = 0x14,
  VT_UI8 = 0x15,
  VT_INT = 0x16,
  VT_UINT = 0x17,
  VT_VOID = 0x18,
  VT_HRESULT = 0x19,
  VT_PTR = 0x1A,
  VT_SAFEARRAY = 0x1B,
  VT_CARRAY = 0x1C,
  VT_USERDEFINED = 0x1D,
  VT_LPSTR = 0x1E,
  VT_LPWSTR = 0x1F,
  VT_RECORD = 0x24,
  VT_INT_PTR = 0x25,
  VT_UINT_PTR = 0x26,
  VT_FILETIME = 0x40,
  VT_BLOB = 0x41,
  VT_STREAM = 0x42,
  VT_STORAGE = 0x43,
  VT_STREAMED_OBJECT = 0x44,
  VT_STORED_OBJECT = 0x45,
  VT_BLOB_OBJECT = 0x46,
  VT_CF = 0x47,
  VT_CLSID = 0x48,
  VT_VERSIONED_STREAM = 0x49,
  VT_BSTR_BLOB = 0xFFF,
  VT_VECTOR = 0x1000,
  VT_ARRAY = 0x2000,
  VT_BYREF = 0x4000,
  VT_RESERVED = 0x8000,
  VT_ILLEGAL = 0xFFFF,
  VT_ILLEGALMASKED = 0xFFF,
  VT_TYPEMASK = 0xFFF,
};

/* 430 */
enum $0963856640BBB73209A5FC774DCB4E75 : __int32
{
  JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR = 0x1,
  JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP = 0x2,
  JVMTI_RESOURCE_EXHAUSTED_THREADS = 0x4,
};

/* 431 */
enum _URLZONEREG : __int32
{
  URLZONEREG_DEFAULT = 0x0,
  URLZONEREG_HKLM = 0x1,
  URLZONEREG_HKCU = 0x2,
};

/* 432 */
enum tagTYPEKIND : __int32
{
  TKIND_ENUM = 0x0,
  TKIND_RECORD = 0x1,
  TKIND_MODULE = 0x2,
  TKIND_INTERFACE = 0x3,
  TKIND_DISPATCH = 0x4,
  TKIND_COCLASS = 0x5,
  TKIND_ALIAS = 0x6,
  TKIND_UNION = 0x7,
  TKIND_MAX = 0x8,
};

/* 433 */
enum tagTYSPEC : __int32
{
  TYSPEC_CLSID = 0x0,
  TYSPEC_FILEEXT = 0x1,
  TYSPEC_MIMETYPE = 0x2,
  TYSPEC_FILENAME = 0x3,
  TYSPEC_PROGID = 0x4,
  TYSPEC_PACKAGENAME = 0x5,
  TYSPEC_OBJECTID = 0x6,
};

/* 434 */
enum tagCHANGEKIND : __int32
{
  CHANGEKIND_ADDMEMBER = 0x0,
  CHANGEKIND_DELETEMEMBER = 0x1,
  CHANGEKIND_SETNAMES = 0x2,
  CHANGEKIND_SETDOCUMENTATION = 0x3,
  CHANGEKIND_GENERAL = 0x4,
  CHANGEKIND_INVALIDATE = 0x5,
  CHANGEKIND_CHANGEFAILED = 0x6,
  CHANGEKIND_MAX = 0x7,
};

/* 435 */
enum tagCALLCONV : __int32
{
  CC_FASTCALL = 0x0,
  CC_CDECL = 0x1,
  CC_MSCPASCAL = 0x2,
  CC_PASCAL = 0x2,
  CC_MACPASCAL = 0x3,
  CC_STDCALL = 0x4,
  CC_FPFASTCALL = 0x5,
  CC_SYSCALL = 0x6,
  CC_MPWCDECL = 0x7,
  CC_MPWPASCAL = 0x8,
  CC_MAX = 0x9,
};

/* 436 */
enum __MIDL_ICodeInstall_0001 : __int32
{
  CIP_DISK_FULL = 0x0,
  CIP_ACCESS_DENIED = 0x1,
  CIP_NEWER_VERSION_EXISTS = 0x2,
  CIP_OLDER_VERSION_EXISTS = 0x3,
  CIP_NAME_CONFLICT = 0x4,
  CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,
  CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,
  CIP_UNSAFE_TO_ABORT = 0x7,
  CIP_NEED_REBOOT = 0x8,
  CIP_NEED_REBOOT_UI_PERMISSION = 0x9,
};

/* 437 */
enum tagVARKIND : __int32
{
  VAR_PERINSTANCE = 0x0,
  VAR_STATIC = 0x1,
  VAR_CONST = 0x2,
  VAR_DISPATCH = 0x3,
};

/* 438 */
enum tagShutdownType : __int32
{
  IdleShutdown = 0x0,
  ForcedShutdown = 0x1,
};

/* 439 */
enum BasicTypeSize : __int32
{
  T_BOOLEAN_size = 0x1,
  T_CHAR_size = 0x1,
  T_FLOAT_size = 0x1,
  T_DOUBLE_size = 0x2,
  T_BYTE_size = 0x1,
  T_SHORT_size = 0x1,
  T_INT_size = 0x1,
  T_LONG_size = 0x2,
  T_OBJECT_size = 0x1,
  T_ARRAY_size = 0x1,
  T_NARROWOOP_size = 0x1,
  T_NARROWKLASS_size = 0x1,
  T_VOID_size = 0x0,
};

/* 440 */
enum tagFUNCKIND : __int32
{
  FUNC_VIRTUAL = 0x0,
  FUNC_PUREVIRTUAL = 0x1,
  FUNC_NONVIRTUAL = 0x2,
  FUNC_STATIC = 0x3,
  FUNC_DISPATCH = 0x4,
};

/* 441 */
enum tagINVOKEKIND : __int32
{
  INVOKE_FUNC = 0x1,
  INVOKE_PROPERTYGET = 0x2,
  INVOKE_PROPERTYPUT = 0x4,
  INVOKE_PROPERTYPUTREF = 0x8,
};

/* 442 */
enum MemoryPool::PoolType : __int32
{
  Heap = 0x1,
  NonHeap = 0x2,
};

/* 443 */
enum PerfClassTraceTime::<unnamed_tag> : __int32
{
  CLASS_LOAD = 0x0,
  PARSE_CLASS = 0x1,
  CLASS_LINK = 0x2,
  CLASS_VERIFY = 0x3,
  CLASS_CLINIT = 0x4,
  DEFINE_CLASS = 0x5,
  EVENT_TYPE_COUNT = 0x6,
};

/* 444 */
enum SymbolHashMap::SymbolHashMap_Constants : __int32
{
  _Def_HashMap_Size = 0x100,
};

/* 445 */
enum tagApplicationType : __int32
{
  ServerApplication = 0x0,
  LibraryApplication = 0x1,
};

/* 446 */
enum PIDMSI_STATUS_VALUE : __int32
{
  PIDMSI_STATUS_NORMAL = 0x0,
  PIDMSI_STATUS_NEW = 0x1,
  PIDMSI_STATUS_PRELIM = 0x2,
  PIDMSI_STATUS_DRAFT = 0x3,
  PIDMSI_STATUS_INPROGRESS = 0x4,
  PIDMSI_STATUS_EDIT = 0x5,
  PIDMSI_STATUS_REVIEW = 0x6,
  PIDMSI_STATUS_PROOF = 0x7,
  PIDMSI_STATUS_FINAL = 0x8,
  PIDMSI_STATUS_OTHER = 0x7FFF,
};

/* 447 */
enum NativeLoadAddress::Intel_specific_constants : __int32
{
  instruction_prefix_wide = 0x48,
  instruction_prefix_wide_extended = 0x49,
  lea_instruction_code = 0x8D,
  mov64_instruction_code = 0xB8,
};

/* 448 */
enum ClassFileParser::<unnamed_tag> : __int32
{
  fixed_buffer_size = 0x80,
};

/* 449 */
enum ClassFileParser::AnnotationCollector::Location : __int32
{
  _in_field = 0x0,
  _in_method = 0x1,
  _in_class = 0x2,
};

/* 450 */
enum ClassFileParser::AnnotationCollector::ID : __int32
{
  _unknown = 0x0,
  _method_CallerSensitive = 0x1,
  _method_ForceInline = 0x2,
  _method_DontInline = 0x3,
  _method_InjectedProfile = 0x4,
  _method_LambdaForm_Compiled = 0x5,
  _method_LambdaForm_Hidden = 0x6,
  _sun_misc_Contended = 0x7,
  _field_Stable = 0x8,
  _annotation_LIMIT = 0x9,
};

/* 451 */
typedef LoopNode::<unnamed_tag> SystemDictionary::InitOption;

/* 452 */
enum SystemDictionary::Constants : __int32
{
  _loader_constraint_size = 0x6B,
  _resolution_error_size = 0x6B,
  _invoke_method_size = 0x8B,
  _nof_buckets = 0x3F1,
  _old_default_sdsize = 0x3F1,
  _prime_array_size = 0x8,
  _average_depth_goal = 0x3,
};

/* 453 */
enum VM_Version::<unnamed_type_cpuExtendedFamily> : __int32
{
  CPU_FAMILY_AMD_11H = 0x11,
  CPU_FAMILY_INTEL_CORE = 0x6,
  CPU_MODEL_NEHALEM = 0x1E,
  CPU_MODEL_NEHALEM_EP = 0x1A,
  CPU_MODEL_NEHALEM_EX = 0x2E,
  CPU_MODEL_WESTMERE = 0x25,
  CPU_MODEL_WESTMERE_EP = 0x2C,
  CPU_MODEL_WESTMERE_EX = 0x2F,
  CPU_MODEL_SANDYBRIDGE = 0x2A,
  CPU_MODEL_SANDYBRIDGE_EP = 0x2D,
  CPU_MODEL_IVYBRIDGE_EP = 0x3A,
  CPU_MODEL_HASWELL_E3 = 0x3C,
  CPU_MODEL_HASWELL_E7 = 0x3F,
  CPU_MODEL_BROADWELL = 0x3D,
};

/* 454 */
enum OopMapValue::oop_types : __int32
{
  unused_value = 0x0,
  oop_value = 0x1,
  value_value = 0x2,
  narrowoop_value = 0x4,
  callee_saved_value = 0x8,
  derived_oop_value = 0x10,
};

/* 455 */
enum RelocationHolder::<unnamed_tag> : __int32
{
  _relocbuf_size = 0x5,
};

/* 456 */
enum StubRoutines::platform_independent_constants : __int32
{
  max_size_of_parameters = 0x100,
};

/* 457 */
enum StubRoutines::platform_dependent_constants : __int32
{
  code_size1 = 0x4E20,
  code_size2 = 0x89E4,
};

/* 458 */
enum std::_Uninitialized : __int32
{
  _Noinit = 0x0,
};

/* 459 */
enum jvmtiParamKind : __int32
{
  JVMTI_KIND_IN = 0x5B,
  JVMTI_KIND_IN_PTR = 0x5C,
  JVMTI_KIND_IN_BUF = 0x5D,
  JVMTI_KIND_ALLOC_BUF = 0x5E,
  JVMTI_KIND_ALLOC_ALLOC_BUF = 0x5F,
  JVMTI_KIND_OUT = 0x60,
  JVMTI_KIND_OUT_BUF = 0x61,
};

/* 460 */
enum jvmtiParamTypes : __int32
{
  JVMTI_TYPE_JBYTE = 0x65,
  JVMTI_TYPE_JCHAR = 0x66,
  JVMTI_TYPE_JSHORT = 0x67,
  JVMTI_TYPE_JINT = 0x68,
  JVMTI_TYPE_JLONG = 0x69,
  JVMTI_TYPE_JFLOAT = 0x6A,
  JVMTI_TYPE_JDOUBLE = 0x6B,
  JVMTI_TYPE_JBOOLEAN = 0x6C,
  JVMTI_TYPE_JOBJECT = 0x6D,
  JVMTI_TYPE_JTHREAD = 0x6E,
  JVMTI_TYPE_JCLASS = 0x6F,
  JVMTI_TYPE_JVALUE = 0x70,
  JVMTI_TYPE_JFIELDID = 0x71,
  JVMTI_TYPE_JMETHODID = 0x72,
  JVMTI_TYPE_CCHAR = 0x73,
  JVMTI_TYPE_CVOID = 0x74,
  JVMTI_TYPE_JNIENV = 0x75,
};

/* 461 */
enum TemplateTable::Operation : __int32
{
  add = 0x0,
  sub = 0x1,
  mul = 0x2,
  div = 0x3,
  rem = 0x4,
  _and = 0x5,
  _or = 0x6,
  _xor = 0x7,
  shl = 0x8,
  shr = 0x9,
  ushr = 0xA,
};

/* 462 */
enum TemplateTable::Condition : __int32
{
  equal = 0x0,
  not_equal = 0x1,
  less = 0x2,
  less_equal = 0x3,
  greater = 0x4,
  greater_equal = 0x5,
};

/* 463 */
enum TemplateTable::CacheByte : __int32
{
  f1_byte = 0x1,
  f2_byte = 0x2,
};

/* 464 */
enum StringTable::VerifyMesgModes : __int32
{
  _verify_quietly = 0x0,
  _verify_with_mesgs = 0x1,
};

/* 465 */
enum StringTable::VerifyRetTypes : __int32
{
  _verify_pass = 0x0,
  _verify_fail_continue = 0x1,
  _verify_fail_done = 0x2,
};

/* 466 */
enum ConstantPoolCacheEntry::<unnamed_tag> : __int32
{
  tos_state_bits = 0x4,
  tos_state_mask = 0xF,
  tos_state_shift = 0x1C,
  is_field_entry_shift = 0x1A,
  has_method_type_shift = 0x19,
  has_appendix_shift = 0x18,
  is_forced_virtual_shift = 0x17,
  is_final_shift = 0x16,
  is_volatile_shift = 0x15,
  is_vfinal_shift = 0x14,
  field_index_bits = 0x10,
  field_index_mask = 0xFFFF,
  parameter_size_bits = 0x8,
  parameter_size_mask = 0xFF,
  option_bits_mask = 0xFFF0000,
};

/* 467 */
enum DispatchTable::<unnamed_tag> : __int32
{
  length = 0x100,
};

/* 468 */
enum BlockOffsetArray::Action : __int32
{
  Action_single = 0x0,
  Action_mark = 0x1,
  Action_check = 0x2,
};

/* 469 */
enum ObjectWaiter::TStates : __int32
{
  TS_UNDEF = 0x0,
  TS_READY = 0x1,
  TS_RUN = 0x2,
  TS_WAIT = 0x3,
  TS_ENTER = 0x4,
  TS_CXQ = 0x5,
};

/* 470 */
enum ObjectWaiter::Sorted : __int32
{
  PREPEND = 0x0,
  APPEND = 0x1,
  SORTED = 0x2,
};

/* 471 */
enum GenCollectedHeap::SomeConstants : __int32
{
  max_gens = 0xA,
};

/* 472 */
enum Thread::<unnamed_tag> : __int32
{
  is_definitely_current_thread = 0x1,
};

/* 473 */
enum jvmtiTimerKind : __int32
{
  JVMTI_TIMER_USER_CPU = 0x1E,
  JVMTI_TIMER_TOTAL_CPU = 0x1F,
  JVMTI_TIMER_ELAPSED = 0x20,
};

/* 474 */
typedef Monitor::lock_types AbstractInterpreter::MethodKind;

/* 475 */
enum AbstractInterpreter::SomeConstants : __int32
{
  number_of_result_handlers = 0xA,
};

/* 476 */
enum ReturnTypeEntry::<unnamed_tag> : __int32
{
  cell_count = 0x1,
};

/* 477 */
enum PerfData::Variability : __int32
{
  V_Constant = 0x1,
  V_Monotonic = 0x2,
  V_Variable = 0x3,
  V_last = 0x3,
};

/* 478 */
enum ConstMethod::MethodType : __int32
{
  NORMAL = 0x0,
  OVERPASS = 0x1,
};

/* 479 */
enum Method::<unnamed_tag> : __int32
{
  native_bind_event_is_interesting = 0x1,
};

/* 480 */
enum java_lang_invoke_MemberName::<unnamed_tag> : __int32
{
  MN_IS_METHOD = 0x10000,
  MN_IS_CONSTRUCTOR = 0x20000,
  MN_IS_FIELD = 0x40000,
  MN_IS_TYPE = 0x80000,
  MN_CALLER_SENSITIVE = 0x100000,
  MN_REFERENCE_KIND_SHIFT = 0x18,
  MN_REFERENCE_KIND_MASK = 0xF,
  MN_SEARCH_SUPERCLASSES = 0x100000,
  MN_SEARCH_INTERFACES = 0x200000,
};

/* 481 */
enum Universe::NARROW_OOP_MODE : __int32
{
  UnscaledNarrowOop = 0x0,
  ZeroBasedNarrowOop = 0x1,
  HeapBasedNarrowOop = 0x2,
};

/* 482 */
enum Universe::VERIFY_FLAGS : __int32
{
  Verify_Threads = 0x1,
  Verify_Heap = 0x2,
  Verify_SymbolTable = 0x4,
  Verify_StringTable = 0x8,
  Verify_CodeCache = 0x10,
  Verify_SystemDictionary = 0x20,
  Verify_ClassLoaderDataGraph = 0x40,
  Verify_MetaspaceAux = 0x80,
  Verify_JNIHandles = 0x100,
  Verify_CHeap = 0x200,
  Verify_CodeCacheOops = 0x400,
  Verify_All = 0xFFFFFFFF,
};

/* 483 */
enum internal_word_Relocation::<unnamed_tag> : __int32
{
  section_width = 0x2,
};

/* 484 */
enum PcDesc::<unnamed_tag> : __int32
{
  PCDESC_reexecute = 0x1,
  PCDESC_is_method_handle_invoke = 0x2,
  PCDESC_return_oop = 0x4,
};

/* 485 */
enum VMOperationQueue::Priorities : __int32
{
  SafepointPriority = 0x0,
  MediumPriority = 0x1,
  nof_priorities = 0x2,
};

/* 486 */
typedef NativeJump::Intel_specific_constants NativeGeneralJump::Intel_specific_constants;

/* 487 */
enum ClassLoader::SomeConstants : __int32
{
  package_hash_table_size = 0x1F,
};

/* 488 */
enum relocInfo::RawBitsToken : __int32
{
  RAW_BITS = 0x0,
};

/* 489 */
enum Klass::OverpassLookupMode : __int32
{
  find_overpass = 0x0,
  skip_overpass = 0x1,
};

/* 490 */
enum java_lang_ClassLoader::<unnamed_tag> : __int32
{
  hc_parent_offset = 0x0,
};

/* 491 */
enum NativeCall::<unnamed_tag> : __int32
{
  cache_line_size = 0x4,
};

/* 492 */
enum jvmtiPrimitiveType : __int32
{
  JVMTI_PRIMITIVE_TYPE_BOOLEAN = 0x5A,
  JVMTI_PRIMITIVE_TYPE_BYTE = 0x42,
  JVMTI_PRIMITIVE_TYPE_CHAR = 0x43,
  JVMTI_PRIMITIVE_TYPE_SHORT = 0x53,
  JVMTI_PRIMITIVE_TYPE_INT = 0x49,
  JVMTI_PRIMITIVE_TYPE_LONG = 0x4A,
  JVMTI_PRIMITIVE_TYPE_FLOAT = 0x46,
  JVMTI_PRIMITIVE_TYPE_DOUBLE = 0x44,
};

/* 493 */
enum WatcherThread::SomeConstants : __int32
{
  delay_interval = 0xA,
};

/* 494 */
enum PerfData::Flags : __int32
{
  F_None = 0x0,
  F_Supported = 0x1,
};

/* 495 */
enum MemoryPool::<unnamed_tag> : __int32
{
  max_num_managers = 0x5,
};

/* 496 */
enum RehashableHashtable<oopDesc *,9>::<unnamed_tag> : __int32
{
  rehash_count = 0x64,
  rehash_multiple = 0x3C,
};

/* 497 */
enum OopMap::DeepCopyToken : __int32
{
  _deep_copy_token = 0x0,
};

/* 498 */
enum JavaThread::ExitType : __int32
{
  normal_exit = 0x0,
  jni_detach = 0x1,
};

/* 499 */
enum JavaThread::PopCondition : __int32
{
  popframe_inactive = 0x0,
  popframe_pending_bit = 0x1,
  popframe_processing_bit = 0x2,
  popframe_force_deopt_reexecution_bit = 0x4,
};

/* 500 */
enum os::<unnamed_tag> : __int32
{
  page_sizes_max = 0x9,
};

/* 501 */
enum os::ProtType : __int32
{
  MEM_PROT_NONE = 0x0,
  MEM_PROT_READ = 0x1,
  MEM_PROT_RW = 0x2,
  MEM_PROT_RWX = 0x3,
};

/* 502 */
enum os::YieldResult : __int32
{
  YIELD_SWITCHED = 0x1,
  YIELD_NONEREADY = 0x0,
  YIELD_UNKNOWN = 0xFFFFFFFF,
};

/* 503 */
enum OSReturn : __int32
{
  OS_OK = 0x0,
  OS_ERR = 0xFFFFFFFF,
  OS_INTRPT = 0xFFFFFFFE,
  OS_TIMEOUT = 0xFFFFFFFD,
  OS_NOMEM = 0xFFFFFFFB,
  OS_NORESOURCE = 0xFFFFFFFA,
};

/* 504 */
enum jvmtiHeapReferenceKind : __int32
{
  JVMTI_HEAP_REFERENCE_CLASS = 0x1,
  JVMTI_HEAP_REFERENCE_FIELD = 0x2,
  JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT = 0x3,
  JVMTI_HEAP_REFERENCE_CLASS_LOADER = 0x4,
  JVMTI_HEAP_REFERENCE_SIGNERS = 0x5,
  JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN = 0x6,
  JVMTI_HEAP_REFERENCE_INTERFACE = 0x7,
  JVMTI_HEAP_REFERENCE_STATIC_FIELD = 0x8,
  JVMTI_HEAP_REFERENCE_CONSTANT_POOL = 0x9,
  JVMTI_HEAP_REFERENCE_SUPERCLASS = 0xA,
  JVMTI_HEAP_REFERENCE_JNI_GLOBAL = 0x15,
  JVMTI_HEAP_REFERENCE_SYSTEM_CLASS = 0x16,
  JVMTI_HEAP_REFERENCE_MONITOR = 0x17,
  JVMTI_HEAP_REFERENCE_STACK_LOCAL = 0x18,
  JVMTI_HEAP_REFERENCE_JNI_LOCAL = 0x19,
  JVMTI_HEAP_REFERENCE_THREAD = 0x1A,
  JVMTI_HEAP_REFERENCE_OTHER = 0x1B,
};

/* 505 */
enum Exceptions::ExceptionMsgToUtf8Mode : __int32
{
  safe_to_utf8 = 0x0,
  unsafe_to_utf8 = 0x1,
};

/* 506 */
typedef IndexSetIterator::<unnamed_tag> ageTable::<unnamed_tag>;

/* 507 */
enum JvmtiExport::<unnamed_tag> : __int32
{
  JVMTI_VERSION_MASK = 0x70000000,
  JVMTI_VERSION_VALUE = 0x30000000,
  JVMDI_VERSION_VALUE = 0x20000000,
};

/* 508 */
enum ReferenceProcessor::DiscoveryPolicy : __int32
{
  ReferenceBasedDiscovery = 0x0,
  ReferentBasedDiscovery = 0x1,
  DiscoveryPolicyMin = 0x0,
  DiscoveryPolicyMax = 0x1,
};

/* 509 */
typedef MemNode::<unnamed_tag> AdlcVMDeps::<unnamed_tag>;

/* 510 */
typedef OptoReg::<unnamed_tag> AdlcVMDeps::Name;

/* 511 */
typedef RehashableHashtable<oopDesc *,9>::<unnamed_tag> RehashableHashtable<Symbol *,9>::<unnamed_tag>;

/* 512 */
enum BiasedLocking::Condition : __int32
{
  NOT_BIASED = 0x1,
  BIAS_REVOKED = 0x2,
  BIAS_REVOKED_AND_REBIASED = 0x3,
};

/* 513 */
typedef ConcreteRegisterImpl::<unnamed_tag> XMMRegisterImpl::<unnamed_tag>;

/* 514 */
enum SymbolTable::<unnamed_tag> : __int32
{
  symbol_alloc_batch_size = 0x8,
  symbol_alloc_arena_size = 0x5A000,
};

/* 515 */
enum ValueRecorder<_jobject *>::<unnamed_tag> : __int32
{
  null_index = 0x0,
  first_index = 0x1,
  index_cache_threshold = 0x14,
};

/* 516 */
enum PcDescCache::<unnamed_tag> : __int32
{
  cache_size = 0x4,
};

/* 517 */
enum klassVtable::AccessType : __int32
{
  acc_private = 0x0,
  acc_package_private = 0x1,
  acc_publicprotected = 0x2,
};

/* 518 */
enum klassVtable::<unnamed_tag> : __int32
{
  VTABLE_TRANSITIVE_OVERRIDE_VERSION = 0x33,
};

/* 519 */
enum SpecializationStats::Kind : __int32
{
  ik = 0x0,
  irk = 0x1,
  oa = 0x2,
  NUM_Kinds = 0x3,
};

/* 520 */
enum FreeIdSet::<unnamed_tag> : __int32
{
  end_of_list = 0xFFFFFFFF,
  claimed = 0xFFFFFFFE,
};

/* 521 */
enum TemplateInterpreter::MoreConstants : __int32
{
  number_of_return_entries = 0xA,
  number_of_deopt_entries = 0xA,
  number_of_return_addrs = 0xA,
};

/* 522 */
enum _jobjectType : __int32
{
  JNIInvalidRefType = 0x0,
  JNILocalRefType = 0x1,
  JNIGlobalRefType = 0x2,
  JNIWeakGlobalRefType = 0x3,
};

/* 523 */
enum vmIntrinsics::Flags : __int32
{
  F_none = 0x0,
  F_R = 0x1,
  F_S = 0x2,
  F_Y = 0x3,
  F_RN = 0x4,
  F_SN = 0x5,
  F_RNY = 0x6,
  FLAG_LIMIT = 0x7,
};

/* 524 */
enum vmIntrinsics::<unnamed_tag> : __int32
{
  log2_FLAG_LIMIT = 0x4,
};

/* 525 */
enum SharedRuntime::<unnamed_tag> : __int32
{
  POLL_AT_RETURN = 0x0,
  POLL_AT_LOOP = 0x1,
  POLL_AT_VECTOR_LOOP = 0x2,
};

/* 526 */
enum SharedRuntime::ImplicitExceptionKind : __int32
{
  IMPLICIT_NULL = 0x0,
  IMPLICIT_DIVIDE_BY_ZERO = 0x1,
  STACK_OVERFLOW = 0x2,
};

/* 527 */
typedef MemNode::MemOrd Tracker::TrackerType;

/* 528 */
enum Klass::DefaultsLookupMode : __int32
{
  find_defaults = 0x0,
  skip_defaults = 0x1,
};

/* 529 */
enum Klass::StaticLookupMode : __int32
{
  find_static = 0x0,
  skip_static = 0x1,
};

/* 530 */
enum Klass::PrivateLookupMode : __int32
{
  find_private = 0x0,
  skip_private = 0x1,
};

/* 531 */
typedef StubRoutines::platform_independent_constants SignatureIterator::<unnamed_tag>;

/* 532 */
enum InterpreterMacroAssembler::NotifyMethodExitMode : __int32
{
  NotifyJVMTI = 0x0,
  SkipNotifyJVMTI = 0x1,
};

/* 533 */
typedef ConcreteRegisterImpl::<unnamed_tag> FloatRegisterImpl::<unnamed_tag>;

/* 534 */
enum JNIHandleBlock::SomeConstants : __int32
{
  block_size_in_oops = 0x20,
};

/* 535 */
enum SafepointSynchronize::SafepointingThread : __int32
{
  _null_thread = 0x0,
  _vm_thread = 0x1,
  _other_thread = 0x2,
};

/* 536 */
enum SafepointSynchronize::SafepointTimeoutReason : __int32
{
  _spinning_timeout = 0x0,
  _blocking_timeout = 0x1,
};

/* 537 */
enum tagGLOBALOPT_EH_VALUES : __int32
{
  COMGLB_EXCEPTION_HANDLE = 0x0,
  COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 0x1,
  COMGLB_EXCEPTION_DONOT_HANDLE = 0x1,
  COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 0x2,
};

/* 538 */
enum SignatureStream::FailureMode : __int32
{
  ReturnNull = 0x0,
  CNFException = 0x1,
  NCDFError = 0x2,
};

/* 539 */
enum java_lang_Throwable::<unnamed_tag> : __int32
{
  hc_backtrace_offset = 0x0,
  hc_detailMessage_offset = 0x1,
  hc_cause_offset = 0x2,
  hc_stackTrace_offset = 0x3,
};

/* 540 */
enum NativeInstruction::Intel_specific_constants : __int32
{
  nop_instruction_code = 0x90,
  nop_instruction_size = 0x1,
};

/* 541 */
enum InvocationCounter::PrivateConstants : __int32
{
  number_of_state_bits = 0x2,
  number_of_carry_bits = 0x1,
  number_of_noncount_bits = 0x3,
  number_of_count_bits = 0x1D,
  state_limit = 0x4,
  count_grain = 0x8,
  carry_mask = 0x4,
  state_mask = 0x3,
  status_mask = 0x7,
  count_mask = 0xFFFFFFF8,
};

/* 542 */
typedef TosState InvocationCounter::State;

/* 543 */
enum MemoryService::<unnamed_tag> : __int32
{
  init_pools_list_size = 0xA,
  init_managers_list_size = 0x5,
};

/* 544 */
enum java_lang_boxing_object::<unnamed_tag> : __int32
{
  hc_value_offset = 0x0,
};

/* 545 */
typedef Bytecodes::Code BytecodePairHistogram::Constants;

/* 546 */
enum Assembler::Prefix : __int32
{
  CS_segment = 0x2E,
  SS_segment = 0x36,
  DS_segment = 0x3E,
  ES_segment = 0x26,
  FS_segment = 0x64,
  GS_segment = 0x65,
  REX = 0x40,
  REX_B = 0x41,
  REX_X = 0x42,
  REX_XB = 0x43,
  REX_R = 0x44,
  REX_RB = 0x45,
  REX_RX = 0x46,
  REX_RXB = 0x47,
  REX_W = 0x48,
  REX_WB = 0x49,
  REX_WX = 0x4A,
  REX_WXB = 0x4B,
  REX_WR = 0x4C,
  REX_WRB = 0x4D,
  REX_WRX = 0x4E,
  REX_WRXB = 0x4F,
  VEX_3bytes = 0xC4,
  VEX_2bytes = 0xC5,
};

/* 547 */
enum Assembler::VexPrefix : __int32
{
  VEX_B = 0x20,
  VEX_X = 0x40,
  VEX_R = 0x80,
  VEX_W = 0x80,
};

/* 548 */
enum Assembler::VexSimdPrefix : __int32
{
  VEX_SIMD_NONE = 0x0,
  VEX_SIMD_66 = 0x1,
  VEX_SIMD_F3 = 0x2,
  VEX_SIMD_F2 = 0x3,
};

/* 549 */
enum Assembler::VexOpcode : __int32
{
  VEX_OPCODE_NONE = 0x0,
  VEX_OPCODE_0F = 0x1,
  VEX_OPCODE_0F_38 = 0x2,
  VEX_OPCODE_0F_3A = 0x3,
};

/* 550 */
enum SpeculativeTrapData::<unnamed_tag> : __int32
{
  method_offset = 0x0,
  speculative_trap_cell_count = 0x1,
};

/* 551 */
enum ConstMethod::<unnamed_tag> : __int32
{
  _has_linenumber_table = 0x1,
  _has_checked_exceptions = 0x2,
  _has_localvariable_table = 0x4,
  _has_exception_table = 0x8,
  _has_generic_signature = 0x10,
  _has_method_parameters = 0x20,
  _is_overpass = 0x40,
  _has_method_annotations = 0x80,
  _has_parameter_annotations = 0x100,
  _has_type_annotations = 0x200,
  _has_default_annotations = 0x400,
};

/* 552 */
enum ObjectSynchronizer::LockOwnership : __int32
{
  owner_self = 0x0,
  owner_none = 0x1,
  owner_other = 0x2,
};

/* 553 */
enum NamedThread::<unnamed_tag> : __int32
{
  max_name_len = 0x40,
};

/* 554 */
enum ThreadSafepointState::suspend_type : __int32
{
  _running = 0x0,
  _at_safepoint = 0x1,
  _call_back = 0x2,
};

/* 555 */
typedef PcDescCache::<unnamed_tag> ExceptionCache::<unnamed_tag>;

/* 556 */
enum InstanceKlass::InnerClassAttributeOffset : __int32
{
  inner_class_inner_class_info_offset = 0x0,
  inner_class_outer_class_info_offset = 0x1,
  inner_class_inner_name_offset = 0x2,
  inner_class_access_flags_offset = 0x3,
  inner_class_next_offset = 0x4,
};

/* 557 */
enum InstanceKlass::EnclosingMethodAttributeOffset : __int32
{
  enclosing_method_class_index_offset = 0x0,
  enclosing_method_method_index_offset = 0x1,
  enclosing_method_attribute_size = 0x2,
};

/* 558 */
enum ObjectMonitor::<unnamed_tag> : __int32
{
  OM_OK = 0x0,
  OM_SYSTEM_ERROR = 0x1,
  OM_ILLEGAL_MONITOR_STATE = 0x2,
  OM_INTERRUPTED = 0x3,
  OM_TIMED_OUT = 0x4,
};

/* 559 */
enum BarrierSet::Flags : __int32
{
  None = 0x0,
  TargetUninitialized = 0x1,
};

/* 560 */
enum Metaspace::MetaspaceType : __int32
{
  StandardMetaspaceType = 0x0,
  BootMetaspaceType = 0x1,
  ROMetaspaceType = 0x2,
  ReadWriteMetaspaceType = 0x3,
  AnonymousMetaspaceType = 0x4,
  ReflectionMetaspaceType = 0x5,
};

/* 561 */
typedef PointsToNode::NodeType MetaspaceObj::Type;

/* 562 */
typedef ConcreteRegisterImpl::<unnamed_tag> RegisterImpl::<unnamed_tag>;

/* 563 */
enum PerfMemory::PerfMemoryMode : __int32
{
  PERF_MODE_RO = 0x0,
  PERF_MODE_RW = 0x1,
};

/* 564 */
enum Template::Flags : __int32
{
  uses_bcp_bit = 0x0,
  does_dispatch_bit = 0x1,
  calls_vm_bit = 0x2,
  wide_bit = 0x3,
};

/* 565 */
enum DefNewGeneration::SomeProtectedConstants : __int32
{
  MinFreeScratchWords = 0x64,
};

/* 566 */
enum JavaClasses::InjectedFieldID : __int32
{
  java_lang_Class_klass_enum = 0x0,
  java_lang_Class_array_klass_enum = 0x1,
  java_lang_Class_oop_size_enum = 0x2,
  java_lang_Class_static_oop_field_count_enum = 0x3,
  java_lang_Class_protection_domain_enum = 0x4,
  java_lang_Class_init_lock_enum = 0x5,
  java_lang_Class_signers_enum = 0x6,
  java_lang_ClassLoader_loader_data_enum = 0x7,
  java_lang_invoke_MemberName_vmloader_enum = 0x8,
  java_lang_invoke_MemberName_vmindex_enum = 0x9,
  java_lang_invoke_MemberName_vmtarget_enum = 0xA,
  MAX_enum = 0xB,
};

/* 567 */
enum Monitor::LockWordBits : __int32
{
  _LBIT = 0x1,
};

/* 568 */
enum Monitor::WaitResults : __int32
{
  CONDVAR_EVENT = 0x0,
  INTERRUPT_EVENT = 0x1,
  NUMBER_WAIT_RESULTS = 0x2,
};

/* 569 */
enum Symbol::<unnamed_tag> : __int32
{
  max_symbol_length = 0xFFFF,
};

/* 570 */
enum vmSymbols::<unnamed_tag> : __int32
{
  log2_SID_LIMIT = 0xA,
};

/* 571 */
enum java_lang_ref_Reference::<unnamed_tag> : __int32
{
  hc_referent_offset = 0x0,
  hc_queue_offset = 0x1,
  hc_next_offset = 0x2,
  hc_discovered_offset = 0x3,
};

/* 572 */
typedef frame::deopt_state MethodData::WouldProfile;

/* 573 */
enum MethodData::EscapeFlag : __int32
{
  estimated = 0x1,
  return_local = 0x2,
  return_allocated = 0x4,
  allocated_escapes = 0x8,
  unknown_modified = 0x10,
};

/* 574 */
typedef ValueRecorder<_jobject *>::<unnamed_tag> ValueRecorder<Metadata *>::<unnamed_tag>;

/* 575 */
enum AbstractDecoder::decoder_status : __int32
{
  not_available = 0xFFFFFFF6,
  no_error = 0x0,
  out_of_memory = 0x1,
  file_invalid = 0x2,
  file_not_found = 0x3,
  helper_not_found = 0x4,
  helper_func_error = 0x5,
  helper_init_error = 0x6,
};

/* 576 */
enum ADDRESS_MODE : __int32
{
  AddrMode1616 = 0x0,
  AddrMode1632 = 0x1,
  AddrModeReal = 0x2,
  AddrModeFlat = 0x3,
};

/* 577 */
enum AgentLibrary::AgentState : __int32
{
  agent_invalid = 0x0,
  agent_valid = 0x1,
};

/* 578 */
enum Arguments::Mode : __int32
{
  _int = 0x0,
  _mixed = 0x1,
  _comp = 0x2,
};

/* 579 */
enum Arguments::ArgsRange : __int32
{
  arg_unreadable = 0xFFFFFFFD,
  arg_too_small = 0xFFFFFFFE,
  arg_too_big = 0xFFFFFFFF,
  arg_in_range = 0x0,
};

/* 580 */
enum JavaCallArguments::Constants : __int32
{
  _default_size = 0x8,
};

/* 581 */
enum JavaCallArguments::<unnamed_tag> : __int32
{
  value_state_primitive = 0x0,
  value_state_oop = 0x1,
  value_state_handle = 0x2,
  value_state_jobject = 0x3,
  value_state_limit = 0x4,
};

/* 582 */
enum FamilyFlag : __int32
{
  CPU_FAMILY_8086_8088 = 0x0,
  CPU_FAMILY_INTEL_286 = 0x2,
  CPU_FAMILY_INTEL_386 = 0x3,
  CPU_FAMILY_INTEL_486 = 0x4,
  CPU_FAMILY_PENTIUM = 0x5,
  CPU_FAMILY_PENTIUMPRO = 0x6,
  CPU_FAMILY_PENTIUM_4 = 0xF,
};

/* 583 */
enum _featureExtendedEdxFlag : __int32
{
  RDTSCP_FLAG = 0x8000000,
  INTEL64_FLAG = 0x20000000,
};

/* 584 */
enum FeatureEdxFlag : __int32
{
  FPU_FLAG = 0x1,
  VME_FLAG = 0x2,
  DE_FLAG = 0x4,
  PSE_FLAG = 0x8,
  TSC_FLAG = 0x10,
  MSR_FLAG = 0x20,
  PAE_FLAG = 0x40,
  MCE_FLAG = 0x80,
  CX8_FLAG = 0x100,
  APIC_FLAG = 0x200,
  SEP_FLAG = 0x800,
  MTRR_FLAG = 0x1000,
  PGE_FLAG = 0x2000,
  MCA_FLAG = 0x4000,
  CMOV_FLAG = 0x8000,
  PAT_FLAG = 0x10000,
  PSE36_FLAG = 0x20000,
  PSNUM_FLAG = 0x40000,
  CLFLUSH_FLAG = 0x80000,
  DTS_FLAG = 0x200000,
  ACPI_FLAG = 0x400000,
  MMX_FLAG = 0x800000,
  FXSR_FLAG = 0x1000000,
  SSE_FLAG = 0x2000000,
  SSE2_FLAG = 0x4000000,
  SS_FLAG = 0x8000000,
  HTT_FLAG = 0x10000000,
  TM_FLAG = 0x20000000,
};

/* 585 */
enum StubGenerator::<unnamed_tag> : __int32
{
  AESBlockSize = 0x10,
};

/* 586 */
enum StubGenerator::layout : __int32
{
  thread_off = 0x0,
  arg1_off = 0x1,
  arg2_off = 0x2,
  rbp_off = 0x3,
  ret_pc = 0x4,
  framesize = 0x5,
};

/* 587 */
typedef StubGenerator::layout StubGenerator::generate_d2i_wrapper::__l2::layout;

/* 588 */
enum Deoptimization::UnpackType : __int32
{
  Unpack_deopt = 0x0,
  Unpack_exception = 0x1,
  Unpack_uncommon_trap = 0x2,
  Unpack_reexecute = 0x3,
};

/* 589 */
typedef StubGenerator::layout RegisterSaver::layout;

/* 590 */
enum RegisterSaver::<unnamed_tag> : __int32
{
  FPU_regs_live = 0x32,
};

/* 591 */
enum SharedRuntime::java_calling_convention::__l2::<unnamed_tag> : __int32
{
  fltarg_dontuse = 0x270F,
  fltarg_float_only = 0x2710,
  fltarg_flt_dbl = 0x2711,
};

/* 592 */
typedef StubGenerator::layout SharedRuntime::generate_uncommon_trap_blob::__l2::frame_layout;

/* 593 */
typedef StubGenerator::layout SharedRuntime::generate_resolve_blob::__l2::frame_layout;

/* 594 */
typedef StubGenerator::layout OptoRuntime::generate_exception_blob::__l2::layout;

/* 595 */
enum $F8F521DA7AF576FEFA5D4A1928ECEC95 : __int32
{
  rax_RegisterEnumValue = 0x0,
};

/* 596 */
enum $3AF22B447659BF8C8759BA3383333D9B : __int32
{
  rcx_RegisterEnumValue = 0x1,
};

/* 597 */
enum $D2F938E1246287DF5AE969DC1C0F7313 : __int32
{
  rdx_RegisterEnumValue = 0x2,
};

/* 598 */
enum $DE9295AC053C76BD0FCD1B5D9F7D8FD2 : __int32
{
  rbx_RegisterEnumValue = 0x3,
};

/* 599 */
enum $16780234356E68FCAF2114D502355ACC : __int32
{
  rsp_RegisterEnumValue = 0x4,
};

/* 600 */
enum $5A6E448D410CCCC4BFCA4BA95A0B0DBA : __int32
{
  rbp_RegisterEnumValue = 0x5,
};

/* 601 */
enum $8994D876795B8B867C3D493E5EE988DC : __int32
{
  rsi_RegisterEnumValue = 0x6,
};

/* 602 */
enum $91F2F3B690CB5C362EE5B4FA37A97A59 : __int32
{
  rdi_RegisterEnumValue = 0x7,
};

/* 603 */
enum $27C161FE32AD056C9264D114BC4F1B5E : __int32
{
  xnoreg_XMMRegisterEnumValue = 0xFFFFFFFF,
};

/* 604 */
enum $99B543499CED00D505E7679C75A882A0 : __int32
{
  xmm0_XMMRegisterEnumValue = 0x0,
};

/* 605 */
enum $3F8AE3F42AECD468C94D7AC2C0F4BD48 : __int32
{
  xmm1_XMMRegisterEnumValue = 0x1,
};

/* 606 */
enum $21DF989BF413824C22A049DE243543AB : __int32
{
  xmm2_XMMRegisterEnumValue = 0x2,
};

/* 607 */
enum $A9DC3B587F3A438332750A891B3229BD : __int32
{
  xmm3_XMMRegisterEnumValue = 0x3,
};

/* 608 */
enum $1F864E8EEAD60C759D682995B4FAA942 : __int32
{
  xmm4_XMMRegisterEnumValue = 0x4,
};

/* 609 */
enum $C6D2530AFBD2648D7319541B17975174 : __int32
{
  xmm5_XMMRegisterEnumValue = 0x5,
};

/* 610 */
enum $D6ED7358F94CCDDCF8E7E8C5E6BC7504 : __int32
{
  xmm6_XMMRegisterEnumValue = 0x6,
};

/* 611 */
enum $6E65A7C7BBC48770A38FEDD3868654A1 : __int32
{
  xmm7_XMMRegisterEnumValue = 0x7,
};

/* 612 */
enum $F0837CEB5DEDB34ECD1463CA5202A821 : __int32
{
  mnoreg_MMXRegisterEnumValue = 0xFFFFFFFF,
};

/* 613 */
enum $9FE45708B7903C605BE468F30481C7E3 : __int32
{
  mmx0_MMXRegisterEnumValue = 0x0,
};

/* 614 */
enum $51C07933F09D350968555AF546F09C2D : __int32
{
  mmx1_MMXRegisterEnumValue = 0x1,
};

/* 615 */
enum $F81F6DEF81D6D94AF2071C4733AF51DE : __int32
{
  mmx2_MMXRegisterEnumValue = 0x2,
};

/* 616 */
enum $3386829866433040DE922EB41103C8A3 : __int32
{
  mmx3_MMXRegisterEnumValue = 0x3,
};

/* 617 */
enum $F3272C81D7FDAAE04CF613D6A2A8D551 : __int32
{
  mmx4_MMXRegisterEnumValue = 0x4,
};

/* 618 */
enum $2D344B693699C7C7380A165FA7310DB9 : __int32
{
  mmx5_MMXRegisterEnumValue = 0x5,
};

/* 619 */
enum $9FA3E2B619FD7222C58BCE1B23F52728 : __int32
{
  mmx6_MMXRegisterEnumValue = 0x6,
};

/* 620 */
enum $E9E1C4C94DCE498C6EB3E68613DE6945 : __int32
{
  mmx7_MMXRegisterEnumValue = 0x7,
};

/* 621 */
enum $8F5918BDB3DECA71617A2DB650BCE9F8 : __int32
{
  rbp_mh_SP_save_RegisterEnumValue = 0xFFFFFFFF,
};

/* 622 */
typedef NativeJump::Intel_specific_constants NativePopReg::Intel_specific_constants;

/* 623 */
typedef NativeJump::Intel_specific_constants NativeIllegalInstruction::Intel_specific_constants;

/* 624 */
enum $BE82B7E090E1AD72250A54AD04FF1B88 : __int32
{
  JVM_REF_getField = 0x1,
  JVM_REF_getStatic = 0x2,
  JVM_REF_putField = 0x3,
  JVM_REF_putStatic = 0x4,
  JVM_REF_invokeVirtual = 0x5,
  JVM_REF_invokeStatic = 0x6,
  JVM_REF_invokeSpecial = 0x7,
  JVM_REF_newInvokeSpecial = 0x8,
  JVM_REF_invokeInterface = 0x9,
};

/* 625 */
enum MetaspaceShared::<unnamed_tag> : __int32
{
  vtbl_list_size = 0x11,
  num_virtuals = 0xC8,
  vtbl_method_size = 0x10,
  vtbl_common_code_size = 0x400,
};

/* 626 */
typedef ConcreteRegisterImpl::<unnamed_tag> FPU_State::<unnamed_tag>;

/* 627 */
enum JNI_FastGetField::<unnamed_tag> : __int32
{
  LIST_CAPACITY = 0x28,
};

/* 628 */
enum SignatureHandlerLibrary::<unnamed_tag> : __int32
{
  buffer_size = 0x400,
};

/* 629 */
enum C1_MacroAssembler::<unnamed_tag> : __int32
{
  max_array_allocation_length = 0xFFFFFF,
};

/* 630 */
typedef StubGenerator::layout reg_save_layout;

/* 631 */
typedef StubGenerator::layout Runtime1::generate_code_for::__l49::layout;

/* 632 */
enum _TOKEN_INFORMATION_CLASS : __int32
{
  TokenUser = 0x1,
  TokenGroups = 0x2,
  TokenPrivileges = 0x3,
  TokenOwner = 0x4,
  TokenPrimaryGroup = 0x5,
  TokenDefaultDacl = 0x6,
  TokenSource = 0x7,
  TokenType = 0x8,
  TokenImpersonationLevel = 0x9,
  TokenStatistics = 0xA,
  TokenRestrictedSids = 0xB,
  TokenSessionId = 0xC,
  TokenGroupsAndPrivileges = 0xD,
  TokenSessionReference = 0xE,
  TokenSandBoxInert = 0xF,
  TokenAuditPolicy = 0x10,
  TokenOrigin = 0x11,
  TokenElevationType = 0x12,
  TokenLinkedToken = 0x13,
  TokenElevation = 0x14,
  TokenHasRestrictions = 0x15,
  TokenAccessInformation = 0x16,
  TokenVirtualizationAllowed = 0x17,
  TokenVirtualizationEnabled = 0x18,
  TokenIntegrityLevel = 0x19,
  TokenUIAccess = 0x1A,
  TokenMandatoryPolicy = 0x1B,
  TokenLogonSid = 0x1C,
  MaxTokenInfoClass = 0x1D,
};

/* 633 */
enum _ACL_INFORMATION_CLASS : __int32
{
  AclRevisionInformation = 0x1,
  AclSizeInformation = 0x2,
};

/* 634 */
enum tagExtentMode : __int32
{
  DVEXTENT_CONTENT = 0x0,
  DVEXTENT_INTEGRAL = 0x1,
};

/* 635 */
enum MARKUPSIZE : __int32
{
  MARKUPSIZE_CALCWIDTH = 0x0,
  MARKUPSIZE_CALCHEIGHT = 0x1,
};

/* 636 */
enum tagMENUPOPUPSELECT : __int32
{
  MPOS_EXECUTE = 0x0,
  MPOS_FULLCANCEL = 0x1,
  MPOS_CANCELLEVEL = 0x2,
  MPOS_SELECTLEFT = 0x3,
  MPOS_SELECTRIGHT = 0x4,
  MPOS_CHILDTRACKING = 0x5,
};

/* 637 */
enum DEFAULTSAVEFOLDERTYPE : __int32
{
  DSFT_DETECT = 0x1,
  DSFT_PRIVATE = 0x2,
  DSFT_PUBLIC = 0x3,
};

/* 638 */
enum tagCONDITION_TYPE : __int32
{
  CT_AND_CONDITION = 0x0,
  CT_OR_CONDITION = 0x1,
  CT_NOT_CONDITION = 0x2,
  CT_LEAF_CONDITION = 0x3,
};

/* 639 */
enum tagCONDITION_OPERATION : __int32
{
  COP_IMPLICIT = 0x0,
  COP_EQUAL = 0x1,
  COP_NOTEQUAL = 0x2,
  COP_LESSTHAN = 0x3,
  COP_GREATERTHAN = 0x4,
  COP_LESSTHANOREQUAL = 0x5,
  COP_GREATERTHANOREQUAL = 0x6,
  COP_VALUE_STARTSWITH = 0x7,
  COP_VALUE_ENDSWITH = 0x8,
  COP_VALUE_CONTAINS = 0x9,
  COP_VALUE_NOTCONTAINS = 0xA,
  COP_DOSWILDCARDS = 0xB,
  COP_WORD_EQUAL = 0xC,
  COP_WORD_STARTSWITH = 0xD,
  COP_APPLICATION_SPECIFIC = 0xE,
};

/* 640 */
enum _MINIDUMP_TYPE : __int32
{
  MiniDumpNormal = 0x0,
  MiniDumpWithDataSegs = 0x1,
  MiniDumpWithFullMemory = 0x2,
  MiniDumpWithHandleData = 0x4,
  MiniDumpFilterMemory = 0x8,
  MiniDumpScanMemory = 0x10,
  MiniDumpWithUnloadedModules = 0x20,
  MiniDumpWithIndirectlyReferencedMemory = 0x40,
  MiniDumpFilterModulePaths = 0x80,
  MiniDumpWithProcessThreadData = 0x100,
  MiniDumpWithPrivateReadWriteMemory = 0x200,
  MiniDumpWithoutOptionalData = 0x400,
  MiniDumpWithFullMemoryInfo = 0x800,
  MiniDumpWithThreadInfo = 0x1000,
  MiniDumpWithCodeSegs = 0x2000,
  MiniDumpWithoutAuxiliaryState = 0x4000,
  MiniDumpWithFullAuxiliaryState = 0x8000,
  MiniDumpWithPrivateWriteCopyMemory = 0x10000,
  MiniDumpIgnoreInaccessibleMemory = 0x20000,
  MiniDumpWithTokenInformation = 0x40000,
  MiniDumpValidTypeFlags = 0x7FFFF,
};

/* 641 */
enum OfflineFolderStatus : __int32
{
  OFS_INACTIVE = 0xFFFFFFFF,
  OFS_ONLINE = 0x0,
  OFS_OFFLINE = 0x1,
  OFS_SERVERBACK = 0x2,
  OFS_DIRTYCACHE = 0x3,
};

/* 642 */
enum _SPACTION : __int32
{
  SPACTION_NONE = 0x0,
  SPACTION_MOVING = 0x1,
  SPACTION_COPYING = 0x2,
  SPACTION_RECYCLING = 0x3,
  SPACTION_APPLYINGATTRIBS = 0x4,
  SPACTION_DOWNLOADING = 0x5,
  SPACTION_SEARCHING_INTERNET = 0x6,
  SPACTION_CALCULATING = 0x7,
  SPACTION_UPLOADING = 0x8,
  SPACTION_SEARCHING_FILES = 0x9,
  SPACTION_DELETING = 0xA,
  SPACTION_RENAMING = 0xB,
  SPACTION_FORMATTING = 0xC,
  SPACTION_COPY_MOVING = 0xD,
};

/* 643 */
enum MARKUPLINKTEXT : __int32
{
  MARKUPLINKTEXT_URL = 0x0,
  MARKUPLINKTEXT_ID = 0x1,
  MARKUPLINKTEXT_TEXT = 0x2,
};

/* 644 */
enum Dependencies::DepType : __int32
{
  end_marker = 0x0,
  evol_method = 0x1,
  FIRST_TYPE = 0x1,
  leaf_type = 0x2,
  abstract_with_unique_concrete_subtype = 0x3,
  abstract_with_no_concrete_subtype = 0x4,
  concrete_with_no_concrete_subtype = 0x5,
  unique_concrete_method = 0x6,
  abstract_with_exclusive_concrete_subtypes_2 = 0x7,
  exclusive_concrete_methods_2 = 0x8,
  no_finalizable_subclasses = 0x9,
  call_site_target_value = 0xA,
  TYPE_LIMIT = 0xB,
};

/* 645 */
enum Dependencies::<unnamed_tag> : __int32
{
  LG2_TYPE_LIMIT = 0x4,
  all_types = 0x7FE,
  non_klass_types = 0x400,
  klass_types = 0x3FE,
  non_ctxk_types = 0x2,
  implicit_ctxk_types = 0x400,
  explicit_ctxk_types = 0x3FC,
  max_arg_count = 0x3,
  default_context_type_bit = 0x10,
};

/* 646 */
enum MARKUPMESSAGE : __int32
{
  MARKUPMESSAGE_KEYEXECUTE = 0x0,
  MARKUPMESSAGE_CLICKEXECUTE = 0x1,
  MARKUPMESSAGE_WANTFOCUS = 0x2,
};

/* 647 */
enum tagBANDSITECID : __int32
{
  BSID_BANDADDED = 0x0,
  BSID_BANDREMOVED = 0x1,
};

/* 648 */
enum MethodHandles::<unnamed_tag> : __int32
{
  _suppress_defc = 0x1,
  _suppress_name = 0x2,
  _suppress_type = 0x4,
};

/* 649 */
enum ciBaseObject::<unnamed_tag> : __int32
{
  FLAG_BITS = 0x1,
};

/* 650 */
enum SHELL_LINK_DATA_FLAGS : __int32
{
  SLDF_DEFAULT = 0x0,
  SLDF_HAS_ID_LIST = 0x1,
  SLDF_HAS_LINK_INFO = 0x2,
  SLDF_HAS_NAME = 0x4,
  SLDF_HAS_RELPATH = 0x8,
  SLDF_HAS_WORKINGDIR = 0x10,
  SLDF_HAS_ARGS = 0x20,
  SLDF_HAS_ICONLOCATION = 0x40,
  SLDF_UNICODE = 0x80,
  SLDF_FORCE_NO_LINKINFO = 0x100,
  SLDF_HAS_EXP_SZ = 0x200,
  SLDF_RUN_IN_SEPARATE = 0x400,
  SLDF_HAS_LOGO3ID = 0x800,
  SLDF_HAS_DARWINID = 0x1000,
  SLDF_RUNAS_USER = 0x2000,
  SLDF_HAS_EXP_ICON_SZ = 0x4000,
  SLDF_NO_PIDL_ALIAS = 0x8000,
  SLDF_FORCE_UNCNAME = 0x10000,
  SLDF_RUN_WITH_SHIMLAYER = 0x20000,
  SLDF_RESERVED = 0x80000000,
};

/* 651 */
enum __MIDL_INamespaceWalk_0001 : __int32
{
  NSWF_DEFAULT = 0x0,
  NSWF_NONE_IMPLIES_ALL = 0x1,
  NSWF_ONE_IMPLIES_ALL = 0x2,
  NSWF_DONT_TRAVERSE_LINKS = 0x4,
  NSWF_DONT_ACCUMULATE_RESULT = 0x8,
  NSWF_TRAVERSE_STREAM_JUNCTIONS = 0x10,
  NSWF_FILESYSTEM_ONLY = 0x20,
  NSWF_SHOW_PROGRESS = 0x40,
  NSWF_FLAG_VIEWORDER = 0x80,
  NSWF_IGNORE_AUTOPLAY_HIDA = 0x100,
  NSWF_ASYNC = 0x200,
  NSWF_DONT_RESOLVE_LINKS = 0x400,
  NSWF_ACCUMULATE_FOLDERS = 0x800,
  NSWF_DONT_SORT = 0x1000,
  NSWF_USE_TRANSFER_MEDIUM = 0x2000,
  NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 0x4000,
};

/* 652 */
enum ciObjectFactory::<unnamed_tag> : __int32
{
  NON_PERM_BUCKETS = 0x3D,
};

/* 653 */
enum CompilerCounters::<unnamed_tag> : __int32
{
  cmname_buffer_length = 0xA0,
};

/* 654 */
enum ciEnv::<unnamed_tag> : __int32
{
  MethodCompilable = 0x0,
  MethodCompilable_not_at_tier = 0x1,
  MethodCompilable_never = 0x2,
};

/* 655 */
enum CPVIEW : __int32
{
  CPVIEW_CLASSIC = 0x0,
  CPVIEW_ALLITEMS = 0x0,
  CPVIEW_CATEGORY = 0x1,
  CPVIEW_HOME = 0x1,
};

/* 656 */
enum DepChange::ChangeType : __int32
{
  NO_CHANGE = 0x0,
  Change_new_type = 0x1,
  Change_new_sub = 0x2,
  Change_new_impl = 0x3,
  CHANGE_LIMIT = 0x4,
  Start_Klass = 0x4,
};

/* 657 */
enum xmlStream::MarkupState : __int32
{
  BODY = 0x0,
  HEAD = 0x1,
  ELEM = 0x2,
};

/* 658 */
enum PKA_FLAGS : __int32
{
  PKA_SET = 0x0,
  PKA_APPEND = 0x1,
  PKA_DELETE = 0x2,
};

/* 659 */
enum _SPTEXT : __int32
{
  SPTEXT_ACTIONDESCRIPTION = 0x1,
  SPTEXT_ACTIONDETAIL = 0x2,
};

/* 660 */
enum FileMapInfo::<unnamed_tag> : __int32
{
  _invalid_version = 0xFFFFFFFF,
  _current_version = 0x2,
};

/* 661 */
enum defaultStream::<unnamed_tag> : __int32
{
  NO_WRITER = 0xFFFFFFFF,
};

/* 662 */
enum AttachOperation::<unnamed_tag> : __int32
{
  name_length_max = 0x10,
  arg_length_max = 0x400,
  arg_count_max = 0x3,
};

/* 663 */
enum _TP_CALLBACK_PRIORITY : __int32
{
  TP_CALLBACK_PRIORITY_HIGH = 0x0,
  TP_CALLBACK_PRIORITY_NORMAL = 0x1,
  TP_CALLBACK_PRIORITY_LOW = 0x2,
  TP_CALLBACK_PRIORITY_INVALID = 0x3,
};

/* 664 */
enum DISPLAYCONFIG_SCANLINE_ORDERING : __int32
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 665 */
enum _tagINTERNETFEATURELIST : __int32
{
  FEATURE_OBJECT_CACHING = 0x0,
  FEATURE_ZONE_ELEVATION = 0x1,
  FEATURE_MIME_HANDLING = 0x2,
  FEATURE_MIME_SNIFFING = 0x3,
  FEATURE_WINDOW_RESTRICTIONS = 0x4,
  FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
  FEATURE_BEHAVIORS = 0x6,
  FEATURE_DISABLE_MK_PROTOCOL = 0x7,
  FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
  FEATURE_SECURITYBAND = 0x9,
  FEATURE_RESTRICT_ACTIVEXINSTALL = 0xA,
  FEATURE_VALIDATE_NAVIGATE_URL = 0xB,
  FEATURE_RESTRICT_FILEDOWNLOAD = 0xC,
  FEATURE_ADDON_MANAGEMENT = 0xD,
  FEATURE_PROTOCOL_LOCKDOWN = 0xE,
  FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xF,
  FEATURE_SAFE_BINDTOOBJECT = 0x10,
  FEATURE_UNC_SAVEDFILECHECK = 0x11,
  FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
  FEATURE_TABBED_BROWSING = 0x13,
  FEATURE_SSLUX = 0x14,
  FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
  FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
  FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
  FEATURE_XMLHTTP = 0x18,
  FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
  FEATURE_FEEDS = 0x1A,
  FEATURE_BLOCK_INPUT_PROMPTS = 0x1B,
  FEATURE_ENTRY_COUNT = 0x1C,
};

/* 666 */
enum __MIDL_IUri_0001 : __int32
{
  Uri_PROPERTY_ABSOLUTE_URI = 0x0,
  Uri_PROPERTY_STRING_START = 0x0,
  Uri_PROPERTY_AUTHORITY = 0x1,
  Uri_PROPERTY_DISPLAY_URI = 0x2,
  Uri_PROPERTY_DOMAIN = 0x3,
  Uri_PROPERTY_EXTENSION = 0x4,
  Uri_PROPERTY_FRAGMENT = 0x5,
  Uri_PROPERTY_HOST = 0x6,
  Uri_PROPERTY_PASSWORD = 0x7,
  Uri_PROPERTY_PATH = 0x8,
  Uri_PROPERTY_PATH_AND_QUERY = 0x9,
  Uri_PROPERTY_QUERY = 0xA,
  Uri_PROPERTY_RAW_URI = 0xB,
  Uri_PROPERTY_SCHEME_NAME = 0xC,
  Uri_PROPERTY_USER_INFO = 0xD,
  Uri_PROPERTY_USER_NAME = 0xE,
  Uri_PROPERTY_STRING_LAST = 0xE,
  Uri_PROPERTY_HOST_TYPE = 0xF,
  Uri_PROPERTY_DWORD_START = 0xF,
  Uri_PROPERTY_PORT = 0x10,
  Uri_PROPERTY_SCHEME = 0x11,
  Uri_PROPERTY_ZONE = 0x12,
  Uri_PROPERTY_DWORD_LAST = 0x12,
};

/* 667 */
enum __MIDL_IUri_0002 : __int32
{
  Uri_HOST_UNKNOWN = 0x0,
  Uri_HOST_DNS = 0x1,
  Uri_HOST_IPV4 = 0x2,
  Uri_HOST_IPV6 = 0x3,
  Uri_HOST_IDN = 0x4,
};

/* 668 */
enum _NDIS_802_11_WEP_STATUS : __int32
{
  Ndis802_11WEPEnabled = 0x0,
  Ndis802_11Encryption1Enabled = 0x0,
  Ndis802_11WEPDisabled = 0x1,
  Ndis802_11EncryptionDisabled = 0x1,
  Ndis802_11WEPKeyAbsent = 0x2,
  Ndis802_11Encryption1KeyAbsent = 0x2,
  Ndis802_11WEPNotSupported = 0x3,
  Ndis802_11EncryptionNotSupported = 0x3,
  Ndis802_11Encryption2Enabled = 0x4,
  Ndis802_11Encryption2KeyAbsent = 0x5,
  Ndis802_11Encryption3Enabled = 0x6,
  Ndis802_11Encryption3KeyAbsent = 0x7,
};

/* 669 */
enum SCOPE_LEVEL : __int32
{
  ScopeLevelInterface = 0x1,
  ScopeLevelLink = 0x2,
  ScopeLevelSubnet = 0x3,
  ScopeLevelAdmin = 0x4,
  ScopeLevelSite = 0x5,
  ScopeLevelOrganization = 0x8,
  ScopeLevelGlobal = 0xE,
  ScopeLevelCount = 0x10,
};

/* 670 */
enum _DOT11_PHY_TYPE : __int32
{
  dot11_phy_type_unknown = 0x0,
  dot11_phy_type_any = 0x0,
  dot11_phy_type_fhss = 0x1,
  dot11_phy_type_dsss = 0x2,
  dot11_phy_type_irbaseband = 0x3,
  dot11_phy_type_ofdm = 0x4,
  dot11_phy_type_hrdsss = 0x5,
  dot11_phy_type_erp = 0x6,
  dot11_phy_type_ht = 0x7,
  dot11_phy_type_IHV_start = 0x80000000,
  dot11_phy_type_IHV_end = 0xFFFFFFFF,
};

/* 671 */
enum _NDIS_PHYSICAL_MEDIUM : __int32
{
  NdisPhysicalMediumUnspecified = 0x0,
  NdisPhysicalMediumWirelessLan = 0x1,
  NdisPhysicalMediumCableModem = 0x2,
  NdisPhysicalMediumPhoneLine = 0x3,
  NdisPhysicalMediumPowerLine = 0x4,
  NdisPhysicalMediumDSL = 0x5,
  NdisPhysicalMediumFibreChannel = 0x6,
  NdisPhysicalMedium1394 = 0x7,
  NdisPhysicalMediumWirelessWan = 0x8,
  NdisPhysicalMediumNative802_11 = 0x9,
  NdisPhysicalMediumBluetooth = 0xA,
  NdisPhysicalMediumInfiniband = 0xB,
  NdisPhysicalMediumWiMax = 0xC,
  NdisPhysicalMediumUWB = 0xD,
  NdisPhysicalMedium802_3 = 0xE,
  NdisPhysicalMedium802_5 = 0xF,
  NdisPhysicalMediumIrda = 0x10,
  NdisPhysicalMediumWiredWAN = 0x11,
  NdisPhysicalMediumWiredCoWan = 0x12,
  NdisPhysicalMediumOther = 0x13,
  NdisPhysicalMediumMax = 0x14,
};

/* 672 */
enum TUNNEL_TYPE : __int32
{
  TUNNEL_TYPE_NONE = 0x0,
  TUNNEL_TYPE_OTHER = 0x1,
  TUNNEL_TYPE_DIRECT = 0x2,
  TUNNEL_TYPE_6TO4 = 0xB,
  TUNNEL_TYPE_ISATAP = 0xD,
  TUNNEL_TYPE_TEREDO = 0xE,
  TUNNEL_TYPE_IPHTTPS = 0xF,
};

/* 673 */
enum _NDIS_MEDIUM : __int32
{
  NdisMedium802_3 = 0x0,
  NdisMedium802_5 = 0x1,
  NdisMediumFddi = 0x2,
  NdisMediumWan = 0x3,
  NdisMediumLocalTalk = 0x4,
  NdisMediumDix = 0x5,
  NdisMediumArcnetRaw = 0x6,
  NdisMediumArcnet878_2 = 0x7,
  NdisMediumAtm = 0x8,
  NdisMediumWirelessWan = 0x9,
  NdisMediumIrda = 0xA,
  NdisMediumBpc = 0xB,
  NdisMediumCoWan = 0xC,
  NdisMedium1394 = 0xD,
  NdisMediumInfiniBand = 0xE,
  NdisMediumTunnel = 0xF,
  NdisMediumNative802_11 = 0x10,
  NdisMediumLoopback = 0x11,
  NdisMediumWiMAX = 0x12,
  NdisMediumIP = 0x13,
  NdisMediumMax = 0x14,
};

/* 674 */
enum _NET_IF_ACCESS_TYPE : __int32
{
  NET_IF_ACCESS_LOOPBACK = 0x1,
  NET_IF_ACCESS_BROADCAST = 0x2,
  NET_IF_ACCESS_POINT_TO_POINT = 0x3,
  NET_IF_ACCESS_POINT_TO_MULTI_POINT = 0x4,
  NET_IF_ACCESS_MAXIMUM = 0x5,
};

/* 675 */
enum _NET_IF_DIRECTION_TYPE : __int32
{
  NET_IF_DIRECTION_SENDRECEIVE = 0x0,
  NET_IF_DIRECTION_SENDONLY = 0x1,
  NET_IF_DIRECTION_RECEIVEONLY = 0x2,
  NET_IF_DIRECTION_MAXIMUM = 0x3,
};

/* 676 */
enum IF_OPER_STATUS : __int32
{
  IfOperStatusUp = 0x1,
  IfOperStatusDown = 0x2,
  IfOperStatusTesting = 0x3,
  IfOperStatusUnknown = 0x4,
  IfOperStatusDormant = 0x5,
  IfOperStatusNotPresent = 0x6,
  IfOperStatusLowerLayerDown = 0x7,
};

/* 677 */
enum _NET_IF_ADMIN_STATUS : __int32
{
  NET_IF_ADMIN_STATUS_UP = 0x1,
  NET_IF_ADMIN_STATUS_DOWN = 0x2,
  NET_IF_ADMIN_STATUS_TESTING = 0x3,
};

/* 678 */
enum _NET_IF_MEDIA_CONNECT_STATE : __int32
{
  MediaConnectStateUnknown = 0x0,
  MediaConnectStateConnected = 0x1,
  MediaConnectStateDisconnected = 0x2,
};

/* 679 */
enum _NET_IF_CONNECTION_TYPE : __int32
{
  NET_IF_CONNECTION_DEDICATED = 0x1,
  NET_IF_CONNECTION_PASSIVE = 0x2,
  NET_IF_CONNECTION_DEMAND = 0x3,
  NET_IF_CONNECTION_MAXIMUM = 0x4,
};

/* 680 */
enum _NDIS_PROCESSOR_VENDOR : __int32
{
  NdisProcessorVendorUnknown = 0x0,
  NdisProcessorVendorGenuinIntel = 0x1,
  NdisProcessorVendorGenuineIntel = 0x1,
  NdisProcessorVendorAuthenticAMD = 0x2,
};

/* 681 */
enum Win32AttachListener::<unnamed_tag> : __int32
{
  preallocate_count = 0x4,
};

/* 682 */
enum Win32AttachOperation::<unnamed_tag> : __int32
{
  pipe_name_max = 0x100,
};

/* 683 */
enum EventStartTime : __int32
{
  UNTIMED = 0x0,
  TIMED = 0x1,
};

/* 684 */
enum GCStats::Name : __int32
{
  GCStatsKind = 0x0,
  CMSGCStatsKind = 0x1,
};

/* 685 */
enum SharedSpaceType : __int32
{
  SharedPermGen = 0x0,
  SharedReadOnly = 0x1,
  SharedReadWrite = 0x2,
  SharedMiscData = 0x3,
  SharedMiscCode = 0x4,
};

/* 686 */
enum ArrayElementSize : __int32
{
  T_BOOLEAN_aelem_bytes = 0x1,
  T_CHAR_aelem_bytes = 0x2,
  T_FLOAT_aelem_bytes = 0x4,
  T_DOUBLE_aelem_bytes = 0x8,
  T_BYTE_aelem_bytes = 0x1,
  T_SHORT_aelem_bytes = 0x2,
  T_INT_aelem_bytes = 0x4,
  T_LONG_aelem_bytes = 0x8,
  T_OBJECT_aelem_bytes = 0x4,
  T_ARRAY_aelem_bytes = 0x4,
  T_NARROWOOP_aelem_bytes = 0x4,
  T_NARROWKLASS_aelem_bytes = 0x4,
  T_VOID_aelem_bytes = 0x0,
};

/* 687 */
enum CopySwap::CopyDirection : __int32
{
  RIGHT = 0x0,
  LEFT = 0x1,
};

/* 688 */
typedef ThreadState java_lang_Thread::ThreadStatus;

/* 689 */
enum MemoryManager::<unnamed_tag> : __int32
{
  max_num_pools = 0xA,
};

/* 690 */
typedef CollectedHeap::Name MemoryManager::Name;

/* 691 */
enum MemBaseline::BaselineThreshold : __int32
{
  SIZE_THRESHOLD = 0x400,
};

/* 692 */
enum MemBaseline::BaselineType : __int32
{
  Not_baselined = 0x0,
  Summary_baselined = 0x1,
  Detail_baselined = 0x2,
};

/* 693 */
enum MemBaseline::SortingOrder : __int32
{
  by_address = 0x0,
  by_size = 0x1,
  by_site = 0x2,
  by_site_and_type = 0x3,
};

/* 694 */
typedef IndexSetIterator::<unnamed_tag> MallocSiteTable::<unnamed_tag>;

/* 695 */
enum StatisticsWalker::Threshold : __int32
{
  report_threshold = 0x14,
};

/* 696 */
enum jmmLongAttribute : __int32
{
  JMM_CLASS_LOADED_COUNT = 0x1,
  JMM_CLASS_UNLOADED_COUNT = 0x2,
  JMM_THREAD_TOTAL_COUNT = 0x3,
  JMM_THREAD_LIVE_COUNT = 0x4,
  JMM_THREAD_PEAK_COUNT = 0x5,
  JMM_THREAD_DAEMON_COUNT = 0x6,
  JMM_JVM_INIT_DONE_TIME_MS = 0x7,
  JMM_COMPILE_TOTAL_TIME_MS = 0x8,
  JMM_GC_TIME_MS = 0x9,
  JMM_GC_COUNT = 0xA,
  JMM_JVM_UPTIME_MS = 0xB,
  JMM_INTERNAL_ATTRIBUTE_INDEX = 0x64,
  JMM_CLASS_LOADED_BYTES = 0x65,
  JMM_CLASS_UNLOADED_BYTES = 0x66,
  JMM_TOTAL_CLASSLOAD_TIME_MS = 0x67,
  JMM_VM_GLOBAL_COUNT = 0x68,
  JMM_SAFEPOINT_COUNT = 0x69,
  JMM_TOTAL_SAFEPOINTSYNC_TIME_MS = 0x6A,
  JMM_TOTAL_STOPPED_TIME_MS = 0x6B,
  JMM_TOTAL_APP_TIME_MS = 0x6C,
  JMM_VM_THREAD_COUNT = 0x6D,
  JMM_CLASS_INIT_TOTAL_COUNT = 0x6E,
  JMM_CLASS_INIT_TOTAL_TIME_MS = 0x6F,
  JMM_METHOD_DATA_SIZE_BYTES = 0x70,
  JMM_CLASS_VERIFY_TOTAL_TIME_MS = 0x71,
  JMM_SHARED_CLASS_LOADED_COUNT = 0x72,
  JMM_SHARED_CLASS_UNLOADED_COUNT = 0x73,
  JMM_SHARED_CLASS_LOADED_BYTES = 0x74,
  JMM_SHARED_CLASS_UNLOADED_BYTES = 0x75,
  JMM_OS_ATTRIBUTE_INDEX = 0xC8,
  JMM_OS_PROCESS_ID = 0xC9,
  JMM_OS_MEM_TOTAL_PHYSICAL_BYTES = 0xCA,
  JMM_GC_EXT_ATTRIBUTE_INFO_SIZE = 0x191,
};

/* 697 */
enum jmmBoolAttribute : __int32
{
  JMM_VERBOSE_GC = 0x15,
  JMM_VERBOSE_CLASS = 0x16,
  JMM_THREAD_CONTENTION_MONITORING = 0x17,
  JMM_THREAD_CPU_TIME = 0x18,
  JMM_THREAD_ALLOCATED_MEMORY = 0x19,
};

/* 698 */
enum jmmStatisticType : __int32
{
  JMM_STAT_PEAK_THREAD_COUNT = 0x321,
  JMM_STAT_THREAD_CONTENTION_COUNT = 0x322,
  JMM_STAT_THREAD_CONTENTION_TIME = 0x323,
  JMM_STAT_THREAD_CONTENTION_STAT = 0x324,
  JMM_STAT_PEAK_POOL_USAGE = 0x325,
  JMM_STAT_GC_STAT = 0x326,
};

/* 699 */
enum jmmThresholdType : __int32
{
  JMM_USAGE_THRESHOLD_HIGH = 0x385,
  JMM_USAGE_THRESHOLD_LOW = 0x386,
  JMM_COLLECTION_USAGE_THRESHOLD_HIGH = 0x387,
  JMM_COLLECTION_USAGE_THRESHOLD_LOW = 0x388,
};

/* 700 */
enum $AD37215A5E3B91C06733E56A2242D4D7 : __int32
{
  JMM_VERSION_1 = 0x20010000,
  JMM_VERSION_1_0 = 0x20010000,
  JMM_VERSION_1_1 = 0x20010100,
  JMM_VERSION_1_2 = 0x20010200,
  JMM_VERSION_1_2_1 = 0x20010201,
  JMM_VERSION_1_2_2 = 0x20010202,
  JMM_VERSION = 0x20010203,
};

/* 701 */
enum $F80186B1258CC670D94F49C2AA367A38 : __int32
{
  JMM_THREAD_STATE_FLAG_SUSPENDED = 0x100000,
  JMM_THREAD_STATE_FLAG_NATIVE = 0x400000,
};

/* 702 */
enum jmmVMGlobalType : __int32
{
  JMM_VMGLOBAL_TYPE_UNKNOWN = 0x0,
  JMM_VMGLOBAL_TYPE_JBOOLEAN = 0x1,
  JMM_VMGLOBAL_TYPE_JSTRING = 0x2,
  JMM_VMGLOBAL_TYPE_JLONG = 0x3,
};

/* 703 */
enum jmmVMGlobalOrigin : __int32
{
  JMM_VMGLOBAL_ORIGIN_DEFAULT = 0x1,
  JMM_VMGLOBAL_ORIGIN_COMMAND_LINE = 0x2,
  JMM_VMGLOBAL_ORIGIN_MANAGEMENT = 0x3,
  JMM_VMGLOBAL_ORIGIN_ENVIRON_VAR = 0x4,
  JMM_VMGLOBAL_ORIGIN_CONFIG_FILE = 0x5,
  JMM_VMGLOBAL_ORIGIN_ERGONOMIC = 0x6,
  JMM_VMGLOBAL_ORIGIN_OTHER = 0x63,
};

/* 704 */
enum MallocSiteTable::AccessLock::LockState : __int32
{
  NoLock = 0x0,
  SharedLock = 0x1,
  ExclusiveLock = 0x2,
};

/* 705 */
enum hprofTag : __int32
{
  HPROF_UTF8 = 0x1,
  HPROF_LOAD_CLASS = 0x2,
  HPROF_UNLOAD_CLASS = 0x3,
  HPROF_FRAME = 0x4,
  HPROF_TRACE = 0x5,
  HPROF_ALLOC_SITES = 0x6,
  HPROF_HEAP_SUMMARY = 0x7,
  HPROF_START_THREAD = 0xA,
  HPROF_END_THREAD = 0xB,
  HPROF_HEAP_DUMP = 0xC,
  HPROF_CPU_SAMPLES = 0xD,
  HPROF_CONTROL_SETTINGS = 0xE,
  HPROF_HEAP_DUMP_SEGMENT = 0x1C,
  HPROF_HEAP_DUMP_END = 0x2C,
  HPROF_ARRAY_OBJECT = 0x1,
  HPROF_NORMAL_OBJECT = 0x2,
  HPROF_BOOLEAN = 0x4,
  HPROF_CHAR = 0x5,
  HPROF_FLOAT = 0x6,
  HPROF_DOUBLE = 0x7,
  HPROF_BYTE = 0x8,
  HPROF_SHORT = 0x9,
  HPROF_INT = 0xA,
  HPROF_LONG = 0xB,
  HPROF_GC_ROOT_UNKNOWN = 0xFF,
  HPROF_GC_ROOT_JNI_GLOBAL = 0x1,
  HPROF_GC_ROOT_JNI_LOCAL = 0x2,
  HPROF_GC_ROOT_JAVA_FRAME = 0x3,
  HPROF_GC_ROOT_NATIVE_STACK = 0x4,
  HPROF_GC_ROOT_STICKY_CLASS = 0x5,
  HPROF_GC_ROOT_THREAD_BLOCK = 0x6,
  HPROF_GC_ROOT_MONITOR_USED = 0x7,
  HPROF_GC_ROOT_THREAD_OBJ = 0x8,
  HPROF_GC_CLASS_DUMP = 0x20,
  HPROF_GC_INSTANCE_DUMP = 0x21,
  HPROF_GC_OBJ_ARRAY_DUMP = 0x22,
  HPROF_GC_PRIM_ARRAY_DUMP = 0x23,
};

/* 706 */
enum $375FD9F12F633E180061AFDD29E5A888 : __int32
{
  STACK_TRACE_ID = 0x1,
  INITIAL_CLASS_COUNT = 0xC8,
};

/* 707 */
enum DumpWriter::<unnamed_tag> : __int32
{
  io_buffer_size = 0x800000,
};

/* 708 */
typedef PerfClassTraceTime::<unnamed_tag> PlaceholderTable::classloadAction;

/* 709 */
typedef SystemDictionary::Constants LoaderConstraintTable::Constants;

/* 710 */
typedef VtableStubs::<unnamed_tag> InterpreterOopMap::<unnamed_tag>;

/* 711 */
enum OopMapCache::<unnamed_tag> : __int32
{
  _size = 0x20,
  _probe_depth = 0x3,
};

/* 712 */
enum MuxBits : __int32
{
  LOCKBIT = 0x1,
};

/* 713 */
enum ManifestConstants : __int32
{
  ClearResponsibleAtSTW = 0x0,
  MaximumRecheckInterval = 0x3E8,
};

/* 714 */
enum $D4247462C78DE1E9A86C06F487D7D7A1 : __int32
{
  COPYFUNC_UNALIGNED = 0x0,
  COPYFUNC_ALIGNED = 0x1,
  COPYFUNC_CONJOINT = 0x0,
  COPYFUNC_DISJOINT = 0x2,
};

/* 715 */
enum SimpleThresholdPolicy::EventType : __int32
{
  CALL = 0x0,
  LOOP = 0x1,
  COMPILE = 0x2,
  REMOVE_FROM_QUEUE = 0x3,
  UPDATE_IN_QUEUE = 0x4,
  REPROFILE = 0x5,
  MAKE_NOT_ENTRANT = 0x6,
};

/* 716 */
enum AdapterFingerPrint::<unnamed_tag> : __int32
{
  _basic_type_bits = 0x4,
  _basic_type_mask = 0xF,
  _basic_types_per_int = 0x8,
  _compact_int_count = 0x3,
};

/* 717 */
enum same_frame_extended::<unnamed_tag> : __int32
{
  _frame_id = 0xFB,
};

/* 718 */
typedef same_frame_extended::<unnamed_tag> same_locals_1_stack_item_extended::<unnamed_tag>;

/* 719 */
enum $BACBF3D812D48C99BCD637F8166AAEAF : __int32
{
  ITEM_Top = 0x0,
  ITEM_Integer = 0x1,
  ITEM_Float = 0x2,
  ITEM_Double = 0x3,
  ITEM_Long = 0x4,
  ITEM_Null = 0x5,
  ITEM_UninitializedThis = 0x6,
  ITEM_Object = 0x7,
  ITEM_Uninitialized = 0x8,
  ITEM_Bogus = 0xFFFFFFFF,
};

/* 720 */
typedef same_frame_extended::<unnamed_tag> full_frame::<unnamed_tag>;

/* 721 */
enum VerificationType::<unnamed_tag> : __int32
{
  ITEM_Boolean = 0x9,
  ITEM_Byte = 0xA,
  ITEM_Short = 0xB,
  ITEM_Char = 0xC,
  ITEM_Long_2nd = 0xD,
  ITEM_Double_2nd = 0xE,
};

/* 722 */
enum Verifier::<unnamed_tag> : __int32
{
  STRICTER_ACCESS_CTRL_CHECK_VERSION = 0x31,
  STACKMAP_ATTRIBUTE_MAJOR_VERSION = 0x32,
  INVOKEDYNAMIC_MAJOR_VERSION = 0x33,
  NO_RELAX_ACCESS_CTRL_CHECK_VERSION = 0x34,
};

/* 723 */
typedef ShenandoahLoadReferenceBarrierNode::Strength TypeOrigin::Origin;

/* 724 */
typedef SharedRuntime::ImplicitExceptionKind ErrorContext::FaultType;

/* 725 */
enum Reflection::SomeConstants : __int32
{
  PUBLIC = 0x0,
  DECLARED = 0x1,
  MEMBER_PUBLIC = 0x0,
  MEMBER_DECLARED = 0x1,
  MAX_DIM = 0xFF,
};

/* 726 */
enum ClassVerifier::<unnamed_tag> : __int32
{
  BYTECODE_OFFSET = 0x1,
  NEW_OFFSET = 0x2,
};

/* 727 */
enum Verifier::Mode : __int32
{
  ThrowException = 0x0,
  NoException = 0x1,
};

/* 728 */
enum ICache::<unnamed_tag> : __int32
{
  stub_size = 0x10,
  line_size = 0x4,
  log2_line_size = 0x2,
};

/* 729 */
enum PCRecorder::<unnamed_tag> : __int32
{
  bucket_size = 0x10,
};

/* 730 */
enum $4B592475FE07E1E6C0D70D9D675732DB : __int32
{
  LSB_BITS = 0x8,
  LSB_MASK = 0xFF,
};

/* 731 */
enum HeuristicsResult : __int32
{
  HR_NOT_BIASED = 0x1,
  HR_SINGLE_REVOKE = 0x2,
  HR_BULK_REBIAS = 0x3,
  HR_BULK_REVOKE = 0x4,
};

/* 732 */
enum SysClassPath::<unnamed_tag> : __int32
{
  _scp_prefix = 0x0,
  _scp_endorsed = 0x1,
  _scp_base = 0x2,
  _scp_suffix = 0x3,
  _scp_nitems = 0x4,
};

/* 733 */
enum Arguments::init_version_specific_system_properties::__l2::<unnamed_tag> : __int32
{
  bufsz = 0x10,
};

/* 734 */
enum CodeBlobType::<unnamed_tag> : __int32
{
  All = 0x0,
  NumTypes = 0x1,
};

/* 735 */
enum $70436E75E3069D68FCB2A09064B04684 : __int32
{
  OBJ_SIG_LEN = 0x12,
};

/* 736 */
enum $4EC56828F337ECB690C5D1C5FF8DB413 : __int32
{
  IS_METHOD = 0x10000,
  IS_CONSTRUCTOR = 0x20000,
  IS_FIELD = 0x40000,
  IS_TYPE = 0x80000,
  CALLER_SENSITIVE = 0x100000,
  REFERENCE_KIND_SHIFT = 0x18,
  REFERENCE_KIND_MASK = 0xF,
  SEARCH_SUPERCLASSES = 0x100000,
  SEARCH_INTERFACES = 0x200000,
  ALL_KINDS = 0xF0000,
};

/* 737 */
enum ClassFieldMap::<unnamed_tag> : __int32
{
  initial_field_count = 0x5,
};

/* 738 */
enum VM_HeapWalkOperation::<unnamed_tag> : __int32
{
  initial_visit_stack_size = 0xFA0,
};

/* 739 */
enum JvmtiCachedClassFieldMap::<unnamed_tag> : __int32
{
  initial_class_count = 0xC8,
};

/* 740 */
enum $12A5216C6D29AB16EBCAE244851A2840 : __int32
{
  JVMTI_HEAP_FILTER_TAGGED = 0x4,
  JVMTI_HEAP_FILTER_UNTAGGED = 0x8,
  JVMTI_HEAP_FILTER_CLASS_TAGGED = 0x10,
  JVMTI_HEAP_FILTER_CLASS_UNTAGGED = 0x20,
};

/* 741 */
enum $DAE3AED03217CA69F02DA22BC7AEC8F6 : __int32
{
  JVMTI_VISIT_OBJECTS = 0x100,
  JVMTI_VISIT_ABORT = 0x8000,
};

/* 742 */
enum JvmtiTagMap::<unnamed_tag> : __int32
{
  max_free_entries = 0x1000,
};

/* 743 */
enum CallbackInvoker::<unnamed_tag> : __int32
{
  basic = 0x0,
  advanced = 0x1,
};

/* 744 */
enum JvmtiTagHashmap::<unnamed_tag> : __int32
{
  small_trace_threshold = 0x2710,
  medium_trace_threshold = 0x186A0,
  large_trace_threshold = 0xF4240,
  initial_trace_threshold = 0x2710,
};

/* 745 */
enum VM_RedefineClasses::compare_and_normalize_class_versions::__l35::<unnamed_type_method_was> : __int32
{
  matched = 0x0,
  added = 0x1,
  deleted = 0x2,
  undetermined = 0x3,
};

/* 746 */
enum $D9BE40755A5A2E9CCFE055F7737716C9 : __int32
{
  JVMTI_INTERNAL_CAPABILITY_COUNT = 0x29,
};

/* 747 */
enum $9CE441CBFD7E1B21F51FE906BC214E8B : __int32
{
  JVMTI_CMLR_MAJOR_VERSION_1 = 0x1,
  JVMTI_CMLR_MINOR_VERSION_0 = 0x0,
  JVMTI_CMLR_MAJOR_VERSION = 0x1,
  JVMTI_CMLR_MINOR_VERSION = 0x0,
};

/* 748 */
enum jvmtiCMLRKind : __int32
{
  JVMTI_CMLR_DUMMY = 0x1,
  JVMTI_CMLR_INLINE_INFO = 0x2,
};

/* 749 */
enum $B98169A7F2131E40CBA00C37C8DBC386 : __int32
{
  JVMTI_VERSION_MASK_INTERFACE_TYPE = 0x70000000,
  JVMTI_VERSION_MASK_MAJOR = 0xFFF0000,
  JVMTI_VERSION_MASK_MINOR = 0xFF00,
  JVMTI_VERSION_MASK_MICRO = 0xFF,
};

/* 750 */
enum $3E7C1907418CA5FE322390C30A9696ED : __int32
{
  JVMTI_VERSION_SHIFT_MAJOR = 0x10,
  JVMTI_VERSION_SHIFT_MINOR = 0x8,
  JVMTI_VERSION_SHIFT_MICRO = 0x0,
};

/* 751 */
enum jfieldIDWorkaround::<unnamed_tag> : __int32
{
  checked_bits = 0x1,
  instance_bits = 0x1,
  address_bits = 0x1E,
  large_offset_bits = 0x1E,
  small_offset_bits = 0x7,
  klass_bits = 0x17,
  checked_shift = 0x0,
  instance_shift = 0x1,
  address_shift = 0x2,
  offset_shift = 0x2,
  klass_shift = 0x9,
  checked_mask_in_place = 0x1,
  instance_mask_in_place = 0x2,
  large_offset_mask = 0x3FFFFFFF,
  small_offset_mask = 0x7F,
  klass_mask = 0x7FFFFF,
};

/* 752 */
enum $B9A6FF72586F0CF45B28D144921D22EE : __int32
{
  JVMTI_THREAD_MIN_PRIORITY = 0x1,
  JVMTI_THREAD_NORM_PRIORITY = 0x5,
  JVMTI_THREAD_MAX_PRIORITY = 0xA,
};

/* 753 */
enum JvmtiClassFileReconstituter::<unnamed_tag> : __int32
{
  initial_buffer_size = 0x400,
};

/* 754 */
enum $670C885F70D792CB6E9E7026F9C1802F : __int32
{
  JVMTI_CLASS_STATUS_VERIFIED = 0x1,
  JVMTI_CLASS_STATUS_PREPARED = 0x2,
  JVMTI_CLASS_STATUS_INITIALIZED = 0x4,
  JVMTI_CLASS_STATUS_ERROR = 0x8,
  JVMTI_CLASS_STATUS_ARRAY = 0x10,
  JVMTI_CLASS_STATUS_PRIMITIVE = 0x20,
};

/* 755 */
enum $EF1AE410E657330349506A25A5DC9E7C : __int32
{
  JAVA_THREAD_STATE_NEW = 0x0,
  JAVA_THREAD_STATE_RUNNABLE = 0x1,
  JAVA_THREAD_STATE_BLOCKED = 0x2,
  JAVA_THREAD_STATE_WAITING = 0x3,
  JAVA_THREAD_STATE_TIMED_WAITING = 0x4,
  JAVA_THREAD_STATE_TERMINATED = 0x5,
  JAVA_THREAD_STATE_COUNT = 0x6,
};

/* 756 */
enum SharedPathsMiscInfo::<unnamed_tag> : __int32
{
  INITIAL_BUF_SIZE = 0x80,
};

/* 757 */
enum GuardedMemory::Guard::<unnamed_tag> : __int32
{
  GUARD_SIZE = 0x10,
};

/* 758 */
enum JNICallType : __int32
{
  JNI_STATIC = 0x0,
  JNI_VIRTUAL = 0x1,
  JNI_NONVIRTUAL = 0x2,
};

/* 759 */
enum $5585C3FE4756466A4C0BF0FF23EB3355 : __int32
{
  ticks_no_Java_frame = 0x0,
  ticks_no_class_load = 0xFFFFFFFF,
  ticks_GC_active = 0xFFFFFFFE,
  ticks_unknown_not_Java = 0xFFFFFFFD,
  ticks_not_walkable_not_Java = 0xFFFFFFFC,
  ticks_unknown_Java = 0xFFFFFFFB,
  ticks_not_walkable_Java = 0xFFFFFFFA,
  ticks_unknown_state = 0xFFFFFFF9,
  ticks_thread_exit = 0xFFFFFFF8,
  ticks_deopt = 0xFFFFFFF7,
  ticks_safepoint = 0xFFFFFFF6,
};

/* 760 */
enum $D9B2D2B622485D5262CD8ED5F75A3303 : __int32
{
  _imcp_invoke_name = 0x1,
  _imcp_invoke_signature = 0x2,
  _imcp_limit = 0x3,
};

/* 761 */
enum JNIMethodBlock::<unnamed_tag> : __int32
{
  number_of_methods = 0x8,
};

/* 762 */
enum MetaspaceGCThresholdUpdater::Type : __int32
{
  ComputeNewSize = 0x0,
  ExpandAndAllocate = 0x1,
  Last = 0x2,
};

/* 763 */
typedef PointsToNode::NodeType DumpAllocClosure::Type;

/* 764 */
enum DumpAllocClosure::<unnamed_tag> : __int32
{
  RO = 0x0,
  RW = 0x1,
};

/* 765 */
enum VirtualSpaceList::VirtualSpaceSizes : __int32
{
  VirtualSpaceSize = 0x40000,
};

/* 766 */
enum SpaceManager::ChunkMultiples : __int32
{
  MediumChunkMultiple = 0x4,
};

/* 767 */
enum ChunkIndex : __int32
{
  ZeroIndex = 0x0,
  SpecializedIndex = 0x0,
  SmallIndex = 0x1,
  MediumIndex = 0x2,
  HumongousIndex = 0x3,
  NumberOfFreeLists = 0x3,
  NumberOfInUseLists = 0x4,
};

/* 768 */
enum ChunkSizes : __int32
{
  ClassSpecializedChunk = 0x80,
  SpecializedChunk = 0x80,
  ClassSmallChunk = 0x100,
  SmallChunk = 0x200,
  ClassMediumChunk = 0x1000,
  MediumChunk = 0x2000,
};

/* 769 */
typedef FreeBlockDictionary<FreeChunk>::Dither FreeBlockDictionary<Metachunk>::Dither;

/* 770 */
typedef FreeBlockDictionary<FreeChunk>::Dither FreeBlockDictionary<Metablock>::Dither;

/* 771 */
typedef FreeBlockDictionary<FreeChunk>::DictionaryChoice FreeBlockDictionary<Metachunk>::DictionaryChoice;

/* 772 */
typedef FreeBlockDictionary<FreeChunk>::DictionaryChoice FreeBlockDictionary<Metablock>::DictionaryChoice;

/* 773 */
enum GCH_strong_roots_tasks : __int32
{
  GCH_PS_Universe_oops_do = 0x0,
  GCH_PS_JNIHandles_oops_do = 0x1,
  GCH_PS_ObjectSynchronizer_oops_do = 0x2,
  GCH_PS_FlatProfiler_oops_do = 0x3,
  GCH_PS_Management_oops_do = 0x4,
  GCH_PS_SystemDictionary_oops_do = 0x5,
  GCH_PS_ClassLoaderDataGraph_oops_do = 0x6,
  GCH_PS_jvmti_oops_do = 0x7,
  GCH_PS_CodeCache_oops_do = 0x8,
  GCH_PS_younger_gens = 0x9,
  GCH_PS_NumElements = 0xA,
};

/* 774 */
enum ChunkPoolCleaner::<unnamed_tag> : __int32
{
  CleaningInterval = 0x1388,
};

/* 775 */
enum OracleCommand : __int32
{
  UnknownCommand = 0xFFFFFFFF,
  OracleFirstCommand = 0x0,
  BreakCommand = 0x0,
  PrintCommand = 0x1,
  ExcludeCommand = 0x2,
  InlineCommand = 0x3,
  DontInlineCommand = 0x4,
  CompileOnlyCommand = 0x5,
  LogCommand = 0x6,
  OptionCommand = 0x7,
  QuietCommand = 0x8,
  HelpCommand = 0x9,
  OracleCommandCount = 0xA,
};

/* 776 */
enum MethodMatcher::Mode : __int32
{
  Exact = 0x0,
  Prefix = 0x1,
  Suffix = 0x2,
  Substring = 0x3,
  Any = 0x4,
  Unknown = 0xFFFFFFFF,
};

/* 777 */
typedef PointsToNode::NodeType OptionType;

/* 778 */
enum $257527CEC97D12F1F677CB833A88367B : __int32
{
  StubQueueLimit = 0xA,
};

/* 779 */
enum $B219D0CCA62CDB00B486E0744A53B3D6 : __int32
{
  indexCardSize = 0x80,
};

/* 780 */
enum ValueRecorder<Metadata *>::IndexCache<Metadata *>::<unnamed_tag> : __int32
{
  _log_cache_size = 0x9,
  _cache_size = 0x200,
  _collision_bit_shift = 0x0,
  _collision_bit = 0x1,
  _index_shift = 0x1,
};

/* 781 */
typedef ValueRecorder<Metadata *>::IndexCache<Metadata *>::<unnamed_tag> ValueRecorder<_jobject *>::IndexCache<_jobject *>::<unnamed_tag>;

/* 782 */
enum ClassHierarchyWalker::<unnamed_tag> : __int32
{
  PARTICIPANT_LIMIT = 0x3,
};

/* 783 */
enum $D15B32DBFDFB7DE83B7F87D5E21B24B8 : __int32
{
  LOCATION_CODE = 0x0,
  CONSTANT_INT_CODE = 0x1,
  CONSTANT_OOP_CODE = 0x2,
  CONSTANT_LONG_CODE = 0x3,
  CONSTANT_DOUBLE_CODE = 0x4,
  OBJECT_CODE = 0x5,
  OBJECT_ID_CODE = 0x6,
};

/* 784 */
enum $33966AB4FE2E090DC4BDB1EACD549F8F : __int32
{
  FLAG_THIS_UNINIT = 0x1,
};

/* 785 */
typedef SvcGCMarker::reason_type StackMapReader::<unnamed_tag>;

/* 786 */
enum java_lang_ref_SoftReference::<unnamed_tag> : __int32
{
  hc_timestamp_offset = 0x4,
};

/* 787 */
enum BacktraceBuilder::<unnamed_tag> : __int32
{
  trace_methods_offset = 0x0,
  trace_bcis_offset = 0x1,
  trace_mirrors_offset = 0x2,
  trace_cprefs_offset = 0x3,
  trace_next_offset = 0x4,
  trace_size = 0x5,
  trace_chunk_size = 0x20,
};

/* 788 */
enum java_lang_System::<unnamed_tag> : __int32
{
  hc_static_in_offset = 0x0,
  hc_static_out_offset = 0x1,
  hc_static_err_offset = 0x2,
  hc_static_security_offset = 0x3,
};

/* 789 */
enum java_lang_StackTraceElement::<unnamed_tag> : __int32
{
  hc_declaringClass_offset = 0x0,
  hc_methodName_offset = 0x1,
  hc_fileName_offset = 0x2,
  hc_lineNumber_offset = 0x3,
};

/* 790 */
enum java_lang_AssertionStatusDirectives::<unnamed_tag> : __int32
{
  hc_classes_offset = 0x0,
  hc_classEnabled_offset = 0x1,
  hc_packages_offset = 0x2,
  hc_packageEnabled_offset = 0x3,
  hc_deflt_offset = 0x4,
};

/* 791 */
enum QualifiedState : __int32
{
  QUALIFIED = 0x0,
  DISQUALIFIED = 0x1,
};

/* 792 */
enum BytecodeCPEntry::tag : __int32
{
  ERROR_TAG = 0x0,
  UTF8 = 0x1,
  KLASS = 0x2,
  STRING = 0x3,
  NAME_AND_TYPE = 0x4,
  METHODREF = 0x5,
};

/* 793 */
enum FieldAllocationType : __int32
{
  STATIC_OOP = 0x0,
  STATIC_BYTE = 0x1,
  STATIC_SHORT = 0x2,
  STATIC_WORD = 0x3,
  STATIC_DOUBLE = 0x4,
  NONSTATIC_OOP = 0x5,
  NONSTATIC_BYTE = 0x6,
  NONSTATIC_SHORT = 0x7,
  NONSTATIC_WORD = 0x8,
  NONSTATIC_DOUBLE = 0x9,
  MAX_FIELD_ALLOCATION_TYPE = 0xA,
  BAD_ALLOCATION_TYPE = 0xFFFFFFFF,
};

/* 794 */
typedef CounterData::<unnamed_tag> ClassFileParser::parse_annotations::__l4::<unnamed_tag>;

/* 795 */
typedef ThreadState BCEscapeAnalyzer::ArgumentMap::<unnamed_tag>;

/* 796 */
enum DelayedConstant::<unnamed_tag> : __int32
{
  DC_LIMIT = 0x14,
};

/* 797 */
enum _STORAGE_BUS_TYPE : __int32
{
  BusTypeUnknown = 0x0,
  BusTypeScsi = 0x1,
  BusTypeAtapi = 0x2,
  BusTypeAta = 0x3,
  BusType1394 = 0x4,
  BusTypeSsa = 0x5,
  BusTypeFibre = 0x6,
  BusTypeUsb = 0x7,
  BusTypeRAID = 0x8,
  BusTypeiScsi = 0x9,
  BusTypeSas = 0xA,
  BusTypeSata = 0xB,
  BusTypeSd = 0xC,
  BusTypeMmc = 0xD,
  BusTypeVirtual = 0xE,
  BusTypeFileBackedVirtual = 0xF,
  BusTypeMax = 0x10,
  BusTypeMaxReserved = 0x7F,
};

/* 798 */
enum tagCOWAIT_FLAGS : __int32
{
  COWAIT_WAITALL = 0x1,
  COWAIT_ALERTABLE = 0x2,
  COWAIT_INPUTAVAILABLE = 0x4,
};

/* 799 */
enum IMPORT_OBJECT_TYPE : __int32
{
  IMPORT_OBJECT_CODE = 0x0,
  IMPORT_OBJECT_DATA = 0x1,
  IMPORT_OBJECT_CONST = 0x2,
};

/* 800 */
enum IMPORT_OBJECT_NAME_TYPE : __int32
{
  IMPORT_OBJECT_ORDINAL = 0x0,
  IMPORT_OBJECT_NAME = 0x1,
  IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,
  IMPORT_OBJECT_NAME_UNDECORATE = 0x3,
};

/* 801 */
enum _AUDIT_EVENT_TYPE : __int32
{
  AuditEventObjectAccess = 0x0,
  AuditEventDirectoryServiceAccess = 0x1,
};

/* 802 */
enum _DEP_SYSTEM_POLICY_TYPE : __int32
{
  DEPPolicyAlwaysOff = 0x0,
  DEPPolicyAlwaysOn = 0x1,
  DEPPolicyOptIn = 0x2,
  DEPPolicyOptOut = 0x3,
  DEPTotalPolicyCount = 0x4,
};

/* 803 */
enum _ACCESS_REASON_TYPE : __int32
{
  AccessReasonNone = 0x0,
  AccessReasonAllowedAce = 0x10000,
  AccessReasonDeniedAce = 0x20000,
  AccessReasonAllowedParentAce = 0x30000,
  AccessReasonDeniedParentAce = 0x40000,
  AccessReasonMissingPrivilege = 0x100000,
  AccessReasonFromPrivilege = 0x200000,
  AccessReasonIntegrityLevel = 0x300000,
  AccessReasonOwnership = 0x400000,
  AccessReasonNullDacl = 0x500000,
  AccessReasonEmptyDacl = 0x600000,
  AccessReasonNoSD = 0x700000,
  AccessReasonNoGrant = 0x800000,
};

/* 804 */
enum _TRANSACTION_INFORMATION_CLASS : __int32
{
  TransactionBasicInformation = 0x0,
  TransactionPropertiesInformation = 0x1,
  TransactionEnlistmentInformation = 0x2,
  TransactionSuperiorEnlistmentInformation = 0x3,
  TransactionBindInformation = 0x4,
  TransactionDTCPrivateInformation = 0x5,
};

/* 805 */
enum _TRANSACTIONMANAGER_INFORMATION_CLASS : __int32
{
  TransactionManagerBasicInformation = 0x0,
  TransactionManagerLogInformation = 0x1,
  TransactionManagerLogPathInformation = 0x2,
  TransactionManagerRecoveryInformation = 0x4,
  TransactionManagerOnlineProbeInformation = 0x3,
  TransactionManagerOldestTransactionInformation = 0x5,
};

/* 806 */
enum _RESOURCEMANAGER_INFORMATION_CLASS : __int32
{
  ResourceManagerBasicInformation = 0x0,
  ResourceManagerCompletionInformation = 0x1,
};

/* 807 */
enum tagSTGTY : __int32
{
  STGTY_STORAGE = 0x1,
  STGTY_STREAM = 0x2,
  STGTY_LOCKBYTES = 0x3,
  STGTY_PROPERTY = 0x4,
};

/* 808 */
enum tagSTREAM_SEEK : __int32
{
  STREAM_SEEK_SET = 0x0,
  STREAM_SEEK_CUR = 0x1,
  STREAM_SEEK_END = 0x2,
};

/* 809 */
enum _SYSTEM_POWER_STATE : __int32
{
  PowerSystemUnspecified = 0x0,
  PowerSystemWorking = 0x1,
  PowerSystemSleeping1 = 0x2,
  PowerSystemSleeping2 = 0x3,
  PowerSystemSleeping3 = 0x4,
  PowerSystemHibernate = 0x5,
  PowerSystemShutdown = 0x6,
  PowerSystemMaximum = 0x7,
};

/* 810 */
enum _ENLISTMENT_INFORMATION_CLASS : __int32
{
  EnlistmentBasicInformation = 0x0,
  EnlistmentRecoveryInformation = 0x1,
  EnlistmentCrmInformation = 0x2,
};

/* 811 */
enum tagLOCKTYPE : __int32
{
  LOCK_WRITE = 0x1,
  LOCK_EXCLUSIVE = 0x2,
  LOCK_ONLYONCE = 0x4,
};

/* 812 */
enum POWER_ACTION : __int32
{
  PowerActionNone = 0x0,
  PowerActionReserved = 0x1,
  PowerActionSleep = 0x2,
  PowerActionHibernate = 0x3,
  PowerActionShutdown = 0x4,
  PowerActionShutdownReset = 0x5,
  PowerActionShutdownOff = 0x6,
  PowerActionWarmEject = 0x7,
};

/* 813 */
enum _BIN_TYPES : __int32
{
  RequestSize = 0x0,
  RequestLocation = 0x1,
};

/* 814 */
enum _DEVICE_POWER_STATE : __int32
{
  PowerDeviceUnspecified = 0x0,
  PowerDeviceD0 = 0x1,
  PowerDeviceD1 = 0x2,
  PowerDeviceD2 = 0x3,
  PowerDeviceD3 = 0x4,
  PowerDeviceMaximum = 0x5,
};

/* 815 */
enum _SECURITY_IMPERSONATION_LEVEL : __int32
{
  SecurityAnonymous = 0x0,
  SecurityIdentification = 0x1,
  SecurityImpersonation = 0x2,
  SecurityDelegation = 0x3,
};

/* 816 */
enum _KTMOBJECT_TYPE : __int32
{
  KTMOBJECT_TRANSACTION = 0x0,
  KTMOBJECT_TRANSACTION_MANAGER = 0x1,
  KTMOBJECT_RESOURCE_MANAGER = 0x2,
  KTMOBJECT_ENLISTMENT = 0x3,
  KTMOBJECT_INVALID = 0x4,
};

/* 817 */
enum _MONITOR_DISPLAY_STATE : __int32
{
  PowerMonitorOff = 0x0,
  PowerMonitorOn = 0x1,
  PowerMonitorDim = 0x2,
};

/* 818 */
enum _TOKEN_TYPE : __int32
{
  TokenPrimary = 0x1,
  TokenImpersonation = 0x2,
};

/* 819 */
enum _TOKEN_ELEVATION_TYPE : __int32
{
  TokenElevationTypeDefault = 0x1,
  TokenElevationTypeFull = 0x2,
  TokenElevationTypeLimited = 0x3,
};

/* 820 */
enum _STORAGE_QUERY_TYPE : __int32
{
  PropertyStandardQuery = 0x0,
  PropertyExistsQuery = 0x1,
  PropertyMaskQuery = 0x2,
  PropertyQueryMaxDefined = 0x3,
};

/* 821 */
enum LATENCY_TIME : __int32
{
  LT_DONT_CARE = 0x0,
  LT_LOWEST_LATENCY = 0x1,
};

/* 822 */
enum _USER_MARSHAL_CB_TYPE : __int32
{
  USER_MARSHAL_CB_BUFFER_SIZE = 0x0,
  USER_MARSHAL_CB_MARSHALL = 0x1,
  USER_MARSHAL_CB_UNMARSHALL = 0x2,
  USER_MARSHAL_CB_FREE = 0x3,
};

/* 823 */
enum _POWER_REQUEST_TYPE : __int32
{
  PowerRequestDisplayRequired = 0x0,
  PowerRequestSystemRequired = 0x1,
  PowerRequestAwayModeRequired = 0x2,
};

/* 824 */
enum _STORAGE_PROPERTY_ID : __int32
{
  StorageDeviceProperty = 0x0,
  StorageAdapterProperty = 0x1,
  StorageDeviceIdProperty = 0x2,
  StorageDeviceUniqueIdProperty = 0x3,
  StorageDeviceWriteCacheProperty = 0x4,
  StorageMiniportProperty = 0x5,
  StorageAccessAlignmentProperty = 0x6,
  StorageDeviceSeekPenaltyProperty = 0x7,
  StorageDeviceTrimProperty = 0x8,
  StorageDeviceWriteAggregationProperty = 0x9,
};

/* 825 */
enum POWER_INFORMATION_LEVEL : __int32
{
  SystemPowerPolicyAc = 0x0,
  SystemPowerPolicyDc = 0x1,
  VerifySystemPolicyAc = 0x2,
  VerifySystemPolicyDc = 0x3,
  SystemPowerCapabilities = 0x4,
  SystemBatteryState = 0x5,
  SystemPowerStateHandler = 0x6,
  ProcessorStateHandler = 0x7,
  SystemPowerPolicyCurrent = 0x8,
  AdministratorPowerPolicy = 0x9,
  SystemReserveHiberFile = 0xA,
  ProcessorInformation = 0xB,
  SystemPowerInformation = 0xC,
  ProcessorStateHandler2 = 0xD,
  LastWakeTime = 0xE,
  LastSleepTime = 0xF,
  SystemExecutionState = 0x10,
  SystemPowerStateNotifyHandler = 0x11,
  ProcessorPowerPolicyAc = 0x12,
  ProcessorPowerPolicyDc = 0x13,
  VerifyProcessorPowerPolicyAc = 0x14,
  VerifyProcessorPowerPolicyDc = 0x15,
  ProcessorPowerPolicyCurrent = 0x16,
  SystemPowerStateLogging = 0x17,
  SystemPowerLoggingEntry = 0x18,
  SetPowerSettingValue = 0x19,
  NotifyUserPowerSetting = 0x1A,
  PowerInformationLevelUnused0 = 0x1B,
  PowerInformationLevelUnused1 = 0x1C,
  SystemVideoState = 0x1D,
  TraceApplicationPowerMessage = 0x1E,
  TraceApplicationPowerMessageEnd = 0x1F,
  ProcessorPerfStates = 0x20,
  ProcessorIdleStates = 0x21,
  ProcessorCap = 0x22,
  SystemWakeSource = 0x23,
  SystemHiberFileInformation = 0x24,
  TraceServicePowerMessage = 0x25,
  ProcessorLoad = 0x26,
  PowerShutdownNotification = 0x27,
  MonitorCapabilities = 0x28,
  SessionPowerInit = 0x29,
  SessionDisplayState = 0x2A,
  PowerRequestCreate = 0x2B,
  PowerRequestAction = 0x2C,
  GetPowerRequestList = 0x2D,
  ProcessorInformationEx = 0x2E,
  NotifyUserModeLegacyPowerEvent = 0x2F,
  GroupPark = 0x30,
  ProcessorIdleDomains = 0x31,
  WakeTimerList = 0x32,
  SystemHiberFileSize = 0x33,
  PowerInformationLevelMaximum = 0x34,
};

/* 826 */
enum _IDL_CS_CONVERT : __int32
{
  IDL_CS_NO_CONVERT = 0x0,
  IDL_CS_IN_PLACE_CONVERT = 0x1,
  IDL_CS_NEW_BUFFER_CONVERT = 0x2,
};

/* 827 */
enum _tagPI_FLAGS : __int32
{
  PI_PARSE_URL = 0x1,
  PI_FILTER_MODE = 0x2,
  PI_FORCE_ASYNC = 0x4,
  PI_USE_WORKERTHREAD = 0x8,
  PI_MIMEVERIFICATION = 0x10,
  PI_CLSIDLOOKUP = 0x20,
  PI_DATAPROGRESS = 0x40,
  PI_SYNCHRONOUS = 0x80,
  PI_APARTMENTTHREADED = 0x100,
  PI_CLASSINSTALL = 0x200,
  PI_PASSONBINDCTX = 0x2000,
  PI_NOMIMEHANDLER = 0x8000,
  PI_LOADAPPDIRECT = 0x4000,
  PD_FORCE_SWITCH = 0x10000,
  PI_PREFERDEFAULTHANDLER = 0x20000,
};

/* 828 */
enum _SC_ACTION_TYPE : __int32
{
  SC_ACTION_NONE = 0x0,
  SC_ACTION_RESTART = 0x1,
  SC_ACTION_REBOOT = 0x2,
  SC_ACTION_RUN_COMMAND = 0x3,
};

/* 829 */
enum SYSTEM_POWER_CONDITION : __int32
{
  PoAc = 0x0,
  PoDc = 0x1,
  PoHot = 0x2,
  PoConditionMaximum = 0x3,
};

/* 830 */
enum tagMEMCTX : __int32
{
  MEMCTX_TASK = 0x1,
  MEMCTX_SHARED = 0x2,
  MEMCTX_MACSYSTEM = 0x3,
  MEMCTX_UNKNOWN = 0xFFFFFFFF,
  MEMCTX_SAME = 0xFFFFFFFE,
};

/* 831 */
enum tagCLSCTX : __int32
{
  CLSCTX_INPROC_SERVER = 0x1,
  CLSCTX_INPROC_HANDLER = 0x2,
  CLSCTX_LOCAL_SERVER = 0x4,
  CLSCTX_INPROC_SERVER16 = 0x8,
  CLSCTX_REMOTE_SERVER = 0x10,
  CLSCTX_INPROC_HANDLER16 = 0x20,
  CLSCTX_RESERVED1 = 0x40,
  CLSCTX_RESERVED2 = 0x80,
  CLSCTX_RESERVED3 = 0x100,
  CLSCTX_RESERVED4 = 0x200,
  CLSCTX_NO_CODE_DOWNLOAD = 0x400,
  CLSCTX_RESERVED5 = 0x800,
  CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
  CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
  CLSCTX_NO_FAILURE_LOG = 0x4000,
  CLSCTX_DISABLE_AAA = 0x8000,
  CLSCTX_ENABLE_AAA = 0x10000,
  CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
  CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
  CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
  CLSCTX_ENABLE_CLOAKING = 0x100000,
  CLSCTX_PS_DLL = 0x80000000,
};

/* 832 */
enum tagREGCLS : __int32
{
  REGCLS_SINGLEUSE = 0x0,
  REGCLS_MULTIPLEUSE = 0x1,
  REGCLS_MULTI_SEPARATE = 0x2,
  REGCLS_SUSPENDED = 0x4,
  REGCLS_SURROGATE = 0x8,
};

/* 833 */
enum _STORAGE_PORT_CODE_SET : __int32
{
  StoragePortCodeSetReserved = 0x0,
  StoragePortCodeSetStorport = 0x1,
  StoragePortCodeSetSCSIport = 0x2,
};

/* 834 */
enum _ELEMENT_TYPE : __int32
{
  AllElements = 0x0,
  ChangerTransport = 0x1,
  ChangerSlot = 0x2,
  ChangerIEPort = 0x3,
  ChangerDrive = 0x4,
  ChangerDoor = 0x5,
  ChangerKeypad = 0x6,
  ChangerMaxElement = 0x7,
};

/* 835 */
enum _GET_FILEEX_INFO_LEVELS : __int32
{
  GetFileExInfoStandard = 0x0,
  GetFileExMaxInfoLevel = 0x1,
};

/* 836 */
enum tagMSHLFLAGS : __int32
{
  MSHLFLAGS_NORMAL = 0x0,
  MSHLFLAGS_TABLESTRONG = 0x1,
  MSHLFLAGS_TABLEWEAK = 0x2,
  MSHLFLAGS_NOPING = 0x4,
  MSHLFLAGS_RESERVED1 = 0x8,
  MSHLFLAGS_RESERVED2 = 0x10,
  MSHLFLAGS_RESERVED3 = 0x20,
  MSHLFLAGS_RESERVED4 = 0x40,
};

/* 837 */
enum tagEOLE_AUTHENTICATION_CAPABILITIES : __int32
{
  EOAC_NONE = 0x0,
  EOAC_MUTUAL_AUTH = 0x1,
  EOAC_STATIC_CLOAKING = 0x20,
  EOAC_DYNAMIC_CLOAKING = 0x40,
  EOAC_ANY_AUTHORITY = 0x80,
  EOAC_MAKE_FULLSIC = 0x100,
  EOAC_DEFAULT = 0x800,
  EOAC_SECURE_REFS = 0x2,
  EOAC_ACCESS_CONTROL = 0x4,
  EOAC_APPID = 0x8,
  EOAC_DYNAMIC = 0x10,
  EOAC_REQUIRE_FULLSIC = 0x200,
  EOAC_AUTO_IMPERSONATE = 0x400,
  EOAC_NO_CUSTOM_MARSHAL = 0x2000,
  EOAC_DISABLE_AAA = 0x1000,
};

/* 838 */
enum _STORAGE_IDENTIFIER_CODE_SET : __int32
{
  StorageIdCodeSetReserved = 0x0,
  StorageIdCodeSetBinary = 0x1,
  StorageIdCodeSetAscii = 0x2,
  StorageIdCodeSetUtf8 = 0x3,
};

/* 839 */
enum POWER_PLATFORM_ROLE : __int32
{
  PlatformRoleUnspecified = 0x0,
  PlatformRoleDesktop = 0x1,
  PlatformRoleMobile = 0x2,
  PlatformRoleWorkstation = 0x3,
  PlatformRoleEnterpriseServer = 0x4,
  PlatformRoleSOHOServer = 0x5,
  PlatformRoleAppliancePC = 0x6,
  PlatformRolePerformanceServer = 0x7,
  PlatformRoleMaximum = 0x8,
};

/* 840 */
enum _STORAGE_IDENTIFIER_TYPE : __int32
{
  StorageIdTypeVendorSpecific = 0x0,
  StorageIdTypeVendorId = 0x1,
  StorageIdTypeEUI64 = 0x2,
  StorageIdTypeFCPHName = 0x3,
  StorageIdTypePortRelative = 0x4,
  StorageIdTypeTargetPortGroup = 0x5,
  StorageIdTypeLogicalUnitGroup = 0x6,
  StorageIdTypeMD5LogicalUnitIdentifier = 0x7,
  StorageIdTypeScsiNameString = 0x8,
};

/* 841 */
enum tagMSHCTX : __int32
{
  MSHCTX_LOCAL = 0x0,
  MSHCTX_NOSHAREDMEM = 0x1,
  MSHCTX_DIFFERENTMACHINE = 0x2,
  MSHCTX_INPROC = 0x3,
  MSHCTX_CROSSCTX = 0x4,
};

/* 842 */
enum tagDVASPECT : __int32
{
  DVASPECT_CONTENT = 0x1,
  DVASPECT_THUMBNAIL = 0x2,
  DVASPECT_ICON = 0x4,
  DVASPECT_DOCPRINT = 0x8,
};

/* 843 */
enum _STORAGE_ID_NAA_FORMAT : __int32
{
  StorageIdNAAFormatIEEEExtended = 0x2,
  StorageIdNAAFormatIEEERegistered = 0x3,
  StorageIdNAAFormatIEEEERegisteredExtended = 0x5,
};

/* 844 */
enum tagSTGC : __int32
{
  STGC_DEFAULT = 0x0,
  STGC_OVERWRITE = 0x1,
  STGC_ONLYIFCURRENT = 0x2,
  STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,
  STGC_CONSOLIDATE = 0x8,
};

/* 845 */
enum _FINDEX_INFO_LEVELS : __int32
{
  FindExInfoStandard = 0x0,
  FindExInfoBasic = 0x1,
  FindExInfoMaxInfoLevel = 0x2,
};

/* 846 */
enum _STORAGE_ASSOCIATION_TYPE : __int32
{
  StorageIdAssocDevice = 0x0,
  StorageIdAssocPort = 0x1,
  StorageIdAssocTarget = 0x2,
};

/* 847 */
enum _FINDEX_SEARCH_OPS : __int32
{
  FindExSearchNameMatch = 0x0,
  FindExSearchLimitToDirectories = 0x1,
  FindExSearchLimitToDevices = 0x2,
  FindExSearchMaxSearchOp = 0x3,
};

/* 848 */
enum tagSTGMOVE : __int32
{
  STGMOVE_MOVE = 0x0,
  STGMOVE_COPY = 0x1,
  STGMOVE_SHALLOWCOPY = 0x2,
};

/* 849 */
enum tagSTATFLAG : __int32
{
  STATFLAG_DEFAULT = 0x0,
  STATFLAG_NONAME = 0x1,
  STATFLAG_NOOPEN = 0x2,
};

/* 850 */
enum _RTL_UMS_THREAD_INFO_CLASS : __int32
{
  UmsThreadInvalidInfoClass = 0x0,
  UmsThreadUserContext = 0x1,
  UmsThreadPriority = 0x2,
  UmsThreadAffinity = 0x3,
  UmsThreadTeb = 0x4,
  UmsThreadIsSuspended = 0x5,
  UmsThreadIsTerminated = 0x6,
  UmsThreadMaxInfoClass = 0x7,
};

/* 851 */
enum _RTL_UMS_SCHEDULER_REASON : __int32
{
  UmsSchedulerStartup = 0x0,
  UmsSchedulerThreadBlocked = 0x1,
  UmsSchedulerThreadYield = 0x2,
};

/* 852 */
enum _RPC_NOTIFICATION_TYPES : __int32
{
  RpcNotificationTypeNone = 0x0,
  RpcNotificationTypeEvent = 0x1,
  RpcNotificationTypeApc = 0x2,
  RpcNotificationTypeIoc = 0x3,
  RpcNotificationTypeHwnd = 0x4,
  RpcNotificationTypeCallback = 0x5,
};

/* 853 */
enum _RPC_ASYNC_EVENT : __int32
{
  RpcCallComplete = 0x0,
  RpcSendComplete = 0x1,
  RpcReceiveComplete = 0x2,
  RpcClientDisconnect = 0x3,
};

/* 854 */
enum _tagOIBDG_FLAGS : __int32
{
  OIBDG_APARTMENTTHREADED = 0x100,
  OIBDG_DATAONLY = 0x1000,
};

/* 855 */
enum tagDISCARDCACHE : __int32
{
  DISCARDCACHE_SAVEIFDIRTY = 0x0,
  DISCARDCACHE_NOSAVE = 0x1,
};

/* 856 */
enum tagRPCOPT_PROPERTIES : __int32
{
  COMBND_RPCTIMEOUT = 0x1,
  COMBND_SERVER_LOCALITY = 0x2,
};

/* 857 */
enum tagRPCOPT_SERVER_LOCALITY_VALUES : __int32
{
  SERVER_LOCALITY_PROCESS_LOCAL = 0x0,
  SERVER_LOCALITY_MACHINE_LOCAL = 0x1,
  SERVER_LOCALITY_REMOTE = 0x2,
};

/* 858 */
enum _HEAP_INFORMATION_CLASS : __int32
{
  HeapCompatibilityInformation = 0x0,
  HeapEnableTerminationOnCorruption = 0x1,
};

/* 859 */
enum _MANDATORY_LEVEL : __int32
{
  MandatoryLevelUntrusted = 0x0,
  MandatoryLevelLow = 0x1,
  MandatoryLevelMedium = 0x2,
  MandatoryLevelHigh = 0x3,
  MandatoryLevelSystem = 0x4,
  MandatoryLevelSecureProcess = 0x5,
  MandatoryLevelCount = 0x6,
};

/* 860 */
enum XLAT_SIDE : __int32
{
  XLAT_SERVER = 0x1,
  XLAT_CLIENT = 0x2,
};

/* 861 */
enum _SC_STATUS_TYPE : __int32
{
  SC_STATUS_PROCESS_INFO = 0x0,
};

/* 862 */
enum _SC_ENUM_TYPE : __int32
{
  SC_ENUM_PROCESS_INFO = 0x0,
};

/* 863 */
enum tagGLOBALOPT_PROPERTIES : __int32
{
  COMGLB_EXCEPTION_HANDLING = 0x1,
  COMGLB_APPID = 0x2,
  COMGLB_RPC_THREADPOOL_SETTING = 0x3,
};

/* 864 */
enum _ACTIVATION_CONTEXT_INFO_CLASS : __int32
{
  ActivationContextBasicInformation = 0x1,
  ActivationContextDetailedInformation = 0x2,
  AssemblyDetailedInformationInActivationContext = 0x3,
  FileInformationInAssemblyOfAssemblyInActivationContext = 0x4,
  RunlevelInformationInActivationContext = 0x5,
  CompatibilityInformationInActivationContext = 0x6,
  ActivationContextManifestResourceName = 0x7,
  MaxActivationContextInfoClass = 0x8,
  AssemblyDetailedInformationInActivationContxt = 0x3,
  FileInformationInAssemblyOfAssemblyInActivationContxt = 0x4,
};

/* 865 */
enum __MIDL_IMonikerProp_0001 : __int32
{
  MIMETYPEPROP = 0x0,
  USE_SRC_URL = 0x1,
  CLASSIDPROP = 0x2,
  TRUSTEDDOWNLOADPROP = 0x3,
  POPUPLEVELPROP = 0x4,
};

/* 866 */
enum tagGLOBALOPT_RPCTP_VALUES : __int32
{
  COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0x0,
  COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 0x1,
};

/* 867 */
enum _STREAM_INFO_LEVELS : __int32
{
  FindStreamInfoStandard = 0x0,
  FindStreamInfoMaxInfoLevel = 0x1,
};

/* 868 */
enum tagExtendedErrorParamTypes : __int32
{
  eeptAnsiString = 0x1,
  eeptUnicodeString = 0x2,
  eeptLongVal = 0x3,
  eeptShortVal = 0x4,
  eeptPointerVal = 0x5,
  eeptNone = 0x6,
  eeptBinary = 0x7,
};

/* 869 */
enum IMAGE_AUX_SYMBOL_TYPE : __int32
{
  IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 0x1,
};

/* 870 */
enum tagOLEGETMONIKER : __int32
{
  OLEGETMONIKER_ONLYIFTHERE = 0x1,
  OLEGETMONIKER_FORCEASSIGN = 0x2,
  OLEGETMONIKER_UNASSIGN = 0x3,
  OLEGETMONIKER_TEMPFORUSER = 0x4,
};

/* 871 */
enum tagOLEWHICHMK : __int32
{
  OLEWHICHMK_CONTAINER = 0x1,
  OLEWHICHMK_OBJREL = 0x2,
  OLEWHICHMK_OBJFULL = 0x3,
};

/* 872 */
enum tagUSERCLASSTYPE : __int32
{
  USERCLASSTYPE_FULL = 0x1,
  USERCLASSTYPE_SHORT = 0x2,
  USERCLASSTYPE_APPNAME = 0x3,
};

/* 873 */
enum tagOLEMISC : __int32
{
  OLEMISC_RECOMPOSEONRESIZE = 0x1,
  OLEMISC_ONLYICONIC = 0x2,
  OLEMISC_INSERTNOTREPLACE = 0x4,
  OLEMISC_STATIC = 0x8,
  OLEMISC_CANTLINKINSIDE = 0x10,
  OLEMISC_CANLINKBYOLE1 = 0x20,
  OLEMISC_ISLINKOBJECT = 0x40,
  OLEMISC_INSIDEOUT = 0x80,
  OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
  OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
  OLEMISC_INVISIBLEATRUNTIME = 0x400,
  OLEMISC_ALWAYSRUN = 0x800,
  OLEMISC_ACTSLIKEBUTTON = 0x1000,
  OLEMISC_ACTSLIKELABEL = 0x2000,
  OLEMISC_NOUIACTIVATE = 0x4000,
  OLEMISC_ALIGNABLE = 0x8000,
  OLEMISC_SIMPLEFRAME = 0x10000,
  OLEMISC_SETCLIENTSITEFIRST = 0x20000,
  OLEMISC_IMEMODE = 0x40000,
  OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
  OLEMISC_WANTSTOMENUMERGE = 0x100000,
  OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,
};

/* 874 */
enum _COMPUTER_NAME_FORMAT : __int32
{
  ComputerNameNetBIOS = 0x0,
  ComputerNameDnsHostname = 0x1,
  ComputerNameDnsDomain = 0x2,
  ComputerNameDnsFullyQualified = 0x3,
  ComputerNamePhysicalNetBIOS = 0x4,
  ComputerNamePhysicalDnsHostname = 0x5,
  ComputerNamePhysicalDnsDomain = 0x6,
  ComputerNamePhysicalDnsFullyQualified = 0x7,
  ComputerNameMax = 0x8,
};

/* 875 */
enum ACTCTX_REQUESTED_RUN_LEVEL : __int32
{
  ACTCTX_RUN_LEVEL_UNSPECIFIED = 0x0,
  ACTCTX_RUN_LEVEL_AS_INVOKER = 0x1,
  ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 0x2,
  ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 0x3,
  ACTCTX_RUN_LEVEL_NUMBERS = 0x4,
};

/* 876 */
enum _CHANGER_DEVICE_PROBLEM_TYPE : __int32
{
  DeviceProblemNone = 0x0,
  DeviceProblemHardware = 0x1,
  DeviceProblemCHMError = 0x2,
  DeviceProblemDoorOpen = 0x3,
  DeviceProblemCalibrationError = 0x4,
  DeviceProblemTargetFailure = 0x5,
  DeviceProblemCHMMoveError = 0x6,
  DeviceProblemCHMZeroError = 0x7,
  DeviceProblemCartridgeInsertError = 0x8,
  DeviceProblemPositionError = 0x9,
  DeviceProblemSensorError = 0xA,
  DeviceProblemCartridgeEjectError = 0xB,
  DeviceProblemGripperError = 0xC,
  DeviceProblemDriveError = 0xD,
};

/* 877 */
enum tagOLECLOSE : __int32
{
  OLECLOSE_SAVEIFDIRTY = 0x0,
  OLECLOSE_NOSAVE = 0x1,
  OLECLOSE_PROMPTSAVE = 0x2,
};

/* 878 */
enum _WRITE_CACHE_TYPE : __int32
{
  WriteCacheTypeUnknown = 0x0,
  WriteCacheTypeNone = 0x1,
  WriteCacheTypeWriteBack = 0x2,
  WriteCacheTypeWriteThrough = 0x3,
};

/* 879 */
enum tagADVF : __int32
{
  ADVF_NODATA = 0x1,
  ADVF_PRIMEFIRST = 0x2,
  ADVF_ONLYONCE = 0x4,
  ADVF_DATAONSTOP = 0x40,
  ADVFCACHE_NOHANDLER = 0x8,
  ADVFCACHE_FORCEBUILTIN = 0x10,
  ADVFCACHE_ONSAVE = 0x20,
};

/* 880 */
enum __MIDL_IBindStatusCallback_0001 : __int32
{
  BINDVERB_GET = 0x0,
  BINDVERB_POST = 0x1,
  BINDVERB_PUT = 0x2,
  BINDVERB_CUSTOM = 0x3,
  BINDVERB_RESERVED1 = 0x4,
};

/* 881 */
enum _WRITE_CACHE_ENABLE : __int32
{
  WriteCacheEnableUnknown = 0x0,
  WriteCacheDisabled = 0x1,
  WriteCacheEnabled = 0x2,
};

/* 882 */
enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE : __int32
{
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0x0,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 0x1,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 0x2,
};

/* 883 */
enum _WRITE_CACHE_CHANGE : __int32
{
  WriteCacheChangeUnknown = 0x0,
  WriteCacheNotChangeable = 0x1,
  WriteCacheChangeable = 0x2,
};

/* 884 */
enum __MIDL_IBindStatusCallback_0002 : __int32
{
  BINDINFOF_URLENCODESTGMEDDATA = 0x1,
  BINDINFOF_URLENCODEDEXTRAINFO = 0x2,
};

/* 885 */
enum __MIDL_IBindStatusCallback_0003 : __int32
{
  BINDF_ASYNCHRONOUS = 0x1,
  BINDF_ASYNCSTORAGE = 0x2,
  BINDF_NOPROGRESSIVERENDERING = 0x4,
  BINDF_OFFLINEOPERATION = 0x8,
  BINDF_GETNEWESTVERSION = 0x10,
  BINDF_NOWRITECACHE = 0x20,
  BINDF_NEEDFILE = 0x40,
  BINDF_PULLDATA = 0x80,
  BINDF_IGNORESECURITYPROBLEM = 0x100,
  BINDF_RESYNCHRONIZE = 0x200,
  BINDF_HYPERLINK = 0x400,
  BINDF_NO_UI = 0x800,
  BINDF_SILENTOPERATION = 0x1000,
  BINDF_PRAGMA_NO_CACHE = 0x2000,
  BINDF_GETCLASSOBJECT = 0x4000,
  BINDF_RESERVED_1 = 0x8000,
  BINDF_FREE_THREADED = 0x10000,
  BINDF_DIRECT_READ = 0x20000,
  BINDF_FORMS_SUBMIT = 0x40000,
  BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
  BINDF_FROMURLMON = 0x100000,
  BINDF_FWD_BACK = 0x200000,
  BINDF_PREFERDEFAULTHANDLER = 0x400000,
  BINDF_ENFORCERESTRICTED = 0x800000,
};

/* 886 */
enum PIPE_ATTRIBUTE_TYPE : __int32
{
  PipeAttribute = 0x0,
  PipeConnectionAttribute = 0x1,
  PipeHandleAttribute = 0x2,
};

/* 887 */
enum _WRITE_THROUGH : __int32
{
  WriteThroughUnknown = 0x0,
  WriteThroughNotSupported = 0x1,
  WriteThroughSupported = 0x2,
};

/* 888 */
enum __MIDL_IBindStatusCallback_0004 : __int32
{
  URL_ENCODING_NONE = 0x0,
  URL_ENCODING_ENABLE_UTF8 = 0x10000000,
  URL_ENCODING_DISABLE_UTF8 = 0x20000000,
};

/* 889 */
enum tagSF_TYPE : __int32
{
  SF_ERROR = 0xA,
  SF_I1 = 0x10,
  SF_I2 = 0x2,
  SF_I4 = 0x3,
  SF_I8 = 0x14,
  SF_BSTR = 0x8,
  SF_UNKNOWN = 0xD,
  SF_DISPATCH = 0x9,
  SF_VARIANT = 0xC,
  SF_RECORD = 0x24,
  SF_HAVEIID = 0x800D,
};

/* 890 */
enum tagTYMED : __int32
{
  TYMED_HGLOBAL = 0x1,
  TYMED_FILE = 0x2,
  TYMED_ISTREAM = 0x4,
  TYMED_ISTORAGE = 0x8,
  TYMED_GDI = 0x10,
  TYMED_MFPICT = 0x20,
  TYMED_ENHMF = 0x40,
  TYMED_NULL = 0x0,
};

/* 891 */
enum tagOLERENDER : __int32
{
  OLERENDER_NONE = 0x0,
  OLERENDER_DRAW = 0x1,
  OLERENDER_FORMAT = 0x2,
  OLERENDER_ASIS = 0x3,
};

/* 892 */
typedef MethodMatcher::Mode _MEDIA_TYPE;

/* 893 */
enum __MIDL_IInternetSecurityManager_0001 : __int32
{
  PUAF_DEFAULT = 0x0,
  PUAF_NOUI = 0x1,
  PUAF_ISFILE = 0x2,
  PUAF_WARN_IF_DENIED = 0x4,
  PUAF_FORCEUI_FOREGROUND = 0x8,
  PUAF_CHECK_TIFS = 0x10,
  PUAF_DONTCHECKBOXINDIALOG = 0x20,
  PUAF_TRUSTED = 0x40,
  PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
  PUAF_ENFORCERESTRICTED = 0x100,
  PUAF_NOSAVEDFILECHECK = 0x200,
  PUAF_REQUIRESAVEDFILECHECK = 0x400,
  PUAF_DONT_USE_CACHE = 0x1000,
  PUAF_RESERVED1 = 0x2000,
  PUAF_RESERVED2 = 0x4000,
  PUAF_LMZ_UNLOCKED = 0x10000,
  PUAF_LMZ_LOCKED = 0x20000,
  PUAF_DEFAULTZONEPOL = 0x40000,
  PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
  PUAF_NOUIIFLOCKED = 0x100000,
  PUAF_DRAGPROTOCOLCHECK = 0x200000,
};

/* 894 */
enum $4333ACFDA6A925D79D224936B06A3BEE : __int32
{
  JVMTI_JAVA_LANG_THREAD_STATE_MASK = 0x4B7,
  JVMTI_JAVA_LANG_THREAD_STATE_NEW = 0x0,
  JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED = 0x2,
  JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE = 0x5,
  JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED = 0x401,
  JVMTI_JAVA_LANG_THREAD_STATE_WAITING = 0x91,
  JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING = 0xA1,
};

/* 895 */
enum _HARDWARE_COUNTER_TYPE : __int32
{
  PMCCounter = 0x0,
  MaxHardwareCounterType = 0x1,
};

/* 896 */
enum __MIDL_IBindStatusCallback_0005 : __int32
{
  BINDINFO_OPTIONS_WININETFLAG = 0x10000,
  BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
  BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
  BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
  BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
  BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
  BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
  BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
  BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
  BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
  BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
  BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
  BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
  BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
  BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = 0x80000000,
};

/* 897 */
enum tagOLEUPDATE : __int32
{
  OLEUPDATE_ALWAYS = 0x1,
  OLEUPDATE_ONCALL = 0x3,
};

/* 898 */
enum __MIDL_IInternetSecurityManager_0002 : __int32
{
  PUAFOUT_DEFAULT = 0x0,
  PUAFOUT_ISLOCKZONEPOLICY = 0x1,
};

/* 899 */
enum tagOLELINKBIND : __int32
{
  OLELINKBIND_EVENIFCLASSDIFF = 0x1,
};

/* 900 */
enum tagEXTCONN : __int32
{
  EXTCONN_STRONG = 0x1,
  EXTCONN_WEAK = 0x2,
  EXTCONN_CALLABLE = 0x4,
};

/* 901 */
enum __MIDL_IInternetSecurityManager_0003 : __int32
{
  SZM_CREATE = 0x0,
  SZM_DELETE = 0x1,
};

/* 902 */
enum __MIDL_IBindStatusCallback_0006 : __int32
{
  BSCF_FIRSTDATANOTIFICATION = 0x1,
  BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
  BSCF_LASTDATANOTIFICATION = 0x4,
  BSCF_DATAFULLYAVAILABLE = 0x8,
  BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
  BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
  BSCF_64BITLENGTHDOWNLOAD = 0x40,
};

/* 903 */
enum _SID_NAME_USE : __int32
{
  SidTypeUser = 0x1,
  SidTypeGroup = 0x2,
  SidTypeDomain = 0x3,
  SidTypeAlias = 0x4,
  SidTypeWellKnownGroup = 0x5,
  SidTypeDeletedAccount = 0x6,
  SidTypeInvalid = 0x7,
  SidTypeUnknown = 0x8,
  SidTypeComputer = 0x9,
  SidTypeLabel = 0xA,
};

/* 904 */
enum _CM_SERVICE_NODE_TYPE : __int32
{
  DriverType = 0x1,
  FileSystemType = 0x2,
  Win32ServiceOwnProcess = 0x10,
  Win32ServiceShareProcess = 0x20,
  AdapterType = 0x4,
  RecognizerType = 0x8,
};

/* 905 */
enum _CM_SERVICE_LOAD_TYPE : __int32
{
  BootLoad = 0x0,
  SystemLoad = 0x1,
  AutoLoad = 0x2,
  DemandLoad = 0x3,
  DisableLoad = 0x4,
};

/* 906 */
enum tagBINDSPEED : __int32
{
  BINDSPEED_INDEFINITE = 0x1,
  BINDSPEED_MODERATE = 0x2,
  BINDSPEED_IMMEDIATE = 0x3,
};

/* 907 */
enum _EXCEPTION_DISPOSITION : __int32
{
  ExceptionContinueExecution = 0x0,
  ExceptionContinueSearch = 0x1,
  ExceptionNestedException = 0x2,
  ExceptionCollidedUnwind = 0x3,
};

/* 908 */
enum tagOLECONTF : __int32
{
  OLECONTF_EMBEDDINGS = 0x1,
  OLECONTF_LINKS = 0x2,
  OLECONTF_OTHERS = 0x4,
  OLECONTF_ONLYUSER = 0x8,
  OLECONTF_ONLYIFRUNNING = 0x10,
};

/* 909 */
enum _CM_ERROR_CONTROL_TYPE : __int32
{
  IgnoreError = 0x0,
  NormalError = 0x1,
  SevereError = 0x2,
  CriticalError = 0x3,
};

/* 910 */
enum tagLIBFLAGS : __int32
{
  LIBFLAG_FRESTRICTED = 0x1,
  LIBFLAG_FCONTROL = 0x2,
  LIBFLAG_FHIDDEN = 0x4,
  LIBFLAG_FHASDISKIMAGE = 0x8,
};

/* 911 */
enum WELL_KNOWN_SID_TYPE : __int32
{
  WinNullSid = 0x0,
  WinWorldSid = 0x1,
  WinLocalSid = 0x2,
  WinCreatorOwnerSid = 0x3,
  WinCreatorGroupSid = 0x4,
  WinCreatorOwnerServerSid = 0x5,
  WinCreatorGroupServerSid = 0x6,
  WinNtAuthoritySid = 0x7,
  WinDialupSid = 0x8,
  WinNetworkSid = 0x9,
  WinBatchSid = 0xA,
  WinInteractiveSid = 0xB,
  WinServiceSid = 0xC,
  WinAnonymousSid = 0xD,
  WinProxySid = 0xE,
  WinEnterpriseControllersSid = 0xF,
  WinSelfSid = 0x10,
  WinAuthenticatedUserSid = 0x11,
  WinRestrictedCodeSid = 0x12,
  WinTerminalServerSid = 0x13,
  WinRemoteLogonIdSid = 0x14,
  WinLogonIdsSid = 0x15,
  WinLocalSystemSid = 0x16,
  WinLocalServiceSid = 0x17,
  WinNetworkServiceSid = 0x18,
  WinBuiltinDomainSid = 0x19,
  WinBuiltinAdministratorsSid = 0x1A,
  WinBuiltinUsersSid = 0x1B,
  WinBuiltinGuestsSid = 0x1C,
  WinBuiltinPowerUsersSid = 0x1D,
  WinBuiltinAccountOperatorsSid = 0x1E,
  WinBuiltinSystemOperatorsSid = 0x1F,
  WinBuiltinPrintOperatorsSid = 0x20,
  WinBuiltinBackupOperatorsSid = 0x21,
  WinBuiltinReplicatorSid = 0x22,
  WinBuiltinPreWindows2000CompatibleAccessSid = 0x23,
  WinBuiltinRemoteDesktopUsersSid = 0x24,
  WinBuiltinNetworkConfigurationOperatorsSid = 0x25,
  WinAccountAdministratorSid = 0x26,
  WinAccountGuestSid = 0x27,
  WinAccountKrbtgtSid = 0x28,
  WinAccountDomainAdminsSid = 0x29,
  WinAccountDomainUsersSid = 0x2A,
  WinAccountDomainGuestsSid = 0x2B,
  WinAccountComputersSid = 0x2C,
  WinAccountControllersSid = 0x2D,
  WinAccountCertAdminsSid = 0x2E,
  WinAccountSchemaAdminsSid = 0x2F,
  WinAccountEnterpriseAdminsSid = 0x30,
  WinAccountPolicyAdminsSid = 0x31,
  WinAccountRasAndIasServersSid = 0x32,
  WinNTLMAuthenticationSid = 0x33,
  WinDigestAuthenticationSid = 0x34,
  WinSChannelAuthenticationSid = 0x35,
  WinThisOrganizationSid = 0x36,
  WinOtherOrganizationSid = 0x37,
  WinBuiltinIncomingForestTrustBuildersSid = 0x38,
  WinBuiltinPerfMonitoringUsersSid = 0x39,
  WinBuiltinPerfLoggingUsersSid = 0x3A,
  WinBuiltinAuthorizationAccessSid = 0x3B,
  WinBuiltinTerminalServerLicenseServersSid = 0x3C,
  WinBuiltinDCOMUsersSid = 0x3D,
  WinBuiltinIUsersSid = 0x3E,
  WinIUserSid = 0x3F,
  WinBuiltinCryptoOperatorsSid = 0x40,
  WinUntrustedLabelSid = 0x41,
  WinLowLabelSid = 0x42,
  WinMediumLabelSid = 0x43,
  WinHighLabelSid = 0x44,
  WinSystemLabelSid = 0x45,
  WinWriteRestrictedCodeSid = 0x46,
  WinCreatorOwnerRightsSid = 0x47,
  WinCacheablePrincipalsGroupSid = 0x48,
  WinNonCacheablePrincipalsGroupSid = 0x49,
  WinEnterpriseReadonlyControllersSid = 0x4A,
  WinAccountReadonlyControllersSid = 0x4B,
  WinBuiltinEventLogReadersGroup = 0x4C,
  WinNewEnterpriseReadonlyControllersSid = 0x4D,
  WinBuiltinCertSvcDComAccessGroup = 0x4E,
  WinMediumPlusLabelSid = 0x4F,
  WinLocalLogonSid = 0x50,
  WinConsoleLogonSid = 0x51,
  WinThisOrganizationCertificateSid = 0x52,
};

/* 912 */
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE : __int32
{
  LowMemoryResourceNotification = 0x0,
  HighMemoryResourceNotification = 0x1,
};

/* 913 */
enum tagDCOM_CALL_STATE : __int32
{
  DCOM_NONE = 0x0,
  DCOM_CALL_COMPLETE = 0x1,
  DCOM_CALL_CANCELED = 0x2,
};

/* 914 */
enum tagURLTEMPLATE : __int32
{
  URLTEMPLATE_CUSTOM = 0x0,
  URLTEMPLATE_PREDEFINED_MIN = 0x10000,
  URLTEMPLATE_LOW = 0x10000,
  URLTEMPLATE_MEDLOW = 0x10500,
  URLTEMPLATE_MEDIUM = 0x11000,
  URLTEMPLATE_MEDHIGH = 0x11500,
  URLTEMPLATE_HIGH = 0x12000,
  URLTEMPLATE_PREDEFINED_MAX = 0x20000,
};

/* 915 */
enum $AA44650923D3E40E8605484022547F4B : __int32
{
  JVMTI_VERSION_INTERFACE_JNI = 0x0,
  JVMTI_VERSION_INTERFACE_JVMTI = 0x30000000,
};

/* 916 */
enum __MIDL_IInternetZoneManager_0001 : __int32
{
  MAX_ZONE_PATH = 0x104,
  MAX_ZONE_DESCRIPTION = 0xC8,
};

/* 917 */
enum _PARTITION_STYLE : __int32
{
  PARTITION_STYLE_MBR = 0x0,
  PARTITION_STYLE_GPT = 0x1,
  PARTITION_STYLE_RAW = 0x2,
};

/* 918 */
enum __MIDL_IInternetZoneManager_0002 : __int32
{
  ZAFLAGS_CUSTOM_EDIT = 0x1,
  ZAFLAGS_ADD_SITES = 0x2,
  ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
  ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
  ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
  ZAFLAGS_NO_UI = 0x20,
  ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
  ZAFLAGS_UNC_AS_INTRANET = 0x80,
  ZAFLAGS_DETECT_INTRANET = 0x100,
  ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
  ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
  ZAFLAGS_NO_CACHE = 0x40000,
};

/* 919 */
enum _JOBOBJECTINFOCLASS : __int32
{
  JobObjectBasicAccountingInformation = 0x1,
  JobObjectBasicLimitInformation = 0x2,
  JobObjectBasicProcessIdList = 0x3,
  JobObjectBasicUIRestrictions = 0x4,
  JobObjectSecurityLimitInformation = 0x5,
  JobObjectEndOfJobTimeInformation = 0x6,
  JobObjectAssociateCompletionPortInformation = 0x7,
  JobObjectBasicAndIoAccountingInformation = 0x8,
  JobObjectExtendedLimitInformation = 0x9,
  JobObjectJobSetInformation = 0xA,
  JobObjectGroupInformation = 0xB,
  MaxJobObjectInfoClass = 0xC,
};

/* 920 */
enum _LOGICAL_PROCESSOR_RELATIONSHIP : __int32
{
  RelationProcessorCore = 0x0,
  RelationNumaNode = 0x1,
  RelationCache = 0x2,
  RelationProcessorPackage = 0x3,
  RelationGroup = 0x4,
  RelationAll = 0xFFFF,
};

/* 921 */
enum tagCOINIT : __int32
{
  COINIT_APARTMENTTHREADED = 0x2,
  COINIT_MULTITHREADED = 0x0,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8,
};

/* 922 */
enum __MIDL_IBindStatusCallbackEx_0001 : __int32
{
  BINDF2_DISABLEBASICOVERHTTP = 0x1,
  BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
  BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
  BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
  BINDF2_RESERVED_3 = 0x20000000,
  BINDF2_RESERVED_2 = 0x40000000,
  BINDF2_RESERVED_1 = 0x80000000,
};

/* 923 */
enum _PROCESSOR_CACHE_TYPE : __int32
{
  CacheUnified = 0x0,
  CacheInstruction = 0x1,
  CacheData = 0x2,
  CacheTrace = 0x3,
};

/* 924 */
enum tagBIND_FLAGS : __int32
{
  BIND_MAYBOTHERUSER = 0x1,
  BIND_JUSTTESTEXISTENCE = 0x2,
};

/* 925 */
enum $017F7D2FDE0E6EB18DEAEB17B076FFC0 : __int32
{
  pd_lo_word_offset_in_bytes = 0x0,
  pd_hi_word_offset_in_bytes = 0x4,
};

/* 926 */
enum $6C3B83B54C04738C649F89C256B11DC4 : __int32
{
  pd_strict_fp_requires_explicit_rounding = 0x1,
};

/* 927 */
enum RPC_ADDRESS_CHANGE_TYPE : __int32
{
  PROTOCOL_NOT_LOADED = 0x1,
  PROTOCOL_LOADED = 0x2,
  PROTOCOL_ADDRESS_CHANGE = 0x3,
};

/* 928 */
enum $51AB3E81452AC9A44B77D3C9DABF3D0B : __int32
{
  pd_float_saved_as_double = 0x1,
};

/* 929 */
enum tagCOMSD : __int32
{
  SD_LAUNCHPERMISSIONS = 0x0,
  SD_ACCESSPERMISSIONS = 0x1,
  SD_LAUNCHRESTRICTIONS = 0x2,
  SD_ACCESSRESTRICTIONS = 0x3,
};

/* 930 */
enum SYSNLS_FUNCTION : __int32
{
  COMPARE_STRING = 0x1,
};

/* 931 */
enum _TAPE_DRIVE_PROBLEM_TYPE : __int32
{
  TapeDriveProblemNone = 0x0,
  TapeDriveReadWriteWarning = 0x1,
  TapeDriveReadWriteError = 0x2,
  TapeDriveReadWarning = 0x3,
  TapeDriveWriteWarning = 0x4,
  TapeDriveReadError = 0x5,
  TapeDriveWriteError = 0x6,
  TapeDriveHardwareError = 0x7,
  TapeDriveUnsupportedMedia = 0x8,
  TapeDriveScsiConnectionError = 0x9,
  TapeDriveTimetoClean = 0xA,
  TapeDriveCleanDriveNow = 0xB,
  TapeDriveMediaLifeExpired = 0xC,
  TapeDriveSnappedTape = 0xD,
};

/* 932 */
enum __MIDL_IAuthenticateEx_0001 : __int32
{
  AUTHENTICATEF_PROXY = 0x1,
  AUTHENTICATEF_BASIC = 0x2,
  AUTHENTICATEF_HTTP = 0x4,
};

/* 933 */
enum SYSGEOTYPE : __int32
{
  GEO_NATION = 0x1,
  GEO_LATITUDE = 0x2,
  GEO_LONGITUDE = 0x3,
  GEO_ISO2 = 0x4,
  GEO_ISO3 = 0x5,
  GEO_RFC1766 = 0x6,
  GEO_LCID = 0x7,
  GEO_FRIENDLYNAME = 0x8,
  GEO_OFFICIALNAME = 0x9,
  GEO_TIMEZONES = 0xA,
  GEO_OFFICIALLANGUAGES = 0xB,
};

/* 934 */
enum SYSGEOCLASS : __int32
{
  GEOCLASS_NATION = 0x10,
  GEOCLASS_REGION = 0xE,
};

/* 935 */
enum tagSTDMSHLFLAGS : __int32
{
  SMEXF_SERVER = 0x1,
  SMEXF_HANDLER = 0x2,
};

/* 936 */
enum _DETECTION_TYPE : __int32
{
  DetectNone = 0x0,
  DetectInt13 = 0x1,
  DetectExInt13 = 0x2,
};

/* 937 */
enum tagDATADIR : __int32
{
  DATADIR_GET = 0x1,
  DATADIR_SET = 0x2,
};

/* 938 */
enum tagMKSYS : __int32
{
  MKSYS_NONE = 0x0,
  MKSYS_GENERICCOMPOSITE = 0x1,
  MKSYS_FILEMONIKER = 0x2,
  MKSYS_ANTIMONIKER = 0x3,
  MKSYS_ITEMMONIKER = 0x4,
  MKSYS_POINTERMONIKER = 0x5,
  MKSYS_CLASSMONIKER = 0x7,
  MKSYS_OBJREFMONIKER = 0x8,
  MKSYS_SESSIONMONIKER = 0x9,
  MKSYS_LUAMONIKER = 0xA,
};

/* 939 */
enum STUB_PHASE : __int32
{
  STUB_UNMARSHAL = 0x0,
  STUB_CALL_SERVER = 0x1,
  STUB_MARSHAL = 0x2,
  STUB_CALL_SERVER_NO_HRESULT = 0x3,
};

/* 940 */
enum PROXY_PHASE : __int32
{
  PROXY_CALCSIZE = 0x0,
  PROXY_GETBUFFER = 0x1,
  PROXY_MARSHAL = 0x2,
  PROXY_SENDRECEIVE = 0x3,
  PROXY_UNMARSHAL = 0x4,
};

/* 941 */
enum tagMKREDUCE : __int32
{
  MKRREDUCE_ONE = 0x30000,
  MKRREDUCE_TOUSER = 0x20000,
  MKRREDUCE_THROUGHUSER = 0x10000,
  MKRREDUCE_ALL = 0x0,
};

/* 942 */
enum _TRANSACTION_OUTCOME : __int32
{
  TransactionOutcomeUndetermined = 0x1,
  TransactionOutcomeCommitted = 0x2,
  TransactionOutcomeAborted = 0x3,
};

/* 943 */
enum _TRANSACTION_STATE : __int32
{
  TransactionStateNormal = 0x1,
  TransactionStateIndoubt = 0x2,
  TransactionStateCommittedNotify = 0x3,
};

/* 944 */
enum _STORAGE_MEDIA_TYPE : __int32
{
  DDS_4mm = 0x20,
  MiniQic = 0x21,
  Travan = 0x22,
  QIC = 0x23,
  MP_8mm = 0x24,
  AME_8mm = 0x25,
  AIT1_8mm = 0x26,
  DLT = 0x27,
  NCTP = 0x28,
  IBM_3480 = 0x29,
  IBM_3490E = 0x2A,
  IBM_Magstar_3590 = 0x2B,
  IBM_Magstar_MP = 0x2C,
  STK_DATA_D3 = 0x2D,
  SONY_DTF = 0x2E,
  DV_6mm = 0x2F,
  DMI = 0x30,
  SONY_D2 = 0x31,
  CLEANER_CARTRIDGE = 0x32,
  CD_ROM = 0x33,
  CD_R = 0x34,
  CD_RW = 0x35,
  DVD_ROM = 0x36,
  DVD_R = 0x37,
  DVD_RW = 0x38,
  MO_3_RW = 0x39,
  MO_5_WO = 0x3A,
  MO_5_RW = 0x3B,
  MO_5_LIMDOW = 0x3C,
  PC_5_WO = 0x3D,
  PC_5_RW = 0x3E,
  PD_5_RW = 0x3F,
  ABL_5_WO = 0x40,
  PINNACLE_APEX_5_RW = 0x41,
  SONY_12_WO = 0x42,
  PHILIPS_12_WO = 0x43,
  HITACHI_12_WO = 0x44,
  CYGNET_12_WO = 0x45,
  KODAK_14_WO = 0x46,
  MO_NFR_525 = 0x47,
  NIKON_12_RW = 0x48,
  IOMEGA_ZIP = 0x49,
  IOMEGA_JAZ = 0x4A,
  SYQUEST_EZ135 = 0x4B,
  SYQUEST_EZFLYER = 0x4C,
  SYQUEST_SYJET = 0x4D,
  AVATAR_F2 = 0x4E,
  MP2_8mm = 0x4F,
  DST_S = 0x50,
  DST_M = 0x51,
  DST_L = 0x52,
  VXATape_1 = 0x53,
  VXATape_2 = 0x54,
  STK_9840 = 0x55,
  LTO_Ultrium = 0x56,
  LTO_Accelis = 0x57,
  DVD_RAM = 0x58,
  AIT_8mm = 0x59,
  ADR_1 = 0x5A,
  ADR_2 = 0x5B,
  STK_9940 = 0x5C,
  SAIT = 0x5D,
  VXATape = 0x5E,
};

/* 945 */
enum tagCALLTYPE : __int32
{
  CALLTYPE_TOPLEVEL = 0x1,
  CALLTYPE_NESTED = 0x2,
  CALLTYPE_ASYNC = 0x3,
  CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,
  CALLTYPE_ASYNC_CALLPENDING = 0x5,
};

/* 946 */
enum tagTYPEFLAGS : __int32
{
  TYPEFLAG_FAPPOBJECT = 0x1,
  TYPEFLAG_FCANCREATE = 0x2,
  TYPEFLAG_FLICENSED = 0x4,
  TYPEFLAG_FPREDECLID = 0x8,
  TYPEFLAG_FHIDDEN = 0x10,
  TYPEFLAG_FCONTROL = 0x20,
  TYPEFLAG_FDUAL = 0x40,
  TYPEFLAG_FNONEXTENSIBLE = 0x80,
  TYPEFLAG_FOLEAUTOMATION = 0x100,
  TYPEFLAG_FRESTRICTED = 0x200,
  TYPEFLAG_FAGGREGATABLE = 0x400,
  TYPEFLAG_FREPLACEABLE = 0x800,
  TYPEFLAG_FDISPATCHABLE = 0x1000,
  TYPEFLAG_FREVERSEBIND = 0x2000,
  TYPEFLAG_FPROXY = 0x4000,
};

/* 947 */
enum BIDI_TYPE : __int32
{
  BIDI_NULL = 0x0,
  BIDI_INT = 0x1,
  BIDI_FLOAT = 0x2,
  BIDI_BOOL = 0x3,
  BIDI_STRING = 0x4,
  BIDI_TEXT = 0x5,
  BIDI_ENUM = 0x6,
  BIDI_BLOB = 0x7,
};

/* 948 */
enum tagSERVERCALL : __int32
{
  SERVERCALL_ISHANDLED = 0x0,
  SERVERCALL_REJECTED = 0x1,
  SERVERCALL_RETRYLATER = 0x2,
};

/* 949 */
enum tagPENDINGTYPE : __int32
{
  PENDINGTYPE_TOPLEVEL = 0x1,
  PENDINGTYPE_NESTED = 0x2,
};

/* 950 */
enum tagPENDINGMSG : __int32
{
  PENDINGMSG_CANCELCALL = 0x0,
  PENDINGMSG_WAITNOPROCESS = 0x1,
  PENDINGMSG_WAITDEFPROCESS = 0x2,
};

/* 951 */
enum tagFUNCFLAGS : __int32
{
  FUNCFLAG_FRESTRICTED = 0x1,
  FUNCFLAG_FSOURCE = 0x2,
  FUNCFLAG_FBINDABLE = 0x4,
  FUNCFLAG_FREQUESTEDIT = 0x8,
  FUNCFLAG_FDISPLAYBIND = 0x10,
  FUNCFLAG_FDEFAULTBIND = 0x20,
  FUNCFLAG_FHIDDEN = 0x40,
  FUNCFLAG_FUSESGETLASTERROR = 0x80,
  FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
  FUNCFLAG_FUIDEFAULT = 0x200,
  FUNCFLAG_FNONBROWSABLE = 0x400,
  FUNCFLAG_FREPLACEABLE = 0x800,
  FUNCFLAG_FIMMEDIATEBIND = 0x1000,
};

/* 952 */
enum DISK_CACHE_RETENTION_PRIORITY : __int32
{
  EqualPriority = 0x0,
  KeepPrefetchedData = 0x1,
  KeepReadData = 0x2,
};

/* 953 */
enum _DISK_WRITE_CACHE_STATE : __int32
{
  DiskWriteCacheNormal = 0x0,
  DiskWriteCacheForceDisable = 0x1,
  DiskWriteCacheDisableNotSupported = 0x2,
};

/* 954 */
enum _APTTYPEQUALIFIER : __int32
{
  APTTYPEQUALIFIER_NONE = 0x0,
  APTTYPEQUALIFIER_IMPLICIT_MTA = 0x1,
  APTTYPEQUALIFIER_NA_ON_MTA = 0x2,
  APTTYPEQUALIFIER_NA_ON_STA = 0x3,
  APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 0x4,
  APTTYPEQUALIFIER_NA_ON_MAINSTA = 0x5,
};

/* 955 */
enum tagVARFLAGS : __int32
{
  VARFLAG_FREADONLY = 0x1,
  VARFLAG_FSOURCE = 0x2,
  VARFLAG_FBINDABLE = 0x4,
  VARFLAG_FREQUESTEDIT = 0x8,
  VARFLAG_FDISPLAYBIND = 0x10,
  VARFLAG_FDEFAULTBIND = 0x20,
  VARFLAG_FHIDDEN = 0x40,
  VARFLAG_FRESTRICTED = 0x80,
  VARFLAG_FDEFAULTCOLLELEM = 0x100,
  VARFLAG_FUIDEFAULT = 0x200,
  VARFLAG_FNONBROWSABLE = 0x400,
  VARFLAG_FREPLACEABLE = 0x800,
  VARFLAG_FIMMEDIATEBIND = 0x1000,
};

/* 956 */
enum _APTTYPE : __int32
{
  APTTYPE_CURRENT = 0xFFFFFFFF,
  APTTYPE_STA = 0x0,
  APTTYPE_MTA = 0x1,
  APTTYPE_NA = 0x2,
  APTTYPE_MAINSTA = 0x3,
};

/* 957 */
enum _THDTYPE : __int32
{
  THDTYPE_BLOCKMESSAGES = 0x0,
  THDTYPE_PROCESSMESSAGES = 0x1,
};

/* 958 */
enum tagOLEVERBATTRIB : __int32
{
  OLEVERBATTRIB_NEVERDIRTIES = 0x1,
  OLEVERBATTRIB_ONCONTAINERMENU = 0x2,
};

/* 959 */
enum tagREGKIND : __int32
{
  REGKIND_DEFAULT = 0x0,
  REGKIND_REGISTER = 0x1,
  REGKIND_NONE = 0x2,
};

/* 960 */
enum Argument::<unnamed_tag> : __int32
{
  n_register_parameters = 0x0,
};

/* 961 */
typedef ValueStackArray::<unnamed_tag> LIR_OprRefArray::<unnamed_tag>;

/* 962 */
typedef ValueStackArray::<unnamed_tag> CodeEmitInfoArray::<unnamed_tag>;

/* 963 */
typedef NativeJump::Intel_specific_constants NativeReturn::Intel_specific_constants;

/* 964 */
enum ParallelScavengeHeap::CollectionType : __int32
{
  Scavenge = 0x0,
  MarkSweep = 0x1,
};

/* 965 */
enum __vc_attributes::pointer_defaultAttribute::type_e : __int32
{
  ptr = 0x0,
  ref = 0x1,
  unique = 0x2,
};

/* 966 */
enum __vc_attributes::threadingAttribute::threading_e : __int32
{
  apartment = 0x1,
  single = 0x2,
  free = 0x3,
  neutral = 0x4,
  both = 0x5,
};

/* 967 */
typedef Monitor::lock_types __vc_attributes::event_receiverAttribute::type_e;

/* 968 */
enum __vc_attributes::aggregatableAttribute::type_e : __int32
{
  never = 0x0,
  allowed = 0x1,
  always = 0x2,
};

/* 969 */
typedef Monitor::lock_types __vc_attributes::event_sourceAttribute::type_e;

/* 970 */
typedef Chunk::<unnamed_tag> __vc_attributes::event_sourceAttribute::optimize_e;

/* 971 */
enum __vc_attributes::moduleAttribute::type_e : __int32
{
  dll = 0x1,
  exe = 0x2,
  service = 0x3,
  unspecified = 0x4,
  EXE = 0x2,
  SERVICE = 0x3,
};

/* 972 */
enum __vc_attributes::helper_attributes::usageAttribute::usage_e : __int32
{
  eAnyUsage = 0x0,
  eCoClassUsage = 0x1,
  eCOMInterfaceUsage = 0x2,
  eInterfaceUsage = 0x6,
  eMemberUsage = 0x8,
  eMethodUsage = 0x10,
  eInterfaceMethodUsage = 0x20,
  eInterfaceMemberUsage = 0x40,
  eCoClassMemberUsage = 0x80,
  eCoClassMethodUsage = 0x100,
  eGlobalMethodUsage = 0x300,
  eGlobalDataUsage = 0x400,
  eClassUsage = 0x800,
  eInterfaceParameterUsage = 0x1000,
  eMethodParameterUsage = 0x3000,
  eIDLModuleUsage = 0x4000,
  eAnonymousUsage = 0x8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3F7FFF,
};

/* 973 */
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e : __int32
{
  eBoolean = 0x0,
  eInteger = 0x1,
  eFloat = 0x2,
  eDouble = 0x3,
};

/* 974 */
enum CMBitMapRO::<unnamed_tag> : __int32
{
  do_yield = 0x1,
};

/* 975 */
enum TruncatedSeq::PrivateConstants : __int32
{
  DefaultSeqLength = 0xA,
};

/* 976 */
typedef NativeJump::Intel_specific_constants NativeReturnX::Intel_specific_constants;

/* 977 */
enum NativeTstRegMem::Intel_specific_constants : __int32
{
  instruction_rex_prefix_mask = 0xF0,
  instruction_rex_prefix = 0x40,
  instruction_code_memXregl = 0x85,
  modrm_mask = 0x38,
  modrm_reg = 0x0,
};

/* 978 */
typedef ICache::<unnamed_tag> AbstractICache::<unnamed_tag>;

/* 979 */
enum SA_AttrTarget : __int32
{
  SA_All = 0xFFFF,
  SA_Assembly = 0x1,
  SA_Class = 0x4,
  SA_Constructor = 0x20,
  SA_Delegate = 0x1000,
  SA_Enum = 0x10,
  SA_Event = 0x200,
  SA_Field = 0x100,
  SA_GenericParameter = 0x4000,
  SA_Interface = 0x400,
  SA_Method = 0x40,
  SA_Module = 0x2,
  SA_Parameter = 0x800,
  SA_Property = 0x80,
  SA_ReturnValue = 0x2000,
  SA_Struct = 0x8,
  SA_This = 0x8000,
};

/* 980 */
enum __enative_startup_state : __int32
{
  __uninitialized = 0x0,
  __initializing = 0x1,
  __initialized = 0x2,
};

/* 981 */
enum _NT_PRODUCT_TYPE : __int32
{
  NtProductWinNt = 0x1,
  NtProductLanManNt = 0x2,
  NtProductServer = 0x3,
};

/* 982 */
enum _ALTERNATIVE_ARCHITECTURE_TYPE : __int32
{
  StandardDesign = 0x0,
  NEC98x86 = 0x1,
  EndAlternatives = 0x2,
};

/* 983 */
enum _RTC_ErrorNumber : __int32
{
  _RTC_CHKSTK = 0x0,
  _RTC_CVRT_LOSS_INFO = 0x1,
  _RTC_CORRUPT_STACK = 0x2,
  _RTC_UNINIT_LOCAL_USE = 0x3,
  _RTC_CORRUPTED_ALLOCA = 0x4,
  _RTC_ILLEGAL = 0x5,
};

/* 984 */
struct Type::TypeInfo
{
  Type::TYPES dual_type;
  BasicType basic_type;
  const char *msg;
  bool isa_oop;
  unsigned int ideal_reg;
  relocInfo::relocType reloc;
};

/* 985 */
struct __cppobj Type
{
  Type_vtbl *__vftable /*VFT*/;
  const Type *_dual;
  const Type::TYPES _base;
};

/* 986 */
struct __cppobj TypePtr : Type
{
  const int _offset;
  const TypePtr::PTR _ptr;
};

/* 987 */
struct __cppobj ResourceObj
{
};

/* 988 */
struct __cppobj ciBaseObject : ResourceObj
{
  ciBaseObject_vtbl *__vftable /*VFT*/;
  unsigned int _ident;
};

/* 989 */
struct /*VFT*/ ciBaseObject_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
};

/* 990 */
struct __cppobj _jobject
{
};

/* 991 */
struct __cppobj MetaspaceObj
{
};

/* 992 */
struct __cppobj Metadata : MetaspaceObj
{
  Metadata_vtbl *__vftable /*VFT*/;
};

/* 995 */
struct __cppobj _ValueObj
{
};

/* 996 */
struct __cppobj TimeStamp : _ValueObj
{
  __int64 _counter;
};

/* 993 */
struct __cppobj outputStream : ResourceObj
{
  outputStream_vtbl *__vftable /*VFT*/;
  int _indentation;
  int _width;
  int _position;
  int _newlines;
  unsigned __int64 _precount;
  TimeStamp _stamp;
};

/* 994 */
struct /*VFT*/ outputStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 997 */
struct /*VFT*/ Metadata_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
};

/* 998 */
struct __cppobj ciMetadata : ciBaseObject
{
  Metadata *_metadata;
};

/* 999 */
struct /*VFT*/ ciMetadata_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
};

/* 1000 */
struct __cppobj ciObject : ciBaseObject
{
  _jobject *_handle;
  ciKlass *_klass;
};

/* 1001 */
struct __cppobj ciInstance : ciObject
{
};

/* 1002 */
struct __cppobj ciType : ciMetadata
{
  BasicType _basic_type;
};

/* 1003 */
struct /*VFT*/ ciType_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
};

/* 1004 */
struct __cppobj SymbolBase : MetaspaceObj
{
  unsigned __int16 _length;
  volatile __int16 _refcount;
  int _identity_hash;
};

/* 1005 */
struct __cppobj __declspec(align(4)) Symbol : SymbolBase
{
  char _body[1];
};

/* 1006 */
struct /*VFT*/ ciSymbol_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
};

/* 1007 */
struct __cppobj ciSymbol : ciBaseObject
{
  Symbol *_symbol;
  const vmSymbols::SID _sid;
};

/* 1932 */
union oopDesc::_metadata
{
  Klass *_klass;
  unsigned int _compressed_klass;
};

/* 1008 */
struct oopDesc
{
  markOopDesc *volatile _mark;
  oopDesc::_metadata _metadata;
};

/* 1009 */
struct __cppobj markOopDesc : oopDesc
{
};

/* 1110 */
struct __cppobj AccessFlags : _ValueObj
{
  int _flags;
};

/* 1010 */
struct __cppobj __declspec(align(8)) Klass : Metadata
{
  int _layout_helper;
  unsigned int _super_check_offset;
  Symbol *_name;
  Klass *_secondary_super_cache;
  Array<Klass *> *_secondary_supers;
  Klass *_primary_supers[8];
  oopDesc *_java_mirror;
  Klass *_super;
  Klass *_subklass;
  Klass *_next_sibling;
  Klass *_next_link;
  ClassLoaderData *_class_loader_data;
  int _modifier_flags;
  AccessFlags _access_flags;
  __int64 _last_biased_lock_bulk_revocation_time;
  markOopDesc *_prototype_header;
  int _biased_lock_revocation_count;
  char _modified_oops;
  char _accumulated_modified_oops;
  __int16 _shared_class_path_index;
};

/* 1011 */
struct __cppobj Array<Klass *> : MetaspaceObj
{
  int _length;
  Klass *_data[1];
};

/* 1012 */
struct __cppobj CHeapObj<1>
{
};

/* 1013 */
struct __cppobj arrayOopDesc : oopDesc
{
};

/* 1014 */
struct __cppobj objArrayOopDesc : arrayOopDesc
{
};

/* 1015 */
struct __cppobj ClassLoaderData::Dependencies : _ValueObj
{
  objArrayOopDesc *_list_head;
};

/* 1016 */
struct __cppobj CHeapObj<7>
{
};

/* 1017 */
union SplitWord
{
  volatile int FullWord;
  volatile void *Address;
  volatile char Bytes[4];
};

/* 1018 */
struct __cppobj CHeapObj<2>
{
};

/* 1019 */
struct __cppobj ThreadShadow : CHeapObj<2>
{
  ThreadShadow_vtbl *__vftable /*VFT*/;
  oopDesc *_pending_exception;
  const char *_exception_file;
  int _exception_line;
};

/* 1020 */
struct /*VFT*/ ThreadShadow_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
};

/* 1021 */
struct __cppobj Monitor : CHeapObj<7>
{
  SplitWord _LockWord;
  Thread *volatile _owner;
  ParkEvent *volatile _EntryList;
  ParkEvent *volatile _OnDeck;
  volatile int _WaitLock[1];
  ParkEvent *volatile _WaitSet;
  volatile bool _snuck;
  int NotifyCount;
  char _name[64];
};

/* 1022 */
struct __cppobj JNIHandleBlock : CHeapObj<7>
{
  oopDesc *_handles[32];
  int _top;
  JNIHandleBlock *_next;
  JNIHandleBlock *_last;
  JNIHandleBlock *_pop_frame_link;
  oopDesc **_free_list;
  int _allocate_before_rebuild;
  unsigned int _planned_capacity;
};

/* 1031 */
struct __cppobj CHeapObj<5>
{
};

/* 1032 */
struct __cppobj AdaptiveWeightedAverage : CHeapObj<5>
{
  float _average;
  unsigned int _sample_count;
  unsigned int _weight;
  bool _is_old;
  float _last_sample;
};

/* 1033 */
struct __cppobj __declspec(align(4)) ThreadLocalAllocBuffer : CHeapObj<2>
{
  HeapWord *_start;
  HeapWord *_top;
  HeapWord *_pf_top;
  HeapWord *_end;
  unsigned int _desired_size;
  unsigned int _refill_waste_limit;
  unsigned int _allocated_before_last_gc;
  unsigned int _number_of_refills;
  unsigned int _fast_refill_waste;
  unsigned int _slow_refill_waste;
  unsigned int _gc_waste;
  unsigned int _slow_allocations;
  AdaptiveWeightedAverage _allocation_fraction;
  bool _gclab;
  bool _initialized;
};

/* 1035 */
struct __cppobj ThreadExt : _ValueObj
{
};

/* 1023 */
struct __cppobj __declspec(align(8)) Thread : ThreadShadow
{
  char _gc_state;
  void *_real_malloc_address;
  Monitor *_SR_lock;
  volatile unsigned int _suspend_flags;
  int _num_nested_signal;
  JNIHandleBlock *_active_handles;
  JNIHandleBlock *_free_handle_block;
  HandleMark *_last_handle_mark;
  int _oops_do_parity;
  ThreadLocalAllocBuffer _tlab;
  ThreadLocalAllocBuffer _gclab;
  unsigned int _worker_id;
  bool _force_satb_flush;
  __int64 _allocated_bytes;
  __int64 _allocated_bytes_gclab;
  ChunkedList<Metadata *,7> *_metadata_on_stack_buffer;
  ThreadExt _ext;
  int _vm_operation_started_count;
  int _vm_operation_completed_count;
  char _oom_during_evac;
  ObjectMonitor *_current_pending_monitor;
  bool _current_pending_monitor_is_from_java;
  ObjectMonitor *_current_waiting_monitor;
  ObjectMonitor *omFreeList;
  int omFreeCount;
  int omFreeProvision;
  ObjectMonitor *omInUseList;
  int omInUseCount;
  OSThread *_osthread;
  ResourceArea *_resource_area;
  HandleArea *_handle_area;
  GrowableArray<Metadata *> *_metadata_handles;
  unsigned __int8 *_stack_base;
  unsigned int _stack_size;
  unsigned int _self_raw_id;
  int _lgrp_id;
  volatile int _jvmti_env_iteration_count;
  volatile int _Stalled;
  volatile int _TypeTag;
  ParkEvent *_ParkEvent;
  ParkEvent *_SleepEvent;
  ParkEvent *_MutexEvent;
  ParkEvent *_MuxEvent;
  int NativeSyncRecursion;
  volatile int _OnTrap;
  int _hashStateW;
  int _hashStateX;
  int _hashStateY;
  int _hashStateZ;
  void *_schedctl;
  volatile int rng[4];
};

/* 1024 */
struct __cppobj CHeapObj<15>
{
};

/* 1025 */
struct __cppobj CHeapObj<12>
{
};

/* 1026 */
struct __cppobj Chunk : CHeapObj<12>
{
  Chunk *_next;
  const unsigned int _len;
};

/* 1027 */
struct __cppobj Arena : CHeapObj<15>
{
  MemoryType _flags;
  Chunk *_first;
  Chunk *_chunk;
  char *_hwm;
  char *_max;
  unsigned int _size_in_bytes;
};

/* 1028 */
struct __cppobj HandleArea : Arena
{
  HandleArea *_prev;
};

/* 1029 */
struct __cppobj HandleMark
{
  Thread *_thread;
  HandleArea *_area;
  Chunk *_chunk;
  char *_hwm;
  char *_max;
  unsigned int _size_in_bytes;
  HandleMark *_previous_handle_mark;
};

/* 1030 */
struct HeapWord
{
  char *i;
};

/* 1034 */
struct __cppobj ChunkedList<Metadata *,7> : CHeapObj<7>
{
  Metadata *_values[64];
  Metadata **_top;
  ChunkedList<Metadata *,7> *_next_used;
  ChunkedList<Metadata *,7> *_next_free;
};

/* 1036 */
struct __cppobj StackObj
{
};

/* 1037 */
struct __cppobj __declspec(align(8)) ObjectWaiter : StackObj
{
  ObjectWaiter *volatile _next;
  ObjectWaiter *volatile _prev;
  Thread *_thread;
  __int64 _notifier_tid;
  ParkEvent *_event;
  volatile int _notified;
  volatile ObjectWaiter::TStates TState;
  ObjectWaiter::Sorted _Sorted;
  bool _active;
};

/* 1038 */
struct __cppobj os::PlatformEvent : CHeapObj<7>
{
  long double CachePad[4];
  volatile int _Event;
  void *_ParkHandle;
};

/* 1039 */
struct __cppobj __declspec(align(8)) ParkEvent : os::PlatformEvent
{
  ParkEvent *FreeNext;
  Thread *AssociatedWith;
  int RawThreadIdentity;
  volatile int Incarnation;
  void *LastWaker;
  ParkEvent *volatile ListNext;
  ParkEvent *volatile ListPrev;
  volatile int OnList;
  volatile int TState;
  volatile int Notified;
  volatile int IsWaiting;
};

/* 1040 */
struct __cppobj ObjectMonitor
{
  markOopDesc *volatile _header;
  void *volatile _object;
  long double SharingPad[1];
  void *volatile _owner;
  volatile __int64 _previous_owner_tid;
  volatile int _recursions;
  int OwnerIsThread;
  ObjectWaiter *volatile _cxq;
  ObjectWaiter *volatile _EntryList;
  Thread *volatile _succ;
  Thread *volatile _Responsible;
  int _PromptDrain;
  volatile int _Spinner;
  volatile int _SpinFreq;
  volatile int _SpinClock;
  volatile int _SpinDuration;
  volatile int _SpinState;
  volatile int _count;
  volatile int _waiters;
  ObjectWaiter *volatile _WaitSet;
  volatile int _WaitSetLock;
  int _QMix;
  ObjectMonitor *FreeNext;
  int StatA;
  int StatsB;
};

/* 1042 */
struct __cppobj JavaFrameAnchor : _ValueObj
{
  int *volatile _last_Java_sp;
  unsigned __int8 *volatile _last_Java_pc;
  int *volatile _last_Java_fp;
};

/* 1043 */
struct JNIEnv_
{
  const JNINativeInterface_ *functions;
};

/* 1218 */
struct __cppobj MemRegion : _ValueObj
{
  HeapWord *_start;
  unsigned int _word_size;
};

/* 1220 */
struct __cppobj PtrQueue : _ValueObj
{
  PtrQueue_vtbl *__vftable /*VFT*/;
  PtrQueueSet *_qset;
  bool _active;
  void **_buf;
  unsigned int _index;
  unsigned int _sz;
  bool _perm;
  Mutex *_lock;
};

/* 1226 */
struct __cppobj ObjPtrQueue : PtrQueue
{
};

/* 1228 */
struct __cppobj DirtyCardQueue : PtrQueue
{
};

/* 1041 */
struct __cppobj JavaThread : Thread
{
  JavaThread *_next;
  oopDesc *_threadObj;
  JavaFrameAnchor _anchor;
  void (__cdecl *_entry_point)(JavaThread *, Thread *);
  JNIEnv_ _jni_environment;
  DeoptResourceMark *_deopt_mark;
  int *_must_deopt_id;
  nmethod *_deopt_nmethod;
  vframeArray *_vframe_array_head;
  vframeArray *_vframe_array_last;
  GrowableArray<jvmtiDeferredLocalVariableSet *> *_deferred_locals_updates;
  Method *_callee_target;
  oopDesc *_vm_result;
  Metadata *_vm_result_2;
  MemRegion _deferred_card_mark;
  MonitorChunk *_monitor_chunks;
  JavaThread::AsyncRequests _special_runtime_exit_condition;
  oopDesc *_pending_async_exception;
  volatile JavaThreadState _thread_state;
  ThreadSafepointState *_safepoint_state;
  unsigned __int8 *_saved_exception_pc;
  volatile JavaThread::TerminatedTypes _terminated;
  volatile bool _suspend_equivalent;
  int _in_deopt_handler;
  volatile bool _doing_unsafe_access;
  bool _do_not_unlock_if_synchronized;
  volatile JavaThread::JNIAttachStates _jni_attach_state;
  JavaThread::StackGuardState _stack_guard_state;
  unsigned __int8 *_stack_overflow_limit;
  oopDesc *volatile _exception_oop;
  unsigned __int8 *volatile _exception_pc;
  unsigned __int8 *volatile _exception_handler_pc;
  volatile int _is_method_handle_return;
  int _jni_active_critical;
  char *_pending_jni_exception_check_fn;
  int _depth_first_number;
  int _popframe_condition;
  int _frames_to_pop_failed_realloc;
  ObjPtrQueue _satb_mark_queue;
  DirtyCardQueue _dirty_card_queue;
  ThreadProfiler *_thread_profiler;
  PrivilegedElement *_privileged_stack_top;
  GrowableArray<oopDesc *> *_array_for_gc;
  void *_popframe_preserved_args;
  int _popframe_preserved_args_size;
  JvmtiThreadState *_jvmti_thread_state;
  JvmtiGetLoadedClassesClosure *_jvmti_get_loaded_classes_closure;
  int _interp_only_mode;
  int _should_post_on_exceptions_flag;
  ThreadStatistics *_thread_stat;
  bool _blocked_on_compilation;
  Parker *_parker;
  GrowableArray<MonitorInfo *> *_cached_monitor_info;
  unsigned int _claimed_par_id;
};

/* 1044 */
struct __cppobj _jclass : _jobject
{
};

/* 1045 */
struct __cppobj _jthrowable : _jobject
{
};

/* 1046 */
const union jvalue
{
  unsigned __int8 z;
  char b;
  unsigned __int16 c;
  __int16 s;
  int i;
  __int64 j;
  float f;
  long double d;
  _jobject *l;
};

/* 1047 */
struct __cppobj _jstring : _jobject
{
};

/* 1048 */
struct __cppobj _jarray : _jobject
{
};

/* 1049 */
struct __cppobj _jobjectArray : _jarray
{
};

/* 1050 */
struct __cppobj _jbooleanArray : _jarray
{
};

/* 1051 */
struct __cppobj _jbyteArray : _jarray
{
};

/* 1052 */
struct __cppobj _jcharArray : _jarray
{
};

/* 1053 */
struct __cppobj _jshortArray : _jarray
{
};

/* 1054 */
struct __cppobj _jintArray : _jarray
{
};

/* 1055 */
struct __cppobj _jlongArray : _jarray
{
};

/* 1056 */
struct __cppobj _jfloatArray : _jarray
{
};

/* 1057 */
struct __cppobj _jdoubleArray : _jarray
{
};

/* 1058 */
const struct JNINativeMethod
{
  char *name;
  char *signature;
  void *fnPtr;
};

/* 1059 */
struct JavaVM_
{
  const JNIInvokeInterface_ *functions;
};

/* 1060 */
const struct JNIInvokeInterface_
{
  void *reserved0;
  void *reserved1;
  void *reserved2;
  int (__stdcall *DestroyJavaVM)(JavaVM_ *);
  int (__stdcall *AttachCurrentThread)(JavaVM_ *, void **, void *);
  int (__stdcall *DetachCurrentThread)(JavaVM_ *);
  int (__stdcall *GetEnv)(JavaVM_ *, void **, int);
  int (__stdcall *AttachCurrentThreadAsDaemon)(JavaVM_ *, void **, void *);
};

/* 1061 */
const struct JNINativeInterface_
{
  void *reserved0;
  void *reserved1;
  void *reserved2;
  void *reserved3;
  int (__stdcall *GetVersion)(JNIEnv_ *);
  _jclass *(__stdcall *DefineClass)(JNIEnv_ *, const char *, _jobject *, const char *, int);
  _jclass *(__stdcall *FindClass)(JNIEnv_ *, const char *);
  struct _jmethodID *(__stdcall *FromReflectedMethod)(JNIEnv_ *, _jobject *);
  struct _jfieldID *(__stdcall *FromReflectedField)(JNIEnv_ *, _jobject *);
  _jobject *(__stdcall *ToReflectedMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, unsigned __int8);
  _jclass *(__stdcall *GetSuperclass)(JNIEnv_ *, _jclass *);
  unsigned __int8 (__stdcall *IsAssignableFrom)(JNIEnv_ *, _jclass *, _jclass *);
  _jobject *(__stdcall *ToReflectedField)(JNIEnv_ *, _jclass *, struct _jfieldID *, unsigned __int8);
  int (__stdcall *Throw)(JNIEnv_ *, _jthrowable *);
  int (__stdcall *ThrowNew)(JNIEnv_ *, _jclass *, const char *);
  _jthrowable *(__stdcall *ExceptionOccurred)(JNIEnv_ *);
  void (__stdcall *ExceptionDescribe)(JNIEnv_ *);
  void (__stdcall *ExceptionClear)(JNIEnv_ *);
  void (__stdcall *FatalError)(JNIEnv_ *, const char *);
  int (__stdcall *PushLocalFrame)(JNIEnv_ *, int);
  _jobject *(__stdcall *PopLocalFrame)(JNIEnv_ *, _jobject *);
  _jobject *(__stdcall *NewGlobalRef)(JNIEnv_ *, _jobject *);
  void (__stdcall *DeleteGlobalRef)(JNIEnv_ *, _jobject *);
  void (__stdcall *DeleteLocalRef)(JNIEnv_ *, _jobject *);
  unsigned __int8 (__stdcall *IsSameObject)(JNIEnv_ *, _jobject *, _jobject *);
  _jobject *(__stdcall *NewLocalRef)(JNIEnv_ *, _jobject *);
  int (__stdcall *EnsureLocalCapacity)(JNIEnv_ *, int);
  _jobject *(__stdcall *AllocObject)(JNIEnv_ *, _jclass *);
  _jobject *(*NewObject)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  _jobject *(__stdcall *NewObjectV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  _jobject *(__stdcall *NewObjectA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  _jclass *(__stdcall *GetObjectClass)(JNIEnv_ *, _jobject *);
  unsigned __int8 (__stdcall *IsInstanceOf)(JNIEnv_ *, _jobject *, _jclass *);
  struct _jmethodID *(__stdcall *GetMethodID)(JNIEnv_ *, _jclass *, const char *, const char *);
  _jobject *(*CallObjectMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  _jobject *(__stdcall *CallObjectMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  _jobject *(__stdcall *CallObjectMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  unsigned __int8 (*CallBooleanMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  unsigned __int8 (__stdcall *CallBooleanMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  unsigned __int8 (__stdcall *CallBooleanMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  char (*CallByteMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  char (__stdcall *CallByteMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  char (__stdcall *CallByteMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  unsigned __int16 (*CallCharMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  unsigned __int16 (__stdcall *CallCharMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  unsigned __int16 (__stdcall *CallCharMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  __int16 (*CallShortMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  __int16 (__stdcall *CallShortMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  __int16 (__stdcall *CallShortMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  int (*CallIntMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  int (__stdcall *CallIntMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  int (__stdcall *CallIntMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  __int64 (*CallLongMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  __int64 (__stdcall *CallLongMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  __int64 (__stdcall *CallLongMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  float (*CallFloatMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  float (__stdcall *CallFloatMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  float (__stdcall *CallFloatMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  long double (*CallDoubleMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  long double (__stdcall *CallDoubleMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  long double (__stdcall *CallDoubleMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  void (*CallVoidMethod)(JNIEnv_ *, _jobject *, struct _jmethodID *, ...);
  void (__stdcall *CallVoidMethodV)(JNIEnv_ *, _jobject *, struct _jmethodID *, char *);
  void (__stdcall *CallVoidMethodA)(JNIEnv_ *, _jobject *, struct _jmethodID *, const jvalue *);
  _jobject *(*CallNonvirtualObjectMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  _jobject *(__stdcall *CallNonvirtualObjectMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  _jobject *(__stdcall *CallNonvirtualObjectMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  unsigned __int8 (*CallNonvirtualBooleanMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  unsigned __int8 (__stdcall *CallNonvirtualBooleanMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  unsigned __int8 (__stdcall *CallNonvirtualBooleanMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  char (*CallNonvirtualByteMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  char (__stdcall *CallNonvirtualByteMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  char (__stdcall *CallNonvirtualByteMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  unsigned __int16 (*CallNonvirtualCharMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  unsigned __int16 (__stdcall *CallNonvirtualCharMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  unsigned __int16 (__stdcall *CallNonvirtualCharMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  __int16 (*CallNonvirtualShortMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  __int16 (__stdcall *CallNonvirtualShortMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  __int16 (__stdcall *CallNonvirtualShortMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  int (*CallNonvirtualIntMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  int (__stdcall *CallNonvirtualIntMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  int (__stdcall *CallNonvirtualIntMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  __int64 (*CallNonvirtualLongMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  __int64 (__stdcall *CallNonvirtualLongMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  __int64 (__stdcall *CallNonvirtualLongMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  float (*CallNonvirtualFloatMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  float (__stdcall *CallNonvirtualFloatMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  float (__stdcall *CallNonvirtualFloatMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  long double (*CallNonvirtualDoubleMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  long double (__stdcall *CallNonvirtualDoubleMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  long double (__stdcall *CallNonvirtualDoubleMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  void (*CallNonvirtualVoidMethod)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, ...);
  void (__stdcall *CallNonvirtualVoidMethodV)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, char *);
  void (__stdcall *CallNonvirtualVoidMethodA)(JNIEnv_ *, _jobject *, _jclass *, struct _jmethodID *, const jvalue *);
  struct _jfieldID *(__stdcall *GetFieldID)(JNIEnv_ *, _jclass *, const char *, const char *);
  _jobject *(__stdcall *GetObjectField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  unsigned __int8 (__stdcall *GetBooleanField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  char (__stdcall *GetByteField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  unsigned __int16 (__stdcall *GetCharField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  __int16 (__stdcall *GetShortField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  int (__stdcall *GetIntField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  __int64 (__stdcall *GetLongField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  float (__stdcall *GetFloatField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  long double (__stdcall *GetDoubleField)(JNIEnv_ *, _jobject *, struct _jfieldID *);
  void (__stdcall *SetObjectField)(JNIEnv_ *, _jobject *, struct _jfieldID *, _jobject *);
  void (__stdcall *SetBooleanField)(JNIEnv_ *, _jobject *, struct _jfieldID *, unsigned __int8);
  void (__stdcall *SetByteField)(JNIEnv_ *, _jobject *, struct _jfieldID *, char);
  void (__stdcall *SetCharField)(JNIEnv_ *, _jobject *, struct _jfieldID *, unsigned __int16);
  void (__stdcall *SetShortField)(JNIEnv_ *, _jobject *, struct _jfieldID *, __int16);
  void (__stdcall *SetIntField)(JNIEnv_ *, _jobject *, struct _jfieldID *, int);
  void (__stdcall *SetLongField)(JNIEnv_ *, _jobject *, struct _jfieldID *, __int64);
  void (__stdcall *SetFloatField)(JNIEnv_ *, _jobject *, struct _jfieldID *, float);
  void (__stdcall *SetDoubleField)(JNIEnv_ *, _jobject *, struct _jfieldID *, long double);
  struct _jmethodID *(__stdcall *GetStaticMethodID)(JNIEnv_ *, _jclass *, const char *, const char *);
  _jobject *(*CallStaticObjectMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  _jobject *(__stdcall *CallStaticObjectMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  _jobject *(__stdcall *CallStaticObjectMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  unsigned __int8 (*CallStaticBooleanMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  unsigned __int8 (__stdcall *CallStaticBooleanMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  unsigned __int8 (__stdcall *CallStaticBooleanMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  char (*CallStaticByteMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  char (__stdcall *CallStaticByteMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  char (__stdcall *CallStaticByteMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  unsigned __int16 (*CallStaticCharMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  unsigned __int16 (__stdcall *CallStaticCharMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  unsigned __int16 (__stdcall *CallStaticCharMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  __int16 (*CallStaticShortMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  __int16 (__stdcall *CallStaticShortMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  __int16 (__stdcall *CallStaticShortMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  int (*CallStaticIntMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  int (__stdcall *CallStaticIntMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  int (__stdcall *CallStaticIntMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  __int64 (*CallStaticLongMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  __int64 (__stdcall *CallStaticLongMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  __int64 (__stdcall *CallStaticLongMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  float (*CallStaticFloatMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  float (__stdcall *CallStaticFloatMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  float (__stdcall *CallStaticFloatMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  long double (*CallStaticDoubleMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  long double (__stdcall *CallStaticDoubleMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  long double (__stdcall *CallStaticDoubleMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  void (*CallStaticVoidMethod)(JNIEnv_ *, _jclass *, struct _jmethodID *, ...);
  void (__stdcall *CallStaticVoidMethodV)(JNIEnv_ *, _jclass *, struct _jmethodID *, char *);
  void (__stdcall *CallStaticVoidMethodA)(JNIEnv_ *, _jclass *, struct _jmethodID *, const jvalue *);
  struct _jfieldID *(__stdcall *GetStaticFieldID)(JNIEnv_ *, _jclass *, const char *, const char *);
  _jobject *(__stdcall *GetStaticObjectField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  unsigned __int8 (__stdcall *GetStaticBooleanField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  char (__stdcall *GetStaticByteField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  unsigned __int16 (__stdcall *GetStaticCharField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  __int16 (__stdcall *GetStaticShortField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  int (__stdcall *GetStaticIntField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  __int64 (__stdcall *GetStaticLongField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  float (__stdcall *GetStaticFloatField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  long double (__stdcall *GetStaticDoubleField)(JNIEnv_ *, _jclass *, struct _jfieldID *);
  void (__stdcall *SetStaticObjectField)(JNIEnv_ *, _jclass *, struct _jfieldID *, _jobject *);
  void (__stdcall *SetStaticBooleanField)(JNIEnv_ *, _jclass *, struct _jfieldID *, unsigned __int8);
  void (__stdcall *SetStaticByteField)(JNIEnv_ *, _jclass *, struct _jfieldID *, char);
  void (__stdcall *SetStaticCharField)(JNIEnv_ *, _jclass *, struct _jfieldID *, unsigned __int16);
  void (__stdcall *SetStaticShortField)(JNIEnv_ *, _jclass *, struct _jfieldID *, __int16);
  void (__stdcall *SetStaticIntField)(JNIEnv_ *, _jclass *, struct _jfieldID *, int);
  void (__stdcall *SetStaticLongField)(JNIEnv_ *, _jclass *, struct _jfieldID *, __int64);
  void (__stdcall *SetStaticFloatField)(JNIEnv_ *, _jclass *, struct _jfieldID *, float);
  void (__stdcall *SetStaticDoubleField)(JNIEnv_ *, _jclass *, struct _jfieldID *, long double);
  _jstring *(__stdcall *NewString)(JNIEnv_ *, const unsigned __int16 *, int);
  int (__stdcall *GetStringLength)(JNIEnv_ *, _jstring *);
  const unsigned __int16 *(__stdcall *GetStringChars)(JNIEnv_ *, _jstring *, unsigned __int8 *);
  void (__stdcall *ReleaseStringChars)(JNIEnv_ *, _jstring *, const unsigned __int16 *);
  _jstring *(__stdcall *NewStringUTF)(JNIEnv_ *, const char *);
  int (__stdcall *GetStringUTFLength)(JNIEnv_ *, _jstring *);
  const char *(__stdcall *GetStringUTFChars)(JNIEnv_ *, _jstring *, unsigned __int8 *);
  void (__stdcall *ReleaseStringUTFChars)(JNIEnv_ *, _jstring *, const char *);
  int (__stdcall *GetArrayLength)(JNIEnv_ *, _jarray *);
  _jobjectArray *(__stdcall *NewObjectArray)(JNIEnv_ *, int, _jclass *, _jobject *);
  _jobject *(__stdcall *GetObjectArrayElement)(JNIEnv_ *, _jobjectArray *, int);
  void (__stdcall *SetObjectArrayElement)(JNIEnv_ *, _jobjectArray *, int, _jobject *);
  _jbooleanArray *(__stdcall *NewBooleanArray)(JNIEnv_ *, int);
  _jbyteArray *(__stdcall *NewByteArray)(JNIEnv_ *, int);
  _jcharArray *(__stdcall *NewCharArray)(JNIEnv_ *, int);
  _jshortArray *(__stdcall *NewShortArray)(JNIEnv_ *, int);
  _jintArray *(__stdcall *NewIntArray)(JNIEnv_ *, int);
  _jlongArray *(__stdcall *NewLongArray)(JNIEnv_ *, int);
  _jfloatArray *(__stdcall *NewFloatArray)(JNIEnv_ *, int);
  _jdoubleArray *(__stdcall *NewDoubleArray)(JNIEnv_ *, int);
  unsigned __int8 *(__stdcall *GetBooleanArrayElements)(JNIEnv_ *, _jbooleanArray *, unsigned __int8 *);
  char *(__stdcall *GetByteArrayElements)(JNIEnv_ *, _jbyteArray *, unsigned __int8 *);
  unsigned __int16 *(__stdcall *GetCharArrayElements)(JNIEnv_ *, _jcharArray *, unsigned __int8 *);
  __int16 *(__stdcall *GetShortArrayElements)(JNIEnv_ *, _jshortArray *, unsigned __int8 *);
  int *(__stdcall *GetIntArrayElements)(JNIEnv_ *, _jintArray *, unsigned __int8 *);
  __int64 *(__stdcall *GetLongArrayElements)(JNIEnv_ *, _jlongArray *, unsigned __int8 *);
  float *(__stdcall *GetFloatArrayElements)(JNIEnv_ *, _jfloatArray *, unsigned __int8 *);
  long double *(__stdcall *GetDoubleArrayElements)(JNIEnv_ *, _jdoubleArray *, unsigned __int8 *);
  void (__stdcall *ReleaseBooleanArrayElements)(JNIEnv_ *, _jbooleanArray *, unsigned __int8 *, int);
  void (__stdcall *ReleaseByteArrayElements)(JNIEnv_ *, _jbyteArray *, char *, int);
  void (__stdcall *ReleaseCharArrayElements)(JNIEnv_ *, _jcharArray *, unsigned __int16 *, int);
  void (__stdcall *ReleaseShortArrayElements)(JNIEnv_ *, _jshortArray *, __int16 *, int);
  void (__stdcall *ReleaseIntArrayElements)(JNIEnv_ *, _jintArray *, int *, int);
  void (__stdcall *ReleaseLongArrayElements)(JNIEnv_ *, _jlongArray *, __int64 *, int);
  void (__stdcall *ReleaseFloatArrayElements)(JNIEnv_ *, _jfloatArray *, float *, int);
  void (__stdcall *ReleaseDoubleArrayElements)(JNIEnv_ *, _jdoubleArray *, long double *, int);
  void (__stdcall *GetBooleanArrayRegion)(JNIEnv_ *, _jbooleanArray *, int, int, unsigned __int8 *);
  void (__stdcall *GetByteArrayRegion)(JNIEnv_ *, _jbyteArray *, int, int, char *);
  void (__stdcall *GetCharArrayRegion)(JNIEnv_ *, _jcharArray *, int, int, unsigned __int16 *);
  void (__stdcall *GetShortArrayRegion)(JNIEnv_ *, _jshortArray *, int, int, __int16 *);
  void (__stdcall *GetIntArrayRegion)(JNIEnv_ *, _jintArray *, int, int, int *);
  void (__stdcall *GetLongArrayRegion)(JNIEnv_ *, _jlongArray *, int, int, __int64 *);
  void (__stdcall *GetFloatArrayRegion)(JNIEnv_ *, _jfloatArray *, int, int, float *);
  void (__stdcall *GetDoubleArrayRegion)(JNIEnv_ *, _jdoubleArray *, int, int, long double *);
  void (__stdcall *SetBooleanArrayRegion)(JNIEnv_ *, _jbooleanArray *, int, int, const unsigned __int8 *);
  void (__stdcall *SetByteArrayRegion)(JNIEnv_ *, _jbyteArray *, int, int, const char *);
  void (__stdcall *SetCharArrayRegion)(JNIEnv_ *, _jcharArray *, int, int, const unsigned __int16 *);
  void (__stdcall *SetShortArrayRegion)(JNIEnv_ *, _jshortArray *, int, int, const __int16 *);
  void (__stdcall *SetIntArrayRegion)(JNIEnv_ *, _jintArray *, int, int, const int *);
  void (__stdcall *SetLongArrayRegion)(JNIEnv_ *, _jlongArray *, int, int, const __int64 *);
  void (__stdcall *SetFloatArrayRegion)(JNIEnv_ *, _jfloatArray *, int, int, const float *);
  void (__stdcall *SetDoubleArrayRegion)(JNIEnv_ *, _jdoubleArray *, int, int, const long double *);
  int (__stdcall *RegisterNatives)(JNIEnv_ *, _jclass *, const JNINativeMethod *, int);
  int (__stdcall *UnregisterNatives)(JNIEnv_ *, _jclass *);
  int (__stdcall *MonitorEnter)(JNIEnv_ *, _jobject *);
  int (__stdcall *MonitorExit)(JNIEnv_ *, _jobject *);
  int (__stdcall *GetJavaVM)(JNIEnv_ *, JavaVM_ **);
  void (__stdcall *GetStringRegion)(JNIEnv_ *, _jstring *, int, int, unsigned __int16 *);
  void (__stdcall *GetStringUTFRegion)(JNIEnv_ *, _jstring *, int, int, char *);
  void *(__stdcall *GetPrimitiveArrayCritical)(JNIEnv_ *, _jarray *, unsigned __int8 *);
  void (__stdcall *ReleasePrimitiveArrayCritical)(JNIEnv_ *, _jarray *, void *, int);
  const unsigned __int16 *(__stdcall *GetStringCritical)(JNIEnv_ *, _jstring *, unsigned __int8 *);
  void (__stdcall *ReleaseStringCritical)(JNIEnv_ *, _jstring *, const unsigned __int16 *);
  _jobject *(__stdcall *NewWeakGlobalRef)(JNIEnv_ *, _jobject *);
  void (__stdcall *DeleteWeakGlobalRef)(JNIEnv_ *, _jobject *);
  unsigned __int8 (__stdcall *ExceptionCheck)(JNIEnv_ *);
  _jobject *(__stdcall *NewDirectByteBuffer)(JNIEnv_ *, void *, __int64);
  void *(__stdcall *GetDirectBufferAddress)(JNIEnv_ *, _jobject *);
  __int64 (__stdcall *GetDirectBufferCapacity)(JNIEnv_ *, _jobject *);
  _jobjectType (__stdcall *GetObjectRefType)(JNIEnv_ *, _jobject *);
};

/* 1062 */
struct __cppobj ResourceArea : Arena
{
};

/* 1063 */
struct __cppobj DeoptResourceMark : CHeapObj<7>
{
  ResourceArea *_area;
  Chunk *_chunk;
  char *_hwm;
  char *_max;
  unsigned int _size_in_bytes;
};

/* 1075 */
struct __cppobj CodeStrings : _ValueObj
{
};

/* 1064 */
struct __cppobj __declspec(align(4)) CodeBlob : _ValueObj
{
  CodeBlob_vtbl *__vftable /*VFT*/;
  const char *_name;
  int _size;
  int _header_size;
  int _relocation_size;
  int _content_offset;
  int _code_offset;
  int _frame_complete_offset;
  int _data_offset;
  int _frame_size;
  OopMapSet *_oop_maps;
  CodeStrings _strings;
};

/* 1065 */
struct __cppobj frame : _ValueObj
{
  int *_sp;
  unsigned __int8 *_pc;
  CodeBlob *_cb;
  frame::deopt_state _deopt_state;
  int *_fp;
  int *_unextended_sp;
};

/* 1066 */
const struct __cppobj __declspec(align(8)) RegisterMap : StackObj
{
  int *_location[89];
  unsigned __int64 _location_valid[2];
  bool _include_argument_oops;
  JavaThread *_thread;
  bool _update_map;
};

/* 1067 */
struct __cppobj Closure : StackObj
{
  bool _abort;
};

/* 1068 */
struct __cppobj __declspec(align(4)) OopClosure : Closure
{
  OopClosure_vtbl *__vftable /*VFT*/;
};

/* 1069 */
struct /*VFT*/ OopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 1070 */
struct /*VFT*/ CodeBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 1071 */
struct __cppobj CompressedStream : ResourceObj
{
  unsigned __int8 *_buffer;
  int _position;
};

/* 1072 */
struct __cppobj CompressedWriteStream : CompressedStream
{
  int _size;
};

/* 1073 */
struct __cppobj OopMap : ResourceObj
{
  int _pc_offset;
  int _omv_count;
  int _omv_data_size;
  unsigned __int8 *_omv_data;
  CompressedWriteStream *_write_stream;
};

/* 1074 */
struct __cppobj OopMapSet : ResourceObj
{
  int _om_count;
  int _om_size;
  OopMap **_om_data;
};

/* 1076 */
struct __cppobj __declspec(align(4)) Array<unsigned char> : MetaspaceObj
{
  int _length;
  unsigned __int8 _data[1];
};

/* 1102 */
union ConstantPool::<unnamed_type__saved>
{
  int _resolved_reference_length;
  int _version;
};

/* 1077 */
struct __cppobj ConstantPool : Metadata
{
  Array<unsigned char> *_tags;
  ConstantPoolCache *_cache;
  InstanceKlass *_pool_holder;
  Array<unsigned short> *_operands;
  _jobject *_resolved_references;
  Array<unsigned short> *_reference_map;
  int _flags;
  int _length;
  ConstantPool::<unnamed_type__saved> _saved;
  Monitor *_lock;
};

/* 1078 */
struct __cppobj ConstantPoolCache : MetaspaceObj
{
  int _length;
  ConstantPool *_constant_pool;
};

/* 1079 */
struct __cppobj Array<Array<unsigned char> *> : MetaspaceObj
{
  int _length;
  Array<unsigned char> *_data[1];
};

/* 1080 */
struct __cppobj Annotations : MetaspaceObj
{
  Array<unsigned char> *_class_annotations;
  Array<Array<unsigned char> *> *_fields_annotations;
  Array<unsigned char> *_class_type_annotations;
  Array<Array<unsigned char> *> *_fields_type_annotations;
};

/* 1081 */
struct __cppobj __declspec(align(4)) Array<unsigned short> : MetaspaceObj
{
  int _length;
  unsigned __int16 _data[1];
};

/* 1082 */
struct __cppobj Method : Metadata
{
  ConstMethod *_constMethod;
  MethodData *_method_data;
  MethodCounters *_method_counters;
  AccessFlags _access_flags;
  int _vtable_index;
  unsigned __int16 _method_size;
  unsigned __int8 _intrinsic_id;
  unsigned __int8 _jfr_towrite : 1;
  unsigned __int8 _caller_sensitive : 1;
  unsigned __int8 _force_inline : 1;
  unsigned __int8 _hidden : 1;
  unsigned __int8 _running_emcp : 1;
  unsigned __int8 _dont_inline : 1;
  unsigned __int8 _has_injected_profile : 1;
  _BYTE gap1C[4];
  unsigned __int8 *_i2i_entry;
  AdapterHandlerEntry *_adapter;
  unsigned __int8 *volatile _from_compiled_entry;
  nmethod *volatile _code;
  unsigned __int8 *volatile _from_interpreted_entry;
};

/* 1083 */
struct __cppobj InterpreterOopMap : ResourceObj
{
  Method *_method;
  unsigned __int16 _bci;
  int _mask_size;
  int _expression_stack_size;
  int _bit_mask[4];
};

/* 1084 */
struct __cppobj OopMapCacheEntry : InterpreterOopMap
{
};

/* 1085 */
struct __cppobj Mutex : Monitor
{
};

/* 1086 */
struct __cppobj __unaligned __declspec(align(4)) OopMapCache : CHeapObj<1>
{
  OopMapCacheEntry *_array;
  Mutex _mut;
};

/* 1087 */
struct __cppobj GenericGrowableArray : ResourceObj
{
  int _len;
  int _max;
  Arena *_arena;
  MemoryType _memflags;
};

/* 1088 */
struct __cppobj GrowableArray<_jobject *> : GenericGrowableArray
{
  _jobject **_data;
};

/* 1089 */
struct __cppobj MemberNameTable : GrowableArray<_jobject *>
{
};

/* 1090 */
struct __cppobj JNIid : CHeapObj<1>
{
  Klass *_holder;
  JNIid *_next;
  int _offset;
};

/* 1201 */
struct __cppobj PcDescCache : _ValueObj
{
  PcDesc *volatile _pc_descs[4];
};

/* 1091 */
struct __cppobj nmethod : CodeBlob
{
  Method *_method;
  int _entry_bci;
  struct _jmethodID *_jmethod_id;
  nmethod *_osr_link;
  $54C14F04533127A0B4542E8633832638 ___u5;
  nmethod *volatile _oops_do_mark_link;
  AbstractCompiler *_compiler;
  unsigned __int8 *_entry_point;
  unsigned __int8 *_verified_entry_point;
  unsigned __int8 *_osr_entry_point;
  int _exception_offset;
  int _deoptimize_offset;
  int _deoptimize_mh_offset;
  int _unwind_handler_offset;
  int _consts_offset;
  int _stub_offset;
  int _oops_offset;
  int _metadata_offset;
  int _scopes_data_offset;
  int _scopes_pcs_offset;
  int _dependencies_offset;
  int _handler_table_offset;
  int _nul_chk_table_offset;
  int _nmethod_end_offset;
  int _orig_pc_offset;
  int _compile_id;
  int _comp_level;
  bool _has_flushed_dependencies;
  bool _marked_for_reclamation;
  bool _marked_for_deoptimization;
  bool _unload_reported;
  unsigned __int32 _has_unsafe_access : 1;
  unsigned __int32 _has_method_handle_invokes : 1;
  unsigned __int32 _lazy_critical_native : 1;
  unsigned __int32 _has_wide_vectors : 1;
  volatile unsigned __int8 _state;
  volatile unsigned __int8 _unloading_clock;
  char _scavenge_root_state;
  RTMState _rtm_state;
  int _lock_count;
  int _stack_traversal_mark;
  int _hotness_counter;
  ExceptionCache *volatile _exception_cache;
  PcDescCache _pc_desc_cache;
  int _native_receiver_sp_offset;
  int _native_basic_lock_sp_offset;
};

/* 1092 */
struct __cppobj nmethodBucket : CHeapObj<1>
{
  nmethod *_nmethod;
  int _count;
  nmethodBucket *_next;
};

/* 1093 */
struct __cppobj BreakpointInfo : CHeapObj<1>
{
  Bytecodes::Code _orig_bytecode;
  int _bci;
  unsigned __int16 _name_index;
  unsigned __int16 _signature_index;
  BreakpointInfo *_next;
};

/* 1094 */
struct __cppobj __declspec(align(8)) InstanceKlass : Klass
{
  Annotations *_annotations;
  Klass *_array_klasses;
  ConstantPool *_constants;
  Array<unsigned short> *_inner_classes;
  char *_source_debug_extension;
  Symbol *_array_name;
  int _nonstatic_field_size;
  int _static_field_size;
  unsigned __int16 _generic_signature_index;
  unsigned __int16 _source_file_name_index;
  unsigned __int16 _static_oop_field_count;
  unsigned __int16 _java_fields_count;
  int _nonstatic_oop_map_size;
  bool _is_marked_dependent;
  bool _is_being_redefined;
  bool _has_unloaded_dependent;
  unsigned __int16 _misc_flags;
  unsigned __int16 _minor_version;
  unsigned __int16 _major_version;
  Thread *_init_thread;
  int _vtable_len;
  int _itable_len;
  OopMapCache *volatile _oop_map_cache;
  MemberNameTable *_member_names;
  JNIid *_jni_ids;
  struct _jmethodID **_methods_jmethod_ids;
  nmethodBucket *_dependencies;
  nmethod *_osr_nmethods_head;
  BreakpointInfo *_breakpoints;
  InstanceKlass *_previous_versions;
  JvmtiCachedClassFileData *_cached_class_file;
  volatile unsigned __int16 _idnum_allocated_count;
  unsigned __int8 _init_state;
  unsigned __int8 _reference_type;
  JvmtiCachedClassFieldMap *_jvmti_cached_class_field_map;
  Array<Method *> *_methods;
  Array<Method *> *_default_methods;
  Array<Klass *> *_local_interfaces;
  Array<Klass *> *_transitive_interfaces;
  Array<int> *_method_ordering;
  Array<int> *_default_vtable_indices;
  Array<unsigned short> *_fields;
};

/* 1095 */
struct __declspec(align(4)) JvmtiCachedClassFileData
{
  int length;
  unsigned __int8 data[1];
};

/* 1096 */
struct __cppobj __declspec(align(4)) ClassFieldDescriptor : CHeapObj<7>
{
  int _field_index;
  int _field_offset;
  char _field_type;
};

/* 1097 */
struct __cppobj GrowableArray<ClassFieldDescriptor *> : GenericGrowableArray
{
  ClassFieldDescriptor **_data;
};

/* 1098 */
struct __cppobj ClassFieldMap : CHeapObj<7>
{
  GrowableArray<ClassFieldDescriptor *> *_fields;
};

/* 1099 */
struct __cppobj JvmtiCachedClassFieldMap : CHeapObj<7>
{
  ClassFieldMap *_field_map;
};

/* 1100 */
struct __cppobj Array<Method *> : MetaspaceObj
{
  int _length;
  Method *_data[1];
};

/* 1101 */
struct __cppobj Array<int> : MetaspaceObj
{
  int _length;
  int _data[1];
};

/* 1103 */
struct /*VFT*/ ConstantPool_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
};

/* 1104 */
struct __cppobj ConstMethod : MetaspaceObj
{
  volatile unsigned __int64 _fingerprint;
  ConstantPool *_constants;
  Array<unsigned char> *_stackmap_data;
  int _constMethod_size;
  unsigned __int16 _flags;
  unsigned __int8 _result_type;
  unsigned __int16 _code_size;
  unsigned __int16 _name_index;
  unsigned __int16 _signature_index;
  unsigned __int16 _method_idnum;
  unsigned __int16 _max_stack;
  unsigned __int16 _max_locals;
  unsigned __int16 _size_of_parameters;
  unsigned __int16 _orig_method_idnum;
};

/* 1105 */
union MethodData::<unnamed_type__trap_hist>
{
  int _align;
  unsigned __int8 _array[20];
};

/* 1106 */
struct __cppobj InvocationCounter : _ValueObj
{
  unsigned int _counter;
};

/* 1107 */
struct /*VFT*/ MethodData_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
};

/* 1108 */
struct __cppobj __unaligned __declspec(align(4)) MethodData : Metadata
{
  Method *_method;
  int _size;
  int _hint_di;
  Mutex _extra_data_lock;
  unsigned int _nof_decompiles;
  unsigned int _nof_overflow_recompiles;
  unsigned int _nof_overflow_traps;
  MethodData::<unnamed_type__trap_hist> _trap_hist;
  int _eflags;
  int _arg_local;
  int _arg_stack;
  int _arg_returned;
  int _creation_mileage;
  InvocationCounter _invocation_counter;
  InvocationCounter _backedge_counter;
  int _invocation_counter_start;
  int _backedge_counter_start;
  int _rtm_state;
  __int16 _num_loops;
  __int16 _num_blocks;
  MethodData::WouldProfile _would_profile;
  int _data_size;
  int _parameters_type_data_di;
  int _data[1];
};

/* 1109 */
struct __cppobj MethodCounters : MetaspaceObj
{
  int _interpreter_invocation_count;
  unsigned __int16 _interpreter_throwout_count;
  unsigned __int16 _number_of_breakpoints;
  InvocationCounter _invocation_counter;
  InvocationCounter _backedge_counter;
  float _rate;
  unsigned __int8 _highest_comp_level;
  unsigned __int8 _highest_osr_comp_level;
  __int64 _prev_time;
};

/* 1111 */
struct __cppobj CHeapObj<4>
{
};

/* 1112 */
struct __cppobj BasicHashtableEntry<4> : CHeapObj<4>
{
  unsigned int _hash;
  BasicHashtableEntry<4> *_next;
};

/* 1113 */
union AdapterFingerPrint::<unnamed_type__value>
{
  int _compact[3];
  int *_fingerprint;
};

/* 1114 */
struct __cppobj AdapterFingerPrint : CHeapObj<4>
{
  AdapterFingerPrint::<unnamed_type__value> _value;
  int _length;
};

/* 1115 */
struct __cppobj AdapterHandlerEntry : BasicHashtableEntry<4>
{
  AdapterFingerPrint *_fingerprint;
  unsigned __int8 *_i2c_entry;
  unsigned __int8 *_c2i_entry;
  unsigned __int8 *_c2i_unverified_entry;
};

/* 1116 */
struct /*VFT*/ Method_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
};

/* 1117 */
struct __cppobj CHeapObj<6>
{
};

/* 1118 */
struct __cppobj AbstractCompiler : CHeapObj<6>
{
  AbstractCompiler_vtbl *__vftable /*VFT*/;
  volatile int _num_compiler_threads;
  volatile int _compiler_state;
};

/* 1119 */
struct __cppobj methodHandle : StackObj
{
  Method *_value;
  Thread *_thread;
};

/* 1120 */
struct __cppobj GrowableArray<ciMetadata *> : GenericGrowableArray
{
  ciMetadata **_data;
};

/* 1121 */
struct __cppobj ciFlags : _ValueObj
{
  int _flags;
};

/* 1122 */
struct __cppobj ciKlass : ciType
{
  ciSymbol *_name;
  int _layout_helper;
};

/* 1123 */
struct __cppobj ciInstanceKlass : ciKlass
{
  _jobject *_loader;
  _jobject *_protection_domain;
  InstanceKlass::ClassState _init_state;
  bool _is_shared;
  bool _has_finalizer;
  bool _has_subklass;
  bool _has_nonstatic_fields;
  bool _has_default_methods;
  bool _is_anonymous;
  ciFlags _flags;
  int _nonstatic_field_size;
  int _nonstatic_oop_map_size;
  ciInstanceKlass *_super;
  ciInstance *_java_mirror;
  ciConstantPoolCache *_field_cache;
  GrowableArray<ciField *> *_nonstatic_fields;
  ciInstanceKlass *_implementor;
  GrowableArray<ciField *> *_non_static_fields;
};

/* 1124 */
struct __cppobj GrowableArray<int> : GenericGrowableArray
{
  int *_data;
};

/* 1125 */
struct __cppobj GrowableArray<void *> : GenericGrowableArray
{
  void **_data;
};

/* 1126 */
struct __cppobj ciConstantPoolCache : ResourceObj
{
  GrowableArray<int> *_keys;
  GrowableArray<void *> *_elements;
};

/* 1127 */
union ciConstant::<unnamed_type__value>
{
  int _int;
  __int64 _long;
  float _float;
  long double _double;
  ciObject *_object;
};

/* 1128 */
struct __cppobj ciConstant : _ValueObj
{
  BasicType _type;
  ciConstant::<unnamed_type__value> _value;
};

/* 1129 */
struct __cppobj ciField : ResourceObj
{
  ciFlags _flags;
  ciInstanceKlass *_holder;
  ciSymbol *_name;
  ciSymbol *_signature;
  ciType *_type;
  int _offset;
  bool _is_constant;
  ciInstanceKlass *_known_to_link_with_put;
  ciInstanceKlass *_known_to_link_with_get;
  ciConstant _constant_value;
};

/* 1130 */
struct __cppobj GrowableArray<ciField *> : GenericGrowableArray
{
  ciField **_data;
};

/* 1131 */
struct __cppobj GrowableArray<ciType *> : GenericGrowableArray
{
  ciType **_data;
};

/* 1132 */
struct __cppobj ciSignature : ResourceObj
{
  ciSymbol *_symbol;
  ciKlass *_accessing_klass;
  GrowableArray<ciType *> *_types;
  int _size;
  int _count;
};

/* 1133 */
struct DataLayout::<unnamed_type__header>::<unnamed_type__struct>
{
  unsigned __int8 _tag;
  unsigned __int8 _flags;
  unsigned __int16 _bci;
};

/* 1134 */
union DataLayout::<unnamed_type__header>
{
  int _bits;
  DataLayout::<unnamed_type__header>::<unnamed_type__struct> _struct;
};

/* 1135 */
struct __cppobj DataLayout : _ValueObj
{
  DataLayout::<unnamed_type__header> _header;
  int _cells[1];
};

/* 1136 */
struct /*VFT*/ ciMethodData_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
};

/* 1137 */
struct __cppobj __unaligned __declspec(align(4)) ciMethodData : ciMetadata
{
  int _data_size;
  int _extra_data_size;
  int *_data;
  int _hint_di;
  unsigned __int8 _state;
  unsigned __int8 _saw_free_extra_data;
  __declspec(align(4)) int _eflags;
  int _arg_local;
  int _arg_stack;
  int _arg_returned;
  int _current_mileage;
  int _invocation_counter;
  int _backedge_counter;
  MethodData _orig;
  DataLayout *_parameters;
};

/* 1138 */
struct __cppobj ciMethod : ciMetadata
{
  ciFlags _flags;
  ciSymbol *_name;
  ciInstanceKlass *_holder;
  ciSignature *_signature;
  ciMethodData *_method_data;
  ciMethodBlocks *_method_blocks;
  int _code_size;
  int _max_stack;
  int _max_locals;
  vmIntrinsics::ID _intrinsic_id;
  int _handler_count;
  int _interpreter_invocation_count;
  int _interpreter_throwout_count;
  int _instructions_size;
  int _size_of_parameters;
  bool _uses_monitors;
  bool _balanced_monitors;
  bool _is_c1_compilable;
  bool _is_c2_compilable;
  bool _can_be_statically_bound;
  unsigned __int8 *_code;
  ciExceptionHandler **_exception_handlers;
  MethodLiveness *_liveness;
  ciTypeFlow *_flow;
  BCEscapeAnalyzer *_bcea;
};

/* 1139 */
struct __cppobj ciBlock : ResourceObj
{
  int _idx;
  int _start_bci;
  int _limit_bci;
  int _control_bci;
  unsigned int _flags;
  int _ex_start_bci;
  int _ex_limit_bci;
};

/* 1140 */
struct __cppobj GrowableArray<ciBlock *> : GenericGrowableArray
{
  ciBlock **_data;
};

/* 1141 */
struct __cppobj ciMethodBlocks : ResourceObj
{
  ciMethod *_method;
  Arena *_arena;
  GrowableArray<ciBlock *> *_blocks;
  ciBlock **_bci_to_block;
  int _num_blocks;
  int _code_size;
};

/* 1142 */
struct __cppobj ciExceptionHandler : ResourceObj
{
  ciInstanceKlass *_loading_klass;
  int _start;
  int _limit;
  int _handler_bci;
  int _catch_klass_index;
  ciInstanceKlass *_catch_klass;
};

/* 1144 */
struct __cppobj __declspec(align(4)) ArrayAllocator<unsigned int,7> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1145 */
struct __cppobj BitMap : _ValueObj
{
  ArrayAllocator<unsigned int,7> _map_allocator;
  unsigned int *_map;
  unsigned int _size;
};

/* 1143 */
struct __cppobj MethodLiveness : ResourceObj
{
  ciMethod *_method;
  Arena *_arena;
  int _code_size;
  int _bit_map_size_bits;
  int _bit_map_size_words;
  MethodLiveness::BasicBlock **_block_list;
  int _block_count;
  GrowableArray<MethodLiveness::BasicBlock *> *_block_map;
  MethodLiveness::BasicBlock *_work_list;
  BitMap _bci_block_start;
};

/* 1146 */
struct __cppobj __declspec(align(4)) MethodLiveness::BasicBlock : ResourceObj
{
  MethodLiveness *_analyzer;
  int _start_bci;
  int _limit_bci;
  BitMap _entry;
  BitMap _normal_exit;
  BitMap _exception_exit;
  BitMap _gen;
  BitMap _kill;
  int _last_bci;
  GrowableArray<MethodLiveness::BasicBlock *> *_normal_predecessors;
  GrowableArray<MethodLiveness::BasicBlock *> *_exception_predecessors;
  MethodLiveness::BasicBlock *_next;
  bool _on_work_list;
};

/* 1147 */
struct __cppobj GrowableArray<MethodLiveness::BasicBlock *> : GenericGrowableArray
{
  MethodLiveness::BasicBlock **_data;
};

/* 1148 */
struct __cppobj ciEnv : StackObj
{
  Arena *_arena;
  Arena _ciEnv_arena;
  int _system_dictionary_modification_counter;
  ciObjectFactory *_factory;
  OopRecorder *_oop_recorder;
  DebugInformationRecorder *_debug_info;
  Dependencies *_dependencies;
  const char *_failure_reason;
  int _compilable;
  bool _break_at_compile;
  int _num_inlined_bytecodes;
  CompileTask *_task;
  CompileLog *_log;
  void *_compiler_data;
  char *_name_buffer;
  int _name_buffer_len;
  bool _jvmti_can_hotswap_or_post_breakpoint;
  bool _jvmti_can_access_local_variables;
  bool _jvmti_can_post_on_exceptions;
  bool _dtrace_extended_probes;
  bool _dtrace_monitor_probes;
  bool _dtrace_method_probes;
  bool _dtrace_alloc_probes;
  ciInstance *_NullPointerException_instance;
  ciInstance *_ArithmeticException_instance;
  ciInstance *_ArrayIndexOutOfBoundsException_instance;
  ciInstance *_ArrayStoreException_instance;
  ciInstance *_ClassCastException_instance;
  ciInstance *_the_null_string;
  ciInstance *_the_min_jint_string;
};

/* 1149 */
struct __cppobj ciTypeFlow::Block : ResourceObj
{
  ciBlock *_ciblock;
  GrowableArray<ciTypeFlow::Block *> *_exceptions;
  GrowableArray<ciInstanceKlass *> *_exc_klasses;
  GrowableArray<ciTypeFlow::Block *> *_successors;
  ciTypeFlow::StateVector *_state;
  ciTypeFlow::JsrSet *_jsrs;
  int _trap_bci;
  int _trap_index;
  int _pre_order;
  int _post_order;
  bool _backedge_copy;
  bool _irreducible_entry;
  bool _has_monitorenter;
  bool _on_work_list;
  ciTypeFlow::Block *_next;
  ciTypeFlow::Block *_rpo_next;
  ciTypeFlow::Loop *_loop;
};

/* 1150 */
struct __cppobj GrowableArray<ciTypeFlow::Block *> : GenericGrowableArray
{
  ciTypeFlow::Block **_data;
};

/* 1151 */
struct __cppobj GrowableArray<ciInstanceKlass *> : GenericGrowableArray
{
  ciInstanceKlass **_data;
};

/* 1152 */
struct __cppobj ciTypeFlow : ResourceObj
{
  ciEnv *_env;
  ciMethod *_method;
  ciMethodBlocks *_methodBlocks;
  int _osr_bci;
  int _max_locals;
  int _max_stack;
  int _code_size;
  bool _has_irreducible_entry;
  const char *_failure_reason;
  ciTypeFlow::Block **_block_map;
  GrowableArray<ciTypeFlow::Block *> **_idx_to_blocklist;
  int _ciblock_count;
  ciTypeFlow::Block *_work_list;
  ciTypeFlow::Block *_rpo_list;
  int _next_pre_order;
  ciTypeFlow::Loop *_loop_tree_root;
  int _jsr_count;
  GrowableArray<ciTypeFlow::JsrRecord *> *_jsr_records;
};

/* 1153 */
struct __cppobj ciTypeFlow::LocalSet : _ValueObj
{
  unsigned __int64 _bits;
};

/* 1154 */
struct __cppobj ciTypeFlow::StateVector : ResourceObj
{
  ciType **_types;
  int _stack_size;
  int _monitor_count;
  ciTypeFlow *_outer;
  int _trap_bci;
  int _trap_index;
  ciTypeFlow::LocalSet _def_locals;
};

/* 1155 */
struct __cppobj ciTypeFlow::JsrRecord : ResourceObj
{
  int _entry_address;
  int _return_address;
};

/* 1156 */
struct __cppobj GrowableArray<ciTypeFlow::JsrRecord *> : GenericGrowableArray
{
  ciTypeFlow::JsrRecord **_data;
};

/* 1157 */
struct __cppobj ciTypeFlow::JsrSet : ResourceObj
{
  GrowableArray<ciTypeFlow::JsrRecord *> *_set;
};

/* 1158 */
struct __cppobj ciTypeFlow::Loop : ResourceObj
{
  ciTypeFlow::Loop *_parent;
  ciTypeFlow::Loop *_sibling;
  ciTypeFlow::Loop *_child;
  ciTypeFlow::Block *_head;
  ciTypeFlow::Block *_tail;
  bool _irreducible;
  ciTypeFlow::LocalSet _def_locals;
};

/* 1159 */
struct __cppobj Set : ResourceObj
{
  Set_vtbl *__vftable /*VFT*/;
  Arena *_set_arena;
};

/* 1160 */
struct __cppobj VectorSet : Set
{
  unsigned int size;
  unsigned int *data;
};

/* 1161 */
struct __cppobj SetI_ : ResourceObj
{
  SetI__vtbl *__vftable /*VFT*/;
};

/* 1162 */
struct /*VFT*/ SetI__vtbl
{
  void (__thiscall *~SetI_)(SetI_ *this);
  unsigned int (__thiscall *next)(SetI_ *this);
  int (__thiscall *test)(SetI_ *this);
};

/* 1163 */
struct /*VFT*/ Set_vtbl
{
  Set *(__thiscall *operator=)(Set *this, const Set *);
  Set *(__thiscall *clone)(Set *this);
  void (__thiscall *~Set)(Set *this);
  Set *(__thiscall *operator<<=)(Set *this, unsigned int);
  Set *(__thiscall *operator>>=)(Set *this, unsigned int);
  int (__thiscall *operator[])(Set *this, unsigned int);
  Set *(__thiscall *operator&=)(Set *this, const Set *);
  Set *(__thiscall *operator|=)(Set *this, const Set *);
  Set *(__thiscall *operator-=)(Set *this, const Set *);
  int (__thiscall *operator==)(Set *this, const Set *);
  int (__thiscall *disjoint)(Set *this, const Set *);
  int (__thiscall *operator<)(Set *this, const Set *);
  int (__thiscall *operator<=)(Set *this, const Set *);
  unsigned int (__thiscall *getelem)(Set *this);
  void (__thiscall *Clear)(Set *this);
  unsigned int (__thiscall *Size)(Set *this);
  void (__thiscall *Sort)(Set *this);
  char *(__thiscall *setstr)(Set *this);
  int (__thiscall *parse)(Set *this, const char *);
  const struct SparseSet *(__thiscall *asSparseSet)(Set *this);
  const VectorSet *(__thiscall *asVectorSet)(Set *this);
  const struct ListSet *(__thiscall *asListSet)(Set *this);
  const struct CoSet *(__thiscall *asCoSet)(Set *this);
  int (__thiscall *hash)(Set *this);
  SetI_ *(__thiscall *iterate)(Set *this, unsigned int *);
};

/* 1164 */
struct /*VFT*/ VectorSet_vtbl
{
  Set *(__thiscall *operator=)(Set *this, const Set *);
  Set *(__thiscall *clone)(Set *this);
  void (__thiscall *~Set)(Set *this);
  Set *(__thiscall *operator<<=)(Set *this, unsigned int);
  Set *(__thiscall *operator>>=)(Set *this, unsigned int);
  int (__thiscall *operator[])(Set *this, unsigned int);
  Set *(__thiscall *operator&=)(Set *this, const Set *);
  Set *(__thiscall *operator|=)(Set *this, const Set *);
  Set *(__thiscall *operator-=)(Set *this, const Set *);
  int (__thiscall *operator==)(Set *this, const Set *);
  int (__thiscall *disjoint)(Set *this, const Set *);
  int (__thiscall *operator<)(Set *this, const Set *);
  int (__thiscall *operator<=)(Set *this, const Set *);
  unsigned int (__thiscall *getelem)(Set *this);
  void (__thiscall *Clear)(Set *this);
  unsigned int (__thiscall *Size)(Set *this);
  void (__thiscall *Sort)(Set *this);
  char *(__thiscall *setstr)(Set *this);
  int (__thiscall *parse)(Set *this, const char *);
  const struct SparseSet *(__thiscall *asSparseSet)(Set *this);
  const VectorSet *(__thiscall *asVectorSet)(Set *this);
  const struct ListSet *(__thiscall *asListSet)(Set *this);
  const struct CoSet *(__thiscall *asCoSet)(Set *this);
  int (__thiscall *hash)(Set *this);
  SetI_ *(__thiscall *iterate)(Set *this, unsigned int *);
};

/* 1165 */
struct __cppobj BCEscapeAnalyzer : ResourceObj
{
  Arena *_arena;
  bool _conservative;
  ciMethod *_method;
  ciMethodData *_methodData;
  int _arg_size;
  VectorSet _arg_local;
  VectorSet _arg_stack;
  VectorSet _arg_returned;
  VectorSet _dirty;
  unsigned int *_arg_modified;
  bool _return_local;
  bool _return_allocated;
  bool _allocated_escapes;
  bool _unknown_modified;
  GrowableArray<ciMetadata *> _dependencies;
  ciMethodBlocks *_methodBlocks;
  BCEscapeAnalyzer *_parent;
  int _level;
};

/* 1166 */
struct /*VFT*/ ciMethod_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
};

/* 1167 */
struct __cppobj GrowableArray<ciMethod *> : GenericGrowableArray
{
  ciMethod **_data;
};

/* 1168 */
struct __cppobj GrowableArray<ciKlass *> : GenericGrowableArray
{
  ciKlass **_data;
};

/* 1169 */
struct __cppobj GrowableArray<ciInstance *> : GenericGrowableArray
{
  ciInstance **_data;
};

/* 1170 */
struct /*VFT*/ ciReturnAddress_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
};

/* 1171 */
struct __cppobj ciReturnAddress : ciType
{
  int _bci;
};

/* 1172 */
struct __cppobj GrowableArray<ciReturnAddress *> : GenericGrowableArray
{
  ciReturnAddress **_data;
};

/* 1173 */
struct __cppobj GrowableArray<ciSymbol *> : GenericGrowableArray
{
  ciSymbol **_data;
};

/* 1174 */
struct __cppobj ciObjectFactory::NonPermObject : ResourceObj
{
  ciObject *_object;
  ciObjectFactory::NonPermObject *_next;
};

/* 1175 */
struct __cppobj ciObjectFactory : ResourceObj
{
  Arena *_arena;
  GrowableArray<ciMetadata *> *_ci_metadata;
  GrowableArray<ciMethod *> *_unloaded_methods;
  GrowableArray<ciKlass *> *_unloaded_klasses;
  GrowableArray<ciInstance *> *_unloaded_instances;
  GrowableArray<ciReturnAddress *> *_return_addresses;
  GrowableArray<ciSymbol *> *_symbols;
  int _next_ident;
  ciObjectFactory::NonPermObject *_non_perm_bucket[61];
  int _non_perm_count;
};

/* 1176 */
struct __cppobj ValueRecorder<_jobject *>::IndexCache<_jobject *> : ResourceObj
{
  int _cache[512];
};

/* 1177 */
struct __cppobj __declspec(align(4)) ValueRecorder<_jobject *> : StackObj
{
  GrowableArray<_jobject *> *_handles;
  GrowableArray<int> *_no_finds;
  ValueRecorder<_jobject *>::IndexCache<_jobject *> *_indexes;
  Arena *_arena;
  bool _complete;
};

/* 1178 */
struct __cppobj GrowableArray<Metadata *> : GenericGrowableArray
{
  Metadata **_data;
};

/* 1179 */
struct __cppobj ValueRecorder<Metadata *>::IndexCache<Metadata *> : ResourceObj
{
  int _cache[512];
};

/* 1180 */
struct __cppobj __declspec(align(4)) ValueRecorder<Metadata *> : StackObj
{
  GrowableArray<Metadata *> *_handles;
  GrowableArray<int> *_no_finds;
  ValueRecorder<Metadata *>::IndexCache<Metadata *> *_indexes;
  Arena *_arena;
  bool _complete;
};

/* 1181 */
struct __cppobj OopRecorder : ResourceObj
{
  ValueRecorder<_jobject *> _oops;
  ValueRecorder<Metadata *> _metadata;
};

/* 1182 */
struct __cppobj DebugInformationRecorder : ResourceObj
{
  OopMapSet *_oopmaps;
  const bool _recording_non_safepoints;
  DebugInfoWriteStream *_stream;
  OopRecorder *_oop_recorder;
  GrowableArray<DIR_Chunk *> *_all_chunks;
  GrowableArray<DIR_Chunk *> *_shared_chunks;
  DIR_Chunk *_next_chunk;
  DIR_Chunk *_next_chunk_limit;
  PcDesc *_pcs;
  int _pcs_size;
  int _pcs_length;
  int _prev_safepoint_pc;
};

/* 1183 */
struct __cppobj DebugInfoWriteStream : CompressedWriteStream
{
  DebugInformationRecorder *_recorder;
};

/* 1184 */
struct __cppobj DIR_Chunk
{
  int _offset;
  int _length;
  int _hash;
};

/* 1185 */
struct __cppobj GrowableArray<DIR_Chunk *> : GenericGrowableArray
{
  DIR_Chunk **_data;
};

/* 1186 */
struct __cppobj PcDesc : _ValueObj
{
  int _pc_offset;
  int _scope_decode_offset;
  int _obj_decode_offset;
  int _flags;
};

/* 1187 */
struct __cppobj GrowableArray<ciBaseObject *> : GenericGrowableArray
{
  ciBaseObject **_data;
};

/* 1189 */
struct __cppobj __declspec(align(8)) xmlTextStream : outputStream
{
  xmlStream *_outer_xmlStream;
};

/* 1188 */
struct __cppobj xmlStream : outputStream
{
  outputStream *_out;
  unsigned __int64 _last_flush;
  xmlStream::MarkupState _markup_state;
  outputStream *_text;
  xmlTextStream _text_init;
};

/* 1190 */
struct /*VFT*/ xmlTextStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 1191 */
struct /*VFT*/ xmlStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
  void (__thiscall *see_tag)(xmlStream *this, const char *, bool);
  void (__thiscall *pop_tag)(xmlStream *this, const char *);
};

/* 1192 */
struct __cppobj __declspec(align(4)) stringStream : outputStream
{
  char *buffer;
  unsigned int buffer_pos;
  unsigned int buffer_length;
  bool buffer_fixed;
};

/* 1193 */
struct /*VFT*/ stringStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 1194 */
struct __cppobj CompileLog : xmlStream
{
  const char *_file;
  unsigned __int64 _file_end;
  int _thread_id;
  __declspec(align(8)) stringStream _context;
  char _context_buffer[100];
  char *_identities;
  int _identities_limit;
  int _identities_capacity;
  CompileLog *_next;
};

/* 1195 */
struct /*VFT*/ CompileLog_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
  void (__thiscall *see_tag)(xmlStream *this, const char *, bool);
  void (__thiscall *pop_tag)(xmlStream *this, const char *);
};

/* 1196 */
struct __cppobj Dependencies : ResourceObj
{
  GrowableArray<int> *_dep_seen;
  GrowableArray<ciBaseObject *> *_deps[11];
  OopRecorder *_oop_recorder;
  CompileLog *_log;
  unsigned __int8 *_content_bytes;
  unsigned int _size_in_bytes;
};

/* 1197 */
struct __cppobj nmethodLocker : StackObj
{
  nmethod *_nm;
};

/* 1198 */
struct __cppobj __declspec(align(8)) CompileTask : CHeapObj<6>
{
  Monitor *_lock;
  unsigned int _compile_id;
  Method *_method;
  _jobject *_method_holder;
  int _osr_bci;
  bool _is_complete;
  bool _is_success;
  bool _is_blocking;
  int _comp_level;
  int _num_inlined_bytecodes;
  nmethodLocker *_code_handle;
  CompileTask *_next;
  CompileTask *_prev;
  bool _is_free;
  __int64 _time_queued;
  Method *_hot_method;
  _jobject *_hot_method_holder;
  int _hot_count;
  const char *_comment;
  const char *_failure_reason;
};

/* 1199 */
struct /*VFT*/ AbstractCompiler_vtbl
{
  const char *(__thiscall *name)(AbstractCompiler *this);
  bool (__thiscall *supports_native)(AbstractCompiler *this);
  bool (__thiscall *supports_osr)(AbstractCompiler *this);
  bool (__thiscall *can_compile_method)(AbstractCompiler *this, methodHandle);
  bool (__thiscall *is_c1)(AbstractCompiler *this);
  bool (__thiscall *is_c2)(AbstractCompiler *this);
  bool (__thiscall *is_shark)(AbstractCompiler *this);
  void (__thiscall *initialize)(AbstractCompiler *this);
  void (__thiscall *compile_method)(AbstractCompiler *this, ciEnv *, ciMethod *, int);
  void (__thiscall *print_timers)(AbstractCompiler *this);
};

/* 1200 */
struct __cppobj ExceptionCache : CHeapObj<4>
{
  Klass *_exception_type;
  unsigned __int8 *_pc[16];
  unsigned __int8 *_handler[16];
  volatile int _count;
  ExceptionCache *_next;
};

/* 1202 */
struct /*VFT*/ nmethod_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 1203 */
union $54C14F04533127A0B4542E8633832638
{
  nmethod *_unloading_next;
  nmethod *_scavenge_root_link;
};

/* 1213 */
struct __cppobj vframeArrayElement : _ValueObj
{
  frame _frame;
  int _bci;
  bool _reexecute;
  Method *_method;
  MonitorChunk *_monitors;
  StackValueCollection *_locals;
  StackValueCollection *_expressions;
};

/* 1204 */
struct __cppobj vframeArray : CHeapObj<6>
{
  JavaThread *_owner_thread;
  vframeArray *_next;
  frame _original;
  frame _caller;
  frame _sender;
  Deoptimization::UnrollBlock *_unroll_block;
  int _frame_size;
  int _frames;
  int _callee_registers[89];
  unsigned __int8 _valid[89];
  vframeArrayElement _elements[1];
};

/* 1205 */
struct __cppobj Deoptimization::UnrollBlock : CHeapObj<6>
{
  int _size_of_deoptimized_frame;
  int _caller_adjustment;
  int _number_of_frames;
  int _total_frame_sizes;
  int *_frame_sizes;
  unsigned __int8 **_frame_pcs;
  int *_register_block;
  BasicType _return_type;
  int _initial_info;
  int _caller_actual_parameters;
  int _counter_temp;
  int _unpack_kind;
  int _sender_sp_temp;
};

/* 1206 */
struct __cppobj BasicLock : _ValueObj
{
  markOopDesc *volatile _displaced_header;
};

/* 1207 */
struct __cppobj BasicObjectLock : _ValueObj
{
  BasicLock _lock;
  oopDesc *_obj;
};

/* 1208 */
struct __cppobj MonitorChunk : CHeapObj<7>
{
  int _number_of_monitors;
  BasicObjectLock *_monitors;
  MonitorChunk *_next;
};

/* 1209 */
struct __cppobj Handle : _ValueObj
{
  oopDesc **_handle;
};

/* 1210 */
struct __cppobj StackValue : ResourceObj
{
  BasicType _type;
  int _i;
  Handle _o;
};

/* 1211 */
struct __cppobj GrowableArray<StackValue *> : GenericGrowableArray
{
  StackValue **_data;
};

/* 1212 */
struct __cppobj StackValueCollection : ResourceObj
{
  GrowableArray<StackValue *> *_values;
};

/* 1214 */
struct __cppobj __declspec(align(8)) jvmtiDeferredLocalVariable : CHeapObj<6>
{
  BasicType _type;
  jvalue _value;
  int _index;
};

/* 1215 */
struct __cppobj GrowableArray<jvmtiDeferredLocalVariable *> : GenericGrowableArray
{
  jvmtiDeferredLocalVariable **_data;
};

/* 1216 */
struct __cppobj jvmtiDeferredLocalVariableSet : CHeapObj<6>
{
  Method *_method;
  int _bci;
  int *_id;
  GrowableArray<jvmtiDeferredLocalVariable *> *_locals;
};

/* 1217 */
struct __cppobj GrowableArray<jvmtiDeferredLocalVariableSet *> : GenericGrowableArray
{
  jvmtiDeferredLocalVariableSet **_data;
};

/* 1219 */
struct __cppobj ThreadSafepointState : CHeapObj<2>
{
  volatile bool _at_poll_safepoint;
  bool _has_called_back;
  JavaThread *_thread;
  volatile ThreadSafepointState::suspend_type _type;
  JavaThreadState _orig_thread_state;
};

/* 1221 */
struct /*VFT*/ PtrQueue_vtbl
{
  bool (__thiscall *should_enqueue_buffer)(PtrQueue *this);
};

/* 1222 */
struct __cppobj PtrQueueSet : _ValueObj
{
  PtrQueueSet_vtbl *__vftable /*VFT*/;
  Monitor *_cbl_mon;
  BufferNode *_completed_buffers_head;
  BufferNode *_completed_buffers_tail;
  int _n_completed_buffers;
  int _process_completed_threshold;
  volatile bool _process_completed;
  Mutex *_fl_lock;
  BufferNode *_buf_free_list;
  unsigned int _buf_free_list_sz;
  PtrQueueSet *_fl_owner;
  unsigned int _sz;
  bool _all_active;
  bool _notify_when_complete;
  int _max_completed_queue;
  int _completed_queue_padding;
};

/* 1223 */
struct /*VFT*/ PtrQueueSet_vtbl
{
  bool (__thiscall *mut_process_buffer)(PtrQueueSet *this, void **);
};

/* 1224 */
struct __cppobj BufferNode
{
  unsigned int _index;
  BufferNode *_next;
};

/* 1225 */
struct /*VFT*/ ObjPtrQueue_vtbl
{
  bool (__thiscall *should_enqueue_buffer)(PtrQueue *this);
};

/* 1227 */
struct /*VFT*/ DirtyCardQueue_vtbl
{
  bool (__thiscall *should_enqueue_buffer)(PtrQueue *this);
};

/* 1229 */
struct __cppobj ProfilerNode
{
  ProfilerNode_vtbl *__vftable /*VFT*/;
  ProfilerNode *_next;
  tick_counter ticks;
};

/* 1230 */
struct /*VFT*/ ProfilerNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 1231 */
struct __cppobj tick_counter
{
  int ticks_in_code;
  int ticks_in_native;
};

/* 1232 */
struct __cppobj __declspec(align(8)) elapsedTimer : _ValueObj
{
  __int64 _counter;
  __int64 _start_counter;
  bool _active;
};

/* 1233 */
struct __cppobj IntervalData : _ValueObj
{
  int _interpreted;
  int _compiled;
  int _native;
  int _compiling;
};

/* 1234 */
struct __cppobj ThreadProfiler : CHeapObj<7>
{
  char *area_bottom;
  char *area_top;
  char *area_limit;
  ProfilerNode **table;
  bool engaged;
  int thread_ticks;
  int compiler_ticks;
  int interpreter_ticks;
  bool region_flag[3];
  int class_loader_ticks;
  int extra_ticks;
  int blocked_ticks;
  int unknown_ticks_array[7];
  elapsedTimer timer;
  IntervalData _interval_data;
};

/* 1235 */
struct __cppobj PrivilegedElement : _ValueObj
{
  Klass *_klass;
  oopDesc *_privileged_context;
  int *_frame_id;
  PrivilegedElement *_next;
};

/* 1236 */
struct __cppobj GrowableArray<oopDesc *> : GenericGrowableArray
{
  oopDesc **_data;
};

/* 1237 */
struct __cppobj KlassHandle : StackObj
{
  Klass *_value;
};

/* 1238 */
struct __cppobj JvmtiEventEnabled : _ValueObj
{
  __int64 _enabled_bits;
};

/* 1239 */
struct __cppobj JvmtiThreadEventEnable : _ValueObj
{
  JvmtiEventEnabled _event_enabled;
};

/* 1240 */
struct _jvmtiEnv
{
  const jvmtiInterface_1_ *functions;
};

/* 1241 */
struct _jvmtiThreadInfo
{
  char *name;
  int priority;
  unsigned __int8 is_daemon;
  _jobject *thread_group;
  _jobject *context_class_loader;
};

/* 1242 */
struct __declspec(align(4)) _jvmtiThreadGroupInfo
{
  _jobject *parent;
  char *name;
  int max_priority;
  unsigned __int8 is_daemon;
};

/* 1243 */
struct _jvmtiMonitorUsage
{
  _jobject *owner;
  int entry_count;
  int waiter_count;
  _jobject **waiters;
  int notify_waiter_count;
  _jobject **notify_waiters;
};

/* 1244 */
struct __declspec(align(8)) _jvmtiLineNumberEntry
{
  __int64 start_location;
  int line_number;
};

/* 1245 */
struct __declspec(align(8)) _jvmtiLocalVariableEntry
{
  __int64 start_location;
  int length;
  char *name;
  char *signature;
  char *generic_signature;
  int slot;
};

/* 1246 */
const struct _jvmtiClassDefinition
{
  _jclass *klass;
  int class_byte_count;
  const unsigned __int8 *class_bytes;
};

/* 1247 */
struct __declspec(align(16)) jvmtiCapabilities
{
  unsigned __int32 can_tag_objects : 1;
  unsigned __int32 can_generate_field_modification_events : 1;
  unsigned __int32 can_generate_field_access_events : 1;
  unsigned __int32 can_get_bytecodes : 1;
  unsigned __int32 can_get_synthetic_attribute : 1;
  unsigned __int32 can_get_owned_monitor_info : 1;
  unsigned __int32 can_get_current_contended_monitor : 1;
  unsigned __int32 can_get_monitor_info : 1;
  unsigned __int32 can_pop_frame : 1;
  unsigned __int32 can_redefine_classes : 1;
  unsigned __int32 can_signal_thread : 1;
  unsigned __int32 can_get_source_file_name : 1;
  unsigned __int32 can_get_line_numbers : 1;
  unsigned __int32 can_get_source_debug_extension : 1;
  unsigned __int32 can_access_local_variables : 1;
  unsigned __int32 can_maintain_original_method_order : 1;
  unsigned __int32 can_generate_single_step_events : 1;
  unsigned __int32 can_generate_exception_events : 1;
  unsigned __int32 can_generate_frame_pop_events : 1;
  unsigned __int32 can_generate_breakpoint_events : 1;
  unsigned __int32 can_suspend : 1;
  unsigned __int32 can_redefine_any_class : 1;
  unsigned __int32 can_get_current_thread_cpu_time : 1;
  unsigned __int32 can_get_thread_cpu_time : 1;
  unsigned __int32 can_generate_method_entry_events : 1;
  unsigned __int32 can_generate_method_exit_events : 1;
  unsigned __int32 can_generate_all_class_hook_events : 1;
  unsigned __int32 can_generate_compiled_method_load_events : 1;
  unsigned __int32 can_generate_monitor_events : 1;
  unsigned __int32 can_generate_vm_object_alloc_events : 1;
  unsigned __int32 can_generate_native_method_bind_events : 1;
  unsigned __int32 can_generate_garbage_collection_events : 1;
  unsigned __int32 can_generate_object_free_events : 1;
  unsigned __int32 can_force_early_return : 1;
  unsigned __int32 can_get_owned_monitor_stack_depth_info : 1;
  unsigned __int32 can_get_constant_pool : 1;
  unsigned __int32 can_set_native_method_prefix : 1;
  unsigned __int32 can_retransform_classes : 1;
  unsigned __int32 can_retransform_any_class : 1;
  unsigned __int32 can_generate_resource_exhaustion_heap_events : 1;
  unsigned __int32 can_generate_resource_exhaustion_threads_events : 1;
};

/* 1248 */
struct _jvmtiFrameInfo
{
  struct _jmethodID *method;
  __int64 location;
};

/* 1249 */
struct _jvmtiStackInfo
{
  _jobject *thread;
  int state;
  _jvmtiFrameInfo *frame_buffer;
  int frame_count;
};

/* 1250 */
struct _jvmtiHeapReferenceInfoField
{
  int index;
};

/* 1251 */
struct _jvmtiHeapReferenceInfoArray
{
  int index;
};

/* 1252 */
struct _jvmtiHeapReferenceInfoConstantPool
{
  int index;
};

/* 1253 */
struct __declspec(align(8)) _jvmtiHeapReferenceInfoStackLocal
{
  __int64 thread_tag;
  __int64 thread_id;
  int depth;
  struct _jmethodID *method;
  __int64 location;
  int slot;
};

/* 1254 */
struct _jvmtiHeapReferenceInfoJniLocal
{
  __int64 thread_tag;
  __int64 thread_id;
  int depth;
  struct _jmethodID *method;
};

/* 1255 */
struct _jvmtiHeapReferenceInfoReserved
{
  __int64 reserved1;
  __int64 reserved2;
  __int64 reserved3;
  __int64 reserved4;
  __int64 reserved5;
  __int64 reserved6;
  __int64 reserved7;
  __int64 reserved8;
};

/* 1256 */
const union _jvmtiHeapReferenceInfo
{
  _jvmtiHeapReferenceInfoField field;
  _jvmtiHeapReferenceInfoArray array;
  _jvmtiHeapReferenceInfoConstantPool constant_pool;
  _jvmtiHeapReferenceInfoStackLocal stack_local;
  _jvmtiHeapReferenceInfoJniLocal jni_local;
  _jvmtiHeapReferenceInfoReserved other;
};

/* 1257 */
const struct _jvmtiHeapCallbacks
{
  int (__stdcall *heap_iteration_callback)(__int64, __int64, __int64 *, int, void *);
  int (__stdcall *heap_reference_callback)(jvmtiHeapReferenceKind, const _jvmtiHeapReferenceInfo *, __int64, __int64, __int64, __int64 *, __int64 *, int, void *);
  int (__stdcall *primitive_field_callback)(jvmtiHeapReferenceKind, const _jvmtiHeapReferenceInfo *, __int64, __int64 *, jvalue, jvmtiPrimitiveType, void *);
  int (__stdcall *array_primitive_value_callback)(__int64, __int64, __int64 *, int, jvmtiPrimitiveType, const void *, void *);
  int (__stdcall *string_primitive_value_callback)(__int64, __int64, __int64 *, const unsigned __int16 *, int, void *);
  int (__stdcall *reserved5)();
  int (__stdcall *reserved6)();
  int (__stdcall *reserved7)();
  int (__stdcall *reserved8)();
  int (__stdcall *reserved9)();
  int (__stdcall *reserved10)();
  int (__stdcall *reserved11)();
  int (__stdcall *reserved12)();
  int (__stdcall *reserved13)();
  int (__stdcall *reserved14)();
  int (__stdcall *reserved15)();
};

/* 1258 */
const struct _jvmtiAddrLocationMap
{
  const void *start_address;
  __int64 location;
};

/* 1259 */
const struct jvmtiEventCallbacks
{
  void (__stdcall *VMInit)(_jvmtiEnv *, JNIEnv_ *, _jobject *);
  void (__stdcall *VMDeath)(_jvmtiEnv *, JNIEnv_ *);
  void (__stdcall *ThreadStart)(_jvmtiEnv *, JNIEnv_ *, _jobject *);
  void (__stdcall *ThreadEnd)(_jvmtiEnv *, JNIEnv_ *, _jobject *);
  void (__stdcall *ClassFileLoadHook)(_jvmtiEnv *, JNIEnv_ *, _jclass *, _jobject *, const char *, _jobject *, int, const unsigned __int8 *, int *, unsigned __int8 **);
  void (__stdcall *ClassLoad)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jclass *);
  void (__stdcall *ClassPrepare)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jclass *);
  void (__stdcall *VMStart)(_jvmtiEnv *, JNIEnv_ *);
  void (__stdcall *Exception)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jobject *, struct _jmethodID *, __int64);
  void (__stdcall *ExceptionCatch)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jobject *);
  void (__stdcall *SingleStep)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64);
  void (__stdcall *FramePop)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, unsigned __int8);
  void (__stdcall *Breakpoint)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64);
  void (__stdcall *FieldAccess)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jclass *, _jobject *, struct _jfieldID *);
  void (__stdcall *FieldModification)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jclass *, _jobject *, struct _jfieldID *, char, jvalue);
  void (__stdcall *MethodEntry)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *);
  void (__stdcall *MethodExit)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, unsigned __int8, jvalue);
  void (__stdcall *NativeMethodBind)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, void *, void **);
  void (__stdcall *CompiledMethodLoad)(_jvmtiEnv *, struct _jmethodID *, int, const void *, int, const _jvmtiAddrLocationMap *, const void *);
  void (__stdcall *CompiledMethodUnload)(_jvmtiEnv *, struct _jmethodID *, const void *);
  void (__stdcall *DynamicCodeGenerated)(_jvmtiEnv *, const char *, const void *, int);
  void (__stdcall *DataDumpRequest)(_jvmtiEnv *);
  void (__stdcall *reserved72)();
  void (__stdcall *MonitorWait)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, __int64);
  void (__stdcall *MonitorWaited)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, unsigned __int8);
  void (__stdcall *MonitorContendedEnter)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *);
  void (__stdcall *MonitorContendedEntered)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *);
  void (__stdcall *reserved77)();
  void (__stdcall *reserved78)();
  void (__stdcall *reserved79)();
  void (__stdcall *ResourceExhausted)(_jvmtiEnv *, JNIEnv_ *, int, const void *, const char *);
  void (__stdcall *GarbageCollectionStart)(_jvmtiEnv *);
  void (__stdcall *GarbageCollectionFinish)(_jvmtiEnv *);
  void (__stdcall *ObjectFree)(_jvmtiEnv *, __int64);
  void (__stdcall *VMObjectAlloc)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, _jclass *, __int64);
};

/* 1260 */
struct __declspec(align(4)) _jvmtiParamInfo
{
  char *name;
  jvmtiParamKind kind;
  jvmtiParamTypes base_type;
  unsigned __int8 null_ok;
};

/* 1261 */
struct _jvmtiExtensionFunctionInfo
{
  jvmtiError (*func)(_jvmtiEnv *, ...);
  char *id;
  char *short_description;
  int param_count;
  _jvmtiParamInfo *params;
  int error_count;
  jvmtiError *errors;
};

/* 1262 */
struct _jvmtiExtensionEventInfo
{
  int extension_event_index;
  char *id;
  char *short_description;
  int param_count;
  _jvmtiParamInfo *params;
};

/* 1263 */
struct _jvmtiTimerInfo
{
  __int64 max_value;
  unsigned __int8 may_skip_forward;
  unsigned __int8 may_skip_backward;
  jvmtiTimerKind kind;
  __int64 reserved1;
  __int64 reserved2;
};

/* 1264 */
struct _jvmtiMonitorStackDepthInfo
{
  _jobject *monitor;
  int stack_depth;
};

/* 1265 */
const struct jvmtiInterface_1_
{
  void *reserved1;
  jvmtiError (*SetEventNotificationMode)(_jvmtiEnv *, jvmtiEventMode, jvmtiEvent, _jobject *, ...);
  void *reserved3;
  jvmtiError (__stdcall *GetAllThreads)(_jvmtiEnv *, int *, _jobject ***);
  jvmtiError (__stdcall *SuspendThread)(_jvmtiEnv *, _jobject *);
  jvmtiError (__stdcall *ResumeThread)(_jvmtiEnv *, _jobject *);
  jvmtiError (__stdcall *StopThread)(_jvmtiEnv *, _jobject *, _jobject *);
  jvmtiError (__stdcall *InterruptThread)(_jvmtiEnv *, _jobject *);
  jvmtiError (__stdcall *GetThreadInfo)(_jvmtiEnv *, _jobject *, _jvmtiThreadInfo *);
  jvmtiError (__stdcall *GetOwnedMonitorInfo)(_jvmtiEnv *, _jobject *, int *, _jobject ***);
  jvmtiError (__stdcall *GetCurrentContendedMonitor)(_jvmtiEnv *, _jobject *, _jobject **);
  jvmtiError (__stdcall *RunAgentThread)(_jvmtiEnv *, _jobject *, void (__stdcall *)(_jvmtiEnv *, JNIEnv_ *, void *), const void *, int);
  jvmtiError (__stdcall *GetTopThreadGroups)(_jvmtiEnv *, int *, _jobject ***);
  jvmtiError (__stdcall *GetThreadGroupInfo)(_jvmtiEnv *, _jobject *, _jvmtiThreadGroupInfo *);
  jvmtiError (__stdcall *GetThreadGroupChildren)(_jvmtiEnv *, _jobject *, int *, _jobject ***, int *, _jobject ***);
  jvmtiError (__stdcall *GetFrameCount)(_jvmtiEnv *, _jobject *, int *);
  jvmtiError (__stdcall *GetThreadState)(_jvmtiEnv *, _jobject *, int *);
  jvmtiError (__stdcall *GetCurrentThread)(_jvmtiEnv *, _jobject **);
  jvmtiError (__stdcall *GetFrameLocation)(_jvmtiEnv *, _jobject *, int, struct _jmethodID **, __int64 *);
  jvmtiError (__stdcall *NotifyFramePop)(_jvmtiEnv *, _jobject *, int);
  jvmtiError (__stdcall *GetLocalObject)(_jvmtiEnv *, _jobject *, int, int, _jobject **);
  jvmtiError (__stdcall *GetLocalInt)(_jvmtiEnv *, _jobject *, int, int, int *);
  jvmtiError (__stdcall *GetLocalLong)(_jvmtiEnv *, _jobject *, int, int, __int64 *);
  jvmtiError (__stdcall *GetLocalFloat)(_jvmtiEnv *, _jobject *, int, int, float *);
  jvmtiError (__stdcall *GetLocalDouble)(_jvmtiEnv *, _jobject *, int, int, long double *);
  jvmtiError (__stdcall *SetLocalObject)(_jvmtiEnv *, _jobject *, int, int, _jobject *);
  jvmtiError (__stdcall *SetLocalInt)(_jvmtiEnv *, _jobject *, int, int, int);
  jvmtiError (__stdcall *SetLocalLong)(_jvmtiEnv *, _jobject *, int, int, __int64);
  jvmtiError (__stdcall *SetLocalFloat)(_jvmtiEnv *, _jobject *, int, int, float);
  jvmtiError (__stdcall *SetLocalDouble)(_jvmtiEnv *, _jobject *, int, int, long double);
  jvmtiError (__stdcall *CreateRawMonitor)(_jvmtiEnv *, const char *, struct _jrawMonitorID **);
  jvmtiError (__stdcall *DestroyRawMonitor)(_jvmtiEnv *, struct _jrawMonitorID *);
  jvmtiError (__stdcall *RawMonitorEnter)(_jvmtiEnv *, struct _jrawMonitorID *);
  jvmtiError (__stdcall *RawMonitorExit)(_jvmtiEnv *, struct _jrawMonitorID *);
  jvmtiError (__stdcall *RawMonitorWait)(_jvmtiEnv *, struct _jrawMonitorID *, __int64);
  jvmtiError (__stdcall *RawMonitorNotify)(_jvmtiEnv *, struct _jrawMonitorID *);
  jvmtiError (__stdcall *RawMonitorNotifyAll)(_jvmtiEnv *, struct _jrawMonitorID *);
  jvmtiError (__stdcall *SetBreakpoint)(_jvmtiEnv *, struct _jmethodID *, __int64);
  jvmtiError (__stdcall *ClearBreakpoint)(_jvmtiEnv *, struct _jmethodID *, __int64);
  void *reserved40;
  jvmtiError (__stdcall *SetFieldAccessWatch)(_jvmtiEnv *, _jclass *, struct _jfieldID *);
  jvmtiError (__stdcall *ClearFieldAccessWatch)(_jvmtiEnv *, _jclass *, struct _jfieldID *);
  jvmtiError (__stdcall *SetFieldModificationWatch)(_jvmtiEnv *, _jclass *, struct _jfieldID *);
  jvmtiError (__stdcall *ClearFieldModificationWatch)(_jvmtiEnv *, _jclass *, struct _jfieldID *);
  jvmtiError (__stdcall *IsModifiableClass)(_jvmtiEnv *, _jclass *, unsigned __int8 *);
  jvmtiError (__stdcall *Allocate)(_jvmtiEnv *, __int64, unsigned __int8 **);
  jvmtiError (__stdcall *Deallocate)(_jvmtiEnv *, unsigned __int8 *);
  jvmtiError (__stdcall *GetClassSignature)(_jvmtiEnv *, _jclass *, char **, char **);
  jvmtiError (__stdcall *GetClassStatus)(_jvmtiEnv *, _jclass *, int *);
  jvmtiError (__stdcall *GetSourceFileName)(_jvmtiEnv *, _jclass *, char **);
  jvmtiError (__stdcall *GetClassModifiers)(_jvmtiEnv *, _jclass *, int *);
  jvmtiError (__stdcall *GetClassMethods)(_jvmtiEnv *, _jclass *, int *, struct _jmethodID ***);
  jvmtiError (__stdcall *GetClassFields)(_jvmtiEnv *, _jclass *, int *, struct _jfieldID ***);
  jvmtiError (__stdcall *GetImplementedInterfaces)(_jvmtiEnv *, _jclass *, int *, _jclass ***);
  jvmtiError (__stdcall *IsInterface)(_jvmtiEnv *, _jclass *, unsigned __int8 *);
  jvmtiError (__stdcall *IsArrayClass)(_jvmtiEnv *, _jclass *, unsigned __int8 *);
  jvmtiError (__stdcall *GetClassLoader)(_jvmtiEnv *, _jclass *, _jobject **);
  jvmtiError (__stdcall *GetObjectHashCode)(_jvmtiEnv *, _jobject *, int *);
  jvmtiError (__stdcall *GetObjectMonitorUsage)(_jvmtiEnv *, _jobject *, _jvmtiMonitorUsage *);
  jvmtiError (__stdcall *GetFieldName)(_jvmtiEnv *, _jclass *, struct _jfieldID *, char **, char **, char **);
  jvmtiError (__stdcall *GetFieldDeclaringClass)(_jvmtiEnv *, _jclass *, struct _jfieldID *, _jclass **);
  jvmtiError (__stdcall *GetFieldModifiers)(_jvmtiEnv *, _jclass *, struct _jfieldID *, int *);
  jvmtiError (__stdcall *IsFieldSynthetic)(_jvmtiEnv *, _jclass *, struct _jfieldID *, unsigned __int8 *);
  jvmtiError (__stdcall *GetMethodName)(_jvmtiEnv *, struct _jmethodID *, char **, char **, char **);
  jvmtiError (__stdcall *GetMethodDeclaringClass)(_jvmtiEnv *, struct _jmethodID *, _jclass **);
  jvmtiError (__stdcall *GetMethodModifiers)(_jvmtiEnv *, struct _jmethodID *, int *);
  void *reserved67;
  jvmtiError (__stdcall *GetMaxLocals)(_jvmtiEnv *, struct _jmethodID *, int *);
  jvmtiError (__stdcall *GetArgumentsSize)(_jvmtiEnv *, struct _jmethodID *, int *);
  jvmtiError (__stdcall *GetLineNumberTable)(_jvmtiEnv *, struct _jmethodID *, int *, _jvmtiLineNumberEntry **);
  jvmtiError (__stdcall *GetMethodLocation)(_jvmtiEnv *, struct _jmethodID *, __int64 *, __int64 *);
  jvmtiError (__stdcall *GetLocalVariableTable)(_jvmtiEnv *, struct _jmethodID *, int *, _jvmtiLocalVariableEntry **);
  jvmtiError (__stdcall *SetNativeMethodPrefix)(_jvmtiEnv *, const char *);
  jvmtiError (__stdcall *SetNativeMethodPrefixes)(_jvmtiEnv *, int, char **);
  jvmtiError (__stdcall *GetBytecodes)(_jvmtiEnv *, struct _jmethodID *, int *, unsigned __int8 **);
  jvmtiError (__stdcall *IsMethodNative)(_jvmtiEnv *, struct _jmethodID *, unsigned __int8 *);
  jvmtiError (__stdcall *IsMethodSynthetic)(_jvmtiEnv *, struct _jmethodID *, unsigned __int8 *);
  jvmtiError (__stdcall *GetLoadedClasses)(_jvmtiEnv *, int *, _jclass ***);
  jvmtiError (__stdcall *GetClassLoaderClasses)(_jvmtiEnv *, _jobject *, int *, _jclass ***);
  jvmtiError (__stdcall *PopFrame)(_jvmtiEnv *, _jobject *);
  jvmtiError (__stdcall *ForceEarlyReturnObject)(_jvmtiEnv *, _jobject *, _jobject *);
  jvmtiError (__stdcall *ForceEarlyReturnInt)(_jvmtiEnv *, _jobject *, int);
  jvmtiError (__stdcall *ForceEarlyReturnLong)(_jvmtiEnv *, _jobject *, __int64);
  jvmtiError (__stdcall *ForceEarlyReturnFloat)(_jvmtiEnv *, _jobject *, float);
  jvmtiError (__stdcall *ForceEarlyReturnDouble)(_jvmtiEnv *, _jobject *, long double);
  jvmtiError (__stdcall *ForceEarlyReturnVoid)(_jvmtiEnv *, _jobject *);
  jvmtiError (__stdcall *RedefineClasses)(_jvmtiEnv *, int, const _jvmtiClassDefinition *);
  jvmtiError (__stdcall *GetVersionNumber)(_jvmtiEnv *, int *);
  jvmtiError (__stdcall *GetCapabilities)(_jvmtiEnv *, jvmtiCapabilities *);
  jvmtiError (__stdcall *GetSourceDebugExtension)(_jvmtiEnv *, _jclass *, char **);
  jvmtiError (__stdcall *IsMethodObsolete)(_jvmtiEnv *, struct _jmethodID *, unsigned __int8 *);
  jvmtiError (__stdcall *SuspendThreadList)(_jvmtiEnv *, int, _jobject *const *, jvmtiError *);
  jvmtiError (__stdcall *ResumeThreadList)(_jvmtiEnv *, int, _jobject *const *, jvmtiError *);
  void *reserved94;
  void *reserved95;
  void *reserved96;
  void *reserved97;
  void *reserved98;
  void *reserved99;
  jvmtiError (__stdcall *GetAllStackTraces)(_jvmtiEnv *, int, _jvmtiStackInfo **, int *);
  jvmtiError (__stdcall *GetThreadListStackTraces)(_jvmtiEnv *, int, _jobject *const *, int, _jvmtiStackInfo **);
  jvmtiError (__stdcall *GetThreadLocalStorage)(_jvmtiEnv *, _jobject *, void **);
  jvmtiError (__stdcall *SetThreadLocalStorage)(_jvmtiEnv *, _jobject *, const void *);
  jvmtiError (__stdcall *GetStackTrace)(_jvmtiEnv *, _jobject *, int, int, _jvmtiFrameInfo *, int *);
  void *reserved105;
  jvmtiError (__stdcall *GetTag)(_jvmtiEnv *, _jobject *, __int64 *);
  jvmtiError (__stdcall *SetTag)(_jvmtiEnv *, _jobject *, __int64);
  jvmtiError (__stdcall *ForceGarbageCollection)(_jvmtiEnv *);
  jvmtiError (__stdcall *IterateOverObjectsReachableFromObject)(_jvmtiEnv *, _jobject *, jvmtiIterationControl (__stdcall *)(jvmtiObjectReferenceKind, __int64, __int64, __int64 *, __int64, int, void *), const void *);
  jvmtiError (__stdcall *IterateOverReachableObjects)(_jvmtiEnv *, jvmtiIterationControl (__stdcall *)(jvmtiHeapRootKind, __int64, __int64, __int64 *, void *), jvmtiIterationControl (__stdcall *)(jvmtiHeapRootKind, __int64, __int64, __int64 *, __int64, int, struct _jmethodID *, int, void *), jvmtiIterationControl (__stdcall *)(jvmtiObjectReferenceKind, __int64, __int64, __int64 *, __int64, int, void *), const void *);
  jvmtiError (__stdcall *IterateOverHeap)(_jvmtiEnv *, jvmtiHeapObjectFilter, jvmtiIterationControl (__stdcall *)(__int64, __int64, __int64 *, void *), const void *);
  jvmtiError (__stdcall *IterateOverInstancesOfClass)(_jvmtiEnv *, _jclass *, jvmtiHeapObjectFilter, jvmtiIterationControl (__stdcall *)(__int64, __int64, __int64 *, void *), const void *);
  void *reserved113;
  jvmtiError (__stdcall *GetObjectsWithTags)(_jvmtiEnv *, int, const __int64 *, int *, _jobject ***, __int64 **);
  jvmtiError (__stdcall *FollowReferences)(_jvmtiEnv *, int, _jclass *, _jobject *, const _jvmtiHeapCallbacks *, const void *);
  jvmtiError (__stdcall *IterateThroughHeap)(_jvmtiEnv *, int, _jclass *, const _jvmtiHeapCallbacks *, const void *);
  void *reserved117;
  void *reserved118;
  void *reserved119;
  jvmtiError (__stdcall *SetJNIFunctionTable)(_jvmtiEnv *, const JNINativeInterface_ *);
  jvmtiError (__stdcall *GetJNIFunctionTable)(_jvmtiEnv *, JNINativeInterface_ **);
  jvmtiError (__stdcall *SetEventCallbacks)(_jvmtiEnv *, const jvmtiEventCallbacks *, int);
  jvmtiError (__stdcall *GenerateEvents)(_jvmtiEnv *, jvmtiEvent);
  jvmtiError (__stdcall *GetExtensionFunctions)(_jvmtiEnv *, int *, _jvmtiExtensionFunctionInfo **);
  jvmtiError (__stdcall *GetExtensionEvents)(_jvmtiEnv *, int *, _jvmtiExtensionEventInfo **);
  jvmtiError (__stdcall *SetExtensionEventCallback)(_jvmtiEnv *, int, void (*)(_jvmtiEnv *, ...));
  jvmtiError (__stdcall *DisposeEnvironment)(_jvmtiEnv *);
  jvmtiError (__stdcall *GetErrorName)(_jvmtiEnv *, jvmtiError, char **);
  jvmtiError (__stdcall *GetJLocationFormat)(_jvmtiEnv *, jvmtiJlocationFormat *);
  jvmtiError (__stdcall *GetSystemProperties)(_jvmtiEnv *, int *, char ***);
  jvmtiError (__stdcall *GetSystemProperty)(_jvmtiEnv *, const char *, char **);
  jvmtiError (__stdcall *SetSystemProperty)(_jvmtiEnv *, const char *, const char *);
  jvmtiError (__stdcall *GetPhase)(_jvmtiEnv *, jvmtiPhase *);
  jvmtiError (__stdcall *GetCurrentThreadCpuTimerInfo)(_jvmtiEnv *, _jvmtiTimerInfo *);
  jvmtiError (__stdcall *GetCurrentThreadCpuTime)(_jvmtiEnv *, __int64 *);
  jvmtiError (__stdcall *GetThreadCpuTimerInfo)(_jvmtiEnv *, _jvmtiTimerInfo *);
  jvmtiError (__stdcall *GetThreadCpuTime)(_jvmtiEnv *, _jobject *, __int64 *);
  jvmtiError (__stdcall *GetTimerInfo)(_jvmtiEnv *, _jvmtiTimerInfo *);
  jvmtiError (__stdcall *GetTime)(_jvmtiEnv *, __int64 *);
  jvmtiError (__stdcall *GetPotentialCapabilities)(_jvmtiEnv *, jvmtiCapabilities *);
  void *reserved141;
  jvmtiError (__stdcall *AddCapabilities)(_jvmtiEnv *, const jvmtiCapabilities *);
  jvmtiError (__stdcall *RelinquishCapabilities)(_jvmtiEnv *, const jvmtiCapabilities *);
  jvmtiError (__stdcall *GetAvailableProcessors)(_jvmtiEnv *, int *);
  jvmtiError (__stdcall *GetClassVersionNumbers)(_jvmtiEnv *, _jclass *, int *, int *);
  jvmtiError (__stdcall *GetConstantPool)(_jvmtiEnv *, _jclass *, int *, int *, unsigned __int8 **);
  jvmtiError (__stdcall *GetEnvironmentLocalStorage)(_jvmtiEnv *, void **);
  jvmtiError (__stdcall *SetEnvironmentLocalStorage)(_jvmtiEnv *, const void *);
  jvmtiError (__stdcall *AddToBootstrapClassLoaderSearch)(_jvmtiEnv *, const char *);
  jvmtiError (__stdcall *SetVerboseFlag)(_jvmtiEnv *, jvmtiVerboseFlag, unsigned __int8);
  jvmtiError (__stdcall *AddToSystemClassLoaderSearch)(_jvmtiEnv *, const char *);
  jvmtiError (__stdcall *RetransformClasses)(_jvmtiEnv *, int, _jclass *const *);
  jvmtiError (__stdcall *GetOwnedMonitorStackDepthInfo)(_jvmtiEnv *, _jobject *, int *, _jvmtiMonitorStackDepthInfo **);
  jvmtiError (__stdcall *GetObjectSize)(_jvmtiEnv *, _jobject *, __int64 *);
  jvmtiError (__stdcall *GetLocalInstance)(_jvmtiEnv *, _jobject *, int, _jobject **);
};

/* 1267 */
struct jvmtiExtEventCallbacks
{
  void (*ClassUnload)(_jvmtiEnv *, ...);
};

/* 1272 */
struct __cppobj JvmtiEnvEventEnable : _ValueObj
{
  JvmtiEventEnabled _event_user_enabled;
  JvmtiEventEnabled _event_callback_enabled;
  JvmtiEventEnabled _event_enabled;
};

/* 1266 */
struct __cppobj __unaligned __declspec(align(8)) JvmtiEnvBase : CHeapObj<7>
{
  _jvmtiEnv _jvmti_external;
  int _magic;
  int _version;
  JvmtiEnvBase *_next;
  bool _is_retransformable;
  __declspec(align(4)) const void *_env_local_storage;
  jvmtiEventCallbacks _event_callbacks;
  jvmtiExtEventCallbacks _ext_event_callbacks;
  JvmtiTagMap *volatile _tag_map;
  __declspec(align(8)) JvmtiEnvEventEnable _env_event_enable;
  jvmtiCapabilities _current_capabilities;
  jvmtiCapabilities _prohibited_capabilities;
  volatile bool _class_file_load_hook_ever_enabled;
  __declspec(align(4)) char **_native_method_prefixes;
  int _native_method_prefix_count;
};

/* 1268 */
struct __cppobj JvmtiEnv : JvmtiEnvBase
{
};

/* 1269 */
struct __cppobj __declspec(align(8)) JvmtiTagHashmapEntry : CHeapObj<7>
{
  oopDesc *_object;
  __int64 _tag;
  JvmtiTagHashmapEntry *_next;
};

/* 1270 */
struct __cppobj JvmtiTagHashmap : CHeapObj<7>
{
  int _size;
  int _size_index;
  int _entry_count;
  float _load_factor;
  int _resize_threshold;
  bool _resizing_enabled;
  int _trace_threshold;
  JvmtiTagHashmapEntry **_table;
};

/* 1271 */
struct __cppobj JvmtiTagMap : CHeapObj<7>
{
  JvmtiEnv *_env;
  __unaligned __declspec(align(1)) Mutex _lock;
  JvmtiTagHashmap *_hashmap;
  JvmtiTagHashmapEntry *_free_entries;
  int _free_entries_count;
};

/* 1274 */
struct __cppobj JvmtiEnvThreadEventEnable : _ValueObj
{
  JvmtiEventEnabled _event_user_enabled;
  JvmtiEventEnabled _event_enabled;
};

/* 1273 */
struct __cppobj JvmtiEnvThreadState : CHeapObj<7>
{
  JavaThread *_thread;
  JvmtiEnv *_env;
  JvmtiEnvThreadState *_next;
  struct _jmethodID *_current_method_id;
  int _current_bci;
  bool _breakpoint_posted;
  bool _single_stepping_posted;
  JvmtiEnvThreadEventEnable _event_enable;
  void *_agent_thread_local_storage_data;
  JvmtiFramePops *_frame_pops;
};

/* 1275 */
struct __cppobj JvmtiFramePops : CHeapObj<7>
{
  GrowableArray<int> *_pops;
};

/* 1276 */
struct __cppobj __declspec(align(8)) JvmtiThreadState : CHeapObj<7>
{
  JavaThread *_thread;
  bool _exception_detected;
  bool _exception_caught;
  bool _hide_single_stepping;
  bool _pending_step_for_popframe;
  bool _pending_step_for_earlyret;
  int _hide_level;
  KlassHandle *_class_being_redefined;
  JvmtiClassLoadKind _class_load_kind;
  int _cur_stack_depth;
  JvmtiThreadEventEnable _thread_event_enable;
  JvmtiEnvThreadState *_head_env_thread_state;
  JvmtiThreadState *_next;
  JvmtiThreadState *_prev;
  JvmtiDynamicCodeEventCollector *_dynamic_code_event_collector;
  JvmtiVMObjectAllocEventCollector *_vm_object_alloc_event_collector;
  KlassHandle *_the_class_for_redefinition_verification;
  KlassHandle *_scratch_class_for_redefinition_verification;
  bool _debuggable;
  int _earlyret_state;
  TosState _earlyret_tos;
  jvalue _earlyret_value;
  oopDesc *_earlyret_oop;
};

/* 1277 */
struct __cppobj JvmtiEventCollector : StackObj
{
  JvmtiEventCollector_vtbl *__vftable /*VFT*/;
  JvmtiEventCollector *_prev;
};

/* 1278 */
struct /*VFT*/ JvmtiEventCollector_vtbl
{
  bool (__thiscall *is_dynamic_code_event)(JvmtiEventCollector *this);
  bool (__thiscall *is_vm_object_alloc_event)(JvmtiEventCollector *this);
};

/* 1279 */
struct __cppobj JvmtiCodeBlobDesc : CHeapObj<7>
{
  char _name[64];
  unsigned __int8 *_code_begin;
  unsigned __int8 *_code_end;
};

/* 1280 */
struct __cppobj GrowableArray<JvmtiCodeBlobDesc *> : GenericGrowableArray
{
  JvmtiCodeBlobDesc **_data;
};

/* 1281 */
struct /*VFT*/ JvmtiDynamicCodeEventCollector_vtbl
{
  bool (__thiscall *is_dynamic_code_event)(JvmtiEventCollector *this);
  bool (__thiscall *is_vm_object_alloc_event)(JvmtiEventCollector *this);
};

/* 1282 */
struct __cppobj JvmtiDynamicCodeEventCollector : JvmtiEventCollector
{
  GrowableArray<JvmtiCodeBlobDesc *> *_code_blobs;
};

/* 1283 */
struct /*VFT*/ JvmtiVMObjectAllocEventCollector_vtbl
{
  bool (__thiscall *is_dynamic_code_event)(JvmtiEventCollector *this);
  bool (__thiscall *is_vm_object_alloc_event)(JvmtiEventCollector *this);
};

/* 1284 */
struct __cppobj __declspec(align(4)) JvmtiVMObjectAllocEventCollector : JvmtiEventCollector
{
  GrowableArray<oopDesc *> *_allocated;
  bool _enable;
};

/* 1285 */
struct __cppobj JvmtiGetLoadedClassesClosure : StackObj
{
  _jobject *_initiatingLoader;
  int _count;
  Handle *_list;
  int _index;
};

/* 1286 */
struct __cppobj ThreadStatistics : CHeapObj<7>
{
  __int64 _contended_enter_count;
  elapsedTimer _contended_enter_timer;
  __int64 _monitor_wait_count;
  elapsedTimer _monitor_wait_timer;
  __int64 _sleep_count;
  elapsedTimer _sleep_timer;
  bool _count_pending_reset;
  bool _timer_pending_reset;
  int _perf_recursion_counts[6];
  elapsedTimer _perf_timers[6];
};

/* 1287 */
struct __cppobj os::PlatformParker : CHeapObj<7>
{
  void *_ParkEvent;
};

/* 1288 */
struct __cppobj Parker : os::PlatformParker
{
  volatile int _counter;
  Parker *FreeNext;
  JavaThread *AssociatedWith;
};

/* 1289 */
struct __cppobj __declspec(align(4)) MonitorInfo : ResourceObj
{
  oopDesc *_owner;
  BasicLock *_lock;
  oopDesc *_owner_klass;
  bool _eliminated;
  bool _owner_is_scalar_replaced;
};

/* 1290 */
struct __cppobj GrowableArray<MonitorInfo *> : GenericGrowableArray
{
  MonitorInfo **_data;
};

/* 1291 */
struct __cppobj NamedThread : Thread
{
  char *_name;
  JavaThread *_processed_thread;
};

/* 1292 */
struct __cppobj __declspec(align(8)) WorkerThread : NamedThread
{
  unsigned int _id;
};

/* 1319 */
struct __cppobj ClassLoaderData::ChunkedHandleList : _ValueObj
{
  ClassLoaderData::ChunkedHandleList::Chunk *_head;
};

/* 1293 */
struct __cppobj ClassLoaderData : CHeapObj<1>
{
  oopDesc *_class_loader;
  ClassLoaderData::Dependencies _dependencies;
  Metaspace *_metaspace;
  Mutex *_metaspace_lock;
  bool _unloading;
  bool _keep_alive;
  bool _is_anonymous;
  volatile int _claimed;
  Klass *_klasses;
  ClassLoaderData::ChunkedHandleList _handles;
  JNIMethodBlock *_jmethod_ids;
  GrowableArray<Metadata *> *_deallocate_list;
  ClassLoaderData *_next;
};

/* 1294 */
struct __cppobj __declspec(align(4)) CLDClosure : Closure
{
  CLDClosure_vtbl *__vftable /*VFT*/;
};

/* 1295 */
struct /*VFT*/ CLDClosure_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 1296 */
struct __cppobj __declspec(align(4)) CodeBlobClosure : Closure
{
  CodeBlobClosure_vtbl *__vftable /*VFT*/;
};

/* 1297 */
struct /*VFT*/ CodeBlobClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 1298 */
struct __cppobj OSThread : CHeapObj<2>
{
  int (__cdecl *_start_proc)(void *);
  void *_start_parm;
  volatile ThreadState _state;
  volatile int _interrupted;
  void *_thread_handle;
  void *_interrupt_event;
  ThreadState _last_state;
  unsigned int _thread_id;
};

/* 1299 */
struct /*VFT*/ Thread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 1301 */
struct __cppobj Metabase<Metachunk> : _ValueObj
{
  unsigned int _word_size;
  Metachunk *_next;
  Metachunk *_prev;
};

/* 1300 */
struct __cppobj Metachunk : Metabase<Metachunk>
{
  VirtualSpaceNode *_container;
  MetaWord *_top;
};

/* 1303 */
struct __cppobj __declspec(align(4)) ReservedSpace : _ValueObj
{
  char *_base;
  unsigned int _size;
  unsigned int _noaccess_prefix;
  unsigned int _alignment;
  bool _special;
  bool _executable;
};

/* 1304 */
struct __cppobj VirtualSpace : _ValueObj
{
  char *_low_boundary;
  char *_high_boundary;
  char *_low;
  char *_high;
  bool _special;
  bool _executable;
  char *_lower_high;
  char *_middle_high;
  char *_upper_high;
  char *_lower_high_boundary;
  char *_middle_high_boundary;
  char *_upper_high_boundary;
  unsigned int _lower_alignment;
  unsigned int _middle_alignment;
  unsigned int _upper_alignment;
};

/* 1302 */
struct __cppobj VirtualSpaceNode : CHeapObj<1>
{
  VirtualSpaceNode *_next;
  MemRegion _reserved;
  ReservedSpace _rs;
  VirtualSpace _virtual_space;
  MetaWord *_top;
  unsigned int _container_count;
};

/* 1305 */
struct MetaWord
{
  char *i;
};

/* 1307 */
struct __cppobj Metabase<Metablock> : _ValueObj
{
  unsigned int _word_size;
  Metablock *_next;
  Metablock *_prev;
};

/* 1306 */
struct __cppobj Metablock : Metabase<Metablock>
{
};

/* 1308 */
struct __cppobj FreeBlockDictionary<Metablock> : CHeapObj<5>
{
  FreeBlockDictionary<Metablock>_vtbl *__vftable /*VFT*/;
};

/* 1309 */
struct /*VFT*/ FreeBlockDictionary<Metablock>_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<Metablock> *this, Metablock *);
  Metablock *(__thiscall *get_chunk)(FreeBlockDictionary<Metablock> *this, unsigned int, FreeBlockDictionary<Metablock>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<Metablock> *this, Metablock *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<Metablock> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<Metablock> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metablock> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<Metablock> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<Metablock> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<Metablock> *this, long double);
  Metablock *(__thiscall *find_largest_dict)(FreeBlockDictionary<Metablock> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<Metablock> *this, Metablock *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<Metablock> *this);
  Metablock *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<Metablock> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<Metablock> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<Metablock> *this);
};

/* 1310 */
struct __cppobj FreeList<Metablock> : _ValueObj
{
  Metablock *_head;
  Metablock *_tail;
  unsigned int _size;
  int _count;
};

/* 1311 */
struct __cppobj TreeList<Metablock,FreeList<Metablock> > : FreeList<Metablock>
{
  TreeList<Metablock,FreeList<Metablock> > *_parent;
  TreeList<Metablock,FreeList<Metablock> > *_left;
  TreeList<Metablock,FreeList<Metablock> > *_right;
};

/* 1312 */
struct /*VFT*/ BinaryTreeDictionary<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<Metablock> *this, Metablock *);
  Metablock *(__thiscall *get_chunk)(FreeBlockDictionary<Metablock> *this, unsigned int, FreeBlockDictionary<Metablock>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<Metablock> *this, Metablock *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<Metablock> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<Metablock> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metablock> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<Metablock> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<Metablock> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<Metablock> *this, long double);
  Metablock *(__thiscall *find_largest_dict)(FreeBlockDictionary<Metablock> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<Metablock> *this, Metablock *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<Metablock> *this);
  Metablock *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<Metablock> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<Metablock> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<Metablock> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<Metablock> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<Metablock> *this);
};

/* 1313 */
struct __cppobj BinaryTreeDictionary<Metablock,FreeList<Metablock> > : FreeBlockDictionary<Metablock>
{
  unsigned int _total_size;
  unsigned int _total_free_blocks;
  TreeList<Metablock,FreeList<Metablock> > *_root;
};

/* 1314 */
struct __cppobj BlockFreelist : _ValueObj
{
  BinaryTreeDictionary<Metablock,FreeList<Metablock> > *_dictionary;
};

/* 1315 */
struct __cppobj SpaceManager : CHeapObj<1>
{
  Mutex *const _lock;
  Metaspace::MetadataType _mdtype;
  Metachunk *_chunks_in_use[4];
  Metachunk *_current_chunk;
  unsigned int _allocated_blocks_words;
  unsigned int _allocated_chunks_words;
  unsigned int _allocated_chunks_count;
  BlockFreelist _block_freelists;
};

/* 1316 */
struct __cppobj Metaspace::AllocRecord : CHeapObj<1>
{
  Metaspace::AllocRecord *_next;
  unsigned __int8 *_ptr;
  MetaspaceObj::Type _type;
  int _byte_size;
};

/* 1317 */
struct __cppobj Metaspace : CHeapObj<1>
{
  SpaceManager *_vsm;
  SpaceManager *_class_vsm;
  Metaspace::AllocRecord *_alloc_record_head;
  Metaspace::AllocRecord *_alloc_record_tail;
};

/* 1318 */
struct __cppobj ClassLoaderData::ChunkedHandleList::Chunk : CHeapObj<1>
{
  oopDesc *_data[32];
  volatile unsigned int _size;
  ClassLoaderData::ChunkedHandleList::Chunk *_next;
};

/* 1320 */
struct __cppobj JNIMethodBlock : CHeapObj<1>
{
  Method *_methods[8];
  int _top;
  JNIMethodBlock *_next;
};

/* 1321 */
struct __cppobj GrowableArray<Klass *> : GenericGrowableArray
{
  Klass **_data;
};

/* 1322 */
struct __cppobj klassVtable : ResourceObj
{
  KlassHandle _klass;
  int _tableOffset;
  int _length;
};

/* 1323 */
struct __cppobj constantPoolHandle : StackObj
{
  ConstantPool *_value;
  Thread *_thread;
};

/* 1324 */
struct __cppobj fieldDescriptor : _ValueObj
{
  AccessFlags _access_flags;
  int _index;
  constantPoolHandle _cp;
};

/* 1325 */
struct KlassSizeStats
{
  unsigned __int64 _inst_size;
  unsigned __int64 _inst_count;
  unsigned __int64 _inst_bytes;
  unsigned __int64 _mirror_bytes;
  unsigned __int64 _klass_bytes;
  unsigned __int64 _secondary_supers_bytes;
  unsigned __int64 _vtab_bytes;
  unsigned __int64 _itab_bytes;
  unsigned __int64 _nonstatic_oopmap_bytes;
  unsigned __int64 _methods_array_bytes;
  unsigned __int64 _method_ordering_bytes;
  unsigned __int64 _default_methods_array_bytes;
  unsigned __int64 _default_vtable_indices_bytes;
  unsigned __int64 _local_interfaces_bytes;
  unsigned __int64 _transitive_interfaces_bytes;
  unsigned __int64 _fields_bytes;
  unsigned __int64 _inner_classes_bytes;
  unsigned __int64 _signers_bytes;
  unsigned __int64 _class_annotations_bytes;
  unsigned __int64 _class_type_annotations_bytes;
  unsigned __int64 _fields_annotations_bytes;
  unsigned __int64 _fields_type_annotations_bytes;
  unsigned __int64 _methods_annotations_bytes;
  unsigned __int64 _methods_parameter_annotations_bytes;
  unsigned __int64 _methods_type_annotations_bytes;
  unsigned __int64 _methods_default_annotations_bytes;
  unsigned __int64 _annotations_bytes;
  unsigned __int64 _cp_bytes;
  unsigned __int64 _cp_tags_bytes;
  unsigned __int64 _cp_cache_bytes;
  unsigned __int64 _cp_operands_bytes;
  unsigned __int64 _cp_refmap_bytes;
  unsigned __int64 _cp_all_bytes;
  unsigned __int64 _method_count;
  unsigned __int64 _method_bytes;
  unsigned __int64 _const_method_bytes;
  unsigned __int64 _method_data_bytes;
  unsigned __int64 _stackmap_bytes;
  unsigned __int64 _bytecode_bytes;
  unsigned __int64 _method_all_bytes;
  unsigned __int64 _ro_bytes;
  unsigned __int64 _rw_bytes;
  unsigned __int64 _total_bytes;
};

/* 1326 */
struct TaskQueueSuper<16384,5>::Age::fields
{
  unsigned __int16 _top;
  unsigned __int16 _tag;
};

/* 1327 */
union $3C7541752184F33170B9DE3691B85F5C
{
  unsigned int _data;
  TaskQueueSuper<16384,5>::Age::fields _fields;
};

/* 1328 */
volatile struct __cppobj TaskQueueSuper<16384,5>::Age
{
  $3C7541752184F33170B9DE3691B85F5C ___u0;
};

/* 1329 */
struct __cppobj TaskQueueSuper<16384,5> : CHeapObj<5>
{
  volatile unsigned int _bottom;
  volatile TaskQueueSuper<16384,5>::Age _age;
};

/* 1330 */
struct __cppobj __declspec(align(4)) ArrayAllocator<oopDesc *,5> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1331 */
struct __cppobj GenericTaskQueue<oopDesc *,5,16384> : TaskQueueSuper<16384,5>
{
  ArrayAllocator<oopDesc *,5> _array_allocator;
  oopDesc *volatile *_elems;
};

/* 1332 */
struct __cppobj StackBase<5>
{
  const unsigned int _seg_size;
  const unsigned int _max_size;
  const unsigned int _max_cache_size;
  unsigned int _cur_seg_size;
  unsigned int _full_seg_size;
  unsigned int _cache_size;
};

/* 1333 */
struct __cppobj Stack<oopDesc *,5> : StackBase<5>
{
  Stack<oopDesc *,5>_vtbl *__vftable /*VFT*/;
  oopDesc **_cur_seg;
  oopDesc **_cache;
};

/* 1334 */
struct /*VFT*/ Stack<oopDesc *,5>_vtbl
{
  oopDesc **(__thiscall *alloc)(Stack<oopDesc *,5> *this, unsigned int);
  void (__thiscall *free)(Stack<oopDesc *,5> *this, oopDesc **, unsigned int);
};

/* 1335 */
struct __cppobj OverflowTaskQueue<oopDesc *,5,16384> : GenericTaskQueue<oopDesc *,5,16384>
{
  Stack<oopDesc *,5> _overflow_stack;
};

/* 1336 */
struct TaskQueueSuper<4096,5>::Age::fields
{
  unsigned __int16 _top;
  unsigned __int16 _tag;
};

/* 1337 */
union $4E1A4BD6D97FA97B17D0CB13CE6A20EE
{
  unsigned int _data;
  TaskQueueSuper<4096,5>::Age::fields _fields;
};

/* 1338 */
volatile struct __cppobj TaskQueueSuper<4096,5>::Age
{
  $4E1A4BD6D97FA97B17D0CB13CE6A20EE ___u0;
};

/* 1339 */
struct __cppobj TaskQueueSuper<4096,5> : CHeapObj<5>
{
  volatile unsigned int _bottom;
  volatile TaskQueueSuper<4096,5>::Age _age;
};

/* 1340 */
struct __cppobj __declspec(align(4)) ArrayAllocator<ObjArrayTask,5> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1341 */
volatile struct __cppobj ObjArrayTask
{
  oopDesc *_obj;
  int _index;
};

/* 1342 */
struct __cppobj GenericTaskQueue<ObjArrayTask,5,4096> : TaskQueueSuper<4096,5>
{
  ArrayAllocator<ObjArrayTask,5> _array_allocator;
  volatile ObjArrayTask *_elems;
};

/* 1343 */
struct __cppobj Stack<ObjArrayTask,5> : StackBase<5>
{
  Stack<ObjArrayTask,5>_vtbl *__vftable /*VFT*/;
  ObjArrayTask *_cur_seg;
  ObjArrayTask *_cache;
};

/* 1344 */
struct /*VFT*/ Stack<ObjArrayTask,5>_vtbl
{
  ObjArrayTask *(__thiscall *alloc)(Stack<ObjArrayTask,5> *this, unsigned int);
  void (__thiscall *free)(Stack<ObjArrayTask,5> *this, ObjArrayTask *, unsigned int);
};

/* 1345 */
struct __cppobj OverflowTaskQueue<ObjArrayTask,5,4096> : GenericTaskQueue<ObjArrayTask,5,4096>
{
  Stack<ObjArrayTask,5> _overflow_stack;
};

/* 1346 */
struct TaskQueueSuper<16384,7>::Age::fields
{
  unsigned __int16 _top;
  unsigned __int16 _tag;
};

/* 1347 */
union $C4ACE2A9D8EE096C1C28D5B359711879
{
  unsigned int _data;
  TaskQueueSuper<16384,7>::Age::fields _fields;
};

/* 1348 */
volatile struct __cppobj TaskQueueSuper<16384,7>::Age
{
  $C4ACE2A9D8EE096C1C28D5B359711879 ___u0;
};

/* 1349 */
struct __cppobj TaskQueueSuper<16384,7> : CHeapObj<7>
{
  volatile unsigned int _bottom;
  volatile TaskQueueSuper<16384,7>::Age _age;
};

/* 1350 */
struct __cppobj GenericTaskQueue<unsigned int,7,16384> : TaskQueueSuper<16384,7>
{
  ArrayAllocator<unsigned int,7> _array_allocator;
  volatile unsigned int *_elems;
};

/* 1351 */
struct __cppobj StackBase<7>
{
  const unsigned int _seg_size;
  const unsigned int _max_size;
  const unsigned int _max_cache_size;
  unsigned int _cur_seg_size;
  unsigned int _full_seg_size;
  unsigned int _cache_size;
};

/* 1352 */
struct __cppobj Stack<unsigned int,7> : StackBase<7>
{
  Stack<unsigned int,7>_vtbl *__vftable /*VFT*/;
  unsigned int *_cur_seg;
  unsigned int *_cache;
};

/* 1353 */
struct /*VFT*/ Stack<unsigned int,7>_vtbl
{
  unsigned int *(__thiscall *alloc)(Stack<unsigned int,7> *this, unsigned int);
  void (__thiscall *free)(Stack<unsigned int,7> *this, unsigned int *, unsigned int);
};

/* 1354 */
struct __cppobj OverflowTaskQueue<unsigned int,7,16384> : GenericTaskQueue<unsigned int,7,16384>
{
  Stack<unsigned int,7> _overflow_stack;
};

/* 1355 */
struct __cppobj ParCompactionManager : CHeapObj<5>
{
  OverflowTaskQueue<oopDesc *,5,16384> _marking_stack;
  OverflowTaskQueue<ObjArrayTask,5,4096> _objarray_stack;
  OverflowTaskQueue<unsigned int,7,16384> *_region_stack;
  unsigned int _region_stack_index;
  ParCompactionManager::Action _action;
};

/* 1356 */
struct __cppobj PSPromotionLAB : CHeapObj<5>
{
  PSPromotionLAB_vtbl *__vftable /*VFT*/;
  HeapWord *_top;
  HeapWord *_bottom;
  HeapWord *_end;
  PSPromotionLAB::LabState _state;
};

/* 1357 */
struct /*VFT*/ PSPromotionLAB_vtbl
{
  void (__thiscall *flush)(PSPromotionLAB *this);
};

/* 1358 */
struct /*VFT*/ PSYoungPromotionLAB_vtbl
{
  void (__thiscall *flush)(PSPromotionLAB *this);
};

/* 1359 */
struct __cppobj PSYoungPromotionLAB : PSPromotionLAB
{
};

/* 1360 */
struct __cppobj __declspec(align(4)) PSVirtualSpace : CHeapObj<5>
{
  PSVirtualSpace_vtbl *__vftable /*VFT*/;
  const unsigned int _alignment;
  char *_reserved_low_addr;
  char *_reserved_high_addr;
  char *_committed_low_addr;
  char *_committed_high_addr;
  bool _special;
};

/* 1361 */
struct /*VFT*/ PSVirtualSpace_vtbl
{
  bool (__thiscall *expand_by)(PSVirtualSpace *this, unsigned int);
  bool (__thiscall *shrink_by)(PSVirtualSpace *this, unsigned int);
  unsigned int (__thiscall *expand_into)(PSVirtualSpace *this, PSVirtualSpace *, unsigned int);
  void (__thiscall *print_space_boundaries_on)(PSVirtualSpace *this, outputStream *);
};

/* 1362 */
struct __cppobj ObjectStartArray : CHeapObj<5>
{
  PSVirtualSpace _virtual_space;
  MemRegion _reserved_region;
  MemRegion _covered_region;
  MemRegion _blocks_region;
  char *_raw_base;
  char *_offset_base;
};

/* 1363 */
struct /*VFT*/ PSOldPromotionLAB_vtbl
{
  void (__thiscall *flush)(PSPromotionLAB *this);
};

/* 1364 */
struct __cppobj PSOldPromotionLAB : PSPromotionLAB
{
  ObjectStartArray *_start_array;
};

/* 1365 */
struct TaskQueueSuper<16384,1>::Age::fields
{
  unsigned __int16 _top;
  unsigned __int16 _tag;
};

/* 1366 */
union $F3FFAAD6A449BC9AE81BC12353DCB6CA
{
  unsigned int _data;
  TaskQueueSuper<16384,1>::Age::fields _fields;
};

/* 1367 */
volatile struct __cppobj TaskQueueSuper<16384,1>::Age
{
  $F3FFAAD6A449BC9AE81BC12353DCB6CA ___u0;
};

/* 1368 */
struct __cppobj TaskQueueSuper<16384,1> : CHeapObj<1>
{
  volatile unsigned int _bottom;
  volatile TaskQueueSuper<16384,1>::Age _age;
};

/* 1369 */
struct __cppobj __declspec(align(4)) ArrayAllocator<StarTask,1> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1370 */
volatile struct __cppobj StarTask
{
  void *_holder;
};

/* 1371 */
struct __cppobj GenericTaskQueue<StarTask,1,16384> : TaskQueueSuper<16384,1>
{
  ArrayAllocator<StarTask,1> _array_allocator;
  volatile StarTask *_elems;
};

/* 1372 */
struct __cppobj StackBase<1>
{
  const unsigned int _seg_size;
  const unsigned int _max_size;
  const unsigned int _max_cache_size;
  unsigned int _cur_seg_size;
  unsigned int _full_seg_size;
  unsigned int _cache_size;
};

/* 1373 */
struct __cppobj Stack<StarTask,1> : StackBase<1>
{
  Stack<StarTask,1>_vtbl *__vftable /*VFT*/;
  StarTask *_cur_seg;
  StarTask *_cache;
};

/* 1374 */
struct /*VFT*/ Stack<StarTask,1>_vtbl
{
  StarTask *(__thiscall *alloc)(Stack<StarTask,1> *this, unsigned int);
  void (__thiscall *free)(Stack<StarTask,1> *this, StarTask *, unsigned int);
};

/* 1375 */
struct __cppobj OverflowTaskQueue<StarTask,1,16384> : GenericTaskQueue<StarTask,1,16384>
{
  Stack<StarTask,1> _overflow_stack;
};

/* 1376 */
struct __cppobj CopyFailedInfo : CHeapObj<5>
{
  CopyFailedInfo_vtbl *__vftable /*VFT*/;
  unsigned int _first_size;
  unsigned int _smallest_size;
  unsigned int _total_size;
  unsigned int _count;
};

/* 1377 */
struct /*VFT*/ CopyFailedInfo_vtbl
{
  void (__thiscall *register_copy_failure)(CopyFailedInfo *this, unsigned int);
  void (__thiscall *reset)(CopyFailedInfo *this);
};

/* 1378 */
struct /*VFT*/ PromotionFailedInfo_vtbl
{
  void (__thiscall *register_copy_failure)(CopyFailedInfo *this, unsigned int);
  void (__thiscall *reset)(CopyFailedInfo *this);
};

/* 1379 */
struct __cppobj PromotionFailedInfo : CopyFailedInfo
{
  OSThread *_thread;
};

/* 1380 */
struct __cppobj PSPromotionManager : _ValueObj
{
  PSYoungPromotionLAB _young_lab;
  PSOldPromotionLAB _old_lab;
  bool _young_gen_is_full;
  bool _old_gen_is_full;
  OverflowTaskQueue<StarTask,1,16384> _claimed_stack_depth;
  OverflowTaskQueue<oopDesc *,5,16384> _claimed_stack_breadth;
  bool _totally_drain;
  unsigned int _target_stack_size;
  unsigned int _array_chunk_size;
  unsigned int _min_array_size_for_chunking;
  PromotionFailedInfo _promotion_failed_info;
};

/* 1381 */
struct __cppobj __declspec(align(4)) BoolObjectClosure : Closure
{
  BoolObjectClosure_vtbl *__vftable /*VFT*/;
};

/* 1382 */
struct /*VFT*/ BoolObjectClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 1383 */
struct __cppobj ReferencePolicy : CHeapObj<5>
{
  ReferencePolicy_vtbl *__vftable /*VFT*/;
};

/* 1384 */
struct /*VFT*/ ReferencePolicy_vtbl
{
  bool (__thiscall *should_clear_reference)(ReferencePolicy *this, oopDesc *, __int64);
  void (__thiscall *setup)(ReferencePolicy *this);
};

/* 1385 */
struct __cppobj DiscoveredList
{
  oopDesc *_oop_head;
  unsigned int _compressed_head;
  unsigned int _len;
};

/* 1386 */
struct __cppobj ReferenceProcessor : CHeapObj<5>
{
  MemRegion _span;
  bool _discovering_refs;
  bool _discovery_is_atomic;
  bool _discovery_is_mt;
  bool _enqueuing_is_done;
  bool _processing_is_mt;
  unsigned int _next_id;
  BoolObjectClosure *_is_alive_non_header;
  ReferencePolicy *_current_soft_ref_policy;
  unsigned int _num_q;
  unsigned int _max_num_q;
  DiscoveredList *_discovered_refs;
  DiscoveredList *_discoveredSoftRefs;
  DiscoveredList *_discoveredWeakRefs;
  DiscoveredList *_discoveredFinalRefs;
  DiscoveredList *_discoveredPhantomRefs;
  DiscoveredList *_discoveredCleanerRefs;
};

/* 1387 */
struct __cppobj ExtendedOopClosure : OopClosure
{
  ReferenceProcessor *_ref_processor;
};

/* 1388 */
struct /*VFT*/ ExtendedOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1389 */
struct __cppobj __declspec(align(4)) KlassClosure : Closure
{
  KlassClosure_vtbl *__vftable /*VFT*/;
};

/* 1390 */
struct /*VFT*/ KlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 1391 */
struct /*VFT*/ KlassToOopClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 1392 */
struct __cppobj KlassToOopClosure : KlassClosure
{
  OopClosure *_oop_closure;
};

/* 1393 */
struct /*VFT*/ MetadataAwareOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1394 */
struct __cppobj MetadataAwareOopClosure : ExtendedOopClosure
{
  KlassToOopClosure _klass_closure;
};

/* 1395 */
struct __cppobj __declspec(align(4)) ArrayAllocator<ObjArrayChunkedTask,5> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1396 */
volatile struct __cppobj ObjArrayChunkedTask
{
  oopDesc *_obj;
  int _chunk;
  int _pow;
};

/* 1397 */
struct __cppobj GenericTaskQueue<ObjArrayChunkedTask,5,16384> : TaskQueueSuper<16384,5>
{
  ArrayAllocator<ObjArrayChunkedTask,5> _array_allocator;
  volatile ObjArrayChunkedTask *_elems;
};

/* 1398 */
struct __cppobj Stack<ObjArrayChunkedTask,5> : StackBase<5>
{
  Stack<ObjArrayChunkedTask,5>_vtbl *__vftable /*VFT*/;
  ObjArrayChunkedTask *_cur_seg;
  ObjArrayChunkedTask *_cache;
};

/* 1399 */
struct /*VFT*/ Stack<ObjArrayChunkedTask,5>_vtbl
{
  ObjArrayChunkedTask *(__thiscall *alloc)(Stack<ObjArrayChunkedTask,5> *this, unsigned int);
  void (__thiscall *free)(Stack<ObjArrayChunkedTask,5> *this, ObjArrayChunkedTask *, unsigned int);
};

/* 1400 */
struct __cppobj OverflowTaskQueue<ObjArrayChunkedTask,5,16384> : GenericTaskQueue<ObjArrayChunkedTask,5,16384>
{
  Stack<ObjArrayChunkedTask,5> _overflow_stack;
};

/* 1401 */
struct __cppobj BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384> : OverflowTaskQueue<ObjArrayChunkedTask,5,16384>
{
  bool _buf_empty;
  ObjArrayChunkedTask _elem;
};

/* 1402 */
struct __cppobj Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> : BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>
{
  char _pad_buf_[192];
};

/* 1403 */
struct __cppobj ShenandoahStrDedupQueue : CHeapObj<5>
{
  ShenandoahStrDedupQueueSet *_queue_set;
  ShenandoahStrDedupChunkedList<64> *_current_list;
  unsigned int _queue_num;
};

/* 1404 */
struct __cppobj ShenandoahStrDedupChunkedList<64> : CHeapObj<5>
{
  oopDesc *_oops[64];
  ShenandoahStrDedupChunkedList<64> *_next;
  unsigned int _index;
};

/* 1405 */
struct __cppobj ShenandoahStrDedupQueueSet : CHeapObj<5>
{
  ShenandoahStrDedupQueue **_local_queues;
  unsigned int _num_queues;
  ShenandoahStrDedupChunkedList<64> *volatile *_outgoing_work_list;
  ShenandoahStrDedupChunkedList<64> *_free_list;
  unsigned int _num_free_queues;
  Monitor *_lock;
  bool _terminated;
  volatile unsigned int _claimed;
};

/* 1406 */
struct __cppobj CollectedHeap : CHeapObj<7>
{
  CollectedHeap_vtbl *__vftable /*VFT*/;
  GCHeapLog *_gc_heap_log;
  bool _defer_initial_card_mark;
  MemRegion _reserved;
  BarrierSet *_barrier_set;
  bool _is_gc_active;
  unsigned int _n_par_threads;
  unsigned int _total_collections;
  unsigned int _total_full_collections;
  GCCause::Cause _gc_cause;
  GCCause::Cause _gc_lastcause;
  PerfStringVariable *_perf_gc_cause;
  PerfStringVariable *_perf_gc_lastcause;
};

/* 1407 */
struct __cppobj Representation<ElapsedCounterSource>
{
  __int64 _rep;
};

/* 1408 */
struct __cppobj CounterRepresentation<ElapsedCounterSource> : Representation<ElapsedCounterSource>
{
};

/* 1409 */
const struct __cppobj TimeInstant<CounterRepresentation,ElapsedCounterSource> : CounterRepresentation<ElapsedCounterSource>
{
};

/* 1410 */
struct __cppobj GCPhase
{
  GCPhase_vtbl *__vftable /*VFT*/;
  __declspec(align(8)) const char *_name;
  int _level;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _start;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _end;
};

/* 1411 */
struct __cppobj ConcurrentPhase : GCPhase
{
};

/* 1412 */
struct __cppobj PhaseVisitor
{
  PhaseVisitor_vtbl *__vftable /*VFT*/;
};

/* 1413 */
struct __cppobj PausePhase : GCPhase
{
};

/* 1414 */
struct /*VFT*/ PhaseVisitor_vtbl
{
  void (__thiscall *visit)(PhaseVisitor *this, ConcurrentPhase *);
  void (__thiscall *visit)(PhaseVisitor *this, PausePhase *);
  void (__thiscall *visit)(PhaseVisitor *this, GCPhase *);
};

/* 1415 */
struct /*VFT*/ GCPhase_vtbl
{
  void (__thiscall *accept)(GCPhase *this, PhaseVisitor *);
};

/* 1416 */
struct /*VFT*/ PausePhase_vtbl
{
  void (__thiscall *accept)(GCPhase *this, PhaseVisitor *);
};

/* 1417 */
struct __cppobj GrowableArray<PausePhase> : GenericGrowableArray
{
  PausePhase *_data;
};

/* 1418 */
struct __cppobj PhasesStack
{
  int _phase_indices[5];
  int _next_phase_level;
};

/* 1419 */
struct __cppobj TimeInterval<CounterRepresentation,ElapsedCounterSource> : CounterRepresentation<ElapsedCounterSource>
{
};

/* 1420 */
struct __cppobj TimePartitions
{
  GrowableArray<PausePhase> *_phases;
  PhasesStack _active_phases;
  TimeInterval<CounterRepresentation,ElapsedCounterSource> _sum_of_pauses;
  TimeInterval<CounterRepresentation,ElapsedCounterSource> _longest_pause;
};

/* 1423 */
struct __cppobj GCId : _ValueObj
{
  unsigned int _id;
};

/* 1424 */
struct __cppobj SharedGCInfo : _ValueObj
{
  GCId _gc_id;
  GCName _name;
  GCCause::Cause _cause;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _start_timestamp;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _end_timestamp;
  TimeInterval<CounterRepresentation,ElapsedCounterSource> _sum_of_pauses;
  TimeInterval<CounterRepresentation,ElapsedCounterSource> _longest_pause;
};

/* 1421 */
struct __cppobj GCTracer : ResourceObj
{
  GCTracer_vtbl *__vftable /*VFT*/;
  SharedGCInfo _shared_gc_info;
};

/* 1422 */
struct /*VFT*/ GCTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1425 */
struct __cppobj AdaptiveSizePolicy : CHeapObj<5>
{
  AdaptiveSizePolicy_vtbl *__vftable /*VFT*/;
  const long double _throughput_goal;
  unsigned int _eden_size;
  unsigned int _promo_size;
  unsigned int _survivor_size;
  bool _gc_overhead_limit_exceeded;
  bool _print_gc_overhead_limit_would_be_exceeded;
  unsigned int _gc_overhead_limit_count;
  AdaptivePaddedAverage *_avg_minor_pause;
  AdaptiveWeightedAverage *_avg_minor_interval;
  AdaptiveWeightedAverage *_avg_minor_gc_cost;
  AdaptiveWeightedAverage *_avg_major_interval;
  AdaptiveWeightedAverage *_avg_major_gc_cost;
  AdaptiveWeightedAverage *_avg_young_live;
  AdaptiveWeightedAverage *_avg_eden_live;
  AdaptiveWeightedAverage *_avg_old_live;
  AdaptivePaddedAverage *_avg_survived;
  AdaptivePaddedNoZeroDevAverage *_avg_pretenured;
  LinearLeastSquareFit *_minor_pause_old_estimator;
  LinearLeastSquareFit *_minor_pause_young_estimator;
  LinearLeastSquareFit *_minor_collection_estimator;
  LinearLeastSquareFit *_major_collection_estimator;
  long double _latest_minor_mutator_interval_seconds;
  const long double _threshold_tolerance_percent;
  const long double _gc_pause_goal_sec;
  bool _young_gen_policy_is_ready;
  int _change_young_gen_for_min_pauses;
  int _change_old_gen_for_maj_pauses;
  int _change_old_gen_for_throughput;
  int _change_young_gen_for_throughput;
  bool _increment_tenuring_threshold_for_gc_cost;
  bool _decrement_tenuring_threshold_for_gc_cost;
  bool _decrement_tenuring_threshold_for_survivor_limit;
  int _decrease_for_footprint;
  int _decide_at_full_gc;
  unsigned __int64 _young_gen_change_for_minor_throughput;
  unsigned __int64 _old_gen_change_for_major_throughput;
};

/* 1426 */
struct __cppobj LinearLeastSquareFit : CHeapObj<5>
{
  long double _sum_x;
  long double _sum_x_squared;
  long double _sum_y;
  long double _sum_xy;
  long double _intercept;
  long double _slope;
  AdaptiveWeightedAverage _mean_x;
  AdaptiveWeightedAverage _mean_y;
};

/* 1427 */
struct /*VFT*/ AdaptiveSizePolicy_vtbl
{
  AdaptiveSizePolicy::GCPolicyKind (__thiscall *kind)(AdaptiveSizePolicy *this);
  long double (__thiscall *gc_cost)(AdaptiveSizePolicy *this);
  long double (__thiscall *time_since_major_gc)(AdaptiveSizePolicy *this);
  long double (__thiscall *major_gc_interval_average_for_decay)(AdaptiveSizePolicy *this);
  long double (__thiscall *mutator_cost)(AdaptiveSizePolicy *this);
  void (__thiscall *update_minor_pause_old_estimator)(AdaptiveSizePolicy *this, long double);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *eden_decrement)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_decrement)(AdaptiveSizePolicy *this, unsigned int);
  void (__thiscall *clear_generation_free_space_flags)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_begin)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_end)(AdaptiveSizePolicy *this, GCCause::Cause);
  LinearLeastSquareFit *(__thiscall *minor_pause_old_estimator)(AdaptiveSizePolicy *this);
  bool (__thiscall *print_adaptive_size_policy_on)(AdaptiveSizePolicy *this, outputStream *);
};

/* 1428 */
struct __cppobj AdaptivePaddedAverage : AdaptiveWeightedAverage
{
  float _padded_avg;
  float _deviation;
  unsigned int _padding;
};

/* 1429 */
struct __cppobj AdaptivePaddedNoZeroDevAverage : AdaptivePaddedAverage
{
};

/* 1430 */
struct __cppobj __declspec(align(4)) CollectorPolicy : CHeapObj<5>
{
  CollectorPolicy_vtbl *__vftable /*VFT*/;
  GCPolicyCounters *_gc_policy_counters;
  unsigned int _initial_heap_byte_size;
  unsigned int _max_heap_byte_size;
  unsigned int _min_heap_byte_size;
  unsigned int _space_alignment;
  unsigned int _heap_alignment;
  bool _max_heap_size_cmdline;
  AdaptiveSizePolicy *_size_policy;
  bool _should_clear_all_soft_refs;
  bool _all_soft_refs_clear;
};

/* 1431 */
struct __cppobj GenerationSpec : CHeapObj<5>
{
  GenerationSpec_vtbl *__vftable /*VFT*/;
  Generation::Name _name;
  unsigned int _init_size;
  unsigned int _max_size;
};

/* 1432 */
struct /*VFT*/ GenerationSpec_vtbl
{
  int (__thiscall *n_covered_regions)(GenerationSpec *this);
};

/* 1433 */
struct __cppobj __unaligned __declspec(align(4)) GenCollectorPolicy : CollectorPolicy
{
  unsigned int _min_gen0_size;
  unsigned int _initial_gen0_size;
  unsigned int _max_gen0_size;
  unsigned int _gen_alignment;
  GenerationSpec **_generations;
};

/* 1434 */
struct __cppobj TwoGenerationCollectorPolicy : GenCollectorPolicy
{
  unsigned int _min_gen1_size;
  unsigned int _initial_gen1_size;
  unsigned int _max_gen1_size;
};

/* 1435 */
struct __cppobj MarkSweepPolicy : TwoGenerationCollectorPolicy
{
};

/* 1436 */
struct __cppobj ConcurrentMarkSweepPolicy : TwoGenerationCollectorPolicy
{
};

/* 1437 */
struct __cppobj G1MMUTracker : CHeapObj<5>
{
  G1MMUTracker_vtbl *__vftable /*VFT*/;
  long double _time_slice;
  long double _max_gc_time;
};

/* 1438 */
struct /*VFT*/ G1MMUTracker_vtbl
{
  void (__thiscall *add_pause)(G1MMUTracker *this, long double, long double, bool);
  long double (__thiscall *longest_pause)(G1MMUTracker *this, long double);
  long double (__thiscall *when_sec)(G1MMUTracker *this, long double, long double);
};

/* 1456 */
struct __cppobj SequentialSubTasksDone : StackObj
{
  unsigned int _n_tasks;
  unsigned int _n_claimed;
  unsigned int _n_threads;
  unsigned int _n_completed;
};

/* 1439 */
struct __cppobj Space : CHeapObj<5>
{
  Space_vtbl *__vftable /*VFT*/;
  HeapWord *_bottom;
  HeapWord *_end;
  HeapWord *_saved_mark_word;
  MemRegionClosure *_preconsumptionDirtyCardClosure;
  SequentialSubTasksDone _par_seq_tasks;
};

/* 1440 */
struct __cppobj __declspec(align(4)) ObjectClosure : Closure
{
  ObjectClosure_vtbl *__vftable /*VFT*/;
};

/* 1441 */
struct /*VFT*/ ObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 1442 */
struct __cppobj MemRegionClosure : StackObj
{
  MemRegionClosure_vtbl *__vftable /*VFT*/;
};

/* 1443 */
struct /*VFT*/ MemRegionClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 1444 */
struct /*VFT*/ MemRegionClosureRO_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 1445 */
struct __cppobj MemRegionClosureRO : MemRegionClosure
{
};

/* 1446 */
struct __cppobj DirtyCardToOopClosure : MemRegionClosureRO
{
  ExtendedOopClosure *_cl;
  Space *_sp;
  CardTableModRefBS::PrecisionStyle _precision;
  HeapWord *_boundary;
  HeapWord *_min_done;
};

/* 1447 */
struct /*VFT*/ DirtyCardToOopClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
  HeapWord *(__thiscall *get_actual_top)(DirtyCardToOopClosure *this, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region)(DirtyCardToOopClosure *this, MemRegion, HeapWord *, HeapWord *);
};

/* 1448 */
struct __cppobj CompactibleSpace : Space
{
  HeapWord *_compaction_top;
  CompactibleSpace *_next_compaction_space;
  HeapWord *_first_dead;
  HeapWord *_end_of_live;
};

/* 1449 */
struct __cppobj SpaceMangler : CHeapObj<5>
{
  SpaceMangler_vtbl *__vftable /*VFT*/;
  HeapWord *_top_for_allocations;
};

/* 1450 */
struct /*VFT*/ SpaceMangler_vtbl
{
  HeapWord *(__thiscall *top)(SpaceMangler *this);
  HeapWord *(__thiscall *end)(SpaceMangler *this);
};

/* 1451 */
struct __cppobj ContiguousSpace : CompactibleSpace
{
  HeapWord *_top;
  HeapWord *_concurrent_iteration_safe_limit;
  GenSpaceMangler *_mangler;
};

/* 1452 */
struct /*VFT*/ GenSpaceMangler_vtbl
{
  HeapWord *(__thiscall *top)(SpaceMangler *this);
  HeapWord *(__thiscall *end)(SpaceMangler *this);
};

/* 1453 */
struct __cppobj GenSpaceMangler : SpaceMangler
{
  ContiguousSpace *_sp;
};

/* 1454 */
struct __cppobj WaterMark : _ValueObj
{
  HeapWord *_point;
  Space *_space;
};

/* 1455 */
struct /*VFT*/ Space_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
};

/* 1549 */
struct __cppobj Generation::StatRecord
{
  int invocations;
  elapsedTimer accumulated_time;
};

/* 1457 */
struct __cppobj Generation : CHeapObj<5>
{
  Generation_vtbl *__vftable /*VFT*/;
  __int64 _time_of_last_gc;
  MemRegion _prev_used_region;
  MemRegion _reserved;
  VirtualSpace _virtual_space;
  int _level;
  ReferenceProcessor *_ref_processor;
  CollectorCounters *_gc_counters;
  GCStats *_gc_stats;
  Generation::StatRecord _stat_record;
};

/* 1458 */
struct __cppobj SpaceClosure : StackObj
{
  SpaceClosure_vtbl *__vftable /*VFT*/;
};

/* 1459 */
struct /*VFT*/ SpaceClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 1460 */
struct __cppobj CompactPoint : StackObj
{
  Generation *gen;
  CompactibleSpace *space;
  HeapWord *threshold;
};

/* 1467 */
struct __cppobj KlassRemSet
{
  bool _accumulate_modified_oops;
};

/* 1461 */
struct __cppobj __declspec(align(4)) GenRemSet : CHeapObj<5>
{
  GenRemSet_vtbl *__vftable /*VFT*/;
  BarrierSet *_bs;
  KlassRemSet _klass_rem_set;
};

/* 1462 */
struct __cppobj CardTableRS : GenRemSet
{
  CardTableModRefBSForCTRS *_ct_bs;
  char *_last_cur_val_in_gen;
  char _cur_youngergen_card_val;
  int _regions_to_iterate;
};

/* 1463 */
struct __cppobj OopsInGenClosure : ExtendedOopClosure
{
  Generation *_orig_gen;
  Generation *_gen;
  HeapWord *_gen_boundary;
  CardTableRS *_rs;
};

/* 1464 */
struct /*VFT*/ GenRemSet_vtbl
{
  GenRemSet::Name (__thiscall *rs_kind)(GenRemSet *this);
  CardTableRS *(__thiscall *as_CardTableRS)(GenRemSet *this);
  void (__thiscall *prepare_for_younger_refs_iterate)(GenRemSet *this, bool);
  void (__thiscall *younger_refs_iterate)(GenRemSet *this, Generation *, OopsInGenClosure *);
  void (__thiscall *younger_refs_in_space_iterate)(GenRemSet *this, Space *, OopsInGenClosure *);
  void (__thiscall *write_ref_field_gc_work)(GenRemSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_gc_par)(GenRemSet *this, void *, oopDesc *);
  void (__thiscall *resize_covered_region)(GenRemSet *this, MemRegion);
  bool (__thiscall *is_aligned)(GenRemSet *this, HeapWord *);
  void (__thiscall *verify)(GenRemSet *this);
  void (__thiscall *verify_aligned_region_empty)(GenRemSet *this, MemRegion);
  void (__thiscall *print)(GenRemSet *this);
  void (__thiscall *clear)(GenRemSet *this, MemRegion);
  void (__thiscall *clear_into_younger)(GenRemSet *this, Generation *);
  void (__thiscall *invalidate)(GenRemSet *this, MemRegion, bool);
  void (__thiscall *invalidate_or_clear)(GenRemSet *this, Generation *);
};

/* 1465 */
struct __cppobj BarrierSet : CHeapObj<5>
{
  BarrierSet_vtbl *__vftable /*VFT*/;
  int _max_covered_regions;
  BarrierSet::Name _kind;
};

/* 1466 */
struct /*VFT*/ BarrierSet_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
};

/* 1468 */
struct __cppobj ModRefBarrierSet : BarrierSet
{
};

/* 1469 */
struct /*VFT*/ ModRefBarrierSet_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
};

/* 1470 */
struct __cppobj CardTableModRefBS : ModRefBarrierSet
{
  const MemRegion _whole_heap;
  unsigned int _guard_index;
  unsigned int _last_valid_index;
  const unsigned int _page_size;
  unsigned int _byte_map_size;
  char *_byte_map;
  int _cur_covered_regions;
  MemRegion *_covered;
  MemRegion *_committed;
  MemRegion _guard_region;
  char ***_lowest_non_clean;
  unsigned int *_lowest_non_clean_chunk_size;
  unsigned int *_lowest_non_clean_base_chunk_index;
  volatile int *_last_LNC_resizing_collection;
  char *byte_map_base;
};

/* 1471 */
struct /*VFT*/ CardTableModRefBS_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
  bool (__thiscall *card_will_be_scanned)(CardTableModRefBS *this, char);
  bool (__thiscall *card_may_have_been_dirty)(CardTableModRefBS *this, char);
  void (__thiscall *initialize)(CardTableModRefBS *this);
};

/* 1472 */
struct /*VFT*/ CardTableModRefBSForCTRS_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
  bool (__thiscall *card_will_be_scanned)(CardTableModRefBS *this, char);
  bool (__thiscall *card_may_have_been_dirty)(CardTableModRefBS *this, char);
  void (__thiscall *initialize)(CardTableModRefBS *this);
};

/* 1473 */
struct __cppobj CardTableModRefBSForCTRS : CardTableModRefBS
{
  CardTableRS *_rs;
};

/* 1474 */
struct /*VFT*/ CardTableRS_vtbl
{
  GenRemSet::Name (__thiscall *rs_kind)(GenRemSet *this);
  CardTableRS *(__thiscall *as_CardTableRS)(GenRemSet *this);
  void (__thiscall *prepare_for_younger_refs_iterate)(GenRemSet *this, bool);
  void (__thiscall *younger_refs_iterate)(GenRemSet *this, Generation *, OopsInGenClosure *);
  void (__thiscall *younger_refs_in_space_iterate)(GenRemSet *this, Space *, OopsInGenClosure *);
  void (__thiscall *write_ref_field_gc_work)(GenRemSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_gc_par)(GenRemSet *this, void *, oopDesc *);
  void (__thiscall *resize_covered_region)(GenRemSet *this, MemRegion);
  bool (__thiscall *is_aligned)(GenRemSet *this, HeapWord *);
  void (__thiscall *verify)(GenRemSet *this);
  void (__thiscall *verify_aligned_region_empty)(GenRemSet *this, MemRegion);
  void (__thiscall *print)(GenRemSet *this);
  void (__thiscall *clear)(GenRemSet *this, MemRegion);
  void (__thiscall *clear_into_younger)(GenRemSet *this, Generation *);
  void (__thiscall *invalidate)(GenRemSet *this, MemRegion, bool);
  void (__thiscall *invalidate_or_clear)(GenRemSet *this, Generation *);
};

/* 1475 */
struct /*VFT*/ OopsInGenClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1476 */
struct /*VFT*/ OopsInKlassOrGenClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1477 */
struct __cppobj OopsInKlassOrGenClosure : OopsInGenClosure
{
  Klass *_scanned_klass;
};

/* 1478 */
struct __cppobj Padded<GenericTaskQueue<oopDesc *,5,16384>,64> : GenericTaskQueue<oopDesc *,5,16384>
{
  char _pad_buf_[128];
};

/* 1479 */
struct __cppobj ParGCAllocBuffer : CHeapObj<5>
{
  ParGCAllocBuffer_vtbl *__vftable /*VFT*/;
  char head[32];
  unsigned int _word_sz;
  HeapWord *_bottom;
  HeapWord *_top;
  HeapWord *_end;
  HeapWord *_hard_end;
  bool _retained;
  MemRegion _retained_filler;
  unsigned int _allocated;
  unsigned int _wasted;
  char tail[32];
};

/* 1480 */
struct /*VFT*/ ParGCAllocBuffer_vtbl
{
  void (__thiscall *~ParGCAllocBuffer)(ParGCAllocBuffer *this);
  void (__thiscall *set_buf)(ParGCAllocBuffer *this, HeapWord *);
  void (__thiscall *retire)(ParGCAllocBuffer *this, bool, bool);
};

/* 1482 */
struct __cppobj ParScanClosure : OopsInKlassOrGenClosure
{
  ParScanThreadState *_par_scan_state;
  ParNewGeneration *_g;
  HeapWord *_boundary;
};

/* 1481 */
struct __cppobj ParScanWithoutBarrierClosure : ParScanClosure
{
};

/* 1483 */
struct __cppobj __unaligned __declspec(align(4)) ParScanWithBarrierClosure : ParScanClosure
{
};

/* 1484 */
struct __cppobj __unaligned __declspec(align(4)) ParRootScanWithoutBarrierClosure : ParScanClosure
{
};

/* 1485 */
struct __cppobj __unaligned __declspec(align(4)) ParRootScanWithBarrierTwoGensClosure : ParScanClosure
{
};

/* 1486 */
struct __cppobj VoidClosure : StackObj
{
  VoidClosure_vtbl *__vftable /*VFT*/;
};

/* 1487 */
struct /*VFT*/ VoidClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 1526 */
struct __cppobj ParEvacuateFollowersClosure : VoidClosure
{
  ParScanThreadState *_par_scan_state;
  ParScanWithoutBarrierClosure *_to_space_closure;
  ParRootScanWithoutBarrierClosure *_to_space_root_closure;
  ParScanWithBarrierClosure *_old_gen_closure;
  ParRootScanWithBarrierTwoGensClosure *_old_gen_root_closure;
  ParNewGeneration *_par_gen;
  GenericTaskQueueSet<Padded<GenericTaskQueue<oopDesc *,5,16384>,64>,5> *_task_queues;
  ParallelTaskTerminator *_terminator;
};

/* 1521 */
struct __cppobj DefNewGeneration::IsAliveClosure : BoolObjectClosure
{
  Generation *_g;
};

/* 1528 */
struct __cppobj ScanWeakRefClosure : OopClosure
{
  DefNewGeneration *_g;
  HeapWord *_boundary;
};

/* 1530 */
struct __cppobj ParScanWeakRefClosure : ScanWeakRefClosure
{
  ParScanThreadState *_par_scan_state;
};

/* 1532 */
struct __cppobj DefNewGeneration::KeepAliveClosure : OopClosure
{
  ScanWeakRefClosure *_cl;
  CardTableRS *_rs;
};

/* 1534 */
struct __cppobj ParKeepAliveClosure : DefNewGeneration::KeepAliveClosure
{
  ParScanWeakRefClosure *_par_cl;
};

/* 1500 */
struct __cppobj ageTable : _ValueObj
{
  unsigned int sizes[16];
  PerfLongVariable *_perf_sizes[16];
};

/* 1488 */
struct __cppobj __declspec(align(8)) ParScanThreadState
{
  Padded<GenericTaskQueue<oopDesc *,5,16384>,64> *_work_queue;
  Stack<oopDesc *,5> *const _overflow_stack;
  ParGCAllocBuffer _to_space_alloc_buffer;
  __unaligned __declspec(align(1)) ParScanWithoutBarrierClosure _to_space_closure;
  ParScanWithBarrierClosure _old_gen_closure;
  __unaligned __declspec(align(1)) ParRootScanWithoutBarrierClosure _to_space_root_closure;
  ParRootScanWithBarrierTwoGensClosure _older_gen_closure;
  __unaligned __declspec(align(1)) ParRootScanWithBarrierTwoGensClosure _old_gen_root_closure;
  ParEvacuateFollowersClosure _evacuate_followers;
  DefNewGeneration::IsAliveClosure _is_alive_closure;
  ParScanWeakRefClosure _scan_weak_ref_closure;
  ParKeepAliveClosure _keep_alive_closure;
  Space *_to_space;
  ParNewGeneration *_young_gen;
  Generation *_old_gen;
  HeapWord *_young_old_boundary;
  int _hash_seed;
  int _thread_num;
  ageTable _ageTable;
  bool _to_space_full;
  PromotionFailedInfo _promotion_failed_info;
  long double _start;
  long double _start_strong_roots;
  long double _strong_roots_time;
  long double _start_term;
  long double _term_time;
  ChunkArray *_survivor_chunk_array;
};

/* 1489 */
struct __cppobj PerfData : CHeapObj<7>
{
  PerfData_vtbl *__vftable /*VFT*/;
  char *_name;
  PerfData::Variability _v;
  PerfData::Units _u;
  bool _on_c_heap;
  PerfData::Flags _flags;
  PerfDataEntry *_pdep;
  void *_valuep;
};

/* 1490 */
struct /*VFT*/ PerfData_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1491 */
struct PerfDataEntry
{
  int entry_length;
  int name_offset;
  int vector_length;
  char data_type;
  char flags;
  char data_units;
  char data_variability;
  int data_offset;
};

/* 1492 */
struct /*VFT*/ PerfLong_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1493 */
struct __cppobj PerfLong : PerfData
{
};

/* 1494 */
struct __cppobj PerfLongSampleHelper : CHeapObj<7>
{
  PerfLongSampleHelper_vtbl *__vftable /*VFT*/;
};

/* 1495 */
struct /*VFT*/ PerfLongSampleHelper_vtbl
{
  __int64 (__thiscall *take_sample)(PerfLongSampleHelper *this);
};

/* 1496 */
struct /*VFT*/ PerfLongVariant_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1497 */
struct __cppobj PerfLongVariant : PerfLong
{
  __int64 *_sampled;
  PerfLongSampleHelper *_sample_helper;
};

/* 1498 */
struct /*VFT*/ PerfLongVariable_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1499 */
struct __cppobj PerfLongVariable : PerfLongVariant
{
};

/* 1501 */
struct __cppobj Stack<markOopDesc *,5> : StackBase<5>
{
  Stack<markOopDesc *,5>_vtbl *__vftable /*VFT*/;
  markOopDesc **_cur_seg;
  markOopDesc **_cache;
};

/* 1502 */
struct /*VFT*/ Stack<markOopDesc *,5>_vtbl
{
  markOopDesc **(__thiscall *alloc)(Stack<markOopDesc *,5> *this, unsigned int);
  void (__thiscall *free)(Stack<markOopDesc *,5> *this, markOopDesc **, unsigned int);
};

/* 1503 */
struct __cppobj GenerationCounters : CHeapObj<5>
{
  GenerationCounters_vtbl *__vftable /*VFT*/;
  PerfLongVariable *_current_size;
  VirtualSpace *_virtual_space;
  char *_name_space;
};

/* 1504 */
struct /*VFT*/ GenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 1505 */
struct __cppobj CSpaceCounters : CHeapObj<5>
{
  CSpaceCounters_vtbl *__vftable /*VFT*/;
  PerfLongVariable *_capacity;
  PerfLongVariable *_used;
  PerfLongVariable *_max_capacity;
  ContiguousSpace *_space;
  char *_name_space;
};

/* 1506 */
struct /*VFT*/ CSpaceCounters_vtbl
{
  void (__thiscall *update_capacity)(CSpaceCounters *this);
  void (__thiscall *update_used)(CSpaceCounters *this);
  void (__thiscall *update_all)(CSpaceCounters *this);
};

/* 1507 */
struct __cppobj DefNewGeneration : Generation
{
  Generation *_next_gen;
  unsigned int _tenuring_threshold;
  ageTable _age_table;
  unsigned int _pretenure_size_threshold_words;
  bool _promotion_failed;
  PromotionFailedInfo _promotion_failed_info;
  Stack<oopDesc *,5> _objs_with_preserved_marks;
  Stack<markOopDesc *,5> _preserved_marks_of_objs;
  ExtendedOopClosure *_promo_failure_scan_stack_closure;
  Stack<oopDesc *,5> _promo_failure_scan_stack;
  bool _promo_failure_drain_in_progress;
  GenerationCounters *_gen_counters;
  CSpaceCounters *_eden_counters;
  CSpaceCounters *_from_counters;
  CSpaceCounters *_to_counters;
  unsigned int _max_eden_size;
  unsigned int _max_survivor_size;
  bool _should_allocate_from_space;
  EdenSpace *_eden_space;
  ContiguousSpace *_from_space;
  ContiguousSpace *_to_space;
  STWGCTimer *_gc_timer;
};

/* 1508 */
struct __cppobj EdenSpace : ContiguousSpace
{
  DefNewGeneration *_gen;
  HeapWord *_soft_end;
};

/* 1509 */
struct __cppobj GCTimer : ResourceObj
{
  GCTimer_vtbl *__vftable /*VFT*/;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _gc_start;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _gc_end;
  TimePartitions _time_partitions;
};

/* 1510 */
struct /*VFT*/ GCTimer_vtbl
{
  void (__thiscall *register_gc_start)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
  void (__thiscall *register_gc_end)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
};

/* 1511 */
struct /*VFT*/ STWGCTimer_vtbl
{
  void (__thiscall *register_gc_start)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
  void (__thiscall *register_gc_end)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
};

/* 1512 */
struct __cppobj STWGCTimer : GCTimer
{
};

/* 1513 */
struct __cppobj TaskQueueSetSuper
{
  TaskQueueSetSuper_vtbl *__vftable /*VFT*/;
};

/* 1514 */
struct /*VFT*/ TaskQueueSetSuper_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1515 */
struct /*VFT*/ TaskQueueSetSuperImpl<5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1516 */
struct __cppobj TaskQueueSetSuperImpl<5> : TaskQueueSetSuper, CHeapObj<5>
{
};

/* 1517 */
struct /*VFT*/ GenericTaskQueueSet<Padded<GenericTaskQueue<oopDesc *,5,16384>,64>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1518 */
struct __cppobj GenericTaskQueueSet<Padded<GenericTaskQueue<oopDesc *,5,16384>,64>,5> : TaskQueueSetSuperImpl<5>
{
  unsigned int _n;
  Padded<GenericTaskQueue<oopDesc *,5,16384>,64> **_queues;
};

/* 1519 */
struct __cppobj PLABStats : _ValueObj
{
  unsigned int _allocated;
  unsigned int _wasted;
  unsigned int _unused;
  unsigned int _used;
  unsigned int _desired_plab_sz;
  AdaptiveWeightedAverage _filter;
};

/* 1520 */
struct /*VFT*/ DefNewGeneration::IsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 1522 */
struct __cppobj __declspec(align(8)) ParNewGeneration : DefNewGeneration
{
  GenericTaskQueueSet<Padded<GenericTaskQueue<oopDesc *,5,16384>,64>,5> *_task_queues;
  Stack<oopDesc *,5> *_overflow_stacks;
  PLABStats _plab_stats;
  oopDesc *_overflow_list;
  DefNewGeneration::IsAliveClosure _is_alive_closure;
  bool _survivor_overflow;
};

/* 1523 */
struct __cppobj ParallelTaskTerminator : StackObj
{
  ParallelTaskTerminator_vtbl *__vftable /*VFT*/;
  int _n_threads;
  TaskQueueSetSuper *_queue_set;
  char _pad_before[64];
  int _offered_termination;
  char _pad_after[64];
};

/* 1524 */
struct /*VFT*/ ParallelTaskTerminator_vtbl
{
  void (__thiscall *yield)(ParallelTaskTerminator *this);
  bool (__thiscall *offer_termination)(ParallelTaskTerminator *this);
};

/* 1525 */
struct /*VFT*/ ParEvacuateFollowersClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 1527 */
struct /*VFT*/ ScanWeakRefClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 1529 */
struct /*VFT*/ ParScanWeakRefClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 1531 */
struct /*VFT*/ DefNewGeneration::KeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 1533 */
struct /*VFT*/ ParKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 1535 */
struct __cppobj ChunkArray : CHeapObj<5>
{
  unsigned int _index;
  unsigned int _capacity;
  unsigned int _overflows;
  HeapWord **_array;
};

/* 1536 */
struct /*VFT*/ ParScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1537 */
struct /*VFT*/ ParScanWithoutBarrierClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1538 */
struct /*VFT*/ FastScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1539 */
struct __cppobj __declspec(align(4)) FastScanClosure : OopsInKlassOrGenClosure
{
  DefNewGeneration *_g;
  HeapWord *_boundary;
  bool _gc_barrier;
};

/* 1540 */
struct /*VFT*/ ScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1541 */
struct __cppobj __declspec(align(4)) ScanClosure : OopsInKlassOrGenClosure
{
  DefNewGeneration *_g;
  HeapWord *_boundary;
  bool _gc_barrier;
};

/* 1542 */
struct ScratchBlock
{
  ScratchBlock *next;
  unsigned int num_words;
  HeapWord scratch_space[1];
};

/* 1543 */
struct /*VFT*/ PerfLongCounter_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1544 */
struct __cppobj PerfLongCounter : PerfLongVariant
{
};

/* 1545 */
struct __cppobj CollectorCounters : CHeapObj<5>
{
  PerfLongCounter *_invocations;
  PerfLongCounter *_time;
  PerfLongVariable *_last_entry_time;
  PerfLongVariable *_last_exit_time;
  char *_name_space;
};

/* 1546 */
struct /*VFT*/ Generation_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
};

/* 1547 */
struct __cppobj GCStats : CHeapObj<5>
{
  GCStats_vtbl *__vftable /*VFT*/;
  AdaptivePaddedNoZeroDevAverage *_avg_promoted;
};

/* 1548 */
struct /*VFT*/ GCStats_vtbl
{
  GCStats::Name (__thiscall *kind)(GCStats *this);
};

/* 1550 */
struct /*VFT*/ CompactibleSpace_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
  void (__thiscall *reset_after_compaction)(CompactibleSpace *this);
  CompactibleSpace *(__thiscall *next_compaction_space)(CompactibleSpace *this);
  void (__thiscall *prepare_for_compaction)(CompactibleSpace *this, CompactPoint *);
  void (__thiscall *compact)(CompactibleSpace *this);
  unsigned int (__thiscall *allowed_dead_ratio)(CompactibleSpace *this);
  HeapWord *(__thiscall *initialize_threshold)(CompactibleSpace *this);
  HeapWord *(__thiscall *forward)(CompactibleSpace *this, oopDesc *, unsigned int, CompactPoint *, HeapWord *);
  unsigned int (__thiscall *adjust_object_size_v)(CompactibleSpace *this, unsigned int);
  unsigned int (__thiscall *minimum_free_block_size)(CompactibleSpace *this);
  HeapWord *(__thiscall *cross_threshold)(CompactibleSpace *this, HeapWord *, HeapWord *);
};

/* 1551 */
struct __cppobj G1BlockOffsetTable : _ValueObj
{
  G1BlockOffsetTable_vtbl *__vftable /*VFT*/;
  HeapWord *_bottom;
  HeapWord *_end;
};

/* 1552 */
struct /*VFT*/ G1BlockOffsetTable_vtbl
{
  void (__thiscall *resize)(G1BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(G1BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(G1BlockOffsetTable *this, const void *);
  HeapWord *(__thiscall *block_start_unsafe_const)(G1BlockOffsetTable *this, const void *);
};

/* 1553 */
struct __cppobj G1MappingChangedListener : _ValueObj
{
  G1MappingChangedListener_vtbl *__vftable /*VFT*/;
};

/* 1554 */
struct /*VFT*/ G1MappingChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 1555 */
struct /*VFT*/ G1BlockOffsetSharedArrayMappingChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 1556 */
struct __cppobj G1BlockOffsetSharedArrayMappingChangedListener : G1MappingChangedListener
{
};

/* 1557 */
struct __cppobj G1BlockOffsetSharedArray : CHeapObj<5>
{
  G1BlockOffsetSharedArrayMappingChangedListener _listener;
  MemRegion _reserved;
  HeapWord *_end;
  volatile unsigned __int8 *_offset_array;
};

/* 1559 */
struct __cppobj G1BlockOffsetArray : G1BlockOffsetTable
{
  G1BlockOffsetSharedArray *_array;
  G1OffsetTableContigSpace *_gsp;
  HeapWord *_unallocated_block;
};

/* 1562 */
struct __cppobj G1BlockOffsetArrayContigSpace : G1BlockOffsetArray
{
  HeapWord *_next_offset_threshold;
  unsigned int _next_offset_index;
};

/* 1558 */
struct __cppobj G1OffsetTableContigSpace : CompactibleSpace
{
  HeapWord *_top;
  HeapWord *volatile _scan_top;
  G1BlockOffsetArrayContigSpace _offsets;
  Mutex _par_alloc_lock;
  volatile unsigned int _gc_time_stamp;
  HeapWord *_pre_dummy_top;
};

/* 1560 */
struct /*VFT*/ G1BlockOffsetArray_vtbl
{
  void (__thiscall *resize)(G1BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(G1BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(G1BlockOffsetTable *this, const void *);
  HeapWord *(__thiscall *block_start_unsafe_const)(G1BlockOffsetTable *this, const void *);
  void (__thiscall *print_on)(G1BlockOffsetArray *this, outputStream *);
};

/* 1561 */
struct /*VFT*/ G1BlockOffsetArrayContigSpace_vtbl
{
  void (__thiscall *resize)(G1BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(G1BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(G1BlockOffsetTable *this, const void *);
  HeapWord *(__thiscall *block_start_unsafe_const)(G1BlockOffsetTable *this, const void *);
  void (__thiscall *print_on)(G1BlockOffsetArray *this, outputStream *);
};

/* 1563 */
struct /*VFT*/ G1OffsetTableContigSpace_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
  void (__thiscall *reset_after_compaction)(CompactibleSpace *this);
  CompactibleSpace *(__thiscall *next_compaction_space)(CompactibleSpace *this);
  void (__thiscall *prepare_for_compaction)(CompactibleSpace *this, CompactPoint *);
  void (__thiscall *compact)(CompactibleSpace *this);
  unsigned int (__thiscall *allowed_dead_ratio)(CompactibleSpace *this);
  HeapWord *(__thiscall *initialize_threshold)(CompactibleSpace *this);
  HeapWord *(__thiscall *forward)(CompactibleSpace *this, oopDesc *, unsigned int, CompactPoint *, HeapWord *);
  unsigned int (__thiscall *adjust_object_size_v)(CompactibleSpace *this, unsigned int);
  unsigned int (__thiscall *minimum_free_block_size)(CompactibleSpace *this);
  HeapWord *(__thiscall *cross_threshold)(CompactibleSpace *this, HeapWord *, HeapWord *);
};

/* 1564 */
struct __cppobj BasicHashtableEntry<5> : CHeapObj<5>
{
  unsigned int _hash;
  BasicHashtableEntry<5> *_next;
};

/* 1565 */
struct __cppobj HashtableBucket<5> : CHeapObj<5>
{
  BasicHashtableEntry<5> *_entry;
};

/* 1566 */
struct __cppobj BasicHashtable<5> : CHeapObj<5>
{
  int _table_size;
  HashtableBucket<5> *_buckets;
  BasicHashtableEntry<5> *volatile _free_list;
  char *_first_free_entry;
  char *_end_block;
  int _entry_size;
  volatile int _number_of_entries;
};

/* 1567 */
struct __cppobj Hashtable<nmethod *,5> : BasicHashtable<5>
{
};

/* 1568 */
struct __cppobj CodeRootSetTable : Hashtable<nmethod *,5>
{
  CodeRootSetTable *_purge_next;
};

/* 1569 */
struct __cppobj G1CodeRootSet : _ValueObj
{
  CodeRootSetTable *_table;
  unsigned int _length;
};

/* 1570 */
struct __cppobj __declspec(align(4)) SharedHeap : CollectedHeap
{
  GenRemSet *_rem_set;
  CollectorPolicy *_collector_policy;
  int _strong_roots_parity;
  FlexibleWorkGang *_workers;
  bool _thread_holds_heap_lock_for_gc;
};

/* 1571 */
struct __cppobj FormatBufferBase
{
  char *_buf;
};

/* 1572 */
struct __cppobj FormatBuffer<512> : FormatBufferBase
{
  char _buffer[512];
};

/* 1573 */
struct __cppobj hrs_ext_msg : FormatBuffer<512>
{
};

/* 1578 */
struct __cppobj HeapRegionSetCount : _ValueObj
{
  unsigned int _length;
  unsigned int _capacity;
};

/* 1574 */
struct __cppobj __declspec(align(4)) HeapRegionSetBase : _ValueObj
{
  HeapRegionSetBase_vtbl *__vftable /*VFT*/;
  bool _is_humongous;
  bool _is_free;
  HRSMtSafeChecker *_mt_safety_checker;
  HeapRegionSetCount _count;
  const char *_name;
  bool _verify_in_progress;
};

/* 1575 */
struct /*VFT*/ HeapRegionSetBase_vtbl
{
  void (__thiscall *fill_in_ext_msg_extra)(HeapRegionSetBase *this, hrs_ext_msg *);
  void (__thiscall *verify)(HeapRegionSetBase *this);
  void (__thiscall *print_on)(HeapRegionSetBase *this, outputStream *, bool);
};

/* 1576 */
struct __cppobj HRSMtSafeChecker : CHeapObj<5>
{
  HRSMtSafeChecker_vtbl *__vftable /*VFT*/;
};

/* 1577 */
struct /*VFT*/ HRSMtSafeChecker_vtbl
{
  void (__thiscall *check)(HRSMtSafeChecker *this);
};

/* 1716 */
struct __cppobj HeapRegionType : _ValueObj
{
  volatile HeapRegionType::Tag _tag;
};

/* 1579 */
struct __cppobj __declspec(align(8)) HeapRegion : G1OffsetTableContigSpace
{
  HeapRegionRemSet *_rem_set;
  unsigned int _hrm_index;
  unsigned __int8 _allocation_context;
  HeapRegionType _type;
  HeapRegion *_humongous_start_region;
  HeapWord *_orig_end;
  bool _in_collection_set;
  bool _evacuation_failed;
  HeapRegion *_next_in_special_set;
  HeapRegion *_next_young_region;
  HeapRegion *_next_dirty_cards_region;
  HeapRegion *_next;
  HeapRegion *_prev;
  int _claimed;
  unsigned int _prev_marked_bytes;
  unsigned int _next_marked_bytes;
  long double _gc_efficiency;
  int _young_index_in_cset;
  SurvRateGroup *_surv_rate_group;
  int _age_index;
  HeapWord *_prev_top_at_mark_start;
  HeapWord *_next_top_at_mark_start;
  unsigned int _recorded_rs_length;
  long double _predicted_elapsed_time_ms;
  unsigned int _predicted_bytes_to_copy;
};

/* 1580 */
struct __cppobj FreeRegionList : HeapRegionSetBase
{
  HeapRegion *_head;
  HeapRegion *_tail;
  HeapRegion *_last;
};

/* 1581 */
struct /*VFT*/ FreeRegionList_vtbl
{
  void (__thiscall *fill_in_ext_msg_extra)(HeapRegionSetBase *this, hrs_ext_msg *);
  void (__thiscall *verify)(HeapRegionSetBase *this);
  void (__thiscall *print_on)(HeapRegionSetBase *this, outputStream *, bool);
  void (__thiscall *clear)(FreeRegionList *this);
};

/* 1582 */
struct /*VFT*/ HeapRegionSet_vtbl
{
  void (__thiscall *fill_in_ext_msg_extra)(HeapRegionSetBase *this, hrs_ext_msg *);
  void (__thiscall *verify)(HeapRegionSetBase *this);
  void (__thiscall *print_on)(HeapRegionSetBase *this, outputStream *, bool);
};

/* 1583 */
struct __cppobj HeapRegionSet : HeapRegionSetBase
{
};

/* 1584 */
struct /*VFT*/ G1RegionMappingChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 1585 */
struct __cppobj G1RegionMappingChangedListener : G1MappingChangedListener
{
};

/* 1586 */
struct __cppobj G1BiasedMappedArrayBase : _ValueObj
{
  unsigned __int8 *_base;
  unsigned int _length;
  unsigned __int8 *_biased_base;
  unsigned int _bias;
  unsigned int _shift_by;
};

/* 1587 */
struct __cppobj G1BiasedMappedArray<HeapRegion *> : G1BiasedMappedArrayBase
{
  G1BiasedMappedArray<HeapRegion *>_vtbl *__vftable /*VFT*/;
};

/* 1588 */
struct /*VFT*/ G1BiasedMappedArray<HeapRegion *>_vtbl
{
  HeapRegion *(__thiscall *default_value)(G1BiasedMappedArray<HeapRegion *> *this);
};

/* 1589 */
struct /*VFT*/ G1HeapRegionTable_vtbl
{
  HeapRegion *(__thiscall *default_value)(G1BiasedMappedArray<HeapRegion *> *this);
};

/* 1590 */
struct __cppobj G1HeapRegionTable : G1BiasedMappedArray<HeapRegion *>
{
};

/* 1593 */
struct __cppobj __declspec(align(4)) G1PageBasedVirtualSpace : _ValueObj
{
  char *_low_boundary;
  char *_high_boundary;
  unsigned int _tail_size;
  unsigned int _page_size;
  BitMap _committed;
  BitMap _dirty;
  bool _special;
  bool _executable;
};

/* 1591 */
struct __cppobj G1RegionToSpaceMapper : CHeapObj<5>
{
  G1RegionToSpaceMapper_vtbl *__vftable /*VFT*/;
  G1MappingChangedListener *_listener;
  G1PageBasedVirtualSpace _storage;
  unsigned int _region_granularity;
  BitMap _commit_map;
};

/* 1592 */
struct /*VFT*/ G1RegionToSpaceMapper_vtbl
{
  void (__thiscall *~G1RegionToSpaceMapper)(G1RegionToSpaceMapper *this);
  void (__thiscall *commit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
  void (__thiscall *uncommit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
};

/* 1594 */
struct __cppobj HeapRegionManager : CHeapObj<5>
{
  G1HeapRegionTable _regions;
  G1RegionToSpaceMapper *_heap_mapper;
  G1RegionToSpaceMapper *_prev_bitmap_mapper;
  G1RegionToSpaceMapper *_next_bitmap_mapper;
  G1RegionToSpaceMapper *_bot_mapper;
  G1RegionToSpaceMapper *_cardtable_mapper;
  G1RegionToSpaceMapper *_card_counts_mapper;
  FreeRegionList _free_list;
  BitMap _available_map;
  unsigned int _num_committed;
  unsigned int _allocated_heapregions_length;
};

/* 1595 */
struct __cppobj G1Allocator : CHeapObj<5>
{
  G1Allocator_vtbl *__vftable /*VFT*/;
  G1CollectedHeap *_g1h;
  unsigned int _summary_bytes_used;
};

/* 1596 */
struct __cppobj EvacuationInfo : StackObj
{
  unsigned int _collectionset_regions;
  unsigned int _allocation_regions;
  unsigned int _collectionset_used_before;
  unsigned int _collectionset_used_after;
  unsigned int _alloc_regions_used_before;
  unsigned int _bytes_copied;
  unsigned int _regions_freed;
};

/* 1597 */
struct __cppobj G1AllocRegion : _ValueObj
{
  G1AllocRegion_vtbl *__vftable /*VFT*/;
  HeapRegion *volatile _alloc_region;
  unsigned __int8 _allocation_context;
  unsigned int _count;
  unsigned int _used_bytes_before;
  const bool _bot_updates;
  const char *_name;
};

/* 1598 */
struct /*VFT*/ G1AllocRegion_vtbl
{
  HeapRegion *(__thiscall *allocate_new_region)(G1AllocRegion *this, unsigned int, bool);
  void (__thiscall *retire_region)(G1AllocRegion *this, HeapRegion *, unsigned int);
  HeapRegion *(__thiscall *release)(G1AllocRegion *this);
};

/* 1599 */
struct /*VFT*/ MutatorAllocRegion_vtbl
{
  HeapRegion *(__thiscall *allocate_new_region)(G1AllocRegion *this, unsigned int, bool);
  void (__thiscall *retire_region)(G1AllocRegion *this, HeapRegion *, unsigned int);
  HeapRegion *(__thiscall *release)(G1AllocRegion *this);
};

/* 1600 */
struct __cppobj MutatorAllocRegion : G1AllocRegion
{
};

/* 1601 */
struct /*VFT*/ SurvivorGCAllocRegion_vtbl
{
  HeapRegion *(__thiscall *allocate_new_region)(G1AllocRegion *this, unsigned int, bool);
  void (__thiscall *retire_region)(G1AllocRegion *this, HeapRegion *, unsigned int);
  HeapRegion *(__thiscall *release)(G1AllocRegion *this);
};

/* 1602 */
struct __cppobj SurvivorGCAllocRegion : G1AllocRegion
{
};

/* 1603 */
struct /*VFT*/ OldGCAllocRegion_vtbl
{
  HeapRegion *(__thiscall *allocate_new_region)(G1AllocRegion *this, unsigned int, bool);
  void (__thiscall *retire_region)(G1AllocRegion *this, HeapRegion *, unsigned int);
  HeapRegion *(__thiscall *release)(G1AllocRegion *this);
};

/* 1604 */
struct __cppobj OldGCAllocRegion : G1AllocRegion
{
};

/* 1605 */
struct /*VFT*/ G1Allocator_vtbl
{
  void (__thiscall *init_mutator_alloc_region)(G1Allocator *this);
  void (__thiscall *release_mutator_alloc_region)(G1Allocator *this);
  void (__thiscall *init_gc_alloc_regions)(G1Allocator *this, EvacuationInfo *);
  void (__thiscall *release_gc_alloc_regions)(G1Allocator *this, unsigned int, EvacuationInfo *);
  void (__thiscall *abandon_gc_alloc_regions)(G1Allocator *this);
  MutatorAllocRegion *(__thiscall *mutator_alloc_region)(G1Allocator *this, unsigned __int8);
  SurvivorGCAllocRegion *(__thiscall *survivor_gc_alloc_region)(G1Allocator *this, unsigned __int8);
  OldGCAllocRegion *(__thiscall *old_gc_alloc_region)(G1Allocator *this, unsigned __int8);
  unsigned int (__thiscall *used)(G1Allocator *this);
  bool (__thiscall *is_retained_old_region)(G1Allocator *this, HeapRegion *);
  HeapRegion *(__thiscall *new_heap_region)(G1Allocator *this, unsigned int, G1BlockOffsetSharedArray *, MemRegion);
};

/* 1607 */
struct __cppobj AllocationContextStats : StackObj
{
};

/* 1610 */
struct __cppobj G1BiasedMappedArray<bool> : G1BiasedMappedArrayBase
{
  G1BiasedMappedArray<bool>_vtbl *__vftable /*VFT*/;
};

/* 1613 */
struct __cppobj G1CollectedHeap::HumongousReclaimCandidates : G1BiasedMappedArray<bool>
{
};

/* 1614 */
struct __cppobj G1HRPrinter : _ValueObj
{
  bool _active;
};

/* 1651 */
struct __cppobj DirtyCardQueueSet : PtrQueueSet
{
  CardTableEntryClosure *_mut_process_closure;
  DirtyCardQueue _shared_dirty_card_queue;
  FreeIdSet *_free_ids;
  int _processed_buffers_mut;
  int _processed_buffers_rs_thread;
  BufferNode *volatile _cur_par_buffer_node;
};

/* 1703 */
struct __cppobj G1STWIsAliveClosure : BoolObjectClosure
{
  G1CollectedHeap *_g1;
};

/* 1705 */
struct __cppobj G1CMIsAliveClosure : BoolObjectClosure
{
  G1CollectedHeap *_g1;
};

/* 1706 */
struct __cppobj G1BiasedMappedArray<InCSetState> : G1BiasedMappedArrayBase
{
  G1BiasedMappedArray<InCSetState>_vtbl *__vftable /*VFT*/;
};

/* 1709 */
struct __cppobj G1InCSetStateFastTestBiasedMappedArray : G1BiasedMappedArray<InCSetState>
{
};

/* 1606 */
struct __cppobj __unaligned __declspec(align(4)) G1CollectedHeap : SharedHeap
{
  FreeRegionList _secondary_free_list;
  HeapRegionSet _old_set;
  HeapRegionSet _humongous_set;
  unsigned int _expansion_regions;
  G1BlockOffsetSharedArray *_bot_shared;
  G1RegionMappingChangedListener _listener;
  HeapRegionManager _hrm;
  G1Allocator *_allocator;
  AllocationContextStats _allocation_context_stats;
  __declspec(align(4)) PLABStats _survivor_plab_stats;
  PLABStats _old_plab_stats;
  bool _expand_heap_after_alloc_failure;
  __declspec(align(4)) G1MonitoringSupport *_g1mm;
  G1CollectedHeap::HumongousReclaimCandidates _humongous_reclaim_candidates;
  bool _has_humongous_reclaim_candidates;
  __declspec(align(4)) volatile unsigned int _gc_time_stamp;
  unsigned int *_surviving_young_words;
  G1HRPrinter _hr_printer;
  __declspec(align(4)) volatile unsigned int _old_marking_cycles_started;
  volatile unsigned int _old_marking_cycles_completed;
  bool _concurrent_cycle_started;
  bool _heap_summary_sent;
  __declspec(align(4)) YoungList *_young_list;
  G1CollectorPolicy *_g1_policy;
  G1RemSet *_g1_rem_set;
  DirtyCardQueueSet _dirty_card_queue_set;
  RefineCardTableEntryClosure *_refine_cte_cl;
  DirtyCardQueueSet _into_cset_dirty_card_queue_set;
  ConcurrentMark *_cm;
  ConcurrentMarkThread *_cmThread;
  bool _mark_in_progress;
  __declspec(align(4)) ConcurrentG1Refine *_cg1r;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_task_queues;
  bool _evacuation_failed;
  __declspec(align(4)) EvacuationFailedInfo *_evacuation_failed_info_array;
  Stack<oopDesc *,5> _objs_with_preserved_marks;
  Stack<markOopDesc *,5> _preserved_marks_of_objs;
  GrowableArray<oopDesc *> *_evac_failure_scan_stack;
  OopsInHeapRegionClosure *_evac_failure_closure;
  bool _drain_in_progress;
  __declspec(align(4)) ReferenceProcessor *_ref_processor_stw;
  STWGCTimer *_gc_timer_stw;
  ConcurrentGCTimer *_gc_timer_cm;
  G1OldTracer *_gc_tracer_cm;
  G1NewTracer *_gc_tracer_stw;
  G1STWIsAliveClosure _is_alive_closure_stw;
  ReferenceProcessor *_ref_processor_cm;
  G1CMIsAliveClosure _is_alive_closure_cm;
  HeapRegion **_worker_cset_start_region;
  unsigned int *_worker_cset_start_region_time_stamp;
  volatile bool _free_regions_coming;
  __declspec(align(4)) G1InCSetStateFastTestBiasedMappedArray _in_cset_fast_test;
  HeapRegion *_dirty_cards_region_list;
  bool _full_collection;
  __declspec(align(4)) unsigned int _max_heap_capacity;
};

/* 1608 */
struct __cppobj HSpaceCounters : CHeapObj<5>
{
  PerfLongVariable *_capacity;
  PerfLongVariable *_used;
  char *_name_space;
};

/* 1609 */
struct __cppobj G1MonitoringSupport : CHeapObj<5>
{
  G1CollectedHeap *_g1h;
  CollectorCounters *_incremental_collection_counters;
  CollectorCounters *_full_collection_counters;
  GenerationCounters *_young_collection_counters;
  GenerationCounters *_old_collection_counters;
  HSpaceCounters *_old_space_counters;
  HSpaceCounters *_eden_counters;
  HSpaceCounters *_from_counters;
  HSpaceCounters *_to_counters;
  unsigned int _overall_reserved;
  unsigned int _overall_committed;
  unsigned int _overall_used;
  unsigned int _young_region_num;
  unsigned int _young_gen_committed;
  unsigned int _eden_committed;
  unsigned int _eden_used;
  unsigned int _survivor_committed;
  unsigned int _survivor_used;
  unsigned int _old_committed;
  unsigned int _old_used;
};

/* 1611 */
struct /*VFT*/ G1BiasedMappedArray<bool>_vtbl
{
  bool (__thiscall *default_value)(G1BiasedMappedArray<bool> *this);
};

/* 1612 */
struct /*VFT*/ G1CollectedHeap::HumongousReclaimCandidates_vtbl
{
  bool (__thiscall *default_value)(G1BiasedMappedArray<bool> *this);
};

/* 1615 */
struct __cppobj YoungList : CHeapObj<5>
{
  G1CollectedHeap *_g1h;
  HeapRegion *_head;
  HeapRegion *_survivor_head;
  HeapRegion *_survivor_tail;
  HeapRegion *_curr;
  unsigned int _length;
  unsigned int _survivor_length;
  unsigned int _last_sampled_rs_lengths;
  unsigned int _sampled_rs_lengths;
};

/* 1669 */
struct __cppobj AbsSeq : CHeapObj<7>
{
  AbsSeq_vtbl *__vftable /*VFT*/;
  int _num;
  long double _sum;
  long double _sum_of_squares;
  long double _davg;
  long double _dvariance;
  long double _alpha;
};

/* 1672 */
struct __cppobj NumberSeq : AbsSeq
{
  long double _last;
  long double _maximum;
};

/* 1721 */
struct __cppobj TraceGen0TimeData : CHeapObj<5>
{
  unsigned int _young_pause_num;
  unsigned int _mixed_pause_num;
  NumberSeq _all_stop_world_times_ms;
  NumberSeq _all_yield_times_ms;
  NumberSeq _total;
  NumberSeq _other;
  NumberSeq _root_region_scan_wait;
  NumberSeq _parallel;
  NumberSeq _ext_root_scan;
  NumberSeq _satb_filtering;
  NumberSeq _update_rs;
  NumberSeq _scan_rs;
  NumberSeq _obj_copy;
  NumberSeq _termination;
  NumberSeq _parallel_other;
  NumberSeq _clear_ct;
};

/* 1722 */
struct __cppobj TraceGen1TimeData : CHeapObj<5>
{
  NumberSeq _all_full_gc_times;
};

/* 1616 */
struct __cppobj __declspec(align(8)) G1CollectorPolicy : CollectorPolicy
{
  int _parallel_gc_threads;
  unsigned int _no_of_gc_threads;
  G1MMUTracker *_mmu_tracker;
  CollectionSetChooser *_collectionSetChooser;
  long double _full_collection_start_sec;
  unsigned int _cur_collection_pause_used_regions_at_start;
  TruncatedSeq *_recent_gc_times_ms;
  TruncatedSeq *_concurrent_mark_remark_times_ms;
  TruncatedSeq *_concurrent_mark_cleanup_times_ms;
  TraceGen0TimeData _trace_gen0_time_data;
  TraceGen1TimeData _trace_gen1_time_data;
  long double _stop_world_start;
  bool _gcs_are_young;
  unsigned int _young_list_target_length;
  unsigned int _young_list_fixed_length;
  unsigned int _young_list_max_length;
  bool _last_gc_was_young;
  bool _during_marking;
  bool _in_marking_window;
  bool _in_marking_window_im;
  SurvRateGroup *_short_lived_surv_rate_group;
  SurvRateGroup *_survivor_surv_rate_group;
  long double _gc_overhead_perc;
  long double _reserve_factor;
  unsigned int _reserve_regions;
  TruncatedSeq *_alloc_rate_ms_seq;
  long double _prev_collection_pause_end_ms;
  TruncatedSeq *_rs_length_diff_seq;
  TruncatedSeq *_cost_per_card_ms_seq;
  TruncatedSeq *_young_cards_per_entry_ratio_seq;
  TruncatedSeq *_mixed_cards_per_entry_ratio_seq;
  TruncatedSeq *_cost_per_entry_ms_seq;
  TruncatedSeq *_mixed_cost_per_entry_ms_seq;
  TruncatedSeq *_cost_per_byte_ms_seq;
  TruncatedSeq *_constant_other_time_ms_seq;
  TruncatedSeq *_young_other_cost_per_region_ms_seq;
  TruncatedSeq *_non_young_other_cost_per_region_ms_seq;
  TruncatedSeq *_pending_cards_seq;
  TruncatedSeq *_rs_lengths_seq;
  TruncatedSeq *_cost_per_byte_ms_during_cm_seq;
  G1YoungGenSizer *_young_gen_sizer;
  unsigned int _eden_cset_region_length;
  unsigned int _survivor_cset_region_length;
  unsigned int _old_cset_region_length;
  unsigned int _free_regions_at_end_of_collection;
  unsigned int _recorded_rs_lengths;
  unsigned int _max_rs_lengths;
  long double _sigma;
  unsigned int _rs_lengths_prediction;
  long double _pause_time_target_ms;
  unsigned int _pending_cards;
  TruncatedSeq *_recent_prev_end_times_for_all_gcs_sec;
  HeapRegion *_collection_set;
  unsigned int _collection_set_bytes_used_before;
  unsigned int _bytes_copied_during_gc;
  G1CollectorPolicy::CSetBuildType _inc_cset_build_state;
  HeapRegion *_inc_cset_head;
  HeapRegion *_inc_cset_tail;
  unsigned int _inc_cset_bytes_used_before;
  HeapWord *_inc_cset_max_finger;
  unsigned int _inc_cset_recorded_rs_lengths;
  int _inc_cset_recorded_rs_lengths_diffs;
  long double _inc_cset_predicted_elapsed_time_ms;
  long double _inc_cset_predicted_elapsed_time_ms_diffs;
  G1CollectedHeap *_g1;
  G1GCPhaseTimes *_phase_times;
  long double _recent_avg_pause_time_ratio;
  volatile bool _initiate_conc_mark_if_possible;
  volatile bool _during_initial_mark_pause;
  bool _last_young_gc;
  long double _cur_mark_stop_world_time_ms;
  long double _mark_remark_start_sec;
  long double _mark_cleanup_start_sec;
  unsigned int _tenuring_threshold;
  unsigned int _max_survivor_regions;
  unsigned int _eden_used_bytes_before_gc;
  unsigned int _survivor_used_bytes_before_gc;
  unsigned int _heap_used_bytes_before_gc;
  unsigned int _metaspace_used_bytes_before_gc;
  unsigned int _eden_capacity_bytes_before_gc;
  unsigned int _heap_capacity_bytes_before_gc;
  unsigned int _recorded_survivor_regions;
  HeapRegion *_recorded_survivor_head;
  HeapRegion *_recorded_survivor_tail;
  ageTable _survivors_age_table;
};

/* 1618 */
struct __cppobj G1RemSetSummary : _ValueObj
{
  G1RemSet *_remset;
  unsigned int _num_refined_cards;
  unsigned int _num_processed_buf_mutator;
  unsigned int _num_processed_buf_rs_threads;
  unsigned int _num_coarsenings;
  long double *_rs_threads_vtimes;
  unsigned int _num_vtimes;
  long double _sampling_thread_vtime;
};

/* 1617 */
struct __cppobj G1RemSet : CHeapObj<5>
{
  G1RemSet_vtbl *__vftable /*VFT*/;
  G1RemSetSummary _prev_period_summary;
  G1CollectedHeap *_g1;
  unsigned int _conc_refine_cards;
  CardTableModRefBS *_ct_bs;
  G1CollectorPolicy *_g1p;
  ConcurrentG1Refine *_cg1r;
  unsigned int *_cards_scanned;
  unsigned int _total_cards_scanned;
  G1ParPushHeapRSClosure **_cset_rs_update_cl;
};

/* 1619 */
struct /*VFT*/ G1RemSet_vtbl
{
  void (__thiscall *print_summary_info)(G1RemSet *this);
  void (__thiscall *print_summary_info)(G1RemSet *this, G1RemSetSummary *, const char *);
  bool (__thiscall *refine_card)(G1RemSet *this, char *, unsigned int, bool);
  void (__thiscall *print_periodic_summary_info)(G1RemSet *this, const char *);
  void (__thiscall *prepare_for_verify)(G1RemSet *this);
};

/* 1620 */
struct __cppobj __declspec(align(8)) ConcurrentGCThread : NamedThread
{
  bool _should_terminate;
  bool _has_terminated;
};

/* 1621 */
struct __cppobj ConcurrentG1RefineThread : ConcurrentGCThread
{
  long double _vtime_start;
  long double _vtime_accum;
  unsigned int _worker_id;
  unsigned int _worker_id_offset;
  bool _active;
  ConcurrentG1RefineThread *_next;
  Monitor *_monitor;
  ConcurrentG1Refine *_cg1r;
  CardTableEntryClosure *_refine_closure;
  int _thread_threshold_step;
  int _threshold;
  int _deactivation_threshold;
};

/* 1627 */
struct __cppobj G1CardCountsMappingChangedListener : G1MappingChangedListener
{
  G1CardCounts *_counts;
};

/* 1625 */
struct __cppobj G1CardCounts : CHeapObj<5>
{
  G1CardCountsMappingChangedListener _listener;
  G1CollectedHeap *_g1h;
  unsigned __int8 *_card_counts;
  unsigned int _reserved_max_card_num;
  const char *_ct_bot;
  CardTableModRefBS *_ct_bs;
};

/* 1628 */
struct __cppobj G1HotCardCache : CHeapObj<5>
{
  G1CollectedHeap *_g1h;
  bool _use_cache;
  G1CardCounts _card_counts;
  char **_hot_cache;
  unsigned int _hot_cache_size;
  int _hot_cache_par_chunk_size;
  char _pad_before[64];
  volatile unsigned int _hot_cache_idx;
  volatile unsigned int _hot_cache_par_claimed_idx;
  char _pad_after[64];
};

/* 1622 */
struct __cppobj ConcurrentG1Refine : CHeapObj<5>
{
  ConcurrentG1RefineThread **_threads;
  unsigned int _n_threads;
  unsigned int _n_worker_threads;
  int _green_zone;
  int _yellow_zone;
  int _red_zone;
  int _thread_threshold_step;
  G1HotCardCache _hot_card_cache;
};

/* 1623 */
struct __cppobj CardTableEntryClosure : CHeapObj<5>
{
  CardTableEntryClosure_vtbl *__vftable /*VFT*/;
};

/* 1624 */
struct /*VFT*/ CardTableEntryClosure_vtbl
{
  bool (__thiscall *do_card_ptr)(CardTableEntryClosure *this, char *, unsigned int);
};

/* 1626 */
struct /*VFT*/ G1CardCountsMappingChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 1629 */
struct /*VFT*/ OopsInHeapRegionClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1630 */
struct __cppobj OopsInHeapRegionClosure : ExtendedOopClosure
{
  HeapRegion *_from;
};

/* 1631 */
struct __cppobj __declspec(align(4)) ArrayAllocator<StarTask,5> : _ValueObj
{
  char *_addr;
  bool _use_malloc;
  unsigned int _size;
  bool _free_in_destructor;
};

/* 1632 */
struct __cppobj GenericTaskQueue<StarTask,5,16384> : TaskQueueSuper<16384,5>
{
  ArrayAllocator<StarTask,5> _array_allocator;
  volatile StarTask *_elems;
};

/* 1633 */
struct __cppobj Stack<StarTask,5> : StackBase<5>
{
  Stack<StarTask,5>_vtbl *__vftable /*VFT*/;
  StarTask *_cur_seg;
  StarTask *_cache;
};

/* 1634 */
struct /*VFT*/ Stack<StarTask,5>_vtbl
{
  StarTask *(__thiscall *alloc)(Stack<StarTask,5> *this, unsigned int);
  void (__thiscall *free)(Stack<StarTask,5> *this, StarTask *, unsigned int);
};

/* 1635 */
struct __cppobj OverflowTaskQueue<StarTask,5,16384> : GenericTaskQueue<StarTask,5,16384>
{
  Stack<StarTask,5> _overflow_stack;
};

/* 1636 */
struct /*VFT*/ G1SATBCardTableModRefBS_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
  bool (__thiscall *card_will_be_scanned)(CardTableModRefBS *this, char);
  bool (__thiscall *card_may_have_been_dirty)(CardTableModRefBS *this, char);
  void (__thiscall *initialize)(CardTableModRefBS *this);
};

/* 1637 */
struct __cppobj G1SATBCardTableModRefBS : CardTableModRefBSForCTRS
{
};

/* 1638 */
struct __cppobj G1ParGCAllocator : CHeapObj<5>
{
  G1ParGCAllocator_vtbl *__vftable /*VFT*/;
  G1CollectedHeap *_g1h;
  const unsigned int _survivor_alignment_bytes;
  unsigned int _alloc_buffer_waste;
  unsigned int _undo_waste;
};

/* 1639 */
struct __cppobj __declspec(align(4)) G1ParGCAllocBuffer : ParGCAllocBuffer
{
  bool _retired;
};

/* 1640 */
struct /*VFT*/ G1ParGCAllocBuffer_vtbl
{
  void (__thiscall *~ParGCAllocBuffer)(ParGCAllocBuffer *this);
  void (__thiscall *set_buf)(ParGCAllocBuffer *this, HeapWord *);
  void (__thiscall *retire)(ParGCAllocBuffer *this, bool, bool);
};

/* 1641 */
struct __cppobj InCSetState
{
  char _value;
};

/* 1642 */
struct /*VFT*/ G1ParGCAllocator_vtbl
{
  void (__thiscall *retire_alloc_buffers)(G1ParGCAllocator *this);
  G1ParGCAllocBuffer *(__thiscall *alloc_buffer)(G1ParGCAllocator *this, InCSetState, unsigned __int8);
};

/* 1643 */
struct __cppobj G1ParClosureSuper : OopsInHeapRegionClosure
{
  G1CollectedHeap *_g1;
  G1ParScanThreadState *_par_scan_state;
  unsigned int _worker_id;
};

/* 1644 */
struct __cppobj __unaligned __declspec(align(4)) G1ParScanClosure : G1ParClosureSuper
{
};

/* 1645 */
struct __cppobj G1ParScanThreadState : StackObj
{
  G1CollectedHeap *_g1h;
  OverflowTaskQueue<StarTask,5,16384> *_refs;
  DirtyCardQueue _dcq;
  G1SATBCardTableModRefBS *_ct_bs;
  G1RemSet *_g1_rem;
  G1ParGCAllocator *_g1_par_allocator;
  ageTable _age_table;
  InCSetState _dest[3];
  unsigned int _tenuring_threshold;
  __unaligned __declspec(align(1)) G1ParScanClosure _scanner;
  unsigned int _alloc_buffer_waste;
  unsigned int _undo_waste;
  OopsInHeapRegionClosure *_evac_failure_cl;
  int _hash_seed;
  unsigned int _queue_num;
  unsigned int _term_attempts;
  long double _start;
  long double _start_strong_roots;
  long double _strong_roots_time;
  long double _start_term;
  long double _term_time;
  unsigned int *_surviving_young_words_base;
  unsigned int *_surviving_young_words;
};

/* 1646 */
struct /*VFT*/ G1ParClosureSuper_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1647 */
struct /*VFT*/ G1ParPushHeapRSClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1648 */
struct __cppobj G1ParPushHeapRSClosure : G1ParClosureSuper
{
};

/* 1649 */
struct __cppobj FreeIdSet : CHeapObj<7>
{
  int _sz;
  Monitor *_mon;
  int *_ids;
  int _hd;
  int _waiters;
  int _claimed;
  int _index;
};

/* 1650 */
struct /*VFT*/ DirtyCardQueueSet_vtbl
{
  bool (__thiscall *mut_process_buffer)(PtrQueueSet *this, void **);
};

/* 1652 */
struct /*VFT*/ RefineCardTableEntryClosure_vtbl
{
  bool (__thiscall *do_card_ptr)(CardTableEntryClosure *this, char *, unsigned int);
};

/* 1653 */
struct __cppobj __declspec(align(4)) RefineCardTableEntryClosure : CardTableEntryClosure
{
  bool _concurrent;
};

/* 1656 */
struct __cppobj CMBitMapRO : _ValueObj
{
  HeapWord *_bmStartWord;
  unsigned int _bmWordSize;
  const int _shifter;
  BitMap _bm;
};

/* 1659 */
struct __cppobj CMBitMapMappingChangedListener : G1MappingChangedListener
{
  CMBitMap *_bm;
};

/* 1657 */
struct __cppobj CMBitMap : CMBitMapRO
{
  CMBitMapMappingChangedListener _listener;
};

/* 1660 */
struct __cppobj CMRootRegions : _ValueObj
{
  YoungList *_young_list;
  ConcurrentMark *_cm;
  volatile bool _scan_in_progress;
  volatile bool _should_abort;
  HeapRegion *volatile _next_survivor;
};

/* 1661 */
struct __cppobj __declspec(align(4)) CMMarkStack : _ValueObj
{
  VirtualSpace _virtual_space;
  ConcurrentMark *_cm;
  oopDesc **_base;
  int _index;
  int _capacity;
  int _saved_index;
  bool _overflow;
  bool _should_expand;
};

/* 1676 */
struct __cppobj __declspec(align(4)) WorkGangBarrierSync : StackObj
{
  Monitor _monitor;
  unsigned int _n_workers;
  unsigned int _n_completed;
  bool _should_reset;
  bool _aborted;
};

/* 1686 */
struct __cppobj ForceOverflowSettings : _ValueObj
{
};

/* 1654 */
struct __cppobj __declspec(align(8)) ConcurrentMark : CHeapObj<5>
{
  ConcurrentMarkThread *_cmThread;
  G1CollectedHeap *_g1h;
  unsigned int _parallel_marking_threads;
  unsigned int _max_parallel_marking_threads;
  long double _sleep_factor;
  long double _marking_task_overhead;
  long double _cleanup_sleep_factor;
  long double _cleanup_task_overhead;
  FreeRegionList _cleanup_list;
  CMBitMap _markBitMap1;
  CMBitMap _markBitMap2;
  CMBitMapRO *_prevMarkBitMap;
  CMBitMap *_nextMarkBitMap;
  BitMap _region_bm;
  BitMap _card_bm;
  HeapWord *_heap_start;
  HeapWord *_heap_end;
  CMRootRegions _root_regions;
  CMMarkStack _markStack;
  HeapWord *volatile _finger;
  unsigned int _max_worker_id;
  unsigned int _active_tasks;
  CMTask **_tasks;
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_task_queues;
  ParallelTaskTerminator _terminator;
  WorkGangBarrierSync _first_overflow_barrier_sync;
  WorkGangBarrierSync _second_overflow_barrier_sync;
  volatile bool _has_overflown;
  volatile bool _concurrent;
  volatile bool _has_aborted;
  GCId _aborted_gc_id;
  volatile bool _restart_for_overflow;
  volatile bool _concurrent_marking_in_progress;
  CMVerboseLevel _verbose_level;
  NumberSeq _init_times;
  NumberSeq _remark_times;
  NumberSeq _remark_mark_times;
  NumberSeq _remark_weak_ref_times;
  NumberSeq _cleanup_times;
  long double _total_counting_time;
  long double _total_rs_scrub_time;
  long double *_accum_task_vtime;
  FlexibleWorkGang *_parallel_workers;
  ForceOverflowSettings _force_overflow_conc;
  ForceOverflowSettings _force_overflow_stw;
  BitMap *_count_card_bitmaps;
  unsigned int **_count_marked_bytes;
  int _heap_bottom_card_num;
  bool _completed_initialization;
};

/* 1655 */
struct __cppobj __declspec(align(4)) ConcurrentMarkThread : ConcurrentGCThread
{
  long double _vtime_start;
  long double _vtime_accum;
  long double _vtime_mark_accum;
  ConcurrentMark *_cm;
  volatile bool _started;
  volatile bool _in_progress;
};

/* 1658 */
struct /*VFT*/ CMBitMapMappingChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 1662 */
struct __cppobj TerminatorTerminator : CHeapObj<7>
{
  TerminatorTerminator_vtbl *__vftable /*VFT*/;
};

/* 1663 */
struct /*VFT*/ TerminatorTerminator_vtbl
{
  bool (__thiscall *should_exit_termination)(TerminatorTerminator *this);
};

/* 1664 */
struct /*VFT*/ GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1665 */
struct __cppobj GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> : TaskQueueSetSuperImpl<5>
{
  unsigned int _n;
  GenericTaskQueue<oopDesc *,5,16384> **_queues;
};

/* 1674 */
struct __cppobj __declspec(align(8)) TruncatedSeq : AbsSeq
{
  long double *_sequence;
  int _length;
  int _next;
};

/* 1666 */
struct __cppobj CMTask : TerminatorTerminator
{
  unsigned int _worker_id;
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  CMBitMap *_nextMarkBitMap;
  GenericTaskQueue<oopDesc *,5,16384> *_task_queue;
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_task_queues;
  bool _claimed;
  int _calls;
  long double _time_target_ms;
  long double _start_time_ms;
  G1CMOopClosure *_cm_oop_closure;
  HeapRegion *_curr_region;
  HeapWord *_finger;
  HeapWord *_region_limit;
  unsigned int _words_scanned;
  unsigned int _words_scanned_limit;
  unsigned int _real_words_scanned_limit;
  unsigned int _refs_reached;
  unsigned int _refs_reached_limit;
  unsigned int _real_refs_reached_limit;
  int _hash_seed;
  bool _has_aborted;
  bool _has_timed_out;
  bool _draining_satb_buffers;
  NumberSeq _step_times_ms;
  long double _elapsed_time_ms;
  long double _termination_time_ms;
  long double _termination_start_time_ms;
  bool _concurrent;
  TruncatedSeq _marking_step_diffs_ms;
  unsigned int *_marked_bytes_array;
  BitMap *_card_bm;
};

/* 1667 */
struct /*VFT*/ G1CMOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1668 */
struct __cppobj G1CMOopClosure : MetadataAwareOopClosure
{
  ConcurrentMark *_cm;
  G1CollectedHeap *_g1h;
  CMTask *_task;
};

/* 1670 */
struct /*VFT*/ AbsSeq_vtbl
{
  long double (__thiscall *total)(AbsSeq *this);
  void (__thiscall *add)(AbsSeq *this, long double);
  long double (__thiscall *maximum)(AbsSeq *this);
  long double (__thiscall *last)(AbsSeq *this);
  void (__thiscall *dump)(AbsSeq *this);
  void (__thiscall *dump_on)(AbsSeq *this, outputStream *);
};

/* 1671 */
struct /*VFT*/ NumberSeq_vtbl
{
  long double (__thiscall *total)(AbsSeq *this);
  void (__thiscall *add)(AbsSeq *this, long double);
  long double (__thiscall *maximum)(AbsSeq *this);
  long double (__thiscall *last)(AbsSeq *this);
  void (__thiscall *dump)(AbsSeq *this);
  void (__thiscall *dump_on)(AbsSeq *this, outputStream *);
};

/* 1673 */
struct /*VFT*/ TruncatedSeq_vtbl
{
  long double (__thiscall *total)(AbsSeq *this);
  void (__thiscall *add)(AbsSeq *this, long double);
  long double (__thiscall *maximum)(AbsSeq *this);
  long double (__thiscall *last)(AbsSeq *this);
  void (__thiscall *dump)(AbsSeq *this);
  void (__thiscall *dump_on)(AbsSeq *this, outputStream *);
};

/* 1675 */
struct /*VFT*/ CMTask_vtbl
{
  bool (__thiscall *should_exit_termination)(TerminatorTerminator *this);
};

/* 1677 */
struct __cppobj AbstractGangTask : _ValueObj
{
  AbstractGangTask_vtbl *__vftable /*VFT*/;
  int _counter;
};

/* 1678 */
struct /*VFT*/ AbstractGangTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 1679 */
struct __cppobj AbstractWorkGang : CHeapObj<7>
{
  AbstractWorkGang_vtbl *__vftable /*VFT*/;
  const bool _are_GC_task_threads;
  const bool _are_ConcurrentGC_threads;
  const char *_name;
  Monitor *_monitor;
  unsigned int _total_workers;
  bool _terminate;
  GangWorker **_gang_workers;
  AbstractGangTask *_task;
  int _sequence_number;
  unsigned int _started_workers;
  unsigned int _finished_workers;
};

/* 1680 */
struct /*VFT*/ AbstractWorkGang_vtbl
{
  void (__thiscall *run_task)(AbstractWorkGang *this, AbstractGangTask *);
  void (__thiscall *stop)(AbstractWorkGang *this);
  bool (__thiscall *needs_more_workers)(AbstractWorkGang *this);
  unsigned int (__thiscall *active_workers)(AbstractWorkGang *this);
};

/* 1681 */
struct __cppobj __declspec(align(8)) GangWorker : WorkerThread
{
  AbstractWorkGang *_gang;
};

/* 1682 */
struct __cppobj WorkGang : AbstractWorkGang
{
};

/* 1683 */
struct /*VFT*/ WorkGang_vtbl
{
  void (__thiscall *run_task)(AbstractWorkGang *this, AbstractGangTask *);
  void (__thiscall *stop)(AbstractWorkGang *this);
  bool (__thiscall *needs_more_workers)(AbstractWorkGang *this);
  unsigned int (__thiscall *active_workers)(AbstractWorkGang *this);
  GangWorker *(__thiscall *allocate_worker)(WorkGang *this, unsigned int);
};

/* 1684 */
struct /*VFT*/ FlexibleWorkGang_vtbl
{
  void (__thiscall *run_task)(AbstractWorkGang *this, AbstractGangTask *);
  void (__thiscall *stop)(AbstractWorkGang *this);
  bool (__thiscall *needs_more_workers)(AbstractWorkGang *this);
  unsigned int (__thiscall *active_workers)(AbstractWorkGang *this);
  GangWorker *(__thiscall *allocate_worker)(WorkGang *this, unsigned int);
};

/* 1685 */
struct __cppobj FlexibleWorkGang : WorkGang
{
  unsigned int _active_workers;
};

/* 1687 */
struct /*VFT*/ GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1688 */
struct __cppobj GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> : TaskQueueSetSuperImpl<5>
{
  unsigned int _n;
  OverflowTaskQueue<StarTask,5,16384> **_queues;
};

/* 1689 */
struct /*VFT*/ EvacuationFailedInfo_vtbl
{
  void (__thiscall *register_copy_failure)(CopyFailedInfo *this, unsigned int);
  void (__thiscall *reset)(CopyFailedInfo *this);
};

/* 1690 */
struct __cppobj EvacuationFailedInfo : CopyFailedInfo
{
};

/* 1691 */
struct /*VFT*/ ConcurrentGCTimer_vtbl
{
  void (__thiscall *register_gc_start)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
  void (__thiscall *register_gc_end)(GCTimer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *);
};

/* 1692 */
struct __cppobj ConcurrentGCTimer : GCTimer
{
};

/* 1693 */
struct /*VFT*/ OldGCTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1694 */
struct __cppobj OldGCTracer : GCTracer
{
};

/* 1695 */
struct /*VFT*/ G1OldTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1696 */
struct __cppobj G1OldTracer : OldGCTracer
{
};

/* 1697 */
struct /*VFT*/ YoungGCTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1698 */
struct __cppobj __declspec(align(8)) YoungGCTracer : GCTracer
{
  unsigned int _tenuring_threshold;
};

/* 1699 */
struct __cppobj G1YoungGCInfo : _ValueObj
{
  G1YCType _type;
};

/* 1700 */
struct /*VFT*/ G1NewTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1701 */
struct __cppobj __declspec(align(8)) G1NewTracer : YoungGCTracer
{
  G1YoungGCInfo _g1_young_gc_info;
};

/* 1702 */
struct /*VFT*/ G1STWIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 1704 */
struct /*VFT*/ G1CMIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 1707 */
struct /*VFT*/ G1BiasedMappedArray<InCSetState>_vtbl
{
  InCSetState *(__thiscall *default_value)(G1BiasedMappedArray<InCSetState> *this, InCSetState *result);
};

/* 1708 */
struct /*VFT*/ G1InCSetStateFastTestBiasedMappedArray_vtbl
{
  InCSetState *(__thiscall *default_value)(G1BiasedMappedArray<InCSetState> *this, InCSetState *result);
};

/* 1710 */
struct __cppobj PerRegionTable : CHeapObj<5>
{
  HeapRegion *_hr;
  BitMap _bm;
  int _occupied;
  PerRegionTable *_next;
  PerRegionTable *_prev;
  PerRegionTable *_collision_list_next;
};

/* 1711 */
struct __cppobj SparsePRTEntry : CHeapObj<5>
{
  int _region_ind;
  int _next_index;
  int _cards[1];
};

/* 1712 */
struct __cppobj RSHashTable : CHeapObj<5>
{
  unsigned int _capacity;
  unsigned int _capacity_mask;
  unsigned int _occupied_entries;
  unsigned int _occupied_cards;
  SparsePRTEntry *_entries;
  int *_buckets;
  int _free_region;
  int _free_list;
};

/* 1713 */
struct __cppobj SparsePRT : _ValueObj
{
  RSHashTable *_cur;
  RSHashTable *_next;
  HeapRegion *_hr;
  bool _expanded;
  SparsePRT *_next_expanded;
};

/* 1714 */
struct __cppobj OtherRegionsTable : _ValueObj
{
  G1CollectedHeap *_g1h;
  Mutex *_m;
  HeapRegion *_hr;
  BitMap _coarse_map;
  unsigned int _n_coarse_entries;
  PerRegionTable **_fine_grain_regions;
  unsigned int _n_fine_entries;
  PerRegionTable *_first_all_fine_prts;
  PerRegionTable *_last_all_fine_prts;
  unsigned int _fine_eviction_start;
  SparsePRT _sparse_table;
};

/* 1715 */
struct __cppobj HeapRegionRemSet : CHeapObj<5>
{
  G1BlockOffsetSharedArray *_bosa;
  G1CodeRootSet _code_roots;
  Mutex _m;
  OtherRegionsTable _other_regions;
  volatile HeapRegionRemSet::ParIterState _iter_state;
  volatile __int64 _iter_claimed;
};

/* 1717 */
struct __cppobj __declspec(align(8)) SurvRateGroup : CHeapObj<5>
{
  G1CollectorPolicy *_g1p;
  const char *_name;
  unsigned int _stats_arrays_length;
  long double *_surv_rate;
  long double *_accum_surv_rate_pred;
  long double _last_pred;
  long double _accum_surv_rate;
  TruncatedSeq **_surv_rate_pred;
  NumberSeq **_summary_surv_rates;
  unsigned int _summary_surv_rates_len;
  unsigned int _summary_surv_rates_max_len;
  int _all_regions_allocated;
  unsigned int _region_num;
  unsigned int _setup_seq_num;
};

/* 1718 */
struct /*VFT*/ HeapRegion_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
  void (__thiscall *reset_after_compaction)(CompactibleSpace *this);
  CompactibleSpace *(__thiscall *next_compaction_space)(CompactibleSpace *this);
  void (__thiscall *prepare_for_compaction)(CompactibleSpace *this, CompactPoint *);
  void (__thiscall *compact)(CompactibleSpace *this);
  unsigned int (__thiscall *allowed_dead_ratio)(CompactibleSpace *this);
  HeapWord *(__thiscall *initialize_threshold)(CompactibleSpace *this);
  HeapWord *(__thiscall *forward)(CompactibleSpace *this, oopDesc *, unsigned int, CompactPoint *, HeapWord *);
  unsigned int (__thiscall *adjust_object_size_v)(CompactibleSpace *this, unsigned int);
  unsigned int (__thiscall *minimum_free_block_size)(CompactibleSpace *this);
  HeapWord *(__thiscall *cross_threshold)(CompactibleSpace *this, HeapWord *, HeapWord *);
};

/* 1719 */
struct __cppobj GrowableArray<HeapRegion *> : GenericGrowableArray
{
  HeapRegion **_data;
};

/* 1720 */
struct __cppobj CollectionSetChooser : CHeapObj<5>
{
  GrowableArray<HeapRegion *> _regions;
  unsigned int _curr_index;
  unsigned int _length;
  unsigned int _first_par_unreserved_idx;
  unsigned int _region_live_threshold_bytes;
  unsigned int _remaining_reclaimable_bytes;
};

/* 1723 */
struct __cppobj __declspec(align(4)) G1YoungGenSizer : CHeapObj<5>
{
  G1YoungGenSizer::SizerKind _sizer_kind;
  unsigned int _min_desired_young_length;
  unsigned int _max_desired_young_length;
  bool _adaptive_size;
};

/* 1724 */
struct __cppobj WorkerDataArray<unsigned int> : CHeapObj<5>
{
  unsigned int *_data;
  unsigned int _length;
  const char *_title;
  bool _print_sum;
  int _log_level;
  unsigned int _indent_level;
  bool _enabled;
  WorkerDataArray<unsigned int> *_thread_work_items;
  bool _has_new_data;
  unsigned int _sum;
  unsigned int _min;
  unsigned int _max;
  long double _average;
};

/* 1725 */
struct __cppobj WorkerDataArray<double> : CHeapObj<5>
{
  long double *_data;
  unsigned int _length;
  const char *_title;
  bool _print_sum;
  int _log_level;
  unsigned int _indent_level;
  bool _enabled;
  WorkerDataArray<unsigned int> *_thread_work_items;
  bool _has_new_data;
  long double _sum;
  long double _min;
  long double _max;
  long double _average;
};

/* 1726 */
struct __cppobj G1GCPhaseTimes : CHeapObj<5>
{
  unsigned int _active_gc_threads;
  unsigned int _max_gc_threads;
  WorkerDataArray<double> *_gc_par_phases[28];
  WorkerDataArray<unsigned int> *_update_rs_processed_buffers;
  WorkerDataArray<unsigned int> *_termination_attempts;
  WorkerDataArray<unsigned int> *_redirtied_cards;
  long double _cur_collection_par_time_ms;
  long double _cur_collection_code_root_fixup_time_ms;
  long double _cur_strong_code_root_purge_time_ms;
  long double _cur_evac_fail_recalc_used;
  long double _cur_evac_fail_restore_remsets;
  long double _cur_evac_fail_remove_self_forwards;
  long double _cur_string_dedup_fixup_time_ms;
  long double _cur_clear_ct_time_ms;
  long double _cur_ref_proc_time_ms;
  long double _cur_ref_enq_time_ms;
  long double _cur_collection_start_sec;
  long double _root_region_scan_wait_time_ms;
  long double _recorded_young_cset_choice_time_ms;
  long double _recorded_non_young_cset_choice_time_ms;
  long double _recorded_redirty_logged_cards_time_ms;
  long double _recorded_young_free_cset_time_ms;
  long double _recorded_non_young_free_cset_time_ms;
  long double _cur_fast_reclaim_humongous_time_ms;
  long double _cur_fast_reclaim_humongous_register_time_ms;
  unsigned int _cur_fast_reclaim_humongous_total;
  unsigned int _cur_fast_reclaim_humongous_candidates;
  unsigned int _cur_fast_reclaim_humongous_reclaimed;
  long double _cur_verify_before_time_ms;
  long double _cur_verify_after_time_ms;
};

/* 1727 */
struct /*VFT*/ CollectorPolicy_vtbl
{
  void (__thiscall *initialize_alignments)(CollectorPolicy *this);
  void (__thiscall *initialize_flags)(CollectorPolicy *this);
  void (__thiscall *initialize_size_info)(CollectorPolicy *this);
  void (__thiscall *initialize_all)(CollectorPolicy *this);
  GenCollectorPolicy *(__thiscall *as_generation_policy)(CollectorPolicy *this);
  TwoGenerationCollectorPolicy *(__thiscall *as_two_generation_policy)(CollectorPolicy *this);
  MarkSweepPolicy *(__thiscall *as_mark_sweep_policy)(CollectorPolicy *this);
  ConcurrentMarkSweepPolicy *(__thiscall *as_concurrent_mark_sweep_policy)(CollectorPolicy *this);
  G1CollectorPolicy *(__thiscall *as_g1_policy)(CollectorPolicy *this);
  BarrierSet::Name (__thiscall *barrier_set_name)(CollectorPolicy *this);
  GenRemSet *(__thiscall *create_rem_set)(CollectorPolicy *this, MemRegion, int);
  HeapWord *(__thiscall *mem_allocate_work)(CollectorPolicy *this, unsigned int, bool, bool *);
  HeapWord *(__thiscall *satisfy_failed_allocation)(CollectorPolicy *this, unsigned int, bool);
  MetaWord *(__thiscall *satisfy_failed_metadata_allocation)(CollectorPolicy *this, ClassLoaderData *, unsigned int, Metaspace::MetadataType);
  void (__thiscall *initialize_gc_policy_counters)(CollectorPolicy *this);
  CollectorPolicy::Name (__thiscall *kind)(CollectorPolicy *this);
  bool (__thiscall *has_soft_ended_eden)(CollectorPolicy *this);
  void (__thiscall *post_heap_initialize)(CollectorPolicy *this);
};

/* 1728 */
struct __cppobj GCPolicyCounters : CHeapObj<5>
{
  GCPolicyCounters_vtbl *__vftable /*VFT*/;
  PerfLongVariable *_tenuring_threshold;
  PerfLongVariable *_desired_survivor_size;
  const char *_name_space;
};

/* 1729 */
struct /*VFT*/ GCPolicyCounters_vtbl
{
  void (__thiscall *update_counters)(GCPolicyCounters *this);
  GCPolicyCounters::Name (__thiscall *kind)(GCPolicyCounters *this);
};

/* 1730 */
struct __cppobj ThreadClosure : StackObj
{
  ThreadClosure_vtbl *__vftable /*VFT*/;
};

/* 1731 */
struct /*VFT*/ ThreadClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 1732 */
struct /*VFT*/ CollectedHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
};

/* 1733 */
struct __cppobj EventLog : CHeapObj<7>
{
  EventLog_vtbl *__vftable /*VFT*/;
  EventLog *_next;
};

/* 1734 */
struct /*VFT*/ EventLog_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 1735 */
struct __cppobj FormatBuffer<1024> : FormatBufferBase
{
  char _buffer[1024];
};

/* 1736 */
struct __cppobj __declspec(align(4)) GCMessage : FormatBuffer<1024>
{
  bool is_before;
};

/* 1737 */
struct __cppobj __declspec(align(8)) EventLogBase<GCMessage>::EventRecord<GCMessage> : CHeapObj<7>
{
  long double timestamp;
  Thread *thread;
  GCMessage data;
};

/* 1738 */
struct /*VFT*/ EventLogBase<GCMessage>_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 1739 */
struct __cppobj EventLogBase<GCMessage> : EventLog
{
  Mutex _mutex;
  const char *_name;
  int _length;
  int _index;
  int _count;
  EventLogBase<GCMessage>::EventRecord<GCMessage> *_records;
};

/* 1740 */
struct /*VFT*/ GCHeapLog_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 1741 */
struct __cppobj GCHeapLog : EventLogBase<GCMessage>
{
};

/* 1742 */
struct /*VFT*/ PerfByteArray_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1743 */
struct __cppobj PerfByteArray : PerfData
{
  int _length;
};

/* 1744 */
struct /*VFT*/ PerfString_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1745 */
struct __cppobj PerfString : PerfByteArray
{
};

/* 1746 */
struct /*VFT*/ PerfStringVariable_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 1747 */
struct __cppobj PerfStringVariable : PerfString
{
};

/* 1748 */
struct /*VFT*/ SharedHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
  void (__thiscall *ref_processing_init)(SharedHeap *this);
  void (__thiscall *space_iterate)(SharedHeap *this, SpaceClosure *);
  Space *(__thiscall *space_containing)(SharedHeap *this, const void *);
  void (__thiscall *gc_prologue)(SharedHeap *this, bool);
  void (__thiscall *gc_epilogue)(SharedHeap *this, bool);
};

/* 1749 */
struct __cppobj ShenandoahLock
{
  char _pad0[64];
  volatile int _state;
  char _pad1[64];
  volatile Thread *_owner;
  char _pad2[64];
};

/* 1750 */
struct __cppobj __declspec(align(8)) ShenandoahHeapRegion
{
  const unsigned int _index;
  HeapWord *const _bottom;
  HeapWord *const _end;
  HeapWord *_new_top;
  long double _empty_time;
  ShenandoahHeapRegion::RegionState _state;
  HeapWord *_top;
  unsigned int _tlab_allocs;
  unsigned int _gclab_allocs;
  volatile int _live_data;
  volatile int _critical_pins;
  HeapWord *volatile _update_watermark;
};

/* 1752 */
struct __cppobj ShenandoahRegionIterator : StackObj
{
  ShenandoahHeap *_heap;
  char _pad0[64];
  volatile int _index;
  char _pad1[64];
};

/* 1753 */
struct __cppobj ShenandoahSharedBitmap
{
  char _pad0[64];
  volatile char value;
  char _pad1[64];
};

/* 1754 */
struct __cppobj ShenandoahSharedFlag
{
  char _pad0[64];
  volatile char value;
  char _pad1[64];
};

/* 1789 */
struct __cppobj MarkBitMapRO : _ValueObj
{
  MemRegion _covered;
  HeapWord *_bmStartWord;
  unsigned int _bmWordSize;
  const int _shifter;
  BitMap _bm;
};

/* 1790 */
struct __cppobj MarkBitMap : MarkBitMapRO
{
};

/* 1800 */
struct __cppobj ShenandoahEvacOOMHandler
{
  char _pad0[64];
  volatile int _threads_in_evac;
  char _pad1[64];
};

/* 1751 */
struct __cppobj __declspec(align(8)) ShenandoahHeap : SharedHeap
{
  ShenandoahLock _lock;
  unsigned int _initial_size;
  unsigned int _minimum_size;
  char _pad0[64];
  volatile __int64 _used;
  volatile unsigned int _committed;
  volatile __int64 _bytes_allocated_since_gc_start;
  char _pad1[64];
  unsigned int _max_workers;
  MemRegion _heap_region;
  bool _heap_region_special;
  unsigned int _num_regions;
  ShenandoahHeapRegion **_regions;
  ShenandoahRegionIterator _update_refs_iterator;
  ShenandoahSharedBitmap _gc_state;
  ShenandoahSharedFlag _degenerated_gc_in_progress;
  ShenandoahSharedFlag _full_gc_in_progress;
  ShenandoahSharedFlag _full_gc_move_in_progress;
  ShenandoahSharedFlag _progress_last_gc;
  ShenandoahSharedFlag _cancelled_gc;
  ShenandoahControlThread *_control_thread;
  ShenandoahCollectorPolicy *_shenandoah_policy;
  ShenandoahMode *_gc_mode;
  ShenandoahHeuristics *_heuristics;
  ShenandoahFreeSet *_free_set;
  ShenandoahConcurrentMark *_scm;
  ShenandoahMarkCompact *_full_gc;
  ShenandoahPacer *_pacer;
  ShenandoahVerifier *_verifier;
  ShenandoahPhaseTimings *_phase_timings;
  ShenandoahMonitoringSupport *_monitoring_support;
  ConcurrentGCTimer *_gc_timer;
  ReferenceProcessor *_ref_processor;
  ShenandoahSharedFlag _process_references;
  ShenandoahSharedFlag _unload_classes;
  ShenandoahMarkingContext *_marking_context;
  MemRegion _bitmap_region;
  MemRegion _aux_bitmap_region;
  MarkBitMap _verification_bit_map;
  MarkBitMap _aux_bit_map;
  unsigned int _bitmap_size;
  unsigned int _bitmap_regions_per_slice;
  unsigned int _bitmap_bytes_per_slice;
  unsigned int _pretouch_heap_page_size;
  unsigned int _pretouch_bitmap_page_size;
  bool _bitmap_region_special;
  bool _aux_bitmap_region_special;
  unsigned __int16 **_liveness_cache;
  ShenandoahCollectionSet *_collection_set;
  ShenandoahEvacOOMHandler _oom_evac_handler;
  ShenandoahSharedFlag _inject_alloc_failure;
};

/* 1755 */
struct __cppobj PeriodicTask : CHeapObj<7>
{
  PeriodicTask_vtbl *__vftable /*VFT*/;
  int _counter;
  const int _interval;
};

/* 1756 */
struct /*VFT*/ PeriodicTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 1759 */
struct __cppobj ShenandoahPeriodicTask : PeriodicTask
{
  ShenandoahControlThread *_thread;
};

/* 1761 */
struct __cppobj ShenandoahPeriodicSATBFlushTask : PeriodicTask
{
};

/* 1757 */
struct __cppobj __declspec(align(8)) ShenandoahControlThread : ConcurrentGCThread
{
  Monitor _alloc_failure_waiters_lock;
  Monitor _gc_waiters_lock;
  ShenandoahPeriodicTask _periodic_task;
  ShenandoahPeriodicSATBFlushTask _periodic_satb_flush_task;
  ShenandoahSharedFlag _gc_requested;
  ShenandoahSharedFlag _alloc_failure_gc;
  ShenandoahSharedFlag _graceful_shutdown;
  ShenandoahSharedFlag _heap_changed;
  ShenandoahSharedFlag _do_counters_update;
  ShenandoahSharedFlag _force_counters_update;
  GCCause::Cause _requested_gc_cause;
  ShenandoahHeap::ShenandoahDegenPoint _degen_point;
  char _pad0[64];
  volatile int _allocs_seen;
  char _pad1[64];
  volatile int _gc_id;
  char _pad2[64];
};

/* 1758 */
struct /*VFT*/ ShenandoahPeriodicTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 1760 */
struct /*VFT*/ ShenandoahPeriodicSATBFlushTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 1762 */
struct /*VFT*/ ShenandoahTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1763 */
struct __cppobj ShenandoahTracer : GCTracer
{
};

/* 1764 */
struct /*VFT*/ ShenandoahCollectorPolicy_vtbl
{
  void (__thiscall *initialize_alignments)(CollectorPolicy *this);
  void (__thiscall *initialize_flags)(CollectorPolicy *this);
  void (__thiscall *initialize_size_info)(CollectorPolicy *this);
  void (__thiscall *initialize_all)(CollectorPolicy *this);
  GenCollectorPolicy *(__thiscall *as_generation_policy)(CollectorPolicy *this);
  TwoGenerationCollectorPolicy *(__thiscall *as_two_generation_policy)(CollectorPolicy *this);
  MarkSweepPolicy *(__thiscall *as_mark_sweep_policy)(CollectorPolicy *this);
  ConcurrentMarkSweepPolicy *(__thiscall *as_concurrent_mark_sweep_policy)(CollectorPolicy *this);
  G1CollectorPolicy *(__thiscall *as_g1_policy)(CollectorPolicy *this);
  BarrierSet::Name (__thiscall *barrier_set_name)(CollectorPolicy *this);
  GenRemSet *(__thiscall *create_rem_set)(CollectorPolicy *this, MemRegion, int);
  HeapWord *(__thiscall *mem_allocate_work)(CollectorPolicy *this, unsigned int, bool, bool *);
  HeapWord *(__thiscall *satisfy_failed_allocation)(CollectorPolicy *this, unsigned int, bool);
  MetaWord *(__thiscall *satisfy_failed_metadata_allocation)(CollectorPolicy *this, ClassLoaderData *, unsigned int, Metaspace::MetadataType);
  void (__thiscall *initialize_gc_policy_counters)(CollectorPolicy *this);
  CollectorPolicy::Name (__thiscall *kind)(CollectorPolicy *this);
  bool (__thiscall *has_soft_ended_eden)(CollectorPolicy *this);
  void (__thiscall *post_heap_initialize)(CollectorPolicy *this);
};

/* 1765 */
struct __cppobj ShenandoahCollectorPolicy : CollectorPolicy
{
  unsigned int _success_concurrent_gcs;
  unsigned int _success_degenerated_gcs;
  unsigned int _success_full_gcs;
  unsigned int _alloc_failure_degenerated;
  unsigned int _alloc_failure_degenerated_upgrade_to_full;
  unsigned int _alloc_failure_full;
  unsigned int _explicit_concurrent;
  unsigned int _explicit_full;
  unsigned int _implicit_concurrent;
  unsigned int _implicit_full;
  unsigned int _degen_points[5];
  ShenandoahSharedFlag _in_shutdown;
  ShenandoahTracer *_tracer;
  unsigned int _cycle_counter;
};

/* 1766 */
struct __cppobj ShenandoahMode : CHeapObj<5>
{
  ShenandoahMode_vtbl *__vftable /*VFT*/;
};

/* 1767 */
struct __cppobj ShenandoahCollectionSet : CHeapObj<5>
{
  const unsigned int _map_size;
  const unsigned int _region_size_bytes_shift;
  ReservedSpace _map_space;
  char *const _cset_map;
  char *const _biased_cset_map;
  ShenandoahHeap *const _heap;
  unsigned int _garbage;
  unsigned int _used;
  unsigned int _region_count;
  char _pad0[64];
  volatile int _current_index;
  char _pad1[64];
};

/* 1768 */
struct ShenandoahHeuristics::RegionData
{
  ShenandoahHeapRegion *_region;
  unsigned int _garbage;
};

/* 1769 */
struct __cppobj ShenandoahHeuristics : CHeapObj<5>
{
  ShenandoahHeuristics_vtbl *__vftable /*VFT*/;
  ShenandoahHeuristics::RegionData *_region_data;
  unsigned int _degenerated_cycles_in_a_row;
  unsigned int _successful_cycles_in_a_row;
  long double _cycle_start;
  long double _last_cycle_end;
  unsigned int _gc_times_learned;
  int _gc_time_penalties;
  TruncatedSeq *_gc_time_history;
  ShenandoahSharedFlag _metaspace_oom;
};

/* 1770 */
struct /*VFT*/ ShenandoahHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 1771 */
struct /*VFT*/ ShenandoahMode_vtbl
{
  void (__thiscall *initialize_flags)(ShenandoahMode *this);
  ShenandoahHeuristics *(__thiscall *initialize_heuristics)(ShenandoahMode *this);
  const char *(__thiscall *name)(ShenandoahMode *this);
  bool (__thiscall *is_diagnostic)(ShenandoahMode *this);
  bool (__thiscall *is_experimental)(ShenandoahMode *this);
};

/* 1772 */
struct __cppobj ShenandoahFreeSet : CHeapObj<5>
{
  ShenandoahHeap *const _heap;
  BitMap _mutator_free_bitmap;
  BitMap _collector_free_bitmap;
  unsigned int _max;
  unsigned int _mutator_leftmost;
  unsigned int _mutator_rightmost;
  unsigned int _collector_leftmost;
  unsigned int _collector_rightmost;
  unsigned int _capacity;
  unsigned int _used;
};

/* 1773 */
struct /*VFT*/ GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1774 */
struct __cppobj GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5> : TaskQueueSetSuperImpl<5>
{
  unsigned int _n;
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> **_queues;
};

/* 1775 */
struct /*VFT*/ ParallelClaimableQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1776 */
struct __cppobj ParallelClaimableQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5> : GenericTaskQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5>
{
  char _pad0[64];
  volatile int _claimed_index;
  char _pad1[64];
};

/* 1777 */
struct /*VFT*/ ShenandoahObjToScanQueueSet_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 1778 */
struct __cppobj ShenandoahObjToScanQueueSet : ParallelClaimableQueueSet<Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64>,5>
{
};

/* 1779 */
struct __cppobj __declspec(align(4)) ShenandoahConcurrentMark : CHeapObj<5>
{
  ShenandoahHeap *_heap;
  ShenandoahObjToScanQueueSet *_task_queues;
  ShenandoahSharedFlag _claimed_codecache;
};

/* 1780 */
struct __cppobj PreservedMarks::OopAndMarkOop
{
  oopDesc *_o;
  markOopDesc *_m;
};

/* 1781 */
struct __cppobj Stack<PreservedMarks::OopAndMarkOop,5> : StackBase<5>
{
  Stack<PreservedMarks::OopAndMarkOop,5>_vtbl *__vftable /*VFT*/;
  PreservedMarks::OopAndMarkOop *_cur_seg;
  PreservedMarks::OopAndMarkOop *_cache;
};

/* 1782 */
struct /*VFT*/ Stack<PreservedMarks::OopAndMarkOop,5>_vtbl
{
  PreservedMarks::OopAndMarkOop *(__thiscall *alloc)(Stack<PreservedMarks::OopAndMarkOop,5> *this, unsigned int);
  void (__thiscall *free)(Stack<PreservedMarks::OopAndMarkOop,5> *this, PreservedMarks::OopAndMarkOop *, unsigned int);
};

/* 1783 */
struct __cppobj PreservedMarks
{
  Stack<PreservedMarks::OopAndMarkOop,5> _stack;
};

/* 1784 */
struct __cppobj Padded<PreservedMarks,64> : PreservedMarks
{
  char _pad_buf_[128];
};

/* 1785 */
struct __cppobj PreservedMarksSet : CHeapObj<5>
{
  const bool _in_c_heap;
  unsigned int _num;
  Padded<PreservedMarks,64> *_stacks;
};

/* 1786 */
struct __cppobj ShenandoahMarkCompact : CHeapObj<5>
{
  GCTimer *_gc_timer;
  PreservedMarksSet *_preserved_marks;
};

/* 1787 */
struct __cppobj __declspec(align(8)) BinaryMagnitudeSeq
{
  __int64 _sum;
  __int64 *_mags;
};

/* 1788 */
struct __cppobj ShenandoahPacer : CHeapObj<5>
{
  ShenandoahHeap *_heap;
  BinaryMagnitudeSeq _delays;
  TruncatedSeq *_progress_history;
  Monitor *_wait_monitor;
  volatile int _epoch;
  volatile long double _tax_rate;
  char _pad0[64];
  volatile int _budget;
  char _pad1[64];
  volatile int _progress;
  char _pad2[64];
};

/* 1791 */
struct __cppobj ShenandoahVerifier : CHeapObj<5>
{
  ShenandoahHeap *_heap;
  MarkBitMap *_verification_bit_map;
};

/* 1792 */
struct /*VFT*/ HdrSeq_vtbl
{
  long double (__thiscall *total)(AbsSeq *this);
  void (__thiscall *add)(AbsSeq *this, long double);
  long double (__thiscall *maximum)(AbsSeq *this);
  long double (__thiscall *last)(AbsSeq *this);
  void (__thiscall *dump)(AbsSeq *this);
  void (__thiscall *dump_on)(AbsSeq *this, outputStream *);
};

/* 1793 */
struct __cppobj __declspec(align(8)) HdrSeq : NumberSeq
{
  int **_hdr;
};

/* 1794 */
struct __cppobj ShenandoahWorkerDataArray<unsigned int> : CHeapObj<5>
{
  unsigned int *_data;
  unsigned int _length;
  const char *_title;
  ShenandoahWorkerDataArray<unsigned int> *_thread_work_items;
};

/* 1795 */
struct __cppobj ShenandoahWorkerDataArray<double> : CHeapObj<5>
{
  long double *_data;
  unsigned int _length;
  const char *_title;
  ShenandoahWorkerDataArray<unsigned int> *_thread_work_items;
};

/* 1796 */
struct __cppobj __declspec(align(8)) ShenandoahPhaseTimings : CHeapObj<5>
{
  unsigned int _max_workers;
  long double _cycle_data[344];
  HdrSeq _global_data[344];
  ShenandoahWorkerDataArray<double> *_worker_data[344];
  ShenandoahCollectorPolicy *_policy;
};

/* 1797 */
struct __cppobj ShenandoahHeapRegionCounters : CHeapObj<5>
{
  char *_name_space;
  PerfLongVariable **_regions_data;
  PerfLongVariable *_timestamp;
  PerfLongVariable *_status;
  volatile __int64 _last_sample_millis;
};

/* 1798 */
struct __cppobj ShenandoahMonitoringSupport : CHeapObj<5>
{
  CollectorCounters *_full_counters;
  GenerationCounters *_young_counters;
  GenerationCounters *_heap_counters;
  HSpaceCounters *_space_counters;
  ShenandoahHeapRegionCounters *_heap_region_counters;
};

/* 1799 */
struct __cppobj __declspec(align(4)) ShenandoahMarkingContext : CHeapObj<5>
{
  MarkBitMap _mark_bit_map;
  HeapWord **const _top_bitmaps;
  HeapWord **const _top_at_mark_starts_base;
  HeapWord **const _top_at_mark_starts;
  ShenandoahSharedFlag _is_complete;
};

/* 1801 */
struct /*VFT*/ ShenandoahHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
  void (__thiscall *ref_processing_init)(SharedHeap *this);
  void (__thiscall *space_iterate)(SharedHeap *this, SpaceClosure *);
  Space *(__thiscall *space_containing)(SharedHeap *this, const void *);
  void (__thiscall *gc_prologue)(SharedHeap *this, bool);
  void (__thiscall *gc_epilogue)(SharedHeap *this, bool);
};

/* 1802 */
struct /*VFT*/ ShenandoahMarkRefsSuperClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1803 */
struct __cppobj ShenandoahMarkRefsSuperClosure : MetadataAwareOopClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahStrDedupQueue *_dedup_queue;
  ShenandoahHeap *_heap;
  ShenandoahMarkingContext *const _mark_context;
};

/* 1804 */
struct /*VFT*/ ShenandoahMarkRefsMetadataDedupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1805 */
struct __cppobj ShenandoahMarkRefsMetadataDedupClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1806 */
struct /*VFT*/ ShenandoahMarkRefsDedupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1807 */
struct __cppobj ShenandoahMarkRefsDedupClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1808 */
struct /*VFT*/ ShenandoahMarkUpdateRefsMetadataDedupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1809 */
struct __cppobj ShenandoahMarkUpdateRefsMetadataDedupClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1810 */
struct /*VFT*/ ShenandoahMarkUpdateRefsDedupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1811 */
struct __cppobj ShenandoahMarkUpdateRefsDedupClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1812 */
struct /*VFT*/ ShenandoahUpdateHeapRefsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1813 */
struct __cppobj ShenandoahUpdateHeapRefsClosure : ExtendedOopClosure
{
  ShenandoahHeap *_heap;
};

/* 1814 */
struct /*VFT*/ ShenandoahMarkRefsMetadataClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1815 */
struct __cppobj ShenandoahMarkRefsMetadataClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1816 */
struct /*VFT*/ ShenandoahMarkRefsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1817 */
struct __cppobj ShenandoahMarkRefsClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1818 */
struct /*VFT*/ ShenandoahMarkUpdateRefsMetadataClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1819 */
struct __cppobj ShenandoahMarkUpdateRefsMetadataClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1820 */
struct /*VFT*/ ShenandoahMarkUpdateRefsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1821 */
struct __cppobj ShenandoahMarkUpdateRefsClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 1822 */
struct /*VFT*/ G1UpdateRSOrPushRefOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1823 */
struct __cppobj G1UpdateRSOrPushRefOopClosure : ExtendedOopClosure
{
  G1CollectedHeap *_g1;
  G1RemSet *_g1_rem_set;
  HeapRegion *_from;
  G1ParPushHeapRSClosure *_push_ref_cl;
  bool _record_refs_into_cset;
  unsigned int _worker_i;
};

/* 1824 */
struct /*VFT*/ G1TriggerClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1825 */
struct __cppobj __declspec(align(4)) G1TriggerClosure : ExtendedOopClosure
{
  bool _triggered;
};

/* 1826 */
struct /*VFT*/ G1InvokeIfNotTriggeredClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1827 */
struct __cppobj G1InvokeIfNotTriggeredClosure : ExtendedOopClosure
{
  G1TriggerClosure *_trigger_cl;
  OopClosure *_oop_cl;
};

/* 1828 */
struct /*VFT*/ G1Mux2Closure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1829 */
struct __cppobj G1Mux2Closure : ExtendedOopClosure
{
  OopClosure *_c1;
  OopClosure *_c2;
};

/* 1830 */
struct /*VFT*/ G1RootRegionScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1831 */
struct __cppobj G1RootRegionScanClosure : MetadataAwareOopClosure
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  unsigned int _worker_id;
};

/* 1832 */
struct /*VFT*/ FilterOutOfRegionClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1833 */
struct __cppobj FilterOutOfRegionClosure : ExtendedOopClosure
{
  HeapWord *_r_bottom;
  HeapWord *_r_end;
  OopClosure *_oc;
};

/* 1834 */
struct /*VFT*/ FilterIntoCSClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1835 */
struct __cppobj FilterIntoCSClosure : ExtendedOopClosure
{
  G1CollectedHeap *_g1;
  OopClosure *_oc;
  DirtyCardToOopClosure *_dcto_cl;
};

/* 1836 */
struct /*VFT*/ YieldingFlexibleWorkGang_vtbl
{
  void (__thiscall *run_task)(AbstractWorkGang *this, AbstractGangTask *);
  void (__thiscall *stop)(AbstractWorkGang *this);
  bool (__thiscall *needs_more_workers)(AbstractWorkGang *this);
  unsigned int (__thiscall *active_workers)(AbstractWorkGang *this);
  GangWorker *(__thiscall *allocate_worker)(WorkGang *this, unsigned int);
};

/* 1837 */
struct __cppobj YieldingFlexibleWorkGang : FlexibleWorkGang
{
  unsigned int _yielded_workers;
};

/* 1838 */
struct __cppobj CMSBitMap : _ValueObj
{
  HeapWord *_bmStartWord;
  unsigned int _bmWordSize;
  const int _shifter;
  VirtualSpace _virtual_space;
  BitMap _bm;
  Mutex *const _lock;
};

/* 1839 */
struct /*VFT*/ CMSTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 1840 */
struct __cppobj CMSTracer : OldGCTracer
{
};

/* 1844 */
struct __cppobj VirtualSpaceSummary : StackObj
{
  HeapWord *_start;
  HeapWord *_committed_end;
  HeapWord *_reserved_end;
};

/* 1841 */
struct __cppobj GCHeapSummary : StackObj
{
  GCHeapSummary_vtbl *__vftable /*VFT*/;
  VirtualSpaceSummary _heap;
  unsigned int _used;
};

/* 1842 */
const struct __cppobj __unaligned __declspec(align(4)) G1HeapSummary : GCHeapSummary
{
  unsigned int _edenUsed;
  unsigned int _edenCapacity;
  unsigned int _survivorUsed;
  unsigned int _numberOfRegions;
};

/* 1843 */
struct __cppobj GCHeapSummaryVisitor
{
  GCHeapSummaryVisitor_vtbl *__vftable /*VFT*/;
};

/* 1845 */
struct __cppobj SpaceSummary : StackObj
{
  HeapWord *_start;
  HeapWord *_end;
  unsigned int _used;
};

/* 1846 */
const struct __cppobj __unaligned __declspec(align(4)) PSHeapSummary : GCHeapSummary
{
  VirtualSpaceSummary _old;
  SpaceSummary _old_space;
  VirtualSpaceSummary _young;
  SpaceSummary _eden;
  SpaceSummary _from;
  SpaceSummary _to;
};

/* 1847 */
struct /*VFT*/ GCHeapSummaryVisitor_vtbl
{
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const G1HeapSummary *);
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const PSHeapSummary *);
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const GCHeapSummary *);
};

/* 1848 */
struct /*VFT*/ GCHeapSummary_vtbl
{
  void (__thiscall *accept)(GCHeapSummary *this, GCHeapSummaryVisitor *);
};

/* 1849 */
struct __cppobj MetaspaceSizes : StackObj
{
  unsigned int _committed;
  unsigned int _used;
  unsigned int _reserved;
};

/* 1850 */
struct __cppobj MetaspaceChunkFreeListSummary : _ValueObj
{
  unsigned int _num_specialized_chunks;
  unsigned int _num_small_chunks;
  unsigned int _num_medium_chunks;
  unsigned int _num_humongous_chunks;
  unsigned int _specialized_chunks_size_in_bytes;
  unsigned int _small_chunks_size_in_bytes;
  unsigned int _medium_chunks_size_in_bytes;
  unsigned int _humongous_chunks_size_in_bytes;
};

/* 1851 */
struct __cppobj MetaspaceSummary : StackObj
{
  unsigned int _capacity_until_GC;
  MetaspaceSizes _meta_space;
  MetaspaceSizes _data_space;
  MetaspaceSizes _class_space;
  MetaspaceChunkFreeListSummary _metaspace_chunk_free_list_summary;
  MetaspaceChunkFreeListSummary _class_chunk_free_list_summary;
};

/* 1852 */
struct __cppobj BlockOffsetSharedArray : CHeapObj<5>
{
  bool _init_to_zero;
  MemRegion _reserved;
  HeapWord *_end;
  VirtualSpace _vs;
  unsigned __int8 *_offset_array;
};

/* 1853 */
struct __cppobj CardGeneration : Generation
{
  GenRemSet *_rs;
  BlockOffsetSharedArray *_bts;
  unsigned int _shrink_factor;
  unsigned int _min_heap_delta_bytes;
  unsigned int _capacity_at_prologue;
  unsigned int _used_at_prologue;
};

/* 1854 */
struct /*VFT*/ CardGeneration_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
  bool (__thiscall *expand)(CardGeneration *this, unsigned int, unsigned int);
  void (__thiscall *shrink)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_by)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_to_reserved)(CardGeneration *this);
};

/* 1855 */
struct __cppobj BlockOffsetTable : _ValueObj
{
  BlockOffsetTable_vtbl *__vftable /*VFT*/;
  HeapWord *_bottom;
  HeapWord *_end;
};

/* 1856 */
struct /*VFT*/ BlockOffsetTable_vtbl
{
  void (__thiscall *resize)(BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(BlockOffsetTable *this, const void *);
};

/* 1857 */
struct __cppobj __declspec(align(4)) BlockOffsetArray : BlockOffsetTable
{
  BlockOffsetSharedArray *_array;
  Space *_sp;
  bool _init_to_zero;
};

/* 1858 */
struct /*VFT*/ BlockOffsetArray_vtbl
{
  void (__thiscall *resize)(BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(BlockOffsetTable *this, const void *);
  void (__thiscall *alloc_block)(BlockOffsetArray *this, HeapWord *, HeapWord *);
  unsigned int (__thiscall *last_active_index)(BlockOffsetArray *this);
};

/* 1859 */
struct /*VFT*/ BlockOffsetArrayNonContigSpace_vtbl
{
  void (__thiscall *resize)(BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(BlockOffsetTable *this, const void *);
  void (__thiscall *alloc_block)(BlockOffsetArray *this, HeapWord *, HeapWord *);
  unsigned int (__thiscall *last_active_index)(BlockOffsetArray *this);
};

/* 1860 */
struct __cppobj BlockOffsetArrayNonContigSpace : BlockOffsetArray
{
  HeapWord *_unallocated_block;
};

/* 1884 */
struct __cppobj CMSMarkStack : CHeapObj<5>
{
  VirtualSpace _virtual_space;
  oopDesc **_base;
  unsigned int _index;
  unsigned int _capacity;
  Mutex _par_lock;
  unsigned int _hit_limit;
  unsigned int _failed_double;
};

/* 1886 */
struct __cppobj CMSIsAliveClosure : BoolObjectClosure
{
  const MemRegion _span;
  const CMSBitMap *_bit_map;
};

/* 1889 */
struct __cppobj ModUnionClosure : MemRegionClosure
{
  CMSBitMap *_t;
};

/* 1891 */
struct __cppobj ModUnionClosurePar : ModUnionClosure
{
};

/* 1892 */
struct __cppobj CMSStats : _ValueObj
{
  ConcurrentMarkSweepGeneration *const _cms_gen;
  unsigned int _saved_alpha;
  unsigned int _gc0_alpha;
  unsigned int _cms_alpha;
  long double _gc0_duration;
  long double _gc0_period;
  unsigned int _gc0_promoted;
  long double _cms_duration;
  long double _cms_duration_pre_sweep;
  long double _cms_duration_per_mb;
  long double _cms_period;
  unsigned int _cms_allocated;
  elapsedTimer _cms_timer;
  TimeStamp _gc0_begin_time;
  TimeStamp _cms_begin_time;
  TimeStamp _cms_end_time;
  unsigned int _cms_used_at_gc0_begin;
  unsigned int _cms_used_at_gc0_end;
  unsigned int _cms_used_at_cms_begin;
  bool _allow_duty_cycle_reduction;
  unsigned int _valid_bits;
  unsigned int _icms_duty_cycle;
};

/* 1861 */
struct __cppobj CMSCollector : CHeapObj<5>
{
  __int64 _time_of_last_gc;
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_task_queues;
  oopDesc *_overflow_list;
  Stack<oopDesc *,5> _preserved_oop_stack;
  Stack<markOopDesc *,5> _preserved_mark_stack;
  int *_hash_seed;
  YieldingFlexibleWorkGang *_conc_workers;
  CollectorCounters *_gc_counters;
  bool _completed_initialization;
  unsigned int _collection_count_start;
  bool _should_unload_classes;
  unsigned int _concurrent_cycles_since_last_unload;
  int _roots_scanning_options;
  CMSBitMap _verification_mark_bm;
  bool _verifying;
  ConcurrentMarkSweepPolicy *_collector_policy;
  elapsedTimer _inter_sweep_timer;
  elapsedTimer _intra_sweep_timer;
  AdaptivePaddedAverage _inter_sweep_estimate;
  AdaptivePaddedAverage _intra_sweep_estimate;
  CMSTracer *_gc_tracer_cm;
  ConcurrentGCTimer *_gc_timer_cm;
  bool _cms_start_registered;
  GCHeapSummary _last_heap_summary;
  MetaspaceSummary _last_metaspace_summary;
  ConcurrentMarkSweepGeneration *_cmsGen;
  MemRegion _span;
  CardTableRS *_ct;
  CMSBitMap _markBitMap;
  CMSBitMap _modUnionTable;
  CMSMarkStack _markStack;
  HeapWord *_restart_addr;
  unsigned int _ser_pmc_preclean_ovflw;
  unsigned int _ser_pmc_remark_ovflw;
  unsigned int _par_pmc_remark_ovflw;
  unsigned int _ser_kac_preclean_ovflw;
  unsigned int _ser_kac_ovflw;
  unsigned int _par_kac_ovflw;
  ReferenceProcessor *_ref_processor;
  CMSIsAliveClosure _is_alive_closure;
  ConcurrentMarkSweepThread *_cmsThread;
  ModUnionClosure _modUnionClosure;
  ModUnionClosurePar _modUnionClosurePar;
  bool _between_prologue_and_epilogue;
  bool _abort_preclean;
  bool _start_sampling;
  int _numYields;
  unsigned int _numDirtyCards;
  unsigned int _sweep_count;
  unsigned int _full_gcs_since_conc_gc;
  long double _bootstrap_occupancy;
  elapsedTimer _timer;
  CMSStats _stats;
  HeapWord *_icms_start_limit;
  HeapWord *_icms_stop_limit;
  Generation *_young_gen;
  HeapWord **_top_addr;
  HeapWord **_end_addr;
  Mutex *_eden_chunk_lock;
  HeapWord **_eden_chunk_array;
  unsigned int _eden_chunk_index;
  unsigned int _eden_chunk_capacity;
  HeapWord **_survivor_chunk_array;
  unsigned int _survivor_chunk_index;
  unsigned int _survivor_chunk_capacity;
  unsigned int *_cursor;
  ChunkArray *_survivor_plab_array;
};

/* 1862 */
struct __cppobj ConcurrentMarkSweepGeneration : CardGeneration
{
  CompactibleFreeListSpace *_cmsSpace;
  GenerationCounters *_gen_counters;
  GSpaceCounters *_space_counters;
  unsigned int _direct_allocated_words;
  bool _incremental_collection_failed;
  CMSParGCThreadState **_par_gc_thread_states;
  CMSExpansionCause::Cause _expansion_cause;
  const long double _dilatation_factor;
  ConcurrentMarkSweepGeneration::CollectionTypes _debug_collection_type;
  bool _did_compact;
  long double _initiating_occupancy;
};

/* 1869 */
struct __cppobj PromotionInfo : _ValueObj
{
  bool _tracking;
  CompactibleFreeListSpace *_space;
  PromotedObject *_promoHead;
  PromotedObject *_promoTail;
  SpoolBlock *_spoolHead;
  SpoolBlock *_spoolTail;
  SpoolBlock *_splice_point;
  SpoolBlock *_spareSpool;
  unsigned int _firstIndex;
  unsigned int _nextIndex;
};

/* 1870 */
struct __cppobj LinearAllocBlock : _ValueObj
{
  HeapWord *_ptr;
  unsigned int _word_size;
  unsigned int _refillSize;
  unsigned int _allocation_size_limit;
};

/* 1873 */
struct __cppobj FreeList<FreeChunk> : _ValueObj
{
  FreeChunk *_head;
  FreeChunk *_tail;
  unsigned int _size;
  int _count;
};

/* 1874 */
struct __cppobj AllocationStats : _ValueObj
{
  AdaptivePaddedAverage _demand_rate_estimate;
  int _desired;
  int _coal_desired;
  int _surplus;
  int _bfr_surp;
  int _prev_sweep;
  int _before_sweep;
  int _coal_births;
  int _coal_deaths;
  int _split_births;
  int _split_deaths;
  unsigned int _returned_bytes;
};

/* 1875 */
struct __cppobj AdaptiveFreeList<FreeChunk> : FreeList<FreeChunk>
{
  unsigned int _hint;
  AllocationStats _allocation_stats;
};

/* 1863 */
struct __cppobj CompactibleFreeListSpace : CompactibleSpace
{
  const unsigned int _rescan_task_size;
  const unsigned int _marking_task_size;
  SequentialSubTasksDone _conc_par_seq_tasks;
  BlockOffsetArrayNonContigSpace _bt;
  CMSCollector *_collector;
  ConcurrentMarkSweepGeneration *_gen;
  PromotionInfo _promoInfo;
  Mutex _freelistLock;
  LinearAllocBlock _smallLinearAllocBlock;
  FreeBlockDictionary<FreeChunk>::DictionaryChoice _dictionaryChoice;
  BinaryTreeDictionary<FreeChunk,AdaptiveFreeList<FreeChunk> > *_dictionary;
  AdaptiveFreeList<FreeChunk> _indexedFreeList[257];
  bool _fitStrategy;
  bool _adaptive_freelists;
  HeapWord *_nearLargestChunk;
  HeapWord *_sweep_limit;
  unsigned int _used_stable;
  Mutex _parDictionaryAllocLock;
  Mutex *_indexedFreeListParLocks[257];
};

/* 1864 */
struct PromotedObject::Data
{
  unsigned int _narrow_next;
};

/* 1865 */
union $E77DAC5E7926162162F39EC79FF0F451
{
  int _next;
  PromotedObject::Data _data;
};

/* 1866 */
struct __cppobj PromotedObject : _ValueObj
{
  $E77DAC5E7926162162F39EC79FF0F451 ___u1;
};

/* 1867 */
struct __cppobj FreeChunk : _ValueObj
{
  volatile unsigned int _size;
  FreeChunk *_prev;
  FreeChunk *_next;
};

/* 1868 */
struct __cppobj SpoolBlock : FreeChunk
{
  SpoolBlock *nextSpoolBlock;
  unsigned int bufferSize;
  markOopDesc **displacedHdr;
};

/* 1871 */
struct __cppobj FreeBlockDictionary<FreeChunk> : CHeapObj<5>
{
  FreeBlockDictionary<FreeChunk>_vtbl *__vftable /*VFT*/;
};

/* 1872 */
struct /*VFT*/ FreeBlockDictionary<FreeChunk>_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  FreeChunk *(__thiscall *get_chunk)(FreeBlockDictionary<FreeChunk> *this, unsigned int, FreeBlockDictionary<FreeChunk>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<FreeChunk> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<FreeChunk> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<FreeChunk> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<FreeChunk> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<FreeChunk> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<FreeChunk> *this, long double);
  FreeChunk *(__thiscall *find_largest_dict)(FreeBlockDictionary<FreeChunk> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<FreeChunk> *this);
  FreeChunk *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<FreeChunk> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<FreeChunk> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<FreeChunk> *this);
};

/* 1876 */
struct __cppobj TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > : AdaptiveFreeList<FreeChunk>
{
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *_parent;
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *_left;
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *_right;
};

/* 1877 */
struct /*VFT*/ BinaryTreeDictionary<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  FreeChunk *(__thiscall *get_chunk)(FreeBlockDictionary<FreeChunk> *this, unsigned int, FreeBlockDictionary<FreeChunk>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<FreeChunk> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<FreeChunk> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<FreeChunk> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<FreeChunk> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<FreeChunk> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<FreeChunk> *this, long double);
  FreeChunk *(__thiscall *find_largest_dict)(FreeBlockDictionary<FreeChunk> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<FreeChunk> *this, FreeChunk *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<FreeChunk> *this);
  FreeChunk *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<FreeChunk> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<FreeChunk> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<FreeChunk> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<FreeChunk> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<FreeChunk> *this);
};

/* 1878 */
struct __cppobj BinaryTreeDictionary<FreeChunk,AdaptiveFreeList<FreeChunk> > : FreeBlockDictionary<FreeChunk>
{
  unsigned int _total_size;
  unsigned int _total_free_blocks;
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *_root;
};

/* 1879 */
struct /*VFT*/ CompactibleFreeListSpace_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
  void (__thiscall *reset_after_compaction)(CompactibleSpace *this);
  CompactibleSpace *(__thiscall *next_compaction_space)(CompactibleSpace *this);
  void (__thiscall *prepare_for_compaction)(CompactibleSpace *this, CompactPoint *);
  void (__thiscall *compact)(CompactibleSpace *this);
  unsigned int (__thiscall *allowed_dead_ratio)(CompactibleSpace *this);
  HeapWord *(__thiscall *initialize_threshold)(CompactibleSpace *this);
  HeapWord *(__thiscall *forward)(CompactibleSpace *this, oopDesc *, unsigned int, CompactPoint *, HeapWord *);
  unsigned int (__thiscall *adjust_object_size_v)(CompactibleSpace *this, unsigned int);
  unsigned int (__thiscall *minimum_free_block_size)(CompactibleSpace *this);
  HeapWord *(__thiscall *cross_threshold)(CompactibleSpace *this, HeapWord *, HeapWord *);
};

/* 1880 */
struct __cppobj GSpaceCounters : CHeapObj<5>
{
  PerfLongVariable *_capacity;
  PerfLongVariable *_used;
  Generation *_gen;
  char *_name_space;
};

/* 1881 */
struct __cppobj CFLS_LAB : CHeapObj<5>
{
  CompactibleFreeListSpace *_cfls;
  AdaptiveFreeList<FreeChunk> _indexedFreeList[257];
  unsigned int _num_blocks[257];
};

/* 1882 */
struct __cppobj CMSParGCThreadState : CHeapObj<5>
{
  CFLS_LAB lab;
  PromotionInfo promo;
};

/* 1883 */
struct /*VFT*/ ConcurrentMarkSweepGeneration_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
  bool (__thiscall *expand)(CardGeneration *this, unsigned int, unsigned int);
  void (__thiscall *shrink)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_by)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_to_reserved)(CardGeneration *this);
  bool (__thiscall *should_concurrent_collect)(ConcurrentMarkSweepGeneration *this);
  bool (__thiscall *is_too_full)(ConcurrentMarkSweepGeneration *this);
  void (__thiscall *update_counters)(ConcurrentMarkSweepGeneration *this, unsigned int);
};

/* 1885 */
struct /*VFT*/ CMSIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 1887 */
struct __cppobj ConcurrentMarkSweepThread : ConcurrentGCThread
{
};

/* 1888 */
struct /*VFT*/ ModUnionClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 1890 */
struct /*VFT*/ ModUnionClosurePar_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 1893 */
struct /*VFT*/ CMSInnerParMarkAndPushClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1894 */
struct __cppobj CMSInnerParMarkAndPushClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  CMSBitMap *_bit_map;
};

/* 1895 */
struct /*VFT*/ CMSKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1896 */
struct __cppobj __declspec(align(4)) CMSKeepAliveClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  const MemRegion _span;
  CMSMarkStack *_mark_stack;
  CMSBitMap *_bit_map;
  bool _concurrent_precleaning;
};

/* 1897 */
struct __cppobj BitMapClosure : _ValueObj
{
  BitMapClosure_vtbl *__vftable /*VFT*/;
};

/* 1898 */
struct /*VFT*/ BitMapClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 1899 */
struct /*VFT*/ FlexibleGangTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 1900 */
struct __cppobj FlexibleGangTask : AbstractGangTask
{
  int _actual_size;
  int _requested_size;
};

/* 1901 */
struct __cppobj YieldingFlexibleGangTask : FlexibleGangTask
{
  Status _status;
  YieldingFlexibleWorkGang *_gang;
};

/* 1902 */
struct /*VFT*/ YieldingFlexibleGangTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
  void (__thiscall *yield)(YieldingFlexibleGangTask *this);
  void (__thiscall *coordinator_yield)(YieldingFlexibleGangTask *this);
  void (__thiscall *abort)(YieldingFlexibleGangTask *this);
};

/* 1905 */
struct __cppobj CMSConcMarkingTerminator : ParallelTaskTerminator
{
  CMSCollector *_collector;
  CMSConcMarkingTask *_task;
};

/* 1907 */
struct __cppobj CMSConcMarkingTerminatorTerminator : TerminatorTerminator
{
  CMSConcMarkingTask *_task;
};

/* 1903 */
struct __cppobj CMSConcMarkingTask : YieldingFlexibleGangTask
{
  CMSCollector *_collector;
  int _n_workers;
  bool _asynch;
  bool _result;
  CompactibleFreeListSpace *_cms_space;
  char _pad_front[64];
  HeapWord *_global_finger;
  char _pad_back[64];
  HeapWord *_restart_addr;
  Mutex *const _bit_map_lock;
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_task_queues;
  CMSConcMarkingTerminator _term;
  CMSConcMarkingTerminatorTerminator _term_term;
};

/* 1904 */
struct /*VFT*/ CMSConcMarkingTerminator_vtbl
{
  void (__thiscall *yield)(ParallelTaskTerminator *this);
  bool (__thiscall *offer_termination)(ParallelTaskTerminator *this);
};

/* 1906 */
struct /*VFT*/ CMSConcMarkingTerminatorTerminator_vtbl
{
  bool (__thiscall *should_exit_termination)(TerminatorTerminator *this);
};

/* 1908 */
struct /*VFT*/ CMSConcMarkingTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
  void (__thiscall *yield)(YieldingFlexibleGangTask *this);
  void (__thiscall *coordinator_yield)(YieldingFlexibleGangTask *this);
  void (__thiscall *abort)(YieldingFlexibleGangTask *this);
};

/* 1909 */
struct /*VFT*/ Par_MarkFromRootsClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 1910 */
struct __cppobj Par_MarkFromRootsClosure : BitMapClosure
{
  CMSCollector *_collector;
  MemRegion _whole_span;
  MemRegion _span;
  CMSBitMap *_bit_map;
  CMSBitMap *_mut;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  CMSMarkStack *_overflow_stack;
  bool _yield;
  int _skip_bits;
  HeapWord *_finger;
  HeapWord *_threshold;
  CMSConcMarkingTask *_task;
};

/* 1911 */
struct /*VFT*/ Par_PushOrMarkClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1912 */
struct __cppobj Par_PushOrMarkClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _whole_span;
  MemRegion _span;
  CMSBitMap *_bit_map;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  CMSMarkStack *_overflow_stack;
  HeapWord *const _finger;
  HeapWord **const _global_finger_addr;
  Par_MarkFromRootsClosure *const _parent;
};

/* 1913 */
struct /*VFT*/ MarkFromRootsClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 1914 */
struct __cppobj MarkFromRootsClosure : BitMapClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_bitMap;
  CMSBitMap *_mut;
  CMSMarkStack *_markStack;
  bool _yield;
  int _skipBits;
  HeapWord *_finger;
  HeapWord *_threshold;
};

/* 1915 */
struct /*VFT*/ PushOrMarkClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1916 */
struct __cppobj PushOrMarkClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_bitMap;
  CMSMarkStack *_markStack;
  HeapWord *const _finger;
  MarkFromRootsClosure *const _parent;
};

/* 1917 */
struct /*VFT*/ Par_PushAndMarkClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1918 */
struct __cppobj Par_PushAndMarkClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_bit_map;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
};

/* 1919 */
struct /*VFT*/ PushAndMarkClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1920 */
struct __cppobj __declspec(align(4)) PushAndMarkClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_bit_map;
  CMSBitMap *_mod_union_table;
  CMSMarkStack *_mark_stack;
  bool _concurrent_precleaning;
};

/* 1921 */
struct /*VFT*/ MetadataAwareOopsInGenClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1922 */
struct __cppobj MetadataAwareOopsInGenClosure : OopsInGenClosure
{
  KlassToOopClosure _klass_closure;
};

/* 1923 */
struct /*VFT*/ Par_MarkRefsIntoAndScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1924 */
struct __cppobj Par_MarkRefsIntoAndScanClosure : MetadataAwareOopsInGenClosure
{
  MemRegion _span;
  CMSBitMap *_bit_map;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  const unsigned int _low_water_mark;
  Par_PushAndMarkClosure _par_pushAndMarkClosure;
};

/* 1925 */
struct /*VFT*/ MarkRefsIntoAndScanClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1926 */
struct __cppobj __declspec(align(4)) MarkRefsIntoAndScanClosure : MetadataAwareOopsInGenClosure
{
  MemRegion _span;
  CMSBitMap *_bit_map;
  CMSMarkStack *_mark_stack;
  PushAndMarkClosure _pushAndMarkClosure;
  CMSCollector *_collector;
  Mutex *_freelistLock;
  bool _yield;
  bool _concurrent_precleaning;
};

/* 1927 */
struct /*VFT*/ FilteringClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1928 */
struct __cppobj FilteringClosure : ExtendedOopClosure
{
  HeapWord *_boundary;
  ExtendedOopClosure *_cl;
};

/* 1929 */
struct /*VFT*/ NoHeaderExtendedOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 1930 */
struct __cppobj NoHeaderExtendedOopClosure : ExtendedOopClosure
{
  OopClosure *_wrapped_closure;
};

/* 1931 */
struct /*VFT*/ Klass_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
  GrowableArray<Klass *> *(__thiscall *compute_secondary_supers)(Klass *this, int);
  Klass *(__thiscall *java_super)(Klass *this);
  bool (__thiscall *can_be_primary_super_slow)(Klass *this);
  klassVtable *(__thiscall *vtable)(Klass *this);
  int (__thiscall *vtable_length)(Klass *this);
  void (__thiscall *check_valid_for_instantiation)(Klass *this, bool, Thread *);
  void (__thiscall *copy_array)(Klass *this, arrayOopDesc *, int, arrayOopDesc *, int, int, Thread *);
  bool (__thiscall *should_be_initialized)(Klass *this);
  void (__thiscall *initialize)(Klass *this, Thread *);
  Klass *(__thiscall *find_field)(Klass *this, Symbol *, Symbol *, fieldDescriptor *);
  Method *(__thiscall *uncached_lookup_method)(Klass *this, Symbol *, Symbol *, Klass::OverpassLookupMode);
  oopDesc *(__thiscall *protection_domain)(Klass *this);
  oopDesc *(__thiscall *klass_holder)(Klass *this);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, Thread *);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, int, Thread *);
  void (__thiscall *remove_unshareable_info)(Klass *this);
  void (__thiscall *restore_unshareable_info)(Klass *this, ClassLoaderData *, Handle, Thread *);
  bool (__thiscall *compute_is_subtype_of)(Klass *this, Klass *);
  bool (__thiscall *is_leaf_class)(Klass *this);
  int (__thiscall *oop_size)(Klass *this, oopDesc *);
  int (__thiscall *size)(Klass *this);
  void (__thiscall *collect_statistics)(Klass *this, KlassSizeStats *);
  const char *(__thiscall *signature_name)(Klass *this);
  void (__thiscall *oop_follow_contents)(Klass *this, ParCompactionManager *, oopDesc *);
  void (__thiscall *oop_follow_contents)(Klass *this, oopDesc *);
  int (__thiscall *oop_adjust_pointers)(Klass *this, oopDesc *);
  void (__thiscall *oop_push_contents)(Klass *this, PSPromotionManager *, oopDesc *);
  int (__thiscall *oop_update_pointers)(Klass *this, ParCompactionManager *, oopDesc *);
  bool (__thiscall *oop_is_instance_slow)(Klass *this);
  bool (__thiscall *oop_is_array_slow)(Klass *this);
  bool (__thiscall *oop_is_objArray_slow)(Klass *this);
  bool (__thiscall *oop_is_typeArray_slow)(Klass *this);
  bool (__thiscall *oop_is_instanceClassLoader)(Klass *this);
  bool (__thiscall *oop_is_instanceMirror)(Klass *this);
  bool (__thiscall *oop_is_instanceRef)(Klass *this);
  void (__thiscall *oops_do)(Klass *this, OopClosure *);
  int (__thiscall *oop_oop_iterate)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_v_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1TriggerClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1Mux2Closure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1RootRegionScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1CMOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterOutOfRegionClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterIntoCSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSKeepAliveClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilteringClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FastScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  void (__thiscall *array_klasses_do)(Klass *this, void (__cdecl *)(Klass *));
  int (__thiscall *compute_modifier_flags)(Klass *this, Thread *);
  int (__thiscall *jvmti_class_status)(Klass *this);
  void (__thiscall *oop_print_value_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *oop_print_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *verify_on)(Klass *this, outputStream *);
  void (__thiscall *oop_verify_on)(Klass *this, oopDesc *, outputStream *);
};

/* 1933 */
struct /*VFT*/ ciKlass_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
  oopDesc *(__thiscall *loader)(ciKlass *this);
  _jobject *(__thiscall *loader_handle)(ciKlass *this);
  oopDesc *(__thiscall *protection_domain)(ciKlass *this);
  _jobject *(__thiscall *protection_domain_handle)(ciKlass *this);
  bool (__thiscall *is_java_lang_Object)(ciKlass *this);
  bool (__thiscall *is_interface)(ciKlass *this);
  bool (__thiscall *is_abstract)(ciKlass *this);
  bool (__thiscall *is_leaf_type)(ciKlass *this);
  ciKlass *(__thiscall *exact_klass)(ciKlass *this);
};

/* 1934 */
struct /*VFT*/ ciObject_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  void (__thiscall *print_impl)(ciObject *this, outputStream *);
  bool (__thiscall *is_null_object)(ciObject *this);
  bool (__thiscall *is_call_site)(ciObject *this);
  bool (__thiscall *is_cpcache)(ciObject *this);
  bool (__thiscall *is_instance)(ciObject *this);
  bool (__thiscall *is_member_name)(ciObject *this);
  bool (__thiscall *is_method_handle)(ciObject *this);
  bool (__thiscall *is_method_type)(ciObject *this);
  bool (__thiscall *is_array)(ciObject *this);
  bool (__thiscall *is_obj_array)(ciObject *this);
  bool (__thiscall *is_type_array)(ciObject *this);
  bool (__thiscall *is_classless)(ciObject *this);
  void (__thiscall *dump_replay_data)(ciObject *this, outputStream *);
};

/* 1935 */
const struct __cppobj __unaligned __declspec(align(4)) TypeOopPtr : TypePtr
{
  ciObject *_const_oop;
  ciKlass *_klass;
  bool _klass_is_exact;
  bool _is_ptr_to_narrowoop;
  bool _is_ptr_to_narrowklass;
  bool _is_ptr_to_boxed_value;
  int _instance_id;
  const TypeOopPtr *_speculative;
  int _inline_depth;
};

/* 1936 */
struct /*VFT*/ Type_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 1937 */
struct /*VFT*/ TypePtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
};

/* 1938 */
struct __cppobj Node
{
  Node_vtbl *__vftable /*VFT*/;
  Node **_in;
  Node **_out;
  unsigned int _cnt;
  unsigned int _max;
  unsigned int _outcnt;
  unsigned int _outmax;
  const unsigned int _idx;
  unsigned __int16 _class_id;
  unsigned __int16 _flags;
};

/* 1939 */
struct __cppobj Phase : StackObj
{
  Phase::PhaseNumber _pnum;
  Compile *C;
};

/* 1940 */
struct /*VFT*/ TypeTuple_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 1941 */
const struct __cppobj TypeTuple : Type
{
  const unsigned int _cnt;
  const Type **const _fields;
};

/* 1942 */
struct /*VFT*/ TypeFunc_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 1943 */
const struct __cppobj TypeFunc : Type
{
  const TypeTuple *const _domain;
  const TypeTuple *const _range;
};

/* 2012 */
struct __cppobj GrowableArray<Compile::Constant> : GenericGrowableArray
{
  Compile::Constant *_data;
};

/* 2013 */
struct __cppobj Compile::ConstantTable
{
  GrowableArray<Compile::Constant> _constants;
  int _size;
  int _table_base_offset;
  int _nof_jump_tables;
};

/* 2019 */
struct Compile::AliasCacheEntry
{
  const TypePtr *_adr_type;
  int _index;
};

/* 1994 */
struct __cppobj GrowableArray<CallGenerator *> : GenericGrowableArray
{
  CallGenerator **_data;
};

/* 2023 */
struct __cppobj CodeOffsets : StackObj
{
  int _values[8];
};

/* 1953 */
union $40F5A8DDDE19B5F9E600702DD3F881E9
{
  long double _dummy_force_double_alignment[3];
  int _A[6];
};

/* 1954 */
const struct __cppobj RegMask : _ValueObj
{
  $40F5A8DDDE19B5F9E600702DD3F881E9 ___u1;
};

/* 2027 */
struct __cppobj CodeSection : _ValueObj
{
  unsigned __int8 *_start;
  unsigned __int8 *_mark;
  unsigned __int8 *_end;
  unsigned __int8 *_limit;
  relocInfo *_locs_start;
  relocInfo *_locs_end;
  relocInfo *_locs_limit;
  unsigned __int8 *_locs_point;
  bool _locs_own;
  bool _frozen;
  char _index;
  CodeBuffer *_outer;
};

/* 2026 */
struct __cppobj CodeBuffer : StackObj
{
  const char *_name;
  CodeSection _consts;
  CodeSection _insts;
  CodeSection _stubs;
  CodeBuffer *_before_expand;
  BufferBlob *_blob;
  unsigned __int8 *_total_start;
  int _total_size;
  OopRecorder *_oop_recorder;
  CodeStrings _code_strings;
  OopRecorder _default_oop_recorder;
  Arena *_overflow_arena;
  unsigned __int8 *_decode_begin;
};

/* 2031 */
struct __cppobj ReallocMark : StackObj
{
};

/* 2032 */
struct __cppobj __declspec(align(4)) ExceptionHandlerTable : _ValueObj
{
  HandlerTableEntry *_table;
  int _length;
  int _size;
  ReallocMark _nesting;
};

/* 2033 */
struct __cppobj __declspec(align(4)) ImplicitExceptionTable : _ValueObj
{
  unsigned int _size;
  unsigned int _len;
  unsigned int *_data;
  ReallocMark _nesting;
};

/* 1944 */
struct __cppobj __declspec(align(8)) Compile : Phase
{
  const int _compile_id;
  const bool _save_argument_registers;
  const bool _subsume_loads;
  const bool _do_escape_analysis;
  const bool _eliminate_boxing;
  ciMethod *_method;
  int _entry_bci;
  const TypeFunc *_tf;
  InlineTree *_ilt;
  unsigned __int8 *_stub_function;
  const char *_stub_name;
  unsigned __int8 *_stub_entry_point;
  int _num_loop_opts;
  int _max_inline_size;
  int _freq_inline_size;
  int _fixed_slots;
  unsigned int _max_node_limit;
  int _orig_pc_slot;
  int _orig_pc_slot_offset_in_bytes;
  int _major_progress;
  bool _inlining_progress;
  bool _inlining_incrementally;
  bool _has_loops;
  bool _has_split_ifs;
  bool _has_unsafe_access;
  bool _has_stringbuilder;
  bool _has_boxed_value;
  int _max_vector_size;
  unsigned int _trap_hist[20];
  bool _trap_can_recompile;
  unsigned int _decompile_count;
  bool _do_inlining;
  bool _do_scheduling;
  bool _do_freq_based_layout;
  bool _do_count_invocations;
  bool _do_method_data_update;
  int _AliasLevel;
  bool _print_assembly;
  bool _print_inlining;
  bool _print_intrinsics;
  bool _has_irreducible_loop;
  bool _has_method_handle_invokes;
  RTMState _rtm_state;
  Arena _comp_arena;
  ciEnv *_env;
  CompileLog *_log;
  const char *_failure_reason;
  GrowableArray<CallGenerator *> *_intrinsics;
  GrowableArray<Node *> *_macro_nodes;
  GrowableArray<Node *> *_predicate_opaqs;
  GrowableArray<Node *> *_expensive_nodes;
  GrowableArray<Node *> *_range_check_casts;
  GrowableArray<ShenandoahLoadReferenceBarrierNode *> *_shenandoah_barriers;
  ConnectionGraph *_congraph;
  unsigned int _unique;
  VectorSet _dead_node_list;
  unsigned int _dead_node_count;
  Arena _node_arena;
  Arena _old_arena;
  RootNode *_root;
  Node *_top;
  Node *_immutable_memory;
  Node *_recent_alloc_obj;
  Node *_recent_alloc_ctl;
  Compile::ConstantTable _constant_table;
  MachConstantBaseNode *_mach_constant_base_node;
  GrowableArray<Node_Notes *> *_node_note_array;
  Node_Notes *_default_node_notes;
  Arena _Compile_types;
  Arena *_type_arena;
  Dict *_type_dict;
  void *_type_hwm;
  unsigned int _type_last_size;
  ciMethod *_last_tf_m;
  const TypeFunc *_last_tf;
  Compile::AliasType **_alias_types;
  int _num_alias_types;
  int _max_alias_types;
  Compile::AliasCacheEntry _alias_cache[64];
  PhaseGVN *_initial_gvn;
  Unique_Node_List *_for_igvn;
  WarmCallInfo *_warm_calls;
  GrowableArray<CallGenerator *> _late_inlines;
  GrowableArray<CallGenerator *> _string_late_inlines;
  GrowableArray<CallGenerator *> _boxing_late_inlines;
  int _late_inlines_pos;
  unsigned int _number_of_mh_late_inlines;
  GrowableArray<Compile::PrintInliningBuffer> *_print_inlining_list;
  int _print_inlining_idx;
  void *_replay_inline_data;
  PhaseCFG *_cfg;
  bool _select_24_bit_instr;
  bool _in_24_bit_fp_mode;
  int _java_calls;
  int _inner_loops;
  Matcher *_matcher;
  PhaseRegAlloc *_regalloc;
  int _frame_slots;
  CodeOffsets _code_offsets;
  RegMask _FIRST_STACK_mask;
  Arena *_indexSet_arena;
  void *_indexSet_free_block_list;
  int _interpreter_frame_size;
  unsigned int _node_bundling_limit;
  Bundle *_node_bundling_base;
  int _method_size;
  CodeBuffer _code_buffer;
  int _first_block_size;
  ExceptionHandlerTable _handler_table;
  ImplicitExceptionTable _inc_table;
  OopMapSet *_oop_map_set;
  BufferBlob *_scratch_buffer_blob;
  relocInfo *_scratch_locs_memory;
  int _scratch_const_size;
  bool _in_scratch_emit_size;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _latest_stage_start_counter;
  int _allowed_reasons;
};

/* 1945 */
struct __cppobj JVMState : ResourceObj
{
  JVMState *_caller;
  unsigned int _depth;
  unsigned int _locoff;
  unsigned int _stkoff;
  unsigned int _monoff;
  unsigned int _scloff;
  unsigned int _endoff;
  unsigned int _sp;
  int _bci;
  JVMState::ReexecuteState _reexecute;
  ciMethod *_method;
  SafePointNode *_map;
};

/* 1946 */
const struct __cppobj __unaligned __declspec(align(4)) ProjNode : Node
{
  const unsigned int _con;
  const bool _is_io_use;
};

/* 1950 */
struct __cppobj Node_Array : ResourceObj
{
  Arena *_a;
  unsigned int _max;
  Node **_nodes;
};

/* 1951 */
struct __cppobj Node_List : Node_Array
{
  unsigned int _cnt;
};

/* 2037 */
struct __cppobj Type_Array : StackObj
{
  Arena *_a;
  unsigned int _max;
  const Type **_types;
};

/* 1947 */
struct __cppobj PhaseTransform : Phase
{
  PhaseTransform_vtbl *__vftable /*VFT*/;
  Arena *_arena;
  Node_List _nodes;
  Type_Array _types;
  ConINode *_icons[69];
  ConLNode *_lcons[69];
  ConNode *_zcons[20];
};

/* 1948 */
struct __cppobj Node_Notes : _ValueObj
{
  JVMState *_jvms;
};

/* 1949 */
struct __cppobj GrowableArray<Node_Notes *> : GenericGrowableArray
{
  Node_Notes **_data;
};

/* 1952 */
struct __cppobj __unaligned __declspec(align(4)) MachNode : Node
{
  unsigned int _num_opnds;
  MachOper **_opnds;
};

/* 1955 */
struct __cppobj MachOper : ResourceObj
{
  MachOper_vtbl *__vftable /*VFT*/;
};

/* 1956 */
struct __cppobj __unaligned __declspec(align(4)) PhaseRegAlloc : Phase
{
  PhaseRegAlloc_vtbl *__vftable /*VFT*/;
  OptoRegPair *_node_regs;
  unsigned int _node_regs_max_index;
  VectorSet _node_oops;
  PhaseCFG *_cfg;
  unsigned int _framesize;
  int _max_reg;
  Matcher *_matcher;
};

/* 1957 */
struct /*VFT*/ PhaseRegAlloc_vtbl
{
  void (__thiscall *Register_Allocate)(PhaseRegAlloc *this);
  void (__thiscall *add_reference)(PhaseRegAlloc *this, const Node *, const Node *);
};

/* 1958 */
struct __cppobj OptoRegPair
{
  __int16 _second;
  __int16 _first;
};

/* 1959 */
struct __cppobj __unaligned __declspec(align(4)) RegionNode : Node
{
};

/* 1960 */
struct __cppobj __declspec(align(2)) LoopNode : RegionNode
{
  __int16 _loop_flags;
  char _unswitch_count;
};

/* 1961 */
struct __cppobj RootNode : LoopNode
{
};

/* 1962 */
struct __cppobj CFGElement : ResourceObj
{
  CFGElement_vtbl *__vftable /*VFT*/;
  float _freq;
};

/* 1963 */
struct /*VFT*/ CFGElement_vtbl
{
  bool (__thiscall *is_block)(CFGElement *this);
  bool (__thiscall *is_loop)(CFGElement *this);
};

/* 1965 */
struct __cppobj Block_Array : ResourceObj
{
  unsigned int _size;
  Arena *_arena;
  Block **_blocks;
};

/* 1964 */
struct __cppobj Block : CFGElement
{
  Node_List _nodes;
  Block_Array _succs;
  unsigned int _num_succs;
  unsigned int _pre_order;
  unsigned int _dom_depth;
  Block *_idom;
  CFGLoop *_loop;
  unsigned int _rpo;
  unsigned int _reg_pressure;
  unsigned int _ihrp_index;
  unsigned int _freg_pressure;
  unsigned int _fhrp_index;
  unsigned int _raise_LCA_mark;
  unsigned int _raise_LCA_visited;
  unsigned int _first_inst_size;
  bool _connector;
  unsigned int _loop_alignment;
};

/* 1969 */
struct __cppobj GrowableArray<BlockProbPair> : GenericGrowableArray
{
  BlockProbPair *_data;
};

/* 1966 */
struct __cppobj CFGLoop : CFGElement
{
  int _id;
  int _depth;
  CFGLoop *_parent;
  CFGLoop *_sibling;
  CFGLoop *_child;
  GrowableArray<CFGElement *> _members;
  GrowableArray<BlockProbPair> _exits;
  float _exit_prob;
};

/* 1967 */
struct __cppobj GrowableArray<CFGElement *> : GenericGrowableArray
{
  CFGElement **_data;
};

/* 1968 */
struct __cppobj BlockProbPair : _ValueObj
{
  Block *_target;
  float _prob;
};

/* 1970 */
struct /*VFT*/ CFGLoop_vtbl
{
  bool (__thiscall *is_block)(CFGElement *this);
  bool (__thiscall *is_loop)(CFGElement *this);
};

/* 1971 */
struct /*VFT*/ Block_vtbl
{
  bool (__thiscall *is_block)(CFGElement *this);
  bool (__thiscall *is_loop)(CFGElement *this);
};

/* 1972 */
struct __cppobj Block_List : Block_Array
{
  unsigned int _cnt;
};

/* 1973 */
const struct __cppobj Matcher : PhaseTransform
{
  ResourceArea _states_arena;
  VectorSet _visited;
  VectorSet _shared;
  VectorSet _dontcare;
  const int *_reduceOp;
  const int *_leftOp;
  const int *_rightOp;
  const bool *_swallowed;
  const unsigned int _begin_inst_chain_rule;
  const unsigned int _end_inst_chain_rule;
  const char *_must_clone;
  GrowableArray<Node_Notes *> *_old_node_note_array;
  Node_List _projection_list;
  Node_Array _shared_nodes;
  MachNode *_mach_null;
  int LabelRootDepth;
  RegMask *idealreg2spillmask[13];
  RegMask *idealreg2debugmask[13];
  RegMask *idealreg2mhdebugmask[13];
  bool _allocation_started;
  const char **_ruleName;
  const char *_register_save_policy;
  const char *_c_reg_save_policy;
  const int *_register_save_type;
  Node_List _null_check_tests;
  int _old_SP;
  int _in_arg_limit;
  int _new_SP;
  int _out_arg_limit;
  OptoRegPair *_parm_regs;
  RegMask *_calling_convention_mask;
  RegMask _return_addr_mask;
  RegMask _return_value_mask;
};

/* 1974 */
struct __cppobj GrowableArray<unsigned int> : GenericGrowableArray
{
  unsigned int *_data;
};

/* 1975 */
struct __cppobj PhaseCFG : Phase
{
  RootNode *_root;
  Block *_root_block;
  Block_List _blocks;
  unsigned int _number_of_blocks;
  Arena *_block_arena;
  Matcher *_matcher;
  Block_Array _node_to_block_mapping;
  CFGLoop *_root_loop;
  float _outer_loop_frequency;
  GrowableArray<unsigned int> *_node_latency;
  MachNode *_goto;
};

/* 1976 */
struct __cppobj Label : _ValueObj
{
  int _loc;
  int _patches[4];
  int _patch_index;
  GrowableArray<int> *_patch_overflow;
};

/* 1977 */
struct /*VFT*/ MachOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 1978 */
struct __cppobj GrowableArray<Node *> : GenericGrowableArray
{
  Node **_data;
};

/* 1979 */
struct __cppobj State : ResourceObj
{
  int _id;
  Node *_leaf;
  State *_kids[2];
  unsigned int _cost[265];
  unsigned int _rule[265];
  unsigned int _valid[9];
};

/* 1980 */
struct __cppobj __unaligned __declspec(align(4)) MultiNode : Node
{
};

/* 1981 */
struct __cppobj ReplacedNodes::ReplacedNode : _ValueObj
{
  Node *_initial;
  Node *_improved;
};

/* 1982 */
struct __cppobj GrowableArray<ReplacedNodes::ReplacedNode> : GenericGrowableArray
{
  ReplacedNodes::ReplacedNode *_data;
};

/* 1983 */
struct __cppobj ReplacedNodes : _ValueObj
{
  GrowableArray<ReplacedNodes::ReplacedNode> *_replaced_nodes;
};

/* 1984 */
struct __cppobj __unaligned __declspec(align(4)) SafePointNode : MultiNode
{
  OopMap *_oop_map;
  JVMState *const _jvms;
  const TypePtr *_adr_type;
  ReplacedNodes _replaced_nodes;
};

/* 1986 */
struct __cppobj GrowableArray<InlineTree *> : GenericGrowableArray
{
  InlineTree **_data;
};

/* 1985 */
struct __cppobj __declspec(align(4)) InlineTree : ResourceObj
{
  Compile *C;
  JVMState *_caller_jvms;
  ciMethod *_method;
  InlineTree *_caller_tree;
  unsigned int _count_inline_bcs;
  const float _site_invoke_ratio;
  const int _max_inline_level;
  GrowableArray<InlineTree *> _subtrees;
  const char *_msg;
  bool _forced_inline;
};

/* 1987 */
struct __cppobj CallGenerator : ResourceObj
{
  CallGenerator_vtbl *__vftable /*VFT*/;
  ciMethod *_method;
};

/* 1988 */
struct __cppobj VMRegImpl
{
};

/* 1989 */
struct __cppobj VMRegPair
{
  VMRegImpl *_second;
  VMRegImpl *_first;
};

/* 1990 */
struct __cppobj __unaligned __declspec(align(4)) CallNode : SafePointNode
{
  const TypeFunc *_tf;
  unsigned __int8 *_entry_point;
  float _cnt;
  CallGenerator *_generator;
};

/* 1991 */
struct __cppobj CallJavaNode : CallNode
{
  bool _optimized_virtual;
  bool _method_handle_invoke;
  ciMethod *_method;
  const int _bci;
};

/* 1992 */
struct __cppobj __declspec(align(4)) CallStaticJavaNode : CallJavaNode
{
  const char *_name;
  bool _is_scalar_replaceable;
  bool _is_non_escaping;
};

/* 1993 */
struct /*VFT*/ CallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 1995 */
struct __cppobj __unaligned __declspec(align(4)) ShenandoahLoadReferenceBarrierNode : Node
{
};

/* 1996 */
struct __cppobj GrowableArray<ShenandoahLoadReferenceBarrierNode *> : GenericGrowableArray
{
  ShenandoahLoadReferenceBarrierNode **_data;
};

/* 1997 */
struct __cppobj GrowableArray<PointsToNode *> : GenericGrowableArray
{
  PointsToNode **_data;
};

/* 1998 */
struct __cppobj PointsToNode : ResourceObj
{
  GrowableArray<PointsToNode *> _edges;
  __unaligned __declspec(align(1)) GrowableArray<PointsToNode *> _uses;
  const unsigned __int8 _type;
  unsigned __int8 _flags;
  unsigned __int8 _escape;
  unsigned __int8 _fields_escape;
  Node *const _node;
  const int _idx;
  const unsigned int _pidx;
};

/* 1999 */
struct __cppobj JavaObjectNode : PointsToNode
{
};

/* 2000 */
struct __cppobj NodeHash : StackObj
{
  Arena *_a;
  unsigned int _max;
  unsigned int _inserts;
  unsigned int _insert_limit;
  Node **_table;
  Node *_sentinel;
  unsigned int _grows;
  unsigned int _look_probes;
  unsigned int _lookup_hits;
  unsigned int _lookup_misses;
  unsigned int _insert_probes;
  unsigned int _delete_probes;
  unsigned int _delete_hits;
  unsigned int _delete_misses;
  unsigned int _total_inserts;
  unsigned int _total_insert_probes;
};

/* 2001 */
struct __cppobj __unaligned __declspec(align(4)) PhaseValues : PhaseTransform
{
  NodeHash _table;
};

/* 2002 */
struct __cppobj __unaligned __declspec(align(4)) PhaseGVN : PhaseValues
{
};

/* 2005 */
struct __cppobj Node_Stack
{
  Node_Stack::INode *_inode_top;
  Node_Stack::INode *_inode_max;
  Node_Stack::INode *_inodes;
  Arena *_a;
};

/* 2006 */
struct __cppobj Unique_Node_List : Node_List
{
  VectorSet _in_worklist;
  unsigned int _clock_index;
};

/* 2003 */
struct __cppobj __unaligned __declspec(align(4)) PhaseIterGVN : PhaseGVN
{
  bool _delay_transform;
  __declspec(align(4)) Node_Stack _stack;
  Unique_Node_List _worklist;
};

/* 2004 */
struct Node_Stack::INode
{
  Node *node;
  unsigned int indx;
};

/* 2007 */
struct __cppobj __unaligned __declspec(align(4)) MergeMemNode : Node
{
};

/* 2008 */
struct __cppobj GrowableArray<MergeMemNode *> : GenericGrowableArray
{
  MergeMemNode **_data;
};

/* 2009 */
struct __cppobj ConnectionGraph : ResourceObj
{
  GrowableArray<PointsToNode *> _nodes;
  GrowableArray<PointsToNode *> _worklist;
  VectorSet _in_worklist;
  unsigned int _next_pidx;
  bool _collecting;
  bool _verify;
  JavaObjectNode *phantom_obj;
  JavaObjectNode *null_obj;
  Node *_pcmp_neq;
  Node *_pcmp_eq;
  Compile *_compile;
  PhaseIterGVN *_igvn;
  Unique_Node_List ideal_nodes;
  GrowableArray<MergeMemNode *> _mergemem_worklist;
  Node_Array _node_map;
};

/* 2010 */
union Compile::Constant::<unnamed_type__v>
{
  jvalue _value;
  Metadata *_metadata;
};

/* 2011 */
struct __cppobj __declspec(align(8)) Compile::Constant
{
  BasicType _type;
  Compile::Constant::<unnamed_type__v> _v;
  int _offset;
  float _freq;
  bool _can_be_reused;
};

/* 2014 */
struct __cppobj __unaligned __declspec(align(4)) MachIdealNode : MachNode
{
};

/* 2015 */
struct __cppobj __unaligned __declspec(align(4)) MachConstantBaseNode : MachIdealNode
{
};

/* 2016 */
struct __cppobj bucket : ResourceObj
{
  unsigned int _cnt;
  unsigned int _max;
  void **_keyvals;
};

/* 2017 */
struct __cppobj Dict : ResourceObj
{
  Arena *_arena;
  bucket *_bin;
  unsigned int _size;
  unsigned int _cnt;
  int (__cdecl *const _hash)(const void *);
  int (__cdecl *const _cmp)(const void *, const void *);
};

/* 2018 */
struct Compile::AliasType
{
  int _index;
  const TypePtr *_adr_type;
  ciField *_field;
  const Type *_element;
  bool _is_rewritable;
  int _general_index;
};

/* 2020 */
struct __cppobj WarmCallInfo : ResourceObj
{
  CallNode *_call;
  CallGenerator *_hot_cg;
  float _count;
  float _profit;
  float _work;
  float _size;
  float _heat;
  WarmCallInfo *_next;
};

/* 2021 */
struct __cppobj Compile::PrintInliningBuffer : ResourceObj
{
  CallGenerator *_cg;
  stringStream *_ss;
};

/* 2022 */
struct __cppobj GrowableArray<Compile::PrintInliningBuffer> : GenericGrowableArray
{
  Compile::PrintInliningBuffer *_data;
};

/* 2024 */
struct __cppobj Bundle
{
  unsigned __int32 _flags : 3;
  unsigned __int32 _starts_bundle : 1;
  unsigned __int32 _instr_count : 2;
  unsigned __int32 _resources_used : 9;
};

/* 2025 */
struct __cppobj relocInfo : _ValueObj
{
  unsigned __int16 _value;
};

/* 2028 */
struct /*VFT*/ BufferBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 2029 */
struct __cppobj BufferBlob : CodeBlob
{
};

/* 2030 */
struct __cppobj HandlerTableEntry
{
  int _bci;
  int _pco;
  int _scope_depth;
};

/* 2034 */
struct __cppobj TypeNode : Node
{
  const Type *const _type;
};

/* 2035 */
struct __cppobj ConNode : TypeNode
{
};

/* 2036 */
struct /*VFT*/ PhaseTransform_vtbl
{
  ConNode *(__thiscall *uncached_makecon)(PhaseTransform *this, const Type *);
  Node *(__thiscall *transform)(PhaseTransform *this, Node *);
  const Type *(__thiscall *saturate)(PhaseTransform *this, const Type *, const Type *, const Type *);
  PhaseIterGVN *(__thiscall *is_IterGVN)(PhaseTransform *this);
};

/* 2038 */
struct __cppobj ConINode : ConNode
{
};

/* 2039 */
struct __cppobj ConLNode : ConNode
{
};

/* 2040 */
struct __cppobj Pipeline_Use_Cycle_Mask
{
  unsigned int _mask;
};

/* 2041 */
struct __cppobj Pipeline_Use_Element
{
  unsigned int _used;
  unsigned int _lb;
  unsigned int _ub;
  bool _multiple;
  Pipeline_Use_Cycle_Mask _mask;
};

/* 2042 */
const struct __cppobj Pipeline_Use
{
  unsigned int _resources_used;
  unsigned int _resources_used_exclusively;
  unsigned int _count;
  Pipeline_Use_Element *_elements;
};

/* 2043 */
const struct __cppobj Pipeline
{
  const unsigned __int8 _read_stage_count;
  const unsigned __int8 _write_stage;
  const unsigned __int8 _fixed_latency;
  const unsigned __int8 _instruction_count;
  const bool _has_fixed_latency;
  const bool _has_branch_delay;
  const bool _has_multiple_bundles;
  const bool _force_serialization;
  const bool _may_have_no_code;
  const machPipelineStages *const _read_stages;
  const machPipelineStages *const _resource_stage;
  const unsigned int *const _resource_cycles;
  const Pipeline_Use _resource_use;
};

/* 2044 */
struct /*VFT*/ Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 2045 */
struct /*VFT*/ UniverseOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2046 */
struct __cppobj UniverseOper : MachOper
{
};

/* 2047 */
struct /*VFT*/ sRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2048 */
struct __cppobj sRegIOper : MachOper
{
};

/* 2049 */
struct /*VFT*/ sRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2050 */
struct __cppobj sRegPOper : MachOper
{
};

/* 2051 */
struct /*VFT*/ sRegFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2052 */
struct __cppobj sRegFOper : MachOper
{
};

/* 2053 */
struct /*VFT*/ sRegDOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2054 */
struct __cppobj sRegDOper : MachOper
{
};

/* 2055 */
struct /*VFT*/ sRegLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2056 */
struct __cppobj sRegLOper : MachOper
{
};

/* 2057 */
struct /*VFT*/ immIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2058 */
struct __cppobj immIOper : MachOper
{
  int _c0;
};

/* 2059 */
struct /*VFT*/ immI0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2060 */
struct __cppobj immI0Oper : MachOper
{
  int _c0;
};

/* 2061 */
struct /*VFT*/ immI1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2062 */
struct __cppobj immI1Oper : MachOper
{
  int _c0;
};

/* 2063 */
struct /*VFT*/ immI_M1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2064 */
struct __cppobj immI_M1Oper : MachOper
{
  int _c0;
};

/* 2065 */
struct /*VFT*/ immI2Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2066 */
struct __cppobj immI2Oper : MachOper
{
  int _c0;
};

/* 2067 */
struct /*VFT*/ immI8Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2068 */
struct __cppobj immI8Oper : MachOper
{
  int _c0;
};

/* 2069 */
struct /*VFT*/ immI16Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2070 */
struct __cppobj immI16Oper : MachOper
{
  int _c0;
};

/* 2071 */
struct /*VFT*/ immU31Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2072 */
struct __cppobj immU31Oper : MachOper
{
  int _c0;
};

/* 2073 */
struct /*VFT*/ immI_32Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2074 */
struct __cppobj immI_32Oper : MachOper
{
  int _c0;
};

/* 2075 */
struct /*VFT*/ immI_1_31Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2076 */
struct __cppobj immI_1_31Oper : MachOper
{
  int _c0;
};

/* 2077 */
struct /*VFT*/ immI_32_63Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2078 */
struct __cppobj immI_32_63Oper : MachOper
{
  int _c0;
};

/* 2079 */
struct /*VFT*/ immI_1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2080 */
struct __cppobj immI_1Oper : MachOper
{
  int _c0;
};

/* 2081 */
struct /*VFT*/ immI_2Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2082 */
struct __cppobj immI_2Oper : MachOper
{
  int _c0;
};

/* 2083 */
struct /*VFT*/ immI_3Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2084 */
struct __cppobj immI_3Oper : MachOper
{
  int _c0;
};

/* 2085 */
struct /*VFT*/ immPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2086 */
struct __cppobj immPOper : MachOper
{
  const TypePtr *_c0;
};

/* 2087 */
struct /*VFT*/ immP0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2088 */
struct __cppobj immP0Oper : MachOper
{
  const TypePtr *_c0;
};

/* 2089 */
struct /*VFT*/ immLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2090 */
struct __cppobj immLOper : MachOper
{
  __int64 _c0;
};

/* 2091 */
struct /*VFT*/ immL0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2092 */
struct __cppobj immL0Oper : MachOper
{
  __int64 _c0;
};

/* 2093 */
struct /*VFT*/ immL_M1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2094 */
struct __cppobj immL_M1Oper : MachOper
{
  __int64 _c0;
};

/* 2095 */
struct /*VFT*/ immL_127Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2096 */
struct __cppobj immL_127Oper : MachOper
{
  __int64 _c0;
};

/* 2097 */
struct /*VFT*/ immL_32bitsOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2098 */
struct __cppobj immL_32bitsOper : MachOper
{
  __int64 _c0;
};

/* 2099 */
struct /*VFT*/ immL32Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2100 */
struct __cppobj immL32Oper : MachOper
{
  __int64 _c0;
};

/* 2101 */
struct /*VFT*/ immDPR0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2102 */
struct __cppobj immDPR0Oper : MachOper
{
  long double _c0;
};

/* 2103 */
struct /*VFT*/ immDPR1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2104 */
struct __cppobj immDPR1Oper : MachOper
{
  long double _c0;
};

/* 2105 */
struct /*VFT*/ immDPROper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2106 */
struct __cppobj immDPROper : MachOper
{
  long double _c0;
};

/* 2107 */
struct /*VFT*/ immDOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2108 */
struct __cppobj immDOper : MachOper
{
  long double _c0;
};

/* 2109 */
struct /*VFT*/ immD0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2110 */
struct __cppobj immD0Oper : MachOper
{
  long double _c0;
};

/* 2111 */
struct /*VFT*/ immFPR0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2112 */
struct __cppobj immFPR0Oper : MachOper
{
  float _c0;
};

/* 2113 */
struct /*VFT*/ immFPR1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2114 */
struct __cppobj immFPR1Oper : MachOper
{
  float _c0;
};

/* 2115 */
struct /*VFT*/ immFPROper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2116 */
struct __cppobj immFPROper : MachOper
{
  float _c0;
};

/* 2117 */
struct /*VFT*/ immFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2118 */
struct __cppobj immFOper : MachOper
{
  float _c0;
};

/* 2119 */
struct /*VFT*/ immF0Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2120 */
struct __cppobj immF0Oper : MachOper
{
  float _c0;
};

/* 2121 */
struct /*VFT*/ immI_16Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2122 */
struct __cppobj immI_16Oper : MachOper
{
  int _c0;
};

/* 2123 */
struct /*VFT*/ immI_24Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2124 */
struct __cppobj immI_24Oper : MachOper
{
  int _c0;
};

/* 2125 */
struct /*VFT*/ immI_255Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2126 */
struct __cppobj immI_255Oper : MachOper
{
  int _c0;
};

/* 2127 */
struct /*VFT*/ immI_65535Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2128 */
struct __cppobj immI_65535Oper : MachOper
{
  int _c0;
};

/* 2129 */
struct /*VFT*/ rRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2130 */
struct __cppobj rRegIOper : MachOper
{
};

/* 2131 */
struct /*VFT*/ xRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2132 */
struct __cppobj xRegIOper : MachOper
{
};

/* 2133 */
struct /*VFT*/ eAXRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2134 */
struct __cppobj eAXRegIOper : MachOper
{
};

/* 2135 */
struct /*VFT*/ eBXRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2136 */
struct __cppobj eBXRegIOper : MachOper
{
};

/* 2137 */
struct /*VFT*/ eCXRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2138 */
struct __cppobj eCXRegIOper : MachOper
{
};

/* 2139 */
struct /*VFT*/ eDXRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2140 */
struct __cppobj eDXRegIOper : MachOper
{
};

/* 2141 */
struct /*VFT*/ eDIRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2142 */
struct __cppobj eDIRegIOper : MachOper
{
};

/* 2143 */
struct /*VFT*/ naxRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2144 */
struct __cppobj naxRegIOper : MachOper
{
};

/* 2145 */
struct /*VFT*/ nadxRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2146 */
struct __cppobj nadxRegIOper : MachOper
{
};

/* 2147 */
struct /*VFT*/ ncxRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2148 */
struct __cppobj ncxRegIOper : MachOper
{
};

/* 2149 */
struct /*VFT*/ eSIRegIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2150 */
struct __cppobj eSIRegIOper : MachOper
{
};

/* 2151 */
struct /*VFT*/ anyRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2152 */
struct __cppobj anyRegPOper : MachOper
{
};

/* 2153 */
struct /*VFT*/ eRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2154 */
struct __cppobj eRegPOper : MachOper
{
};

/* 2155 */
struct /*VFT*/ eRegP_no_EBPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2156 */
struct __cppobj eRegP_no_EBPOper : MachOper
{
};

/* 2157 */
struct /*VFT*/ naxRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2158 */
struct __cppobj naxRegPOper : MachOper
{
};

/* 2159 */
struct /*VFT*/ nabxRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2160 */
struct __cppobj nabxRegPOper : MachOper
{
};

/* 2161 */
struct /*VFT*/ pRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2162 */
struct __cppobj pRegPOper : MachOper
{
};

/* 2163 */
struct /*VFT*/ eAXRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2164 */
struct __cppobj eAXRegPOper : MachOper
{
};

/* 2165 */
struct /*VFT*/ eBXRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2166 */
struct __cppobj eBXRegPOper : MachOper
{
};

/* 2167 */
struct /*VFT*/ eCXRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2168 */
struct __cppobj eCXRegPOper : MachOper
{
};

/* 2169 */
struct /*VFT*/ eSIRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2170 */
struct __cppobj eSIRegPOper : MachOper
{
};

/* 2171 */
struct /*VFT*/ eDIRegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2172 */
struct __cppobj eDIRegPOper : MachOper
{
};

/* 2173 */
struct /*VFT*/ eRegLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2174 */
struct __cppobj eRegLOper : MachOper
{
};

/* 2175 */
struct /*VFT*/ eADXRegLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2176 */
struct __cppobj eADXRegLOper : MachOper
{
};

/* 2177 */
struct /*VFT*/ eBCXRegLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2178 */
struct __cppobj eBCXRegLOper : MachOper
{
};

/* 2179 */
struct /*VFT*/ eADXRegL_low_onlyOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2180 */
struct __cppobj eADXRegL_low_onlyOper : MachOper
{
};

/* 2181 */
struct /*VFT*/ eFlagsRegOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2182 */
struct __cppobj eFlagsRegOper : MachOper
{
};

/* 2183 */
struct /*VFT*/ eFlagsRegUOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2184 */
struct __cppobj eFlagsRegUOper : MachOper
{
};

/* 2185 */
struct /*VFT*/ eFlagsRegUCFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2186 */
struct __cppobj eFlagsRegUCFOper : MachOper
{
};

/* 2187 */
struct /*VFT*/ flagsReg_long_LTGEOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2188 */
struct __cppobj flagsReg_long_LTGEOper : MachOper
{
};

/* 2189 */
struct /*VFT*/ flagsReg_long_EQNEOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2190 */
struct __cppobj flagsReg_long_EQNEOper : MachOper
{
};

/* 2191 */
struct /*VFT*/ flagsReg_long_LEGTOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2192 */
struct __cppobj flagsReg_long_LEGTOper : MachOper
{
};

/* 2193 */
struct /*VFT*/ flagsReg_ulong_LTGEOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2194 */
struct __cppobj flagsReg_ulong_LTGEOper : MachOper
{
};

/* 2195 */
struct /*VFT*/ flagsReg_ulong_EQNEOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2196 */
struct __cppobj flagsReg_ulong_EQNEOper : MachOper
{
};

/* 2197 */
struct /*VFT*/ flagsReg_ulong_LEGTOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2198 */
struct __cppobj flagsReg_ulong_LEGTOper : MachOper
{
};

/* 2199 */
struct /*VFT*/ regDPROper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2200 */
struct __cppobj regDPROper : MachOper
{
};

/* 2201 */
struct /*VFT*/ regDPR1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2202 */
struct __cppobj regDPR1Oper : MachOper
{
};

/* 2203 */
struct /*VFT*/ regDPR2Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2204 */
struct __cppobj regDPR2Oper : MachOper
{
};

/* 2205 */
struct /*VFT*/ regnotDPR1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2206 */
struct __cppobj regnotDPR1Oper : MachOper
{
};

/* 2207 */
struct /*VFT*/ regFPROper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2208 */
struct __cppobj regFPROper : MachOper
{
};

/* 2209 */
struct /*VFT*/ regFPR1Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2210 */
struct __cppobj regFPR1Oper : MachOper
{
};

/* 2211 */
struct /*VFT*/ regFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2212 */
struct __cppobj regFOper : MachOper
{
};

/* 2213 */
struct /*VFT*/ regDOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2214 */
struct __cppobj regDOper : MachOper
{
};

/* 2215 */
struct /*VFT*/ directOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2216 */
struct __cppobj directOper : MachOper
{
  const TypePtr *_c0;
};

/* 2217 */
struct /*VFT*/ indirectOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2218 */
struct __cppobj indirectOper : MachOper
{
};

/* 2219 */
struct /*VFT*/ indOffset8Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2220 */
struct __cppobj indOffset8Oper : MachOper
{
  int _c0;
};

/* 2221 */
struct /*VFT*/ indOffset32Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2222 */
struct __cppobj indOffset32Oper : MachOper
{
  int _c0;
};

/* 2223 */
struct /*VFT*/ indOffset32XOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2224 */
struct __cppobj indOffset32XOper : MachOper
{
  const TypePtr *_c0;
};

/* 2225 */
struct /*VFT*/ indIndexOffsetOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2226 */
struct __cppobj indIndexOffsetOper : MachOper
{
  int _c0;
};

/* 2227 */
struct /*VFT*/ indIndexOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2228 */
struct __cppobj indIndexOper : MachOper
{
};

/* 2229 */
struct /*VFT*/ indIndexScaleOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2230 */
struct __cppobj indIndexScaleOper : MachOper
{
  int _c0;
};

/* 2231 */
struct /*VFT*/ indIndexScaleOffsetOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2232 */
struct __cppobj indIndexScaleOffsetOper : MachOper
{
  int _c0;
  int _c1;
};

/* 2233 */
struct /*VFT*/ load_long_RegPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2234 */
struct __cppobj load_long_RegPOper : MachOper
{
};

/* 2235 */
struct /*VFT*/ load_long_indirectOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2236 */
struct __cppobj load_long_indirectOper : MachOper
{
};

/* 2237 */
struct /*VFT*/ load_long_indOffset32Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2238 */
struct __cppobj load_long_indOffset32Oper : MachOper
{
  int _c0;
};

/* 2239 */
struct /*VFT*/ stackSlotPOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2240 */
struct __cppobj stackSlotPOper : MachOper
{
};

/* 2241 */
struct /*VFT*/ stackSlotIOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2242 */
struct __cppobj stackSlotIOper : MachOper
{
};

/* 2243 */
struct /*VFT*/ stackSlotFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2244 */
struct __cppobj stackSlotFOper : MachOper
{
};

/* 2245 */
struct /*VFT*/ stackSlotDOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2246 */
struct __cppobj stackSlotDOper : MachOper
{
};

/* 2247 */
struct /*VFT*/ stackSlotLOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2248 */
struct __cppobj stackSlotLOper : MachOper
{
};

/* 2249 */
struct /*VFT*/ indirect_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2250 */
struct __cppobj indirect_win95_safeOper : MachOper
{
};

/* 2251 */
struct /*VFT*/ indOffset8_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2252 */
struct __cppobj indOffset8_win95_safeOper : MachOper
{
  int _c0;
};

/* 2253 */
struct /*VFT*/ indOffset32_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2254 */
struct __cppobj indOffset32_win95_safeOper : MachOper
{
  int _c0;
};

/* 2255 */
struct /*VFT*/ indIndexOffset_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2256 */
struct __cppobj indIndexOffset_win95_safeOper : MachOper
{
  int _c0;
};

/* 2257 */
struct /*VFT*/ indIndexScale_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2258 */
struct __cppobj indIndexScale_win95_safeOper : MachOper
{
  int _c0;
};

/* 2259 */
struct /*VFT*/ indIndexScaleOffset_win95_safeOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2260 */
struct __cppobj indIndexScaleOffset_win95_safeOper : MachOper
{
  int _c0;
  int _c1;
};

/* 2261 */
struct __cppobj cmpOpOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2262 */
struct /*VFT*/ cmpOpOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOpOper *this);
  int (__thiscall *not_equal)(cmpOpOper *this);
  int (__thiscall *less)(cmpOpOper *this);
  int (__thiscall *greater_equal)(cmpOpOper *this);
  int (__thiscall *less_equal)(cmpOpOper *this);
  int (__thiscall *greater)(cmpOpOper *this);
  int (__thiscall *overflow)(cmpOpOper *this);
  int (__thiscall *no_overflow)(cmpOpOper *this);
};

/* 2263 */
struct __cppobj cmpOpUOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2264 */
struct /*VFT*/ cmpOpUOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOpUOper *this);
  int (__thiscall *not_equal)(cmpOpUOper *this);
  int (__thiscall *less)(cmpOpUOper *this);
  int (__thiscall *greater_equal)(cmpOpUOper *this);
  int (__thiscall *less_equal)(cmpOpUOper *this);
  int (__thiscall *greater)(cmpOpUOper *this);
  int (__thiscall *overflow)(cmpOpUOper *this);
  int (__thiscall *no_overflow)(cmpOpUOper *this);
};

/* 2265 */
struct __cppobj cmpOpUCFOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2266 */
struct /*VFT*/ cmpOpUCFOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOpUCFOper *this);
  int (__thiscall *not_equal)(cmpOpUCFOper *this);
  int (__thiscall *less)(cmpOpUCFOper *this);
  int (__thiscall *greater_equal)(cmpOpUCFOper *this);
  int (__thiscall *less_equal)(cmpOpUCFOper *this);
  int (__thiscall *greater)(cmpOpUCFOper *this);
  int (__thiscall *overflow)(cmpOpUCFOper *this);
  int (__thiscall *no_overflow)(cmpOpUCFOper *this);
};

/* 2267 */
struct __cppobj cmpOpUCF2Oper : MachOper
{
  BoolTest::mask _c0;
};

/* 2268 */
struct /*VFT*/ cmpOpUCF2Oper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOpUCF2Oper *this);
  int (__thiscall *not_equal)(cmpOpUCF2Oper *this);
  int (__thiscall *less)(cmpOpUCF2Oper *this);
  int (__thiscall *greater_equal)(cmpOpUCF2Oper *this);
  int (__thiscall *less_equal)(cmpOpUCF2Oper *this);
  int (__thiscall *greater)(cmpOpUCF2Oper *this);
  int (__thiscall *overflow)(cmpOpUCF2Oper *this);
  int (__thiscall *no_overflow)(cmpOpUCF2Oper *this);
};

/* 2269 */
struct __cppobj cmpOp_fcmovOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2270 */
struct /*VFT*/ cmpOp_fcmovOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOp_fcmovOper *this);
  int (__thiscall *not_equal)(cmpOp_fcmovOper *this);
  int (__thiscall *less)(cmpOp_fcmovOper *this);
  int (__thiscall *greater_equal)(cmpOp_fcmovOper *this);
  int (__thiscall *less_equal)(cmpOp_fcmovOper *this);
  int (__thiscall *greater)(cmpOp_fcmovOper *this);
  int (__thiscall *overflow)(cmpOp_fcmovOper *this);
  int (__thiscall *no_overflow)(cmpOp_fcmovOper *this);
};

/* 2271 */
struct __cppobj cmpOp_commuteOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2272 */
struct /*VFT*/ cmpOp_commuteOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOp_commuteOper *this);
  int (__thiscall *not_equal)(cmpOp_commuteOper *this);
  int (__thiscall *less)(cmpOp_commuteOper *this);
  int (__thiscall *greater_equal)(cmpOp_commuteOper *this);
  int (__thiscall *less_equal)(cmpOp_commuteOper *this);
  int (__thiscall *greater)(cmpOp_commuteOper *this);
  int (__thiscall *overflow)(cmpOp_commuteOper *this);
  int (__thiscall *no_overflow)(cmpOp_commuteOper *this);
};

/* 2273 */
struct __cppobj cmpOpU_commuteOper : MachOper
{
  BoolTest::mask _c0;
};

/* 2274 */
struct /*VFT*/ cmpOpU_commuteOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
  int (__thiscall *equal)(cmpOpU_commuteOper *this);
  int (__thiscall *not_equal)(cmpOpU_commuteOper *this);
  int (__thiscall *less)(cmpOpU_commuteOper *this);
  int (__thiscall *greater_equal)(cmpOpU_commuteOper *this);
  int (__thiscall *less_equal)(cmpOpU_commuteOper *this);
  int (__thiscall *greater)(cmpOpU_commuteOper *this);
  int (__thiscall *overflow)(cmpOpU_commuteOper *this);
  int (__thiscall *no_overflow)(cmpOpU_commuteOper *this);
};

/* 2275 */
struct /*VFT*/ vecSOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2276 */
struct __cppobj vecSOper : MachOper
{
};

/* 2277 */
struct /*VFT*/ vecDOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2278 */
struct __cppobj vecDOper : MachOper
{
};

/* 2279 */
struct /*VFT*/ vecXOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2280 */
struct __cppobj vecXOper : MachOper
{
};

/* 2281 */
struct /*VFT*/ vecYOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 2282 */
struct __cppobj vecYOper : MachOper
{
};

/* 2283 */
struct __cppobj bytes_reverse_intNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2284 */
struct __cppobj bytes_reverse_longNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2285 */
struct __cppobj bytes_reverse_unsigned_shortNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2286 */
struct __cppobj bytes_reverse_shortNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2287 */
struct __cppobj countLeadingZerosINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2288 */
struct __cppobj countLeadingZerosI_bsrNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2289 */
struct __cppobj countLeadingZerosLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2290 */
struct __cppobj countLeadingZerosL_bsrNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2291 */
struct __cppobj countTrailingZerosINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2292 */
struct __cppobj countTrailingZerosI_bsfNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2293 */
struct __cppobj countTrailingZerosLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2294 */
struct __cppobj countTrailingZerosL_bsfNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2295 */
struct __cppobj popCountINode : MachNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 2296 */
struct __cppobj popCountI_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2297 */
struct __cppobj popCountLNode : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2298 */
struct __cppobj popCountL_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2299 */
struct __cppobj loadBNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2300 */
struct __cppobj loadB2LNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2301 */
struct __cppobj loadUBNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2302 */
struct __cppobj loadUB2LNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2303 */
struct __cppobj loadUB2L_immI8Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2304 */
struct __cppobj loadSNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2305 */
struct __cppobj loadS2BNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2306 */
struct __cppobj loadS2LNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2307 */
struct __cppobj loadUSNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2308 */
struct __cppobj loadUS2BNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2309 */
struct __cppobj loadUS2LNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2310 */
struct __cppobj loadUS2L_immI_255Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2311 */
struct __cppobj loadUS2L_immI16Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2312 */
struct __cppobj loadINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2313 */
struct __cppobj loadI2BNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2314 */
struct __cppobj loadI2UBNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2315 */
struct __cppobj loadI2SNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2316 */
struct __cppobj loadI2USNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2317 */
struct __cppobj loadI2LNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2318 */
struct __cppobj loadI2L_immI_255Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2319 */
struct __cppobj loadI2L_immI_65535Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2320 */
struct __cppobj loadI2L_immU31Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2321 */
struct __cppobj loadUI2LNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2322 */
struct __cppobj loadLNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2323 */
struct __cppobj loadL_volatileNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2324 */
struct __cppobj loadLX_volatileNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2325 */
struct __cppobj loadLX_reg_volatileNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2326 */
struct __cppobj loadRangeNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2327 */
struct __cppobj MachTypeNode : MachNode
{
  const Type *_bottom_type;
};

/* 2328 */
struct __cppobj loadPNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2329 */
struct __cppobj loadKlassNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2330 */
struct __cppobj loadDPRNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2331 */
struct __cppobj loadDNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2332 */
struct __cppobj loadD_partialNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2333 */
struct __cppobj loadFNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2334 */
struct __cppobj loadFPRNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2335 */
struct __cppobj leaP8Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2336 */
struct __cppobj leaP32Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2337 */
struct __cppobj leaPIdxOffNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2338 */
struct __cppobj leaPIdxScaleNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2339 */
struct __cppobj leaPIdxScaleOffNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2340 */
struct __cppobj loadConINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2341 */
struct __cppobj loadConI0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2342 */
struct __cppobj loadConPNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2343 */
struct __cppobj loadConLNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2344 */
struct __cppobj loadConL0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2345 */
struct __cppobj MachConstantNode : MachTypeNode
{
  Compile::Constant _constant;
};

/* 2346 */
struct __cppobj loadConFPRNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2347 */
struct __cppobj loadConFPR0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2348 */
struct __cppobj loadConFPR1Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2349 */
struct __cppobj loadConFNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2350 */
struct __cppobj loadConF0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2351 */
struct __cppobj loadConDPRNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2352 */
struct __cppobj loadConDPR0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2353 */
struct __cppobj loadConDPR1Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2354 */
struct __cppobj loadConDNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2355 */
struct __cppobj loadConD0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2356 */
struct __cppobj loadSSINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2357 */
struct __cppobj loadSSLNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2358 */
struct __cppobj loadSSPNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2359 */
struct __cppobj loadSSFNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2360 */
struct __cppobj loadSSDNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2361 */
struct __cppobj prefetchr0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2362 */
struct __cppobj prefetchrNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2363 */
struct __cppobj prefetchrNTANode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2364 */
struct __cppobj prefetchrT0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2365 */
struct __cppobj prefetchrT2Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2366 */
struct __cppobj prefetchw0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2367 */
struct __cppobj prefetchwNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2368 */
struct __cppobj prefetchwNTANode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2369 */
struct __cppobj prefetchAlloc0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2370 */
struct __cppobj prefetchAllocNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2371 */
struct __cppobj prefetchAllocNTANode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2372 */
struct __cppobj prefetchAllocT0Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2373 */
struct __cppobj prefetchAllocT2Node : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2374 */
struct __cppobj storeBNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2375 */
struct __cppobj storeCNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2376 */
struct __cppobj storeINode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2377 */
struct __cppobj storeLNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2378 */
struct __cppobj storeL2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2379 */
struct __cppobj storeL_volatileNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2380 */
struct __cppobj storeLX_volatileNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2381 */
struct __cppobj storeLX_reg_volatileNode : MachTypeNode
{
  MachOper *_opnd_array[5];
};

/* 2382 */
struct __cppobj storePNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2383 */
struct __cppobj storeImmINode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2384 */
struct __cppobj storeImmI16Node : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2385 */
struct __cppobj storeImmPNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2386 */
struct __cppobj storeImmBNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2387 */
struct __cppobj storeImmCMNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2388 */
struct __cppobj storeDPRNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2389 */
struct __cppobj storeDPR_roundedNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2390 */
struct __cppobj storeDNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2391 */
struct __cppobj storeFNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2392 */
struct __cppobj storeFPRNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2393 */
struct __cppobj storeFPR_roundedNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2394 */
struct __cppobj storeFPR_DroundedNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2395 */
struct __cppobj storeFPR_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2396 */
struct __cppobj storeF_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2397 */
struct __cppobj storeSSINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2398 */
struct __cppobj storeSSPNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2399 */
struct __cppobj storeSSLNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2400 */
struct __cppobj MachMemBarNode : MachNode
{
  const TypePtr *_adr_type;
};

/* 2401 */
struct __cppobj membar_acquireNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2402 */
struct __cppobj membar_acquire_0Node : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2403 */
struct __cppobj membar_acquire_lockNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2404 */
struct __cppobj membar_releaseNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2405 */
struct __cppobj membar_release_0Node : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2406 */
struct __cppobj membar_release_lockNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2407 */
struct __cppobj membar_volatileNode : MachMemBarNode
{
  MachOper *_opnd_array[2];
};

/* 2408 */
struct __cppobj unnecessary_membar_volatileNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2409 */
struct __cppobj membar_storestoreNode : MachMemBarNode
{
  MachOper *_opnd_array[1];
};

/* 2410 */
struct __cppobj castX2PNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2411 */
struct __cppobj castP2XNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2412 */
struct __cppobj jmovI_regNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2413 */
struct __cppobj jmovI_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2414 */
struct __cppobj cmovI_regNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2415 */
struct __cppobj cmovI_regUNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2416 */
struct __cppobj cmovI_regUCFNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2417 */
struct __cppobj cmovI_memNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2418 */
struct __cppobj cmovI_memUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2419 */
struct __cppobj cmovI_memUCFNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2420 */
struct __cppobj cmovP_regNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2421 */
struct __cppobj cmovP_reg_nonP6Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2422 */
struct __cppobj cmovP_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2423 */
struct __cppobj cmovP_regUCFNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2424 */
struct __cppobj fcmovDPR_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2425 */
struct __cppobj fcmovFPR_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2426 */
struct __cppobj fcmovDPR_regSNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2427 */
struct __cppobj fcmovFPR_regSNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2428 */
struct __cppobj fcmovF_regSNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2429 */
struct __cppobj fcmovD_regSNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2430 */
struct __cppobj fcmovF_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2431 */
struct __cppobj fcmovF_regUCFNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2432 */
struct __cppobj fcmovD_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2433 */
struct __cppobj fcmovD_regUCFNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2434 */
struct __cppobj cmovL_regNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2435 */
struct __cppobj cmovL_regUNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2436 */
struct __cppobj cmovL_regUCFNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2437 */
struct __cppobj addI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2438 */
struct __cppobj addI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2439 */
struct __cppobj incI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2440 */
struct __cppobj leaI_eReg_immINode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2441 */
struct __cppobj leaP_eReg_immINode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2442 */
struct __cppobj decI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2443 */
struct __cppobj addP_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2444 */
struct __cppobj addP_eReg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2445 */
struct __cppobj addI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2446 */
struct __cppobj addI_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2447 */
struct __cppobj addI_mem_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2448 */
struct __cppobj addI_mem_eReg_0Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2449 */
struct __cppobj addI_mem_immNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2450 */
struct __cppobj incI_memNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2451 */
struct __cppobj decI_memNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2452 */
struct __cppobj checkCastPPNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2453 */
struct __cppobj castPPNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2454 */
struct __cppobj castIINode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2455 */
struct __cppobj loadPLockedNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 2456 */
struct __cppobj storePConditionalNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2457 */
struct __cppobj storeIConditionalNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2458 */
struct __cppobj storeLConditionalNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2459 */
struct __cppobj compareAndSwapLNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2460 */
struct __cppobj compareAndSwapPNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2461 */
struct __cppobj compareAndSwapP_shenandoahNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2462 */
struct __cppobj compareAndSwapINode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2463 */
struct __cppobj xaddI_no_resNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2464 */
struct __cppobj xaddINode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2465 */
struct __cppobj xchgINode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2466 */
struct __cppobj xchgPNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 2467 */
struct __cppobj subI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2468 */
struct __cppobj subI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2469 */
struct __cppobj subI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2470 */
struct __cppobj subI_mem_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2471 */
struct __cppobj subP_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2472 */
struct __cppobj negI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2473 */
struct __cppobj mulI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2474 */
struct __cppobj mulI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2475 */
struct __cppobj loadConL_low_onlyNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2476 */
struct __cppobj mulI_imm_highNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2477 */
struct __cppobj mulI_imm_high_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2478 */
struct __cppobj mulI_imm_RShift_highNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2479 */
struct __cppobj mulI_imm_RShift_high_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2480 */
struct __cppobj mulI_mem_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2481 */
struct __cppobj mulINode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2482 */
struct __cppobj mulI_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2483 */
struct __cppobj mulI2LNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2484 */
struct __cppobj mulI2L_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2485 */
struct __cppobj mulIS_eRegNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2486 */
struct __cppobj mulIS_eReg_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2487 */
struct __cppobj mulL_eRegNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2488 */
struct __cppobj mulL_eReg_lhi0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2489 */
struct __cppobj mulL_eReg_rhi0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2490 */
struct __cppobj mulL_eReg_hi0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2491 */
struct __cppobj mulL_eReg_conNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2492 */
struct __cppobj divI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2493 */
struct __cppobj divL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2494 */
struct __cppobj divModI_eReg_divmodNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2495 */
struct __cppobj modI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2496 */
struct __cppobj modL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2497 */
struct __cppobj divL_eReg_imm32Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2498 */
struct __cppobj modL_eReg_imm32Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2499 */
struct __cppobj shlI_eReg_1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2500 */
struct __cppobj salI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2501 */
struct __cppobj salI_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2502 */
struct __cppobj sarI_eReg_1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2503 */
struct __cppobj sarI_mem_1Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2504 */
struct __cppobj sarI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2505 */
struct __cppobj sarI_mem_immNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2506 */
struct __cppobj sarI_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2507 */
struct __cppobj shrI_eReg_1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2508 */
struct __cppobj shrI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2509 */
struct __cppobj i2bNode : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2510 */
struct __cppobj i2sNode : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2511 */
struct __cppobj shrI_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2512 */
struct __cppobj andI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2513 */
struct __cppobj andI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2514 */
struct __cppobj andI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2515 */
struct __cppobj andI_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2516 */
struct __cppobj andI_mem_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2517 */
struct __cppobj andI_mem_eReg_0Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2518 */
struct __cppobj andI_mem_immNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2519 */
struct __cppobj andnI_rReg_rReg_rRegNode : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2520 */
struct __cppobj andnI_rReg_rReg_rReg_0Node : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2521 */
struct __cppobj andnI_rReg_rReg_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2522 */
struct __cppobj andnI_rReg_rReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2523 */
struct __cppobj blsiI_rReg_rRegNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2524 */
struct __cppobj blsiI_rReg_rReg_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2525 */
struct __cppobj blsiI_rReg_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2526 */
struct __cppobj blsiI_rReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2527 */
struct __cppobj blsmskI_rReg_rRegNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2528 */
struct __cppobj blsmskI_rReg_rReg_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2529 */
struct __cppobj blsmskI_rReg_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2530 */
struct __cppobj blsmskI_rReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2531 */
struct __cppobj blsrI_rReg_rRegNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2532 */
struct __cppobj blsrI_rReg_rReg_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2533 */
struct __cppobj blsrI_rReg_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2534 */
struct __cppobj blsrI_rReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2535 */
struct __cppobj orI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2536 */
struct __cppobj orI_eReg_castP2XNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2537 */
struct __cppobj orI_eReg_castP2X_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2538 */
struct __cppobj orI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2539 */
struct __cppobj orI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2540 */
struct __cppobj orI_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2541 */
struct __cppobj orI_mem_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2542 */
struct __cppobj orI_mem_eReg_0Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2543 */
struct __cppobj orI_mem_immNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2544 */
struct __cppobj rolI_eReg_imm1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2545 */
struct __cppobj rolI_eReg_imm8Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2546 */
struct __cppobj rolI_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2547 */
struct __cppobj rolI_eReg_i1Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2548 */
struct __cppobj rolI_eReg_i1_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2549 */
struct __cppobj rolI_eReg_i8Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2550 */
struct __cppobj rolI_eReg_i8_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2551 */
struct __cppobj rolI_eReg_Var_C0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2552 */
struct __cppobj rolI_eReg_Var_C0_0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2553 */
struct __cppobj rolI_eReg_Var_C32Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2554 */
struct __cppobj rolI_eReg_Var_C32_0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2555 */
struct __cppobj rorI_eReg_imm1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2556 */
struct __cppobj rorI_eReg_imm8Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2557 */
struct __cppobj rorI_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2558 */
struct __cppobj rorI_eReg_i1Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2559 */
struct __cppobj rorI_eReg_i1_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2560 */
struct __cppobj rorI_eReg_i8Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2561 */
struct __cppobj rorI_eReg_i8_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2562 */
struct __cppobj rorI_eReg_Var_C0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2563 */
struct __cppobj rorI_eReg_Var_C0_0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2564 */
struct __cppobj rorI_eReg_Var_C32Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2565 */
struct __cppobj rorI_eReg_Var_C32_0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2566 */
struct __cppobj xorI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2567 */
struct __cppobj xorI_eReg_im1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2568 */
struct __cppobj xorI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2569 */
struct __cppobj xorI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2570 */
struct __cppobj xorI_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2571 */
struct __cppobj xorI_mem_eRegNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2572 */
struct __cppobj xorI_mem_eReg_0Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2573 */
struct __cppobj xorI_mem_immNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2574 */
struct __cppobj movI_nocopyNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2575 */
struct __cppobj ci2bNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2576 */
struct __cppobj convI2BNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2577 */
struct __cppobj movP_nocopyNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2578 */
struct __cppobj cp2bNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2579 */
struct __cppobj convP2BNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2580 */
struct __cppobj cmpLTMaskNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2581 */
struct __cppobj cmpLTMask0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2582 */
struct __cppobj cadd_cmpLTMaskNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2583 */
struct __cppobj cadd_cmpLTMask_1Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2584 */
struct __cppobj cadd_cmpLTMask_0Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2585 */
struct __cppobj cadd_cmpLTMask_2Node : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2586 */
struct __cppobj and_cmpLTMaskNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2587 */
struct __cppobj and_cmpLTMask_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2588 */
struct __cppobj overflowAddI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2589 */
struct __cppobj overflowAddI_rReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2590 */
struct __cppobj overflowSubI_rRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2591 */
struct __cppobj overflowSubI_rReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2592 */
struct __cppobj overflowNegI_rRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2593 */
struct __cppobj overflowMulI_rRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2594 */
struct __cppobj overflowMulI_rReg_immNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2595 */
struct __cppobj addL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2596 */
struct __cppobj addL_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2597 */
struct __cppobj addL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2598 */
struct __cppobj addL_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2599 */
struct __cppobj subL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2600 */
struct __cppobj subL_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2601 */
struct __cppobj subL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2602 */
struct __cppobj negL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2603 */
struct __cppobj andL_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2604 */
struct __cppobj andL_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2605 */
struct __cppobj andL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2606 */
struct __cppobj andL_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2607 */
struct __cppobj andnL_eReg_eReg_eRegNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2608 */
struct __cppobj andnL_eReg_eReg_eReg_0Node : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2609 */
struct __cppobj andnL_eReg_eReg_memNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2610 */
struct __cppobj andnL_eReg_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2611 */
struct __cppobj blsiL_eReg_eRegNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2612 */
struct __cppobj blsiL_eReg_eReg_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2613 */
struct __cppobj blsiL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2614 */
struct __cppobj blsiL_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2615 */
struct __cppobj blsmskL_eReg_eRegNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2616 */
struct __cppobj blsmskL_eReg_eReg_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2617 */
struct __cppobj blsmskL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2618 */
struct __cppobj blsmskL_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2619 */
struct __cppobj blsrL_eReg_eRegNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2620 */
struct __cppobj blsrL_eReg_eReg_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2621 */
struct __cppobj blsrL_eReg_memNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2622 */
struct __cppobj blsrL_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2623 */
struct __cppobj orl_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2624 */
struct __cppobj orl_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2625 */
struct __cppobj orl_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2626 */
struct __cppobj orl_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2627 */
struct __cppobj xorl_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2628 */
struct __cppobj xorl_eReg_im1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2629 */
struct __cppobj xorl_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2630 */
struct __cppobj xorl_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2631 */
struct __cppobj xorl_eReg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2632 */
struct __cppobj shlL_eReg_1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2633 */
struct __cppobj shlL_eReg_2Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2634 */
struct __cppobj shlL_eReg_3Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2635 */
struct __cppobj shlL_eReg_1_31Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2636 */
struct __cppobj shlL_eReg_32_63Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2637 */
struct __cppobj salL_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2638 */
struct __cppobj shrL_eReg_1_31Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2639 */
struct __cppobj shrL_eReg_32_63Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2640 */
struct __cppobj shrL_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2641 */
struct __cppobj sarL_eReg_1_31Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2642 */
struct __cppobj sarL_eReg_32_63Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2643 */
struct __cppobj sarL_eReg_CLNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2644 */
struct __cppobj cmpDPR_cc_P6Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2645 */
struct __cppobj cmpDPR_cc_P6CFNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2646 */
struct __cppobj cmpDPR_ccNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2647 */
struct __cppobj cmpDPR_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2648 */
struct __cppobj cmpDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2649 */
struct __cppobj cmpD_ccNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2650 */
struct __cppobj cmpD_ccCFNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2651 */
struct __cppobj cmpD_ccmemNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2652 */
struct __cppobj cmpD_ccmemCFNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2653 */
struct __cppobj cmpD_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2654 */
struct __cppobj cmpD_regmemNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2655 */
struct __cppobj subDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2656 */
struct __cppobj subDPR_reg_roundNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2657 */
struct __cppobj subDPR_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2658 */
struct __cppobj absDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2659 */
struct __cppobj negDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2660 */
struct __cppobj addDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2661 */
struct __cppobj addDPR_reg_roundNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2662 */
struct __cppobj addDPR_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2663 */
struct __cppobj addDPR_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2664 */
struct __cppobj addDPR_mem_regNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2665 */
struct __cppobj addDPR_mem_reg_0Node : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 2666 */
struct __cppobj addDPR_reg_imm1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2667 */
struct __cppobj __declspec(align(8)) addDPR_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2668 */
struct __cppobj __declspec(align(8)) addDPR_reg_imm_roundNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2669 */
struct __cppobj mulDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2670 */
struct __cppobj strictfp_mulDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2671 */
struct __cppobj __declspec(align(8)) mulDPR_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2672 */
struct __cppobj mulDPR_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2673 */
struct __cppobj mulDPR_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2674 */
struct __cppobj mulDPR_reg_mem_ciscNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2675 */
struct __cppobj mulDPR_reg_mem_cisc_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2676 */
struct __cppobj addDPR_mulDPR_regNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2677 */
struct __cppobj addDPR_mulDPR_reg_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2678 */
struct __cppobj subDPR_mulDPR_regNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2679 */
struct __cppobj divDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2680 */
struct __cppobj strictfp_divDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2681 */
struct __cppobj divDPR_reg_roundNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2682 */
struct __cppobj modDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2683 */
struct __cppobj modD_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2684 */
struct __cppobj sinDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2685 */
struct __cppobj sinD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2686 */
struct __cppobj cosDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2687 */
struct __cppobj cosD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2688 */
struct __cppobj tanDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2689 */
struct __cppobj tanD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2690 */
struct __cppobj atanDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2691 */
struct __cppobj atanD_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2692 */
struct __cppobj sqrtDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2693 */
struct __cppobj powDPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2694 */
struct __cppobj powD_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2695 */
struct __cppobj expDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2696 */
struct __cppobj expD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2697 */
struct __cppobj log10DPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2698 */
struct __cppobj log10D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2699 */
struct __cppobj logDPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2700 */
struct __cppobj logD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2701 */
struct __cppobj cmpFPR_cc_P6Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2702 */
struct __cppobj cmpFPR_cc_P6CFNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2703 */
struct __cppobj cmpFPR_ccNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2704 */
struct __cppobj cmpFPR_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2705 */
struct __cppobj cmpFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2706 */
struct __cppobj cmpF_ccNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2707 */
struct __cppobj cmpF_ccCFNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2708 */
struct __cppobj cmpF_ccmemNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2709 */
struct __cppobj cmpF_ccmemCFNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2710 */
struct __cppobj cmpF_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2711 */
struct __cppobj cmpF_regmemNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2712 */
struct __cppobj subFPR24_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2713 */
struct __cppobj subFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2714 */
struct __cppobj addFPR24_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2715 */
struct __cppobj addFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2716 */
struct __cppobj absFPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2717 */
struct __cppobj negFPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2718 */
struct __cppobj addFPR24_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2719 */
struct __cppobj addFPR24_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2720 */
struct __cppobj addFPR_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2721 */
struct __cppobj addFPR_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2722 */
struct __cppobj addFPR24_mem_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2723 */
struct __cppobj addFPR24_mem_ciscNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2724 */
struct __cppobj addFPR24_mem_cisc_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2725 */
struct __cppobj addFPR24_mem_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2726 */
struct __cppobj __declspec(align(8)) addFPR24_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2727 */
struct __cppobj __declspec(align(8)) addFPR_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2728 */
struct __cppobj mulFPR24_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2729 */
struct __cppobj mulFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2730 */
struct __cppobj mulFPR24_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2731 */
struct __cppobj mulFPR24_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2732 */
struct __cppobj mulFPR_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2733 */
struct __cppobj mulFPR_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2734 */
struct __cppobj mulFPR24_mem_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2735 */
struct __cppobj __declspec(align(8)) mulFPR24_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2736 */
struct __cppobj __declspec(align(8)) mulFPR_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2737 */
struct __cppobj mulFPR_reg_load1Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2738 */
struct __cppobj mulFPR_reg_load1_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2739 */
struct __cppobj addFPR_mulFPR_reg_load1Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2740 */
struct __cppobj addFPR_mulFPR_reg_load1_1Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2741 */
struct __cppobj addFPR_mulFPR_reg_load1_0Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2742 */
struct __cppobj addFPR_mulFPR_reg_load1_2Node : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2743 */
struct __cppobj addFPR_mulFPR_regNode : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2744 */
struct __cppobj addFPR_mulFPR_reg_0Node : MachNode
{
  MachOper *_opnd_array[4];
  const RegMask *_cisc_RegMask;
};

/* 2745 */
struct __cppobj subFPR_divFPR_regNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2746 */
struct __cppobj divFPR24_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2747 */
struct __cppobj divFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2748 */
struct __cppobj modFPR24_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2749 */
struct __cppobj modFPR_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2750 */
struct __cppobj modF_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2751 */
struct __cppobj roundFloat_mem_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2752 */
struct __cppobj roundDouble_mem_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2753 */
struct __cppobj convDPR2FPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2754 */
struct __cppobj convDPR2F_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2755 */
struct __cppobj convD2F_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2756 */
struct __cppobj convFPR2DPR_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2757 */
struct __cppobj convFPR2D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2758 */
struct __cppobj convF2DPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2759 */
struct __cppobj convF2D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2760 */
struct __cppobj convDPR2I_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2761 */
struct __cppobj convD2I_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2762 */
struct __cppobj convDPR2L_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2763 */
struct __cppobj convD2L_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2764 */
struct __cppobj convFPR2I_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2765 */
struct __cppobj convF2I_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2766 */
struct __cppobj convFPR2L_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2767 */
struct __cppobj convF2L_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2768 */
struct __cppobj convI2DPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2769 */
struct __cppobj convI2D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2770 */
struct __cppobj convI2D_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2771 */
struct __cppobj convXI2D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2772 */
struct __cppobj convI2DPR_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2773 */
struct __cppobj conv24I2FPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2774 */
struct __cppobj convI2FPR_SSFNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2775 */
struct __cppobj convI2FPR_SSF_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2776 */
struct __cppobj convI2FPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2777 */
struct __cppobj convI2FPR_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2778 */
struct __cppobj convI2F_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2779 */
struct __cppobj convXI2F_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2780 */
struct __cppobj convI2L_regNode : MachNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 2781 */
struct __cppobj convI2L_reg_zexNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2782 */
struct __cppobj zerox_longNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2783 */
struct __cppobj convL2DPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2784 */
struct __cppobj convL2D_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2785 */
struct __cppobj convL2F_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2786 */
struct __cppobj convL2FPR_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2787 */
struct __cppobj convL2I_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2788 */
struct __cppobj MoveF2I_stack_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2789 */
struct __cppobj MoveFPR2I_reg_stackNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2790 */
struct __cppobj MoveF2I_reg_stack_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2791 */
struct __cppobj MoveF2I_reg_reg_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2792 */
struct __cppobj MoveI2F_reg_stackNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2793 */
struct __cppobj MoveI2FPR_stack_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2794 */
struct __cppobj MoveI2F_stack_reg_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2795 */
struct __cppobj MoveI2F_reg_reg_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2796 */
struct __cppobj MoveD2L_stack_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2797 */
struct __cppobj MoveDPR2L_reg_stackNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2798 */
struct __cppobj MoveD2L_reg_stack_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2799 */
struct __cppobj MoveD2L_reg_reg_sseNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2800 */
struct __cppobj MoveL2D_reg_stackNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2801 */
struct __cppobj MoveL2DPR_stack_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2802 */
struct __cppobj MoveL2D_stack_reg_sseNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2803 */
struct __cppobj MoveL2D_stack_reg_sse_partialNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2804 */
struct __cppobj MoveL2D_reg_reg_sseNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2805 */
struct __cppobj rep_stosNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2806 */
struct __cppobj rep_fast_stosbNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2807 */
struct __cppobj string_compareNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2808 */
struct __cppobj string_equalsNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2809 */
struct __cppobj string_indexof_conNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2810 */
struct __cppobj string_indexofNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2811 */
struct __cppobj array_equalsNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2812 */
struct __cppobj encode_iso_arrayNode : MachNode
{
  MachOper *_opnd_array[8];
};

/* 2813 */
struct __cppobj compI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2814 */
struct __cppobj compI_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2815 */
struct __cppobj compI_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2816 */
struct __cppobj testI_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2817 */
struct __cppobj testI_reg_immNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2818 */
struct __cppobj testI_reg_memNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2819 */
struct __cppobj compU_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2820 */
struct __cppobj compU_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2821 */
struct __cppobj compU_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2822 */
struct __cppobj testU_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2823 */
struct __cppobj compP_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2824 */
struct __cppobj compP_eReg_immNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2825 */
struct __cppobj compP_eReg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2826 */
struct __cppobj compP_mem_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2827 */
struct __cppobj testP_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2828 */
struct __cppobj testP_Reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2829 */
struct __cppobj minI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2830 */
struct __cppobj maxI_eRegNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2831 */
struct __cppobj loopLimit_eRegNode : MachNode
{
  MachOper *_opnd_array[6];
};

/* 2832 */
struct __cppobj GrowableArray<Label *> : GenericGrowableArray
{
  Label **_data;
};

/* 2833 */
struct __cppobj __declspec(align(8)) jumpXtndNode : MachConstantNode
{
  MachOper *_opnd_array[2];
  GrowableArray<Label *> _index2label;
};

/* 2834 */
struct __cppobj MachBranchNode : MachIdealNode
{
};

/* 2835 */
struct __cppobj MachGotoNode : MachBranchNode
{
};

/* 2836 */
struct __cppobj jmpDirNode : MachGotoNode
{
  MachOper *_opnd_array[2];
};

/* 2837 */
struct __cppobj MachIfNode : MachBranchNode
{
  float _prob;
  float _fcnt;
};

/* 2838 */
struct __cppobj jmpConNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2839 */
struct __cppobj jmpLoopEndNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2840 */
struct __cppobj jmpLoopEndUNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2841 */
struct __cppobj jmpLoopEndUCFNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2842 */
struct __cppobj jmpConUNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2843 */
struct __cppobj jmpConUCFNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2844 */
struct __cppobj jmpConUCF2Node : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2845 */
struct __cppobj partialSubtypeCheckNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2846 */
struct __cppobj partialSubtypeCheck_vs_ZeroNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2847 */
struct __cppobj jmpDir_shortNode : MachGotoNode
{
  MachOper *_opnd_array[2];
};

/* 2848 */
struct __cppobj jmpCon_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2849 */
struct __cppobj jmpLoopEnd_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2850 */
struct __cppobj jmpLoopEndU_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2851 */
struct __cppobj jmpLoopEndUCF_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2852 */
struct __cppobj jmpConU_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2853 */
struct __cppobj jmpConUCF_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2854 */
struct __cppobj jmpConUCF2_shortNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2855 */
struct __cppobj cmpL3_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2856 */
struct __cppobj cmpL_zero_flags_LTGENode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2857 */
struct __cppobj cmpL_reg_flags_LTGENode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2858 */
struct __cppobj cmpL_LTGENode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2859 */
struct __cppobj cmpUL_zero_flags_LTGENode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2860 */
struct __cppobj cmpUL_reg_flags_LTGENode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2861 */
struct __cppobj cmpUL_LTGENode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2862 */
struct __cppobj cmovLL_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2863 */
struct __cppobj cmovLL_mem_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2864 */
struct __cppobj cmovII_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2865 */
struct __cppobj cmovII_mem_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2866 */
struct __cppobj cmovPP_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2867 */
struct __cppobj cmovDDPR_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2868 */
struct __cppobj cmovDD_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2869 */
struct __cppobj cmovFFPR_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2870 */
struct __cppobj cmovFF_reg_LTGENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2871 */
struct __cppobj cmpL_zero_flags_EQNENode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2872 */
struct __cppobj cmpL_reg_flags_EQNENode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2873 */
struct __cppobj cmpL_EQNENode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2874 */
struct __cppobj cmpUL_zero_flags_EQNENode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2875 */
struct __cppobj cmpUL_reg_flags_EQNENode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2876 */
struct __cppobj cmpUL_EQNENode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2877 */
struct __cppobj cmovLL_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2878 */
struct __cppobj cmovLL_mem_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2879 */
struct __cppobj cmovII_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2880 */
struct __cppobj cmovII_mem_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2881 */
struct __cppobj cmovPP_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2882 */
struct __cppobj cmovDDPR_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2883 */
struct __cppobj cmovDD_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2884 */
struct __cppobj cmovFFPR_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2885 */
struct __cppobj cmovFF_reg_EQNENode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2886 */
struct __cppobj cmpL_zero_flags_LEGTNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2887 */
struct __cppobj cmpL_reg_flags_LEGTNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2888 */
struct __cppobj cmpL_LEGTNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2889 */
struct __cppobj cmpUL_zero_flags_LEGTNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2890 */
struct __cppobj cmpUL_reg_flags_LEGTNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2891 */
struct __cppobj cmpUL_LEGTNode : MachIfNode
{
  MachOper *_opnd_array[4];
};

/* 2892 */
struct __cppobj cmovLL_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2893 */
struct __cppobj cmovLL_mem_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2894 */
struct __cppobj cmovII_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
  const RegMask *_cisc_RegMask;
};

/* 2895 */
struct __cppobj cmovII_mem_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2896 */
struct __cppobj cmovPP_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2897 */
struct __cppobj cmovDDPR_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2898 */
struct __cppobj cmovDD_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2899 */
struct __cppobj cmovFFPR_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2900 */
struct __cppobj cmovFF_reg_LEGTNode : MachNode
{
  MachOper *_opnd_array[5];
};

/* 2901 */
struct __cppobj MachReturnNode : MachNode
{
  RegMask *_in_rms;
  ReallocMark _nesting;
  const TypePtr *_adr_type;
};

/* 2902 */
struct __cppobj MachSafePointNode : MachReturnNode
{
  OopMap *_oop_map;
  JVMState *_jvms;
  unsigned int _jvmadj;
};

/* 2903 */
struct __cppobj MachCallNode : MachSafePointNode
{
  const TypeFunc *_tf;
  unsigned __int8 *_entry_point;
  float _cnt;
  unsigned int _argsize;
};

/* 2904 */
struct __cppobj __declspec(align(4)) MachCallJavaNode : MachCallNode
{
  ciMethod *_method;
  int _bci;
  bool _optimized_virtual;
  bool _method_handle_invoke;
};

/* 2905 */
struct __cppobj MachCallStaticJavaNode : MachCallJavaNode
{
  const char *_name;
};

/* 2906 */
struct __cppobj CallStaticJavaDirectNode : MachCallStaticJavaNode
{
  MachOper *_opnd_array[2];
};

/* 2907 */
struct __cppobj MachCallDynamicJavaNode : MachCallJavaNode
{
  int _vtable_index;
};

/* 2908 */
struct __cppobj CallDynamicJavaDirectNode : MachCallDynamicJavaNode
{
  MachOper *_opnd_array[2];
};

/* 2909 */
struct __cppobj MachCallRuntimeNode : MachCallNode
{
  const char *_name;
};

/* 2910 */
struct __cppobj CallRuntimeDirectNode : MachCallRuntimeNode
{
  MachOper *_opnd_array[2];
};

/* 2911 */
struct __cppobj MachCallLeafNode : MachCallRuntimeNode
{
};

/* 2912 */
struct __cppobj CallLeafDirectNode : MachCallLeafNode
{
  MachOper *_opnd_array[2];
};

/* 2913 */
struct __cppobj CallLeafNoFPDirectNode : MachCallLeafNode
{
  MachOper *_opnd_array[2];
};

/* 2914 */
struct __cppobj RetNode : MachReturnNode
{
  MachOper *_opnd_array[1];
};

/* 2915 */
struct __cppobj TailCalljmpIndNode : MachReturnNode
{
  MachOper *_opnd_array[3];
};

/* 2916 */
struct __cppobj tailjmpIndNode : MachReturnNode
{
  MachOper *_opnd_array[3];
};

/* 2917 */
struct __cppobj CreateExceptionNode : MachTypeNode
{
  MachOper *_opnd_array[1];
};

/* 2918 */
struct __cppobj RethrowExceptionNode : MachReturnNode
{
  MachOper *_opnd_array[1];
};

/* 2919 */
struct __cppobj BiasedLockingCounters : _ValueObj
{
  int _total_entry_count;
  int _biased_lock_entry_count;
  int _anonymously_biased_lock_entry_count;
  int _rebiased_lock_entry_count;
  int _revoked_lock_entry_count;
  int _fast_path_entry_count;
  int _slow_path_entry_count;
};

/* 2920 */
struct __cppobj RTMLockingCounters : _ValueObj
{
  unsigned int _total_count;
  unsigned int _abort_count;
  unsigned int _abortX_count[6];
};

/* 2921 */
struct __cppobj MachFastLockNode : MachNode
{
  BiasedLockingCounters *_counters;
  RTMLockingCounters *_rtm_counters;
  RTMLockingCounters *_stack_rtm_counters;
};

/* 2922 */
struct __cppobj cmpFastLockRTMNode : MachFastLockNode
{
  MachOper *_opnd_array[7];
};

/* 2923 */
struct __cppobj cmpFastLockNode : MachFastLockNode
{
  MachOper *_opnd_array[5];
};

/* 2924 */
struct __cppobj cmpFastUnlockNode : MachNode
{
  MachOper *_opnd_array[4];
};

/* 2925 */
struct __cppobj safePoint_pollNode : MachSafePointNode
{
  MachOper *_opnd_array[2];
};

/* 2926 */
struct __cppobj tlsLoadPNode : MachNode
{
  MachOper *_opnd_array[1];
};

/* 2927 */
struct __cppobj MachHaltNode : MachReturnNode
{
};

/* 2928 */
struct __cppobj ShouldNotReachHereNode : MachHaltNode
{
  MachOper *_opnd_array[1];
};

/* 2929 */
struct __cppobj addF_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2930 */
struct __cppobj addF_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2931 */
struct __cppobj addF_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2932 */
struct __cppobj __declspec(align(8)) addF_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2933 */
struct __cppobj addF_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2934 */
struct __cppobj addF_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2935 */
struct __cppobj addF_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2936 */
struct __cppobj __declspec(align(8)) addF_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2937 */
struct __cppobj addD_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2938 */
struct __cppobj addD_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2939 */
struct __cppobj addD_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2940 */
struct __cppobj __declspec(align(8)) addD_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2941 */
struct __cppobj addD_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2942 */
struct __cppobj addD_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2943 */
struct __cppobj addD_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2944 */
struct __cppobj __declspec(align(8)) addD_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2945 */
struct __cppobj subF_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2946 */
struct __cppobj subF_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2947 */
struct __cppobj __declspec(align(8)) subF_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2948 */
struct __cppobj subF_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2949 */
struct __cppobj subF_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2950 */
struct __cppobj __declspec(align(8)) subF_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2951 */
struct __cppobj subD_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2952 */
struct __cppobj subD_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2953 */
struct __cppobj __declspec(align(8)) subD_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2954 */
struct __cppobj subD_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2955 */
struct __cppobj subD_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2956 */
struct __cppobj __declspec(align(8)) subD_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2957 */
struct __cppobj mulF_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2958 */
struct __cppobj mulF_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2959 */
struct __cppobj mulF_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2960 */
struct __cppobj __declspec(align(8)) mulF_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2961 */
struct __cppobj mulF_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2962 */
struct __cppobj mulF_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2963 */
struct __cppobj mulF_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2964 */
struct __cppobj __declspec(align(8)) mulF_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2965 */
struct __cppobj mulD_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2966 */
struct __cppobj mulD_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2967 */
struct __cppobj mulD_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2968 */
struct __cppobj __declspec(align(8)) mulD_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2969 */
struct __cppobj mulD_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2970 */
struct __cppobj mulD_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2971 */
struct __cppobj mulD_reg_mem_0Node : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2972 */
struct __cppobj __declspec(align(8)) mulD_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2973 */
struct __cppobj divF_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2974 */
struct __cppobj divF_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2975 */
struct __cppobj __declspec(align(8)) divF_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2976 */
struct __cppobj divF_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2977 */
struct __cppobj divF_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2978 */
struct __cppobj __declspec(align(8)) divF_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2979 */
struct __cppobj divD_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2980 */
struct __cppobj divD_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2981 */
struct __cppobj __declspec(align(8)) divD_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2982 */
struct __cppobj divD_reg_regNode : MachNode
{
  MachOper *_opnd_array[3];
  const RegMask *_cisc_RegMask;
};

/* 2983 */
struct __cppobj divD_reg_memNode : MachNode
{
  MachOper *_opnd_array[3];
};

/* 2984 */
struct __cppobj __declspec(align(8)) divD_reg_immNode : MachConstantNode
{
  MachOper *_opnd_array[3];
};

/* 2985 */
struct __cppobj absF_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2986 */
struct __cppobj absF_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2987 */
struct __cppobj absD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2988 */
struct __cppobj absD_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2989 */
struct __cppobj negF_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2990 */
struct __cppobj negF_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2991 */
struct __cppobj negD_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2992 */
struct __cppobj negD_reg_regNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2993 */
struct __cppobj sqrtF_regNode : MachNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 2994 */
struct __cppobj sqrtF_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2995 */
struct __cppobj sqrtF_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2996 */
struct __cppobj sqrtD_regNode : MachNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 2997 */
struct __cppobj sqrtD_memNode : MachNode
{
  MachOper *_opnd_array[2];
};

/* 2998 */
struct __cppobj sqrtD_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 2999 */
struct __cppobj loadV4Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3000 */
struct __cppobj loadV8Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3001 */
struct __cppobj loadV16Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3002 */
struct __cppobj loadV32Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3003 */
struct __cppobj storeV4Node : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3004 */
struct __cppobj storeV8Node : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3005 */
struct __cppobj storeV16Node : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3006 */
struct __cppobj storeV32Node : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3007 */
struct __cppobj Repl4BNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3008 */
struct __cppobj Repl8BNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3009 */
struct __cppobj Repl16BNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3010 */
struct __cppobj Repl32BNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3011 */
struct __cppobj Repl4B_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3012 */
struct __cppobj Repl8B_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3013 */
struct __cppobj Repl16B_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3014 */
struct __cppobj Repl32B_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3015 */
struct __cppobj Repl4B_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3016 */
struct __cppobj Repl8B_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3017 */
struct __cppobj Repl16B_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3018 */
struct __cppobj Repl32B_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3019 */
struct __cppobj Repl2SNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3020 */
struct __cppobj Repl4SNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3021 */
struct __cppobj Repl8SNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3022 */
struct __cppobj Repl16SNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3023 */
struct __cppobj Repl2S_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3024 */
struct __cppobj Repl4S_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3025 */
struct __cppobj Repl8S_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3026 */
struct __cppobj Repl16S_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3027 */
struct __cppobj Repl2S_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3028 */
struct __cppobj Repl4S_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3029 */
struct __cppobj Repl8S_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3030 */
struct __cppobj Repl16S_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3031 */
struct __cppobj Repl2INode : MachTypeNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 3032 */
struct __cppobj Repl4INode : MachTypeNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 3033 */
struct __cppobj Repl8INode : MachTypeNode
{
  MachOper *_opnd_array[2];
  const RegMask *_cisc_RegMask;
};

/* 3034 */
struct __cppobj Repl2I_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3035 */
struct __cppobj Repl4I_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3036 */
struct __cppobj Repl8I_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3037 */
struct __cppobj Repl2I_memNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3038 */
struct __cppobj Repl4I_memNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3039 */
struct __cppobj Repl8I_memNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3040 */
struct __cppobj Repl2I_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3041 */
struct __cppobj Repl4I_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3042 */
struct __cppobj Repl8I_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3043 */
struct __cppobj Repl2LNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 3044 */
struct __cppobj Repl4LNode : MachTypeNode
{
  MachOper *_opnd_array[4];
};

/* 3045 */
struct __cppobj Repl2L_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3046 */
struct __cppobj Repl4L_immNode : MachConstantNode
{
  MachOper *_opnd_array[2];
};

/* 3047 */
struct __cppobj Repl2L_memNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3048 */
struct __cppobj Repl4L_memNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3049 */
struct __cppobj Repl2L_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3050 */
struct __cppobj Repl4L_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3051 */
struct __cppobj Repl2FNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3052 */
struct __cppobj Repl4FNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3053 */
struct __cppobj Repl8FNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3054 */
struct __cppobj Repl2F_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3055 */
struct __cppobj Repl4F_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3056 */
struct __cppobj Repl8F_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3057 */
struct __cppobj Repl2DNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3058 */
struct __cppobj Repl4DNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3059 */
struct __cppobj Repl2D_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3060 */
struct __cppobj Repl4D_zeroNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3061 */
struct __cppobj vadd4BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3062 */
struct __cppobj vadd4B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3063 */
struct __cppobj vadd8BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3064 */
struct __cppobj vadd8B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3065 */
struct __cppobj vadd16BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3066 */
struct __cppobj vadd16B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3067 */
struct __cppobj vadd16B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3068 */
struct __cppobj vadd32B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3069 */
struct __cppobj vadd32B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3070 */
struct __cppobj vadd2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3071 */
struct __cppobj vadd2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3072 */
struct __cppobj vadd4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3073 */
struct __cppobj vadd4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3074 */
struct __cppobj vadd8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3075 */
struct __cppobj vadd8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3076 */
struct __cppobj vadd8S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3077 */
struct __cppobj vadd16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3078 */
struct __cppobj vadd16S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3079 */
struct __cppobj vadd2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3080 */
struct __cppobj vadd2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3081 */
struct __cppobj vadd4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3082 */
struct __cppobj vadd4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3083 */
struct __cppobj vadd4I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3084 */
struct __cppobj vadd8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3085 */
struct __cppobj vadd8I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3086 */
struct __cppobj vadd2LNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3087 */
struct __cppobj vadd2L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3088 */
struct __cppobj vadd2L_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3089 */
struct __cppobj vadd4L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3090 */
struct __cppobj vadd4L_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3091 */
struct __cppobj vadd2FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3092 */
struct __cppobj vadd2F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3093 */
struct __cppobj vadd4FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3094 */
struct __cppobj vadd4F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3095 */
struct __cppobj vadd4F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3096 */
struct __cppobj vadd8F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3097 */
struct __cppobj vadd8F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3098 */
struct __cppobj vadd2DNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3099 */
struct __cppobj vadd2D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3100 */
struct __cppobj vadd2D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3101 */
struct __cppobj vadd4D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3102 */
struct __cppobj vadd4D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3103 */
struct __cppobj vsub4BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3104 */
struct __cppobj vsub4B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3105 */
struct __cppobj vsub8BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3106 */
struct __cppobj vsub8B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3107 */
struct __cppobj vsub16BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3108 */
struct __cppobj vsub16B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3109 */
struct __cppobj vsub16B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3110 */
struct __cppobj vsub32B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3111 */
struct __cppobj vsub32B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3112 */
struct __cppobj vsub2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3113 */
struct __cppobj vsub2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3114 */
struct __cppobj vsub4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3115 */
struct __cppobj vsub4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3116 */
struct __cppobj vsub8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3117 */
struct __cppobj vsub8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3118 */
struct __cppobj vsub8S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3119 */
struct __cppobj vsub16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3120 */
struct __cppobj vsub16S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3121 */
struct __cppobj vsub2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3122 */
struct __cppobj vsub2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3123 */
struct __cppobj vsub4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3124 */
struct __cppobj vsub4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3125 */
struct __cppobj vsub4I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3126 */
struct __cppobj vsub8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3127 */
struct __cppobj vsub8I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3128 */
struct __cppobj vsub2LNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3129 */
struct __cppobj vsub2L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3130 */
struct __cppobj vsub2L_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3131 */
struct __cppobj vsub4L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3132 */
struct __cppobj vsub4L_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3133 */
struct __cppobj vsub2FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3134 */
struct __cppobj vsub2F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3135 */
struct __cppobj vsub4FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3136 */
struct __cppobj vsub4F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3137 */
struct __cppobj vsub4F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3138 */
struct __cppobj vsub8F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3139 */
struct __cppobj vsub8F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3140 */
struct __cppobj vsub2DNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3141 */
struct __cppobj vsub2D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3142 */
struct __cppobj vsub2D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3143 */
struct __cppobj vsub4D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3144 */
struct __cppobj vsub4D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3145 */
struct __cppobj vmul2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3146 */
struct __cppobj vmul2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3147 */
struct __cppobj vmul4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3148 */
struct __cppobj vmul4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3149 */
struct __cppobj vmul8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3150 */
struct __cppobj vmul8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3151 */
struct __cppobj vmul8S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3152 */
struct __cppobj vmul16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3153 */
struct __cppobj vmul16S_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3154 */
struct __cppobj vmul2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3155 */
struct __cppobj vmul2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3156 */
struct __cppobj vmul4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3157 */
struct __cppobj vmul4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3158 */
struct __cppobj vmul4I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3159 */
struct __cppobj vmul8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3160 */
struct __cppobj vmul8I_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3161 */
struct __cppobj vmul2FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3162 */
struct __cppobj vmul2F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3163 */
struct __cppobj vmul4FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3164 */
struct __cppobj vmul4F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3165 */
struct __cppobj vmul4F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3166 */
struct __cppobj vmul8F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3167 */
struct __cppobj vmul8F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3168 */
struct __cppobj vmul2DNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3169 */
struct __cppobj vmul2D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3170 */
struct __cppobj vmul2D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3171 */
struct __cppobj vmul4D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3172 */
struct __cppobj vmul4D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3173 */
struct __cppobj vdiv2FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3174 */
struct __cppobj vdiv2F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3175 */
struct __cppobj vdiv4FNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3176 */
struct __cppobj vdiv4F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3177 */
struct __cppobj vdiv4F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3178 */
struct __cppobj vdiv8F_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3179 */
struct __cppobj vdiv8F_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3180 */
struct __cppobj vdiv2DNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3181 */
struct __cppobj vdiv2D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3182 */
struct __cppobj vdiv2D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3183 */
struct __cppobj vdiv4D_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3184 */
struct __cppobj vdiv4D_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3185 */
struct __cppobj vshiftcntNode : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3186 */
struct __cppobj vshiftcnt_0Node : MachTypeNode
{
  MachOper *_opnd_array[2];
};

/* 3187 */
struct __cppobj vsll2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3188 */
struct __cppobj vsll2S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3189 */
struct __cppobj vsll2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3190 */
struct __cppobj vsll2S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3191 */
struct __cppobj vsll4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3192 */
struct __cppobj vsll4S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3193 */
struct __cppobj vsll4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3194 */
struct __cppobj vsll4S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3195 */
struct __cppobj vsll8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3196 */
struct __cppobj vsll8S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3197 */
struct __cppobj vsll8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3198 */
struct __cppobj vsll8S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3199 */
struct __cppobj vsll16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3200 */
struct __cppobj vsll16S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3201 */
struct __cppobj vsll2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3202 */
struct __cppobj vsll2I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3203 */
struct __cppobj vsll2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3204 */
struct __cppobj vsll2I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3205 */
struct __cppobj vsll4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3206 */
struct __cppobj vsll4I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3207 */
struct __cppobj vsll4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3208 */
struct __cppobj vsll4I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3209 */
struct __cppobj vsll8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3210 */
struct __cppobj vsll8I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3211 */
struct __cppobj vsll2LNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3212 */
struct __cppobj vsll2L_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3213 */
struct __cppobj vsll2L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3214 */
struct __cppobj vsll2L_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3215 */
struct __cppobj vsll4L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3216 */
struct __cppobj vsll4L_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3217 */
struct __cppobj vsrl2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3218 */
struct __cppobj vsrl2S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3219 */
struct __cppobj vsrl2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3220 */
struct __cppobj vsrl2S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3221 */
struct __cppobj vsrl4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3222 */
struct __cppobj vsrl4S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3223 */
struct __cppobj vsrl4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3224 */
struct __cppobj vsrl4S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3225 */
struct __cppobj vsrl8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3226 */
struct __cppobj vsrl8S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3227 */
struct __cppobj vsrl8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3228 */
struct __cppobj vsrl8S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3229 */
struct __cppobj vsrl16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3230 */
struct __cppobj vsrl16S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3231 */
struct __cppobj vsrl2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3232 */
struct __cppobj vsrl2I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3233 */
struct __cppobj vsrl2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3234 */
struct __cppobj vsrl2I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3235 */
struct __cppobj vsrl4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3236 */
struct __cppobj vsrl4I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3237 */
struct __cppobj vsrl4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3238 */
struct __cppobj vsrl4I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3239 */
struct __cppobj vsrl8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3240 */
struct __cppobj vsrl8I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3241 */
struct __cppobj vsrl2LNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3242 */
struct __cppobj vsrl2L_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3243 */
struct __cppobj vsrl2L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3244 */
struct __cppobj vsrl2L_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3245 */
struct __cppobj vsrl4L_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3246 */
struct __cppobj vsrl4L_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3247 */
struct __cppobj vsra2SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3248 */
struct __cppobj vsra2S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3249 */
struct __cppobj vsra2S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3250 */
struct __cppobj vsra2S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3251 */
struct __cppobj vsra4SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3252 */
struct __cppobj vsra4S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3253 */
struct __cppobj vsra4S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3254 */
struct __cppobj vsra4S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3255 */
struct __cppobj vsra8SNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3256 */
struct __cppobj vsra8S_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3257 */
struct __cppobj vsra8S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3258 */
struct __cppobj vsra8S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3259 */
struct __cppobj vsra16S_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3260 */
struct __cppobj vsra16S_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3261 */
struct __cppobj vsra2INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3262 */
struct __cppobj vsra2I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3263 */
struct __cppobj vsra2I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3264 */
struct __cppobj vsra2I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3265 */
struct __cppobj vsra4INode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3266 */
struct __cppobj vsra4I_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3267 */
struct __cppobj vsra4I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3268 */
struct __cppobj vsra4I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3269 */
struct __cppobj vsra8I_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3270 */
struct __cppobj vsra8I_reg_immNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3271 */
struct __cppobj vand4BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3272 */
struct __cppobj vand4B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3273 */
struct __cppobj vand8BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3274 */
struct __cppobj vand8B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3275 */
struct __cppobj vand16BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3276 */
struct __cppobj vand16B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3277 */
struct __cppobj vand16B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3278 */
struct __cppobj vand32B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3279 */
struct __cppobj vand32B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3280 */
struct __cppobj vor4BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3281 */
struct __cppobj vor4B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3282 */
struct __cppobj vor8BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3283 */
struct __cppobj vor8B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3284 */
struct __cppobj vor16BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3285 */
struct __cppobj vor16B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3286 */
struct __cppobj vor16B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3287 */
struct __cppobj vor32B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3288 */
struct __cppobj vor32B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3289 */
struct __cppobj vxor4BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3290 */
struct __cppobj vxor4B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3291 */
struct __cppobj vxor8BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3292 */
struct __cppobj vxor8B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3293 */
struct __cppobj vxor16BNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3294 */
struct __cppobj vxor16B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3295 */
struct __cppobj vxor16B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3296 */
struct __cppobj vxor32B_regNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3297 */
struct __cppobj vxor32B_memNode : MachTypeNode
{
  MachOper *_opnd_array[3];
};

/* 3298 */
struct __cppobj CallStubImpl
{
};

/* 3299 */
struct __cppobj HandlerImpl
{
};

/* 3300 */
struct __cppobj __declspec(align(4)) MemNode : Node
{
  bool _unaligned_access;
  bool _mismatched_access;
};

/* 3301 */
struct /*VFT*/ MemNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 3302 */
struct __cppobj LoadNode : MemNode
{
  bool _depends_only_on_test;
  const MemNode::MemOrd _mo;
  const Type *const _type;
};

/* 3303 */
struct /*VFT*/ LoadNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 3304 */
struct /*VFT*/ LoadVectorNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 3305 */
struct __cppobj LoadVectorNode : LoadNode
{
};

/* 3306 */
struct /*VFT*/ StoreNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 3307 */
struct __cppobj StoreNode : MemNode
{
  const MemNode::MemOrd _mo;
};

/* 3308 */
struct /*VFT*/ StoreVectorNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 3309 */
struct __cppobj StoreVectorNode : StoreNode
{
};

/* 3310 */
struct /*VFT*/ TypeInt_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3311 */
struct __cppobj __declspec(align(4)) TypeInt : Type
{
  const int _lo;
  const int _hi;
  const __int16 _widen;
};

/* 3312 */
struct __cppobj MachNopNode : MachIdealNode
{
  int _count;
};

/* 3313 */
struct /*VFT*/ TypeLong_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3314 */
struct __cppobj __declspec(align(8)) TypeLong : Type
{
  const __int64 _lo;
  const __int64 _hi;
  const __int16 _widen;
};

/* 3315 */
struct /*VFT*/ TypeVect_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3316 */
struct __cppobj TypeVect : Type
{
  const Type *_elem;
  const unsigned int _length;
};

/* 3317 */
struct /*VFT*/ TypeRawPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
};

/* 3318 */
struct __cppobj TypeRawPtr : TypePtr
{
  unsigned __int8 *const _bits;
};

/* 3319 */
struct /*VFT*/ BoxLockNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3320 */
struct __cppobj __declspec(align(8)) BoxLockNode : Node
{
  const int _slot;
  RegMask _inmask;
  bool _is_eliminated;
};

/* 3321 */
struct __cppobj AbstractLockNode : CallNode
{
  AbstractLockNode::<unnamed_type__kind> _kind;
};

/* 3322 */
struct __cppobj LockNode : AbstractLockNode
{
};

/* 3323 */
struct __cppobj SubNode : Node
{
};

/* 3324 */
struct /*VFT*/ SubNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3325 */
struct /*VFT*/ CmpNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3326 */
struct __cppobj CmpNode : SubNode
{
};

/* 3327 */
struct /*VFT*/ FastLockNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3328 */
struct __cppobj FastLockNode : CmpNode
{
  BiasedLockingCounters *_counters;
  RTMLockingCounters *_rtm_counters;
  RTMLockingCounters *_stack_rtm_counters;
};

/* 3329 */
struct /*VFT*/ FastUnlockNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3330 */
struct __cppobj FastUnlockNode : CmpNode
{
};

/* 3331 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 3332 */
struct __cppobj MachTempNode : MachNode
{
  MachOper *_opnd_array[1];
};

/* 3333 */
struct /*VFT*/ SingletonBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 3334 */
struct __cppobj SingletonBlob : CodeBlob
{
};

/* 3335 */
struct /*VFT*/ ExceptionBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 3336 */
struct __cppobj ExceptionBlob : SingletonBlob
{
};

/* 3337 */
struct __cppobj AbstractRegisterImpl
{
};

/* 3338 */
struct __cppobj RegisterImpl : AbstractRegisterImpl
{
};

/* 3339 */
struct /*VFT*/ RuntimeStub_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 3340 */
struct __cppobj __declspec(align(4)) RuntimeStub : CodeBlob
{
  bool _caller_must_gc_arguments;
};

/* 3341 */
struct /*VFT*/ DeoptimizationBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 3342 */
struct __cppobj DeoptimizationBlob : SingletonBlob
{
  int _unpack_offset;
  int _unpack_with_exception;
  int _unpack_with_reexecution;
  int _unpack_with_exception_in_tls;
};

/* 3343 */
struct __cppobj XMMRegisterImpl : AbstractRegisterImpl
{
};

/* 3344 */
struct VM_Version::StdCpuid1Eax::<unnamed_type_bits>
{
  unsigned __int32 stepping : 4;
  unsigned __int32 model : 4;
  unsigned __int32 family : 4;
  unsigned __int32 proc_type : 2;
  unsigned __int32 : 2;
  unsigned __int32 ext_model : 4;
  unsigned __int32 ext_family : 8;
};

/* 3345 */
union VM_Version::StdCpuid1Eax
{
  unsigned int value;
  VM_Version::StdCpuid1Eax::<unnamed_type_bits> bits;
};

/* 3346 */
struct VM_Version::StdCpuid1Ebx::<unnamed_type_bits>
{
  unsigned __int32 brand_id : 8;
  unsigned __int32 clflush_size : 8;
  unsigned __int32 threads_per_cpu : 8;
  unsigned __int32 apic_id : 8;
};

/* 3347 */
union VM_Version::StdCpuid1Ebx
{
  unsigned int value;
  VM_Version::StdCpuid1Ebx::<unnamed_type_bits> bits;
};

/* 3348 */
struct VM_Version::StdCpuid1Ecx::<unnamed_type_bits>
{
  unsigned __int32 sse3 : 1;
  unsigned __int32 clmul : 1;
  unsigned __int32 : 1;
  unsigned __int32 monitor : 1;
  unsigned __int32 : 1;
  unsigned __int32 vmx : 1;
  unsigned __int32 : 1;
  unsigned __int32 est : 1;
  unsigned __int32 : 1;
  unsigned __int32 ssse3 : 1;
  unsigned __int32 cid : 1;
  unsigned __int32 : 2;
  unsigned __int32 cmpxchg16 : 1;
  unsigned __int32 : 4;
  unsigned __int32 dca : 1;
  unsigned __int32 sse4_1 : 1;
  unsigned __int32 sse4_2 : 1;
  unsigned __int32 : 2;
  unsigned __int32 popcnt : 1;
  unsigned __int32 : 1;
  unsigned __int32 aes : 1;
  unsigned __int32 : 1;
  unsigned __int32 osxsave : 1;
  unsigned __int32 avx : 1;
};

/* 3349 */
union VM_Version::StdCpuid1Ecx
{
  unsigned int value;
  VM_Version::StdCpuid1Ecx::<unnamed_type_bits> bits;
};

/* 3350 */
struct VM_Version::StdCpuid1Edx::<unnamed_type_bits>
{
  unsigned __int32 : 4;
  unsigned __int32 tsc : 1;
  unsigned __int32 : 3;
  unsigned __int32 cmpxchg8 : 1;
  unsigned __int32 : 6;
  unsigned __int32 cmov : 1;
  unsigned __int32 : 3;
  unsigned __int32 clflush : 1;
  unsigned __int32 : 3;
  unsigned __int32 mmx : 1;
  unsigned __int32 fxsr : 1;
  unsigned __int32 sse : 1;
  unsigned __int32 sse2 : 1;
  unsigned __int32 : 1;
  unsigned __int32 ht : 1;
};

/* 3351 */
union VM_Version::StdCpuid1Edx
{
  unsigned int value;
  VM_Version::StdCpuid1Edx::<unnamed_type_bits> bits;
};

/* 3352 */
struct VM_Version::DcpCpuid4Eax::<unnamed_type_bits>
{
  unsigned __int32 cache_type : 5;
  unsigned __int32 : 21;
  unsigned __int32 cores_per_cpu : 6;
};

/* 3353 */
union VM_Version::DcpCpuid4Eax
{
  unsigned int value;
  VM_Version::DcpCpuid4Eax::<unnamed_type_bits> bits;
};

/* 3354 */
struct VM_Version::DcpCpuid4Ebx::<unnamed_type_bits>
{
  unsigned __int32 L1_line_size : 12;
  unsigned __int32 partitions : 10;
  unsigned __int32 associativity : 10;
};

/* 3355 */
union VM_Version::DcpCpuid4Ebx
{
  unsigned int value;
  VM_Version::DcpCpuid4Ebx::<unnamed_type_bits> bits;
};

/* 3356 */
union VM_Version::SefCpuid7Eax
{
  unsigned int value;
};

/* 3357 */
struct VM_Version::SefCpuid7Ebx::<unnamed_type_bits>
{
  unsigned __int32 fsgsbase : 1;
  unsigned __int32 : 2;
  unsigned __int32 bmi1 : 1;
  unsigned __int32 : 1;
  unsigned __int32 avx2 : 1;
  unsigned __int32 : 2;
  unsigned __int32 bmi2 : 1;
  unsigned __int32 erms : 1;
  unsigned __int32 : 1;
  unsigned __int32 rtm : 1;
  unsigned __int32 : 7;
  unsigned __int32 adx : 1;
};

/* 3358 */
union VM_Version::SefCpuid7Ebx
{
  unsigned int value;
  VM_Version::SefCpuid7Ebx::<unnamed_type_bits> bits;
};

/* 3359 */
struct VM_Version::TplCpuidBEbx::<unnamed_type_bits>
{
  unsigned __int32 logical_cpus : 16;
};

/* 3360 */
union VM_Version::TplCpuidBEbx
{
  unsigned int value;
  VM_Version::TplCpuidBEbx::<unnamed_type_bits> bits;
};

/* 3361 */
struct VM_Version::ExtCpuid1Ecx::<unnamed_type_bits>
{
  unsigned __int32 LahfSahf : 1;
  unsigned __int32 CmpLegacy : 1;
  unsigned __int32 : 3;
  unsigned __int32 lzcnt_intel : 1;
  unsigned __int32 lzcnt : 1;
  unsigned __int32 sse4a : 1;
  unsigned __int32 misalignsse : 1;
  unsigned __int32 prefetchw : 1;
};

/* 3362 */
union VM_Version::ExtCpuid1Ecx
{
  unsigned int value;
  VM_Version::ExtCpuid1Ecx::<unnamed_type_bits> bits;
};

/* 3363 */
struct VM_Version::ExtCpuid1Edx::<unnamed_type_bits>
{
  unsigned __int32 : 22;
  unsigned __int32 mmx_amd : 1;
  unsigned __int32 mmx : 1;
  unsigned __int32 fxsr : 1;
  unsigned __int32 : 4;
  unsigned __int32 long_mode : 1;
  unsigned __int32 tdnow2 : 1;
  unsigned __int32 tdnow : 1;
};

/* 3364 */
union VM_Version::ExtCpuid1Edx
{
  unsigned int value;
  VM_Version::ExtCpuid1Edx::<unnamed_type_bits> bits;
};

/* 3365 */
struct VM_Version::ExtCpuid5Ex::<unnamed_type_bits>
{
  unsigned __int32 L1_line_size : 8;
  unsigned __int32 L1_tag_lines : 8;
  unsigned __int32 L1_assoc : 8;
  unsigned __int32 L1_size : 8;
};

/* 3366 */
union VM_Version::ExtCpuid5Ex
{
  unsigned int value;
  VM_Version::ExtCpuid5Ex::<unnamed_type_bits> bits;
};

/* 3367 */
struct VM_Version::ExtCpuid7Edx::<unnamed_type_bits>
{
  unsigned __int32 : 8;
  unsigned __int32 tsc_invariance : 1;
};

/* 3368 */
union VM_Version::ExtCpuid7Edx
{
  unsigned int value;
  VM_Version::ExtCpuid7Edx::<unnamed_type_bits> bits;
};

/* 3369 */
struct VM_Version::ExtCpuid8Ecx::<unnamed_type_bits>
{
  unsigned __int32 cores_per_cpu : 8;
};

/* 3370 */
union VM_Version::ExtCpuid8Ecx
{
  unsigned int value;
  VM_Version::ExtCpuid8Ecx::<unnamed_type_bits> bits;
};

/* 3371 */
struct VM_Version::XemXcr0Eax::<unnamed_type_bits>
{
  unsigned __int32 x87 : 1;
  unsigned __int32 sse : 1;
  unsigned __int32 ymm : 1;
};

/* 3372 */
union VM_Version::XemXcr0Eax
{
  unsigned int value;
  VM_Version::XemXcr0Eax::<unnamed_type_bits> bits;
};

/* 3373 */
struct VM_Version::CpuidInfo
{
  unsigned int std_max_function;
  unsigned int std_vendor_name_0;
  unsigned int std_vendor_name_1;
  unsigned int std_vendor_name_2;
  VM_Version::StdCpuid1Eax std_cpuid1_eax;
  VM_Version::StdCpuid1Ebx std_cpuid1_ebx;
  VM_Version::StdCpuid1Ecx std_cpuid1_ecx;
  VM_Version::StdCpuid1Edx std_cpuid1_edx;
  VM_Version::DcpCpuid4Eax dcp_cpuid4_eax;
  VM_Version::DcpCpuid4Ebx dcp_cpuid4_ebx;
  unsigned int dcp_cpuid4_ecx;
  unsigned int dcp_cpuid4_edx;
  VM_Version::SefCpuid7Eax sef_cpuid7_eax;
  VM_Version::SefCpuid7Ebx sef_cpuid7_ebx;
  unsigned int sef_cpuid7_ecx;
  unsigned int sef_cpuid7_edx;
  unsigned int tpl_cpuidB0_eax;
  VM_Version::TplCpuidBEbx tpl_cpuidB0_ebx;
  unsigned int tpl_cpuidB0_ecx;
  unsigned int tpl_cpuidB0_edx;
  unsigned int tpl_cpuidB1_eax;
  VM_Version::TplCpuidBEbx tpl_cpuidB1_ebx;
  unsigned int tpl_cpuidB1_ecx;
  unsigned int tpl_cpuidB1_edx;
  unsigned int tpl_cpuidB2_eax;
  VM_Version::TplCpuidBEbx tpl_cpuidB2_ebx;
  unsigned int tpl_cpuidB2_ecx;
  unsigned int tpl_cpuidB2_edx;
  unsigned int ext_max_function;
  unsigned int ext_vendor_name_0;
  unsigned int ext_vendor_name_1;
  unsigned int ext_vendor_name_2;
  unsigned int ext_cpuid1_eax;
  unsigned int ext_cpuid1_ebx;
  VM_Version::ExtCpuid1Ecx ext_cpuid1_ecx;
  VM_Version::ExtCpuid1Edx ext_cpuid1_edx;
  unsigned int proc_name_0;
  unsigned int proc_name_1;
  unsigned int proc_name_2;
  unsigned int proc_name_3;
  unsigned int proc_name_4;
  unsigned int proc_name_5;
  unsigned int proc_name_6;
  unsigned int proc_name_7;
  unsigned int proc_name_8;
  unsigned int proc_name_9;
  unsigned int proc_name_10;
  unsigned int proc_name_11;
  unsigned int ext_cpuid5_eax;
  unsigned int ext_cpuid5_ebx;
  VM_Version::ExtCpuid5Ex ext_cpuid5_ecx;
  VM_Version::ExtCpuid5Ex ext_cpuid5_edx;
  unsigned int ext_cpuid7_eax;
  unsigned int ext_cpuid7_ebx;
  unsigned int ext_cpuid7_ecx;
  VM_Version::ExtCpuid7Edx ext_cpuid7_edx;
  unsigned int ext_cpuid8_eax;
  unsigned int ext_cpuid8_ebx;
  VM_Version::ExtCpuid8Ecx ext_cpuid8_ecx;
  unsigned int ext_cpuid8_edx;
  VM_Version::XemXcr0Eax xem_xcr0_eax;
  unsigned int xem_xcr0_edx;
  int ymm_save[32];
};

/* 3374 */
struct __cppobj __declspec(align(4)) CompiledICHolder : CHeapObj<6>
{
  Metadata *_holder_metadata;
  Klass *_holder_klass;
  CompiledICHolder *_next;
  bool _is_metadata_method;
};

/* 3375 */
struct __cppobj CompiledICInfo : StackObj
{
  unsigned __int8 *_entry;
  void *_cached_value;
  bool _is_icholder;
  bool _is_optimized;
  bool _to_interpreter;
  bool _release_icholder;
};

/* 3376 */
struct __cppobj NativeInstruction : _ValueObj
{
};

/* 3377 */
struct __cppobj NativeCall : NativeInstruction
{
};

/* 3378 */
struct __cppobj NativeMovConstReg : NativeInstruction
{
};

/* 3379 */
struct __cppobj __declspec(align(4)) CompiledIC : ResourceObj
{
  NativeCall *_ic_call;
  NativeMovConstReg *_value;
  bool _is_optimized;
};

/* 3380 */
struct __cppobj RelocationHolder : _ValueObj
{
  void *_relocbuf[5];
};

/* 3381 */
struct __cppobj RelocIterator : StackObj
{
  unsigned __int8 *_limit;
  relocInfo *_current;
  relocInfo *_end;
  nmethod *_code;
  unsigned __int8 *_addr;
  __int16 _databuf;
  __int16 *_data;
  __int16 _datalen;
  char _format;
  unsigned __int8 *_section_start[3];
  unsigned __int8 *_section_end[3];
  RelocationHolder _rh;
};

/* 3382 */
struct __cppobj Stub : _ValueObj
{
};

/* 3383 */
struct __cppobj ICStub : Stub
{
  int _size;
  unsigned __int8 *_ic_site;
};

/* 3384 */
struct __cppobj Relocation : _ValueObj
{
  Relocation_vtbl *__vftable /*VFT*/;
  RelocIterator *_binding;
};

/* 3385 */
struct /*VFT*/ Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 3386 */
struct /*VFT*/ CallRelocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 3387 */
struct __cppobj CallRelocation : Relocation
{
};

/* 3388 */
struct /*VFT*/ virtual_call_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 3389 */
struct __cppobj virtual_call_Relocation : CallRelocation
{
  unsigned __int8 *_cached_value;
};

/* 3390 */
struct __cppobj CallInfo : _ValueObj
{
  KlassHandle _resolved_klass;
  KlassHandle _selected_klass;
  methodHandle _resolved_method;
  methodHandle _selected_method;
  CallInfo::CallKind _call_kind;
  int _call_index;
  Handle _resolved_appendix;
  Handle _resolved_method_type;
};

/* 3391 */
struct __cppobj __declspec(align(4)) StaticCallInfo
{
  unsigned __int8 *_entry;
  methodHandle _callee;
  bool _to_interpreter;
};

/* 3392 */
struct __cppobj CompiledStaticCall : NativeCall
{
};

/* 3393 */
struct /*VFT*/ static_stub_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 3394 */
struct __cppobj static_stub_Relocation : Relocation
{
  unsigned __int8 *_static_call;
};

/* 3395 */
struct __cppobj RegisterOrConstant : _ValueObj
{
  RegisterImpl *_r;
  int _c;
};

/* 3396 */
struct __cppobj AbstractAssembler : ResourceObj
{
  AbstractAssembler_vtbl *__vftable /*VFT*/;
  CodeSection *_code_section;
  OopRecorder *_oop_recorder;
};

/* 3397 */
struct /*VFT*/ AbstractAssembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
};

/* 3398 */
struct /*VFT*/ Assembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
};

/* 3399 */
struct __cppobj Assembler : AbstractAssembler
{
};

/* 3400 */
struct __cppobj MacroAssembler : Assembler
{
};

/* 3401 */
struct /*VFT*/ MacroAssembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
  void (__thiscall *call_VM_leaf_base)(MacroAssembler *this, unsigned __int8 *, int);
  void (__thiscall *call_VM_base)(MacroAssembler *this, RegisterImpl *, RegisterImpl *, RegisterImpl *, unsigned __int8 *, int, bool);
  void (__thiscall *check_and_handle_popframe)(MacroAssembler *this, RegisterImpl *);
  void (__thiscall *check_and_handle_earlyret)(MacroAssembler *this, RegisterImpl *);
};

/* 3402 */
struct __cppobj ShenandoahBarrierSetAssembler : CHeapObj<5>
{
  ShenandoahBarrierSetAssembler_vtbl *__vftable /*VFT*/;
};

/* 3403 */
struct __cppobj Address : _ValueObj
{
  RegisterImpl *_base;
  RegisterImpl *_index;
  Address::ScaleFactor _scale;
  int _disp;
  RelocationHolder _rspec;
};

/* 3404 */
struct /*VFT*/ ShenandoahBarrierSetAssembler_vtbl
{
  void (__thiscall *arraycopy_prologue)(ShenandoahBarrierSetAssembler *this, MacroAssembler *, bool, RegisterImpl *, RegisterImpl *, RegisterImpl *);
  void (__thiscall *cmpxchg_oop)(ShenandoahBarrierSetAssembler *this, MacroAssembler *, RegisterImpl *, Address, RegisterImpl *, RegisterImpl *, bool, RegisterImpl *, RegisterImpl *);
};

/* 3405 */
struct __cppobj CompilationResourceObj
{
};

/* 3406 */
struct /*VFT*/ C1_MacroAssembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
  void (__thiscall *call_VM_leaf_base)(MacroAssembler *this, unsigned __int8 *, int);
  void (__thiscall *call_VM_base)(MacroAssembler *this, RegisterImpl *, RegisterImpl *, RegisterImpl *, unsigned __int8 *, int, bool);
  void (__thiscall *check_and_handle_popframe)(MacroAssembler *this, RegisterImpl *);
  void (__thiscall *check_and_handle_earlyret)(MacroAssembler *this, RegisterImpl *);
};

/* 3407 */
struct __cppobj C1_MacroAssembler : MacroAssembler
{
  int _rsp_offset;
};

/* 3408 */
struct __cppobj ResourceArray : ResourceObj
{
  int _length;
  void *_data;
};

/* 3409 */
struct __cppobj CodeStubArray : ResourceArray
{
};

/* 3410 */
struct __cppobj _CodeStubList : CodeStubArray
{
  int _size;
};

/* 3411 */
struct __cppobj CodeStubList : _CodeStubList
{
};

/* 3412 */
struct __cppobj Compilation : StackObj
{
  Arena *_arena;
  int _next_id;
  int _next_block_id;
  AbstractCompiler *_compiler;
  ciEnv *_env;
  CompileLog *_log;
  ciMethod *_method;
  int _osr_bci;
  IR *_hir;
  int _max_spills;
  FrameMap *_frame_map;
  C1_MacroAssembler *_masm;
  bool _has_exception_handlers;
  bool _has_fpu_code;
  bool _has_unsafe_access;
  bool _would_profile;
  bool _has_method_handle_invokes;
  const char *_bailout_msg;
  ExceptionInfoList *_exception_info_list;
  ExceptionHandlerTable _exception_handler_table;
  ImplicitExceptionTable _implicit_exception_table;
  LinearScan *_allocator;
  CodeOffsets _offsets;
  CodeBuffer _code;
  bool _has_access_indexed;
  int _interpreter_frame_size;
  Instruction *_current_instruction;
};

/* 3414 */
struct __cppobj IRScopeArray : ResourceArray
{
};

/* 3415 */
struct __cppobj IRScopeList : IRScopeArray
{
  int _size;
};

/* 3413 */
struct __cppobj IRScope : CompilationResourceObj
{
  Compilation *_compilation;
  IRScope *_caller;
  int _level;
  ciMethod *_method;
  IRScopeList _callees;
  XHandlers *_xhandlers;
  int _number_of_locks;
  bool _monitor_pairing_ok;
  bool _wrote_final;
  BlockBegin *_start;
  BitMap _requires_phi_function;
};

/* 3416 */
struct __cppobj _XHandlerArray : ResourceArray
{
};

/* 3417 */
struct __cppobj _XHandlerList : _XHandlerArray
{
  int _size;
};

/* 3418 */
struct __cppobj XHandlers : CompilationResourceObj
{
  _XHandlerList _list;
};

/* 3419 */
struct __cppobj Instruction : CompilationResourceObj
{
  Instruction_vtbl *__vftable /*VFT*/;
  int _id;
  int _use_count;
  int _pin_state;
  ValueType *_type;
  Instruction *_next;
  Instruction *_subst;
  LIR_OprDesc *_operand;
  unsigned int _flags;
  ValueStack *_state_before;
  ValueStack *_exception_state;
  XHandlers *_exception_handlers;
  BlockBegin *_block;
};

/* 3420 */
struct __cppobj __unaligned __declspec(align(4)) Phi : Instruction
{
  int _pf_flags;
  int _index;
};

/* 3421 */
struct __cppobj __unaligned __declspec(align(4)) Local : Instruction
{
  int _java_index;
  ciType *_declared_type;
};

/* 3422 */
struct __cppobj __unaligned __declspec(align(4)) Constant : Instruction
{
};

/* 3423 */
struct __cppobj NullCheck : Instruction
{
  Instruction *_obj;
};

/* 3424 */
struct __cppobj __unaligned __declspec(align(4)) AccessField : Instruction
{
  Instruction *_obj;
  int _offset;
  ciField *_field;
  NullCheck *_explicit_null_check;
};

/* 3425 */
struct __cppobj __unaligned __declspec(align(4)) LoadField : AccessField
{
};

/* 3426 */
struct __cppobj StoreField : AccessField
{
  Instruction *_value;
};

/* 3427 */
struct __cppobj AccessArray : Instruction
{
  Instruction *_array;
};

/* 3428 */
struct __cppobj __unaligned __declspec(align(4)) ArrayLength : AccessArray
{
  NullCheck *_explicit_null_check;
};

/* 3429 */
struct __cppobj __unaligned __declspec(align(4)) AccessIndexed : AccessArray
{
  Instruction *_index;
  Instruction *_length;
  BasicType _elt_type;
};

/* 3430 */
struct __cppobj LoadIndexed : AccessIndexed
{
  NullCheck *_explicit_null_check;
};

/* 3431 */
struct __cppobj __unaligned __declspec(align(4)) StoreIndexed : AccessIndexed
{
  Instruction *_value;
  ciMethod *_profiled_method;
  int _profiled_bci;
  bool _check_boolean;
};

/* 3432 */
struct __cppobj NegateOp : Instruction
{
  Instruction *_x;
};

/* 3433 */
struct __cppobj Op2 : Instruction
{
  Bytecodes::Code _op;
  Instruction *_x;
  Instruction *_y;
};

/* 3434 */
struct __cppobj ArithmeticOp : Op2
{
};

/* 3435 */
struct __cppobj ShiftOp : Op2
{
};

/* 3436 */
struct __cppobj LogicOp : Op2
{
};

/* 3437 */
struct __cppobj CompareOp : Op2
{
};

/* 3438 */
struct __cppobj IfOp : Op2
{
  Instruction *_tval;
  Instruction *_fval;
};

/* 3439 */
struct __cppobj __unaligned __declspec(align(4)) Convert : Instruction
{
  Bytecodes::Code _op;
  Instruction *_value;
};

/* 3440 */
struct __cppobj __unaligned __declspec(align(4)) OsrEntry : Instruction
{
};

/* 3441 */
struct __cppobj StateSplit : Instruction
{
  ValueStack *_state;
};

/* 3442 */
struct __cppobj ValueArray : ResourceArray
{
};

/* 3443 */
struct __cppobj Values : ValueArray
{
  int _size;
};

/* 3444 */
struct __cppobj BasicTypeArray : ResourceArray
{
};

/* 3445 */
struct __cppobj BasicTypeList : BasicTypeArray
{
  int _size;
};

/* 3446 */
struct __cppobj Invoke : StateSplit
{
  Bytecodes::Code _code;
  Instruction *_recv;
  Values *_args;
  BasicTypeList *_signature;
  int _vtable_index;
  ciMethod *_target;
};

/* 3447 */
struct __cppobj __declspec(align(4)) NewInstance : StateSplit
{
  ciInstanceKlass *_klass;
  bool _is_unresolved;
};

/* 3448 */
struct __cppobj __unaligned __declspec(align(4)) NewArray : StateSplit
{
  Instruction *_length;
};

/* 3449 */
struct __cppobj NewTypeArray : NewArray
{
  BasicType _elt_type;
};

/* 3450 */
struct __cppobj NewObjectArray : NewArray
{
  ciKlass *_klass;
};

/* 3451 */
struct __cppobj __unaligned __declspec(align(4)) NewMultiArray : NewArray
{
  ciKlass *_klass;
  Values *_dims;
};

/* 3452 */
struct __cppobj TypeCheck : StateSplit
{
  ciKlass *_klass;
  Instruction *_obj;
  ciMethod *_profiled_method;
  int _profiled_bci;
};

/* 3453 */
struct __cppobj CheckCast : TypeCheck
{
};

/* 3454 */
struct __cppobj InstanceOf : TypeCheck
{
};

/* 3455 */
struct __cppobj __unaligned __declspec(align(4)) TypeCast : Instruction
{
  ciType *_declared_type;
  Instruction *_obj;
};

/* 3456 */
struct __cppobj AccessMonitor : StateSplit
{
  Instruction *_obj;
  int _monitor_no;
};

/* 3457 */
struct __cppobj MonitorEnter : AccessMonitor
{
};

/* 3458 */
struct __cppobj MonitorExit : AccessMonitor
{
};

/* 3459 */
struct __cppobj Instruction::ArgsNonNullState
{
  int _nonnull_state;
};

/* 3460 */
struct __cppobj Intrinsic : StateSplit
{
  vmIntrinsics::ID _id;
  Values *_args;
  Instruction *_recv;
  Instruction::ArgsNonNullState _nonnull_state;
};

/* 3462 */
struct __cppobj BlockBeginArray : ResourceArray
{
};

/* 3463 */
struct __cppobj _BlockList : BlockBeginArray
{
  int _size;
};

/* 3464 */
struct __cppobj BlockList : _BlockList
{
};

/* 3461 */
struct __cppobj BlockBegin : StateSplit
{
  int _block_id;
  int _bci;
  int _depth_first_number;
  int _linear_scan_number;
  int _dominator_depth;
  int _loop_depth;
  int _loop_index;
  int _flags;
  int _total_preds;
  BitMap _stores_to_locals;
  BlockList _successors;
  BlockList _predecessors;
  BlockList _dominates;
  BlockBegin *_dominator;
  BlockEnd *_end;
  BlockList _exception_handlers;
  ValueStackStack *_exception_states;
  int _exception_handler_pco;
  Label _label;
  LIR_List *_lir;
  BitMap _live_in;
  BitMap _live_out;
  BitMap _live_gen;
  BitMap _live_kill;
  BitMap _fpu_register_usage;
  intArray *_fpu_stack_state;
  int _first_lir_instruction_id;
  int _last_lir_instruction_id;
};

/* 3465 */
struct __cppobj __unaligned __declspec(align(4)) BlockEnd : StateSplit
{
  BlockList *_sux;
};

/* 3466 */
struct __cppobj Goto : BlockEnd
{
  ciMethod *_profiled_method;
  int _profiled_bci;
  Goto::Direction _direction;
};

/* 3467 */
struct __cppobj __unaligned __declspec(align(4)) If : BlockEnd
{
  Instruction *_x;
  Instruction::Condition _cond;
  Instruction *_y;
  ciMethod *_profiled_method;
  int _profiled_bci;
  bool _swapped;
};

/* 3468 */
struct __cppobj __unaligned __declspec(align(4)) IfInstanceOf : BlockEnd
{
  ciKlass *_klass;
  Instruction *_obj;
  bool _test_is_instance;
  __declspec(align(4)) int _instanceof_bci;
};

/* 3469 */
struct __cppobj Switch : BlockEnd
{
  Instruction *_tag;
};

/* 3470 */
struct __cppobj __unaligned __declspec(align(4)) TableSwitch : Switch
{
  int _lo_key;
};

/* 3471 */
struct __cppobj intArray : ResourceArray
{
};

/* 3472 */
struct __cppobj __unaligned __declspec(align(4)) LookupSwitch : Switch
{
  intArray *_keys;
};

/* 3473 */
struct __cppobj Return : BlockEnd
{
  Instruction *_result;
};

/* 3474 */
struct __cppobj Throw : BlockEnd
{
  Instruction *_exception;
};

/* 3475 */
struct __cppobj __unaligned __declspec(align(4)) Base : BlockEnd
{
};

/* 3476 */
struct __cppobj RoundFP : Instruction
{
  Instruction *_input;
};

/* 3477 */
struct __cppobj __unaligned __declspec(align(4)) ExceptionObject : Instruction
{
};

/* 3478 */
struct __cppobj UnsafeOp : Instruction
{
  BasicType _basic_type;
};

/* 3479 */
struct __cppobj ValueStack : CompilationResourceObj
{
  IRScope *_scope;
  ValueStack *_caller_state;
  int _bci;
  ValueStack::Kind _kind;
  Values _locals;
  Values _stack;
  Values _locks;
};

/* 3480 */
struct __cppobj __unaligned __declspec(align(4)) ProfileInvoke : Instruction
{
  ciMethod *_inlinee;
  ValueStack *_state;
};

/* 3481 */
struct __cppobj __unaligned __declspec(align(4)) RangeCheckPredicate : StateSplit
{
  Instruction *_x;
  Instruction::Condition _cond;
  Instruction *_y;
};

/* 3482 */
struct __cppobj InstructionVisitor : StackObj
{
  InstructionVisitor_vtbl *__vftable /*VFT*/;
};

/* 3483 */
struct __cppobj __unaligned __declspec(align(4)) UnsafeRawOp : UnsafeOp
{
  Instruction *_base;
  Instruction *_index;
  int _log2_scale;
};

/* 3484 */
struct __cppobj __declspec(align(4)) UnsafeGetRaw : UnsafeRawOp
{
  bool _may_be_unaligned;
  bool _is_wide;
};

/* 3485 */
struct __cppobj UnsafePutRaw : UnsafeRawOp
{
  Instruction *_value;
};

/* 3486 */
struct __cppobj __unaligned __declspec(align(4)) UnsafeObjectOp : UnsafeOp
{
  Instruction *_object;
  Instruction *_offset;
  bool _is_volatile;
};

/* 3487 */
struct __cppobj __unaligned __declspec(align(4)) UnsafeGetObject : UnsafeObjectOp
{
};

/* 3488 */
struct __cppobj UnsafePutObject : UnsafeObjectOp
{
  Instruction *_value;
};

/* 3489 */
struct __cppobj __unaligned __declspec(align(4)) UnsafeGetAndSetObject : UnsafeObjectOp
{
  Instruction *_value;
  bool _is_add;
};

/* 3490 */
struct __cppobj __unaligned __declspec(align(4)) UnsafePrefetch : UnsafeObjectOp
{
};

/* 3491 */
struct __cppobj __unaligned __declspec(align(4)) UnsafePrefetchRead : UnsafePrefetch
{
};

/* 3492 */
struct __cppobj __unaligned __declspec(align(4)) UnsafePrefetchWrite : UnsafePrefetch
{
};

/* 3493 */
struct __cppobj __unaligned __declspec(align(4)) ProfileCall : Instruction
{
  ciMethod *_method;
  int _bci_of_invoke;
  ciMethod *_callee;
  Instruction *_recv;
  ciKlass *_known_holder;
  Values *_obj_args;
  Instruction::ArgsNonNullState _nonnull_state;
  bool _inlined;
};

/* 3494 */
struct __cppobj __unaligned __declspec(align(4)) ProfileReturnType : Instruction
{
  ciMethod *_method;
  ciMethod *_callee;
  int _bci_of_invoke;
  Instruction *_ret;
};

/* 3495 */
struct __cppobj __unaligned __declspec(align(4)) RuntimeCall : Instruction
{
  const char *_entry_name;
  unsigned __int8 *_entry;
  Values *_args;
  bool _pass_thread;
};

/* 3496 */
struct __cppobj MemBar : Instruction
{
  LIR_Code _code;
};

/* 3497 */
struct /*VFT*/ InstructionVisitor_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
};

/* 3498 */
struct __cppobj ValueVisitor : StackObj
{
  ValueVisitor_vtbl *__vftable /*VFT*/;
};

/* 3499 */
struct /*VFT*/ ValueVisitor_vtbl
{
  void (__thiscall *visit)(ValueVisitor *this, Instruction **);
};

/* 3500 */
struct /*VFT*/ Instruction_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
};

/* 3501 */
struct __cppobj ValueType : CompilationResourceObj
{
  ValueType_vtbl *__vftable /*VFT*/;
  const int _size;
  const ValueTag _tag;
};

/* 3502 */
struct __cppobj __unaligned __declspec(align(4)) VoidType : ValueType
{
};

/* 3503 */
struct __cppobj __unaligned __declspec(align(4)) IntType : ValueType
{
};

/* 3504 */
struct __cppobj __unaligned __declspec(align(4)) LongType : ValueType
{
};

/* 3505 */
struct __cppobj __unaligned __declspec(align(4)) FloatType : ValueType
{
};

/* 3506 */
struct __cppobj __unaligned __declspec(align(4)) DoubleType : ValueType
{
};

/* 3507 */
struct __cppobj __unaligned __declspec(align(4)) ObjectType : ValueType
{
};

/* 3508 */
struct __cppobj __unaligned __declspec(align(4)) ArrayType : ObjectType
{
};

/* 3509 */
struct __cppobj __unaligned __declspec(align(4)) InstanceType : ObjectType
{
};

/* 3510 */
struct __cppobj __unaligned __declspec(align(4)) MetadataType : ValueType
{
};

/* 3511 */
struct __cppobj __unaligned __declspec(align(4)) ClassType : MetadataType
{
};

/* 3512 */
struct __cppobj __unaligned __declspec(align(4)) MethodType : MetadataType
{
};

/* 3513 */
struct __cppobj __unaligned __declspec(align(4)) MethodDataType : MetadataType
{
};

/* 3514 */
struct __cppobj __unaligned __declspec(align(4)) AddressType : ValueType
{
};

/* 3515 */
struct __cppobj __unaligned __declspec(align(4)) IllegalType : ValueType
{
};

/* 3516 */
struct __cppobj IntConstant : IntType
{
  int _value;
};

/* 3517 */
struct __cppobj LongConstant : LongType
{
  __int64 _value;
};

/* 3518 */
struct __cppobj FloatConstant : FloatType
{
  float _value;
};

/* 3519 */
struct __cppobj DoubleConstant : DoubleType
{
  long double _value;
};

/* 3520 */
struct __cppobj ObjectConstant : ObjectType
{
  ciObject *_value;
};

/* 3521 */
struct __cppobj InstanceConstant : InstanceType
{
  ciInstance *_value;
};

/* 3522 */
struct __cppobj ClassConstant : ClassType
{
  ciInstanceKlass *_value;
};

/* 3523 */
struct __cppobj MethodConstant : MethodType
{
  ciMethod *_value;
};

/* 3524 */
struct __cppobj MethodDataConstant : MethodDataType
{
  ciMethodData *_value;
};

/* 3525 */
struct /*VFT*/ ciArray_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  void (__thiscall *print_impl)(ciObject *this, outputStream *);
  bool (__thiscall *is_null_object)(ciObject *this);
  bool (__thiscall *is_call_site)(ciObject *this);
  bool (__thiscall *is_cpcache)(ciObject *this);
  bool (__thiscall *is_instance)(ciObject *this);
  bool (__thiscall *is_member_name)(ciObject *this);
  bool (__thiscall *is_method_handle)(ciObject *this);
  bool (__thiscall *is_method_type)(ciObject *this);
  bool (__thiscall *is_array)(ciObject *this);
  bool (__thiscall *is_obj_array)(ciObject *this);
  bool (__thiscall *is_type_array)(ciObject *this);
  bool (__thiscall *is_classless)(ciObject *this);
  void (__thiscall *dump_replay_data)(ciObject *this, outputStream *);
};

/* 3526 */
struct __cppobj ciArray : ciObject
{
  int _length;
};

/* 3527 */
struct __cppobj ArrayConstant : ArrayType
{
  ciArray *_value;
};

/* 3528 */
struct __cppobj AddressConstant : AddressType
{
  int _value;
};

/* 3529 */
struct /*VFT*/ ValueType_vtbl
{
  ValueType *(__thiscall *base)(ValueType *this);
  char (__thiscall *tchar)(ValueType *this);
  const char *(__thiscall *name)(ValueType *this);
  bool (__thiscall *is_constant)(ValueType *this);
  VoidType *(__thiscall *as_VoidType)(ValueType *this);
  IntType *(__thiscall *as_IntType)(ValueType *this);
  LongType *(__thiscall *as_LongType)(ValueType *this);
  FloatType *(__thiscall *as_FloatType)(ValueType *this);
  DoubleType *(__thiscall *as_DoubleType)(ValueType *this);
  ObjectType *(__thiscall *as_ObjectType)(ValueType *this);
  ArrayType *(__thiscall *as_ArrayType)(ValueType *this);
  InstanceType *(__thiscall *as_InstanceType)(ValueType *this);
  ClassType *(__thiscall *as_ClassType)(ValueType *this);
  MetadataType *(__thiscall *as_MetadataType)(ValueType *this);
  MethodType *(__thiscall *as_MethodType)(ValueType *this);
  MethodDataType *(__thiscall *as_MethodDataType)(ValueType *this);
  AddressType *(__thiscall *as_AddressType)(ValueType *this);
  IllegalType *(__thiscall *as_IllegalType)(ValueType *this);
  IntConstant *(__thiscall *as_IntConstant)(ValueType *this);
  LongConstant *(__thiscall *as_LongConstant)(ValueType *this);
  FloatConstant *(__thiscall *as_FloatConstant)(ValueType *this);
  DoubleConstant *(__thiscall *as_DoubleConstant)(ValueType *this);
  ObjectConstant *(__thiscall *as_ObjectConstant)(ValueType *this);
  InstanceConstant *(__thiscall *as_InstanceConstant)(ValueType *this);
  ClassConstant *(__thiscall *as_ClassConstant)(ValueType *this);
  MethodConstant *(__thiscall *as_MethodConstant)(ValueType *this);
  MethodDataConstant *(__thiscall *as_MethodDataConstant)(ValueType *this);
  ArrayConstant *(__thiscall *as_ArrayConstant)(ValueType *this);
  AddressConstant *(__thiscall *as_AddressConstant)(ValueType *this);
};

/* 3530 */
struct __cppobj LIR_OprDesc : CompilationResourceObj
{
};

/* 3531 */
struct /*VFT*/ StateSplit_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
};

/* 3532 */
struct __cppobj ValueStackArray : ResourceArray
{
};

/* 3533 */
struct __cppobj ValueStackStack : ValueStackArray
{
  int _size;
};

/* 3534 */
struct __cppobj LIR_OpArray : ResourceArray
{
};

/* 3535 */
struct __cppobj LIR_OpList : LIR_OpArray
{
  int _size;
};

/* 3536 */
struct __cppobj LIR_List : CompilationResourceObj
{
  LIR_OpList _operations;
  Compilation *_compilation;
};

/* 3537 */
struct /*VFT*/ BlockBegin_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
};

/* 3538 */
struct __cppobj IR : CompilationResourceObj
{
  Compilation *_compilation;
  IRScope *_top_scope;
  int _locals_size;
  int _num_loops;
  BlockList *_code;
};

/* 3539 */
struct __cppobj LIR_OprArray : ResourceArray
{
};

/* 3540 */
struct __cppobj LIR_OprList : LIR_OprArray
{
  int _size;
};

/* 3541 */
struct __cppobj CallingConvention : ResourceObj
{
  LIR_OprList *_args;
  int _reserved_stack_slots;
};

/* 3542 */
struct __cppobj FrameMap : CompilationResourceObj
{
  int _framesize;
  int _argcount;
  int _num_monitors;
  int _num_spills;
  int _reserved_argument_area_size;
  int _oop_map_arg_count;
  CallingConvention *_incoming_arguments;
  intArray *_argument_locations;
};

/* 3543 */
struct __cppobj ExceptionInfoArray : ResourceArray
{
};

/* 3544 */
struct __cppobj ExceptionInfoList : ExceptionInfoArray
{
  int _size;
};

/* 3545 */
struct __cppobj BlockClosure : CompilationResourceObj
{
  BlockClosure_vtbl *__vftable /*VFT*/;
};

/* 3546 */
struct /*VFT*/ BlockClosure_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 3547 */
struct __cppobj NodeArray : ResourceArray
{
};

/* 3548 */
struct __cppobj NodeList : NodeArray
{
  int _size;
};

/* 3549 */
struct __cppobj PhiResolverState : CompilationResourceObj
{
  NodeList _virtual_operands;
  NodeList _other_operands;
  NodeList _vreg_table;
};

/* 3550 */
struct __cppobj BitMap2D : _ValueObj
{
  BitMap _map;
  unsigned int _bits_per_slot;
};

/* 3552 */
struct __cppobj LIR_OprPtr : CompilationResourceObj
{
  LIR_OprPtr_vtbl *__vftable /*VFT*/;
};

/* 3555 */
union JavaValue::JavaCallValue
{
  float f;
  long double d;
  int i;
  __int64 l;
  _jobject *h;
};

/* 3556 */
struct __cppobj JavaValue
{
  BasicType _type;
  JavaValue::JavaCallValue _value;
};

/* 3551 */
struct __cppobj LIR_Const : LIR_OprPtr
{
  JavaValue _value;
};

/* 3553 */
struct __cppobj LIR_Address : LIR_OprPtr
{
  LIR_OprDesc *_base;
  LIR_OprDesc *_index;
  LIR_Address::Scale _scale;
  int _disp;
  BasicType _type;
};

/* 3554 */
struct /*VFT*/ LIR_OprPtr_vtbl
{
  LIR_Const *(__thiscall *as_constant)(LIR_OprPtr *this);
  LIR_Address *(__thiscall *as_address)(LIR_OprPtr *this);
  BasicType (__thiscall *type)(LIR_OprPtr *this);
  void (__thiscall *print_value_on)(LIR_OprPtr *this, outputStream *);
};

/* 3557 */
struct /*VFT*/ LIR_Const_vtbl
{
  LIR_Const *(__thiscall *as_constant)(LIR_OprPtr *this);
  LIR_Address *(__thiscall *as_address)(LIR_OprPtr *this);
  BasicType (__thiscall *type)(LIR_OprPtr *this);
  void (__thiscall *print_value_on)(LIR_OprPtr *this, outputStream *);
};

/* 3558 */
struct __cppobj GrowableArray<LIR_Const *> : GenericGrowableArray
{
  LIR_Const **_data;
};

/* 3559 */
struct /*VFT*/ LIRGenerator_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
};

/* 3560 */
struct __cppobj LIRGenerator : InstructionVisitor, BlockClosure
{
  _BYTE gap4[4];
  Compilation *_compilation;
  ciMethod *_method;
  PhiResolverState _resolver_state;
  BlockBegin *_block;
  int _virtual_register_number;
  Values _instruction_for_operand;
  BitMap2D _vreg_flags;
  LIR_List *_lir;
  BarrierSet *_bs;
  GrowableArray<LIR_Const *> _constants;
  LIR_OprList _reg_for_constants;
  Values _unpinned_constants;
};

/* 3561 */
struct __cppobj IntervalArray : ResourceArray
{
};

/* 3562 */
struct __cppobj IntervalList : IntervalArray
{
  int _size;
};

/* 3563 */
struct __cppobj ScopeValueArray : ResourceArray
{
};

/* 3564 */
struct __cppobj LinearScan : CompilationResourceObj
{
  Compilation *_compilation;
  IR *_ir;
  LIRGenerator *_gen;
  FrameMap *_frame_map;
  BlockList _cached_blocks;
  int _num_virtual_regs;
  bool _has_fpu_registers;
  int _num_calls;
  int _max_spills;
  int _unused_spill_slot;
  IntervalList _intervals;
  IntervalList *_new_intervals_from_allocation;
  IntervalArray *_sorted_intervals;
  bool _needs_full_resort;
  LIR_OpArray _lir_ops;
  BlockBeginArray _block_of_op;
  BitMap _has_info;
  BitMap _has_call;
  BitMap2D _interval_in_loop;
  ScopeValueArray _scope_value_cache;
  FpuStackAllocator *_fpu_stack_allocator;
};

/* 3565 */
struct __cppobj LIR_Op : CompilationResourceObj
{
  LIR_Op_vtbl *__vftable /*VFT*/;
  LIR_OprDesc *_result;
  unsigned __int16 _code;
  unsigned __int16 _flags;
  CodeEmitInfo *_info;
  int _id;
  int _fpu_pop_count;
  Instruction *_source;
};

/* 3566 */
struct __cppobj LIR_Assembler : CompilationResourceObj
{
  C1_MacroAssembler *_masm;
  CodeStubList *_slow_case_stubs;
  BarrierSet *_bs;
  Compilation *_compilation;
  FrameMap *_frame_map;
  BlockBegin *_current_block;
  Instruction *_pending_non_safepoint;
  int _pending_non_safepoint_offset;
  Label _unwind_handler_entry;
};

/* 3567 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpCall : LIR_Op
{
  unsigned __int8 *_addr;
  LIR_OprList *_arguments;
};

/* 3568 */
struct __cppobj LIR_OpJavaCall : LIR_OpCall
{
  ciMethod *_method;
  LIR_OprDesc *_receiver;
  LIR_OprDesc *_method_handle_invoke_SP_save_opr;
};

/* 3569 */
struct __cppobj LIR_OpLabel : LIR_Op
{
  Label *_label;
};

/* 3570 */
struct __cppobj LIR_OpDelay : LIR_Op
{
  LIR_Op *_op;
};

/* 3571 */
struct __cppobj CodeStub : CompilationResourceObj
{
  CodeStub_vtbl *__vftable /*VFT*/;
  Label _entry;
  Label _continuation;
};

/* 3572 */
struct __cppobj ScopeValue : ResourceObj
{
  ScopeValue_vtbl *__vftable /*VFT*/;
};

/* 3573 */
struct /*VFT*/ ScopeValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 3574 */
struct __cppobj GrowableArray<ScopeValue *> : GenericGrowableArray
{
  ScopeValue **_data;
};

/* 3575 */
struct __cppobj Location : _ValueObj
{
  unsigned int _value;
};

/* 3576 */
struct __cppobj __declspec(align(4)) MonitorValue : ResourceObj
{
  ScopeValue *_owner;
  Location _basic_lock;
  bool _eliminated;
};

/* 3577 */
struct __cppobj GrowableArray<MonitorValue *> : GenericGrowableArray
{
  MonitorValue **_data;
};

/* 3578 */
struct __cppobj IRScopeDebugInfo : CompilationResourceObj
{
  IRScope *_scope;
  int _bci;
  GrowableArray<ScopeValue *> *_locals;
  GrowableArray<ScopeValue *> *_expressions;
  GrowableArray<MonitorValue *> *_monitors;
  IRScopeDebugInfo *_caller;
};

/* 3579 */
struct __cppobj __declspec(align(4)) CodeEmitInfo : CompilationResourceObj
{
  IRScopeDebugInfo *_scope_debug_info;
  IRScope *_scope;
  XHandlers *_exception_handlers;
  OopMap *_oop_map;
  ValueStack *_stack;
  bool _is_method_handle_invoke;
  bool _deoptimize_on_exception;
};

/* 3580 */
struct __cppobj __declspec(align(4)) LIR_OpVisitState : StackObj
{
  LIR_Op *_op;
  int _oprs_len[3];
  LIR_OprDesc **_oprs_new[3][20];
  int _info_len;
  CodeEmitInfo *_info_new[4];
  bool _has_call;
  bool _has_slow_case;
};

/* 3581 */
struct /*VFT*/ CodeStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 3582 */
struct __cppobj LIR_OpLock : LIR_Op
{
  LIR_OprDesc *_hdr;
  LIR_OprDesc *_obj;
  LIR_OprDesc *_lock;
  LIR_OprDesc *_scratch;
  CodeStub *_stub;
};

/* 3583 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpAllocArray : LIR_Op
{
  LIR_OprDesc *_klass;
  LIR_OprDesc *_len;
  LIR_OprDesc *_tmp1;
  LIR_OprDesc *_tmp2;
  LIR_OprDesc *_tmp3;
  LIR_OprDesc *_tmp4;
  BasicType _type;
  CodeStub *_stub;
};

/* 3584 */
struct __cppobj LIR_Op1 : LIR_Op
{
  LIR_OprDesc *_opr;
  BasicType _type;
  LIR_PatchCode _patch;
};

/* 3585 */
struct __cppobj __declspec(align(4)) LIR_OpAllocObj : LIR_Op1
{
  LIR_OprDesc *_tmp1;
  LIR_OprDesc *_tmp2;
  LIR_OprDesc *_tmp3;
  LIR_OprDesc *_tmp4;
  int _hdr_size;
  int _obj_size;
  CodeStub *_stub;
  bool _init_check;
};

/* 3586 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpRoundFP : LIR_Op1
{
  LIR_OprDesc *_tmp;
};

/* 3587 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpBranch : LIR_Op
{
  LIR_Condition _cond;
  BasicType _type;
  Label *_label;
  BlockBegin *_block;
  BlockBegin *_ublock;
  CodeStub *_stub;
};

/* 3588 */
struct __cppobj LIR_OpRTCall : LIR_OpCall
{
  LIR_OprDesc *_tmp;
};

/* 3589 */
struct /*VFT*/ ConversionStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 3590 */
struct __cppobj ConversionStub : CodeStub
{
  Bytecodes::Code _bytecode;
  LIR_OprDesc *_input;
  LIR_OprDesc *_result;
};

/* 3591 */
struct __cppobj LIR_OpConvert : LIR_Op1
{
  Bytecodes::Code _bytecode;
  ConversionStub *_stub;
};

/* 3592 */
struct __cppobj __unaligned __declspec(align(4)) LIR_Op0 : LIR_Op
{
};

/* 3593 */
struct __cppobj __unaligned __declspec(align(4)) LIR_Op2 : LIR_Op
{
  int _fpu_stack_size;
  LIR_OprDesc *_opr1;
  LIR_OprDesc *_opr2;
  BasicType _type;
  LIR_OprDesc *_tmp1;
  LIR_OprDesc *_tmp2;
  LIR_OprDesc *_tmp3;
  LIR_OprDesc *_tmp4;
  LIR_OprDesc *_tmp5;
  LIR_Condition _condition;
};

/* 3594 */
struct __cppobj LIR_Op3 : LIR_Op
{
  LIR_OprDesc *_opr1;
  LIR_OprDesc *_opr2;
  LIR_OprDesc *_opr3;
};

/* 3595 */
struct __cppobj LIR_OpArrayCopy : LIR_Op
{
  ArrayCopyStub *_stub;
  LIR_OprDesc *_src;
  LIR_OprDesc *_src_pos;
  LIR_OprDesc *_dst;
  LIR_OprDesc *_dst_pos;
  LIR_OprDesc *_length;
  LIR_OprDesc *_tmp;
  ciArrayKlass *_expected_type;
  int _flags;
};

/* 3596 */
struct /*VFT*/ ArrayCopyStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 3597 */
struct __cppobj ArrayCopyStub : CodeStub
{
  LIR_OpArrayCopy *_op;
};

/* 3598 */
struct /*VFT*/ ciArrayKlass_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
  oopDesc *(__thiscall *loader)(ciKlass *this);
  _jobject *(__thiscall *loader_handle)(ciKlass *this);
  oopDesc *(__thiscall *protection_domain)(ciKlass *this);
  _jobject *(__thiscall *protection_domain_handle)(ciKlass *this);
  bool (__thiscall *is_java_lang_Object)(ciKlass *this);
  bool (__thiscall *is_interface)(ciKlass *this);
  bool (__thiscall *is_abstract)(ciKlass *this);
  bool (__thiscall *is_leaf_type)(ciKlass *this);
  ciKlass *(__thiscall *exact_klass)(ciKlass *this);
};

/* 3599 */
struct __cppobj ciArrayKlass : ciKlass
{
  int _dimension;
};

/* 3600 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpUpdateCRC32 : LIR_Op
{
  LIR_OprDesc *_crc;
  LIR_OprDesc *_val;
};

/* 3601 */
struct __cppobj __declspec(align(4)) LIR_OpTypeCheck : LIR_Op
{
  LIR_OprDesc *_object;
  LIR_OprDesc *_array;
  ciKlass *_klass;
  LIR_OprDesc *_tmp1;
  LIR_OprDesc *_tmp2;
  LIR_OprDesc *_tmp3;
  bool _fast_check;
  CodeEmitInfo *_info_for_patch;
  CodeEmitInfo *_info_for_exception;
  CodeStub *_stub;
  ciMethod *_profiled_method;
  int _profiled_bci;
  bool _should_profile;
};

/* 3602 */
struct __cppobj LIR_OpCompareAndSwap : LIR_Op
{
  LIR_OprDesc *_addr;
  LIR_OprDesc *_cmp_value;
  LIR_OprDesc *_new_value;
  LIR_OprDesc *_tmp1;
  LIR_OprDesc *_tmp2;
};

/* 3603 */
struct __cppobj LIR_OpProfileCall : LIR_Op
{
  ciMethod *_profiled_method;
  int _profiled_bci;
  ciMethod *_profiled_callee;
  LIR_OprDesc *_mdo;
  LIR_OprDesc *_recv;
  LIR_OprDesc *_tmp1;
  ciKlass *_known_holder;
};

/* 3604 */
struct __cppobj __unaligned __declspec(align(4)) LIR_OpProfileType : LIR_Op
{
  LIR_OprDesc *_mdp;
  LIR_OprDesc *_obj;
  LIR_OprDesc *_tmp;
  ciKlass *_exact_klass;
  int _current_klass;
  bool _not_null;
  bool _no_conflict;
};

/* 3605 */
struct /*VFT*/ LIR_Op_vtbl
{
  const char *(__thiscall *name)(LIR_Op *this);
  void (__thiscall *emit_code)(LIR_Op *this, LIR_Assembler *);
  void (__thiscall *print_instr)(LIR_Op *this, outputStream *);
  void (__thiscall *print_on)(LIR_Op *this, outputStream *);
  bool (__thiscall *is_patching)(LIR_Op *this);
  LIR_OpCall *(__thiscall *as_OpCall)(LIR_Op *this);
  LIR_OpJavaCall *(__thiscall *as_OpJavaCall)(LIR_Op *this);
  LIR_OpLabel *(__thiscall *as_OpLabel)(LIR_Op *this);
  LIR_OpDelay *(__thiscall *as_OpDelay)(LIR_Op *this);
  LIR_OpLock *(__thiscall *as_OpLock)(LIR_Op *this);
  LIR_OpAllocArray *(__thiscall *as_OpAllocArray)(LIR_Op *this);
  LIR_OpAllocObj *(__thiscall *as_OpAllocObj)(LIR_Op *this);
  LIR_OpRoundFP *(__thiscall *as_OpRoundFP)(LIR_Op *this);
  LIR_OpBranch *(__thiscall *as_OpBranch)(LIR_Op *this);
  LIR_OpRTCall *(__thiscall *as_OpRTCall)(LIR_Op *this);
  LIR_OpConvert *(__thiscall *as_OpConvert)(LIR_Op *this);
  LIR_Op0 *(__thiscall *as_Op0)(LIR_Op *this);
  LIR_Op1 *(__thiscall *as_Op1)(LIR_Op *this);
  LIR_Op2 *(__thiscall *as_Op2)(LIR_Op *this);
  LIR_Op3 *(__thiscall *as_Op3)(LIR_Op *this);
  LIR_OpArrayCopy *(__thiscall *as_OpArrayCopy)(LIR_Op *this);
  LIR_OpUpdateCRC32 *(__thiscall *as_OpUpdateCRC32)(LIR_Op *this);
  LIR_OpTypeCheck *(__thiscall *as_OpTypeCheck)(LIR_Op *this);
  LIR_OpCompareAndSwap *(__thiscall *as_OpCompareAndSwap)(LIR_Op *this);
  LIR_OpProfileCall *(__thiscall *as_OpProfileCall)(LIR_Op *this);
  LIR_OpProfileType *(__thiscall *as_OpProfileType)(LIR_Op *this);
  void (__thiscall *verify)(LIR_Op *this);
};

/* 3606 */
struct __cppobj FpuStackSim : _ValueObj
{
  Compilation *_compilation;
  int _stack_size;
  int _regs[8];
};

/* 3607 */
struct __cppobj __declspec(align(4)) FpuStackAllocator : _ValueObj
{
  Compilation *_compilation;
  LinearScan *_allocator;
  LIR_OpVisitState visitor;
  LIR_List *_lir;
  int _pos;
  FpuStackSim _sim;
  FpuStackSim _temp_sim;
  bool _debug_information_computed;
};

/* 3608 */
struct /*VFT*/ ShenandoahLoadReferenceBarrierStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 3609 */
struct __cppobj ShenandoahLoadReferenceBarrierStub : CodeStub
{
  LIR_OprDesc *_obj;
  LIR_OprDesc *_result;
};

/* 3610 */
struct __cppobj MachPrologNode : MachIdealNode
{
};

/* 3611 */
struct __cppobj __declspec(align(4)) MachEpilogNode : MachIdealNode
{
  bool _do_polling;
};

/* 3612 */
struct __cppobj MachUEPNode : MachIdealNode
{
};

/* 3613 */
struct __cppobj MachBreakpointNode : MachIdealNode
{
};

/* 3614 */
struct /*VFT*/ labelOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 3615 */
struct __cppobj labelOper : MachOper
{
  Label *_label;
  unsigned int _block_num;
};

/* 3616 */
struct /*VFT*/ methodOper_vtbl
{
  unsigned int (__thiscall *opcode)(MachOper *this);
  unsigned int (__thiscall *num_edges)(MachOper *this);
  const RegMask *(__thiscall *in_RegMask)(MachOper *this, int);
  void (__thiscall *negate)(MachOper *this);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *reg)(MachOper *this, PhaseRegAlloc *, const Node *);
  int (__thiscall *constant)(MachOper *this);
  relocInfo::relocType (__thiscall *constant_reloc)(MachOper *this);
  long double (__thiscall *constantD)(MachOper *this);
  float (__thiscall *constantF)(MachOper *this);
  __int64 (__thiscall *constantL)(MachOper *this);
  TypeOopPtr *(__thiscall *oop)(MachOper *this);
  int (__thiscall *ccode)(MachOper *this);
  int (__thiscall *base)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *index)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  int (__thiscall *scale)(MachOper *this);
  int (__thiscall *disp)(MachOper *this, PhaseRegAlloc *, const Node *, int);
  relocInfo::relocType (__thiscall *disp_reloc)(MachOper *this);
  int (__thiscall *constant_disp)(MachOper *this);
  int (__thiscall *base_position)(MachOper *this);
  int (__thiscall *index_position)(MachOper *this);
  const TypePtr *(__thiscall *disp_as_type)(MachOper *this);
  Label *(__thiscall *label)(MachOper *this);
  int (__thiscall *method)(MachOper *this);
  unsigned int (__thiscall *hash)(MachOper *this);
  unsigned int (__thiscall *cmp)(MachOper *this, const MachOper *);
  MachOper *(__thiscall *clone)(MachOper *this, Compile *);
  const Type *(__thiscall *type)(MachOper *this);
  void (__thiscall *set_con)(MachOper *this, int);
};

/* 3617 */
struct __cppobj methodOper : MachOper
{
  int _method;
};

/* 3618 */
struct __cppobj AddressLiteral : _ValueObj
{
  RelocationHolder _rspec;
  bool _is_lval;
  unsigned __int8 *_target;
};

/* 3619 */
struct __cppobj ArrayAddress : _ValueObj
{
  AddressLiteral _base;
  Address _index;
};

/* 3620 */
struct __cppobj MachSpillCopyNode : MachIdealNode
{
  const RegMask *_in;
  const RegMask *_out;
  const Type *_type;
};

/* 3621 */
struct __cppobj InternalAddress : AddressLiteral
{
};

/* 3622 */
struct __cppobj VectorSetI : StackObj
{
  const VectorSet *s;
  unsigned int i;
  unsigned int j;
  unsigned int mask;
  unsigned int elem;
};

/* 3623 */
struct __cppobj VSetI_ : SetI_
{
  VectorSetI vsi;
};

/* 3624 */
struct /*VFT*/ VSetI__vtbl
{
  void (__thiscall *~SetI_)(SetI_ *this);
  unsigned int (__thiscall *next)(SetI_ *this);
  int (__thiscall *test)(SetI_ *this);
};

/* 3625 */
struct __cppobj NativeCallStack : StackObj
{
  unsigned __int8 *_stack[4];
  unsigned int _hash_value;
};

/* 3626 */
struct __cppobj SetI
{
  SetI_ *impl;
  unsigned int elem;
};

/* 3627 */
struct __cppobj DictI
{
  const Dict *_d;
  unsigned int _i;
  unsigned int _j;
  const void *_key;
  const void *_value;
};

/* 3628 */
struct __cppobj VectorNode : TypeNode
{
};

/* 3629 */
struct /*VFT*/ ExtractNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3630 */
struct __cppobj ExtractNode : Node
{
};

/* 3631 */
struct /*VFT*/ ExtractBNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3632 */
struct __cppobj ExtractBNode : ExtractNode
{
};

/* 3633 */
struct /*VFT*/ ExtractUBNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3634 */
struct __cppobj ExtractUBNode : ExtractNode
{
};

/* 3635 */
struct /*VFT*/ ExtractCNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3636 */
struct __cppobj ExtractCNode : ExtractNode
{
};

/* 3637 */
struct /*VFT*/ ExtractSNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3638 */
struct __cppobj ExtractSNode : ExtractNode
{
};

/* 3639 */
struct /*VFT*/ ExtractINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3640 */
struct __cppobj ExtractINode : ExtractNode
{
};

/* 3641 */
struct /*VFT*/ ExtractLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3642 */
struct __cppobj ExtractLNode : ExtractNode
{
};

/* 3643 */
struct /*VFT*/ ExtractFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3644 */
struct __cppobj ExtractFNode : ExtractNode
{
};

/* 3645 */
struct /*VFT*/ ExtractDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3646 */
struct __cppobj ExtractDNode : ExtractNode
{
};

/* 3647 */
struct __cppobj LShiftCntVNode : VectorNode
{
};

/* 3648 */
struct __cppobj RShiftCntVNode : VectorNode
{
};

/* 3649 */
struct __cppobj ReplicateBNode : VectorNode
{
};

/* 3650 */
struct __cppobj ReplicateSNode : VectorNode
{
};

/* 3651 */
struct __cppobj ReplicateINode : VectorNode
{
};

/* 3652 */
struct __cppobj ReplicateLNode : VectorNode
{
};

/* 3653 */
struct __cppobj ReplicateFNode : VectorNode
{
};

/* 3654 */
struct __cppobj ReplicateDNode : VectorNode
{
};

/* 3655 */
struct __cppobj PackNode : VectorNode
{
};

/* 3656 */
struct __cppobj PackBNode : PackNode
{
};

/* 3657 */
struct __cppobj PackSNode : PackNode
{
};

/* 3658 */
struct __cppobj PackINode : PackNode
{
};

/* 3659 */
struct __cppobj PackLNode : PackNode
{
};

/* 3660 */
struct __cppobj PackFNode : PackNode
{
};

/* 3661 */
struct __cppobj PackDNode : PackNode
{
};

/* 3662 */
struct __cppobj TypeInstPtr : TypeOopPtr
{
  ciSymbol *_name;
};

/* 3663 */
struct /*VFT*/ TypeAry_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3664 */
const struct __cppobj __declspec(align(4)) TypeAry : Type
{
  const Type *_elem;
  const TypeInt *_size;
  const bool _stable;
};

/* 3665 */
struct __cppobj __declspec(align(4)) TypeAryPtr : TypeOopPtr
{
  const TypeAry *_ary;
  const bool _is_autobox_cache;
};

/* 3666 */
struct /*VFT*/ TypeMetadataPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
};

/* 3667 */
struct __cppobj TypeMetadataPtr : TypePtr
{
  ciMetadata *_metadata;
};

/* 3668 */
struct __cppobj __declspec(align(4)) TypeKlassPtr : TypePtr
{
  ciKlass *_klass;
  bool _klass_is_exact;
};

/* 3669 */
struct /*VFT*/ TypeKlassPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
  const Type *(__thiscall *cast_to_exactness)(TypeKlassPtr *this, bool);
};

/* 3670 */
struct __cppobj TypeNarrowPtr : Type
{
  const TypePtr *_ptrtype;
};

/* 3671 */
struct /*VFT*/ TypeNarrowPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const TypeNarrowPtr *(__thiscall *isa_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *is_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *make_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  const TypeNarrowPtr *(__thiscall *make_hash_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  int (__thiscall *get_con)(TypeNarrowPtr *this);
};

/* 3672 */
struct /*VFT*/ TypeNarrowOop_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const TypeNarrowPtr *(__thiscall *isa_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *is_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *make_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  const TypeNarrowPtr *(__thiscall *make_hash_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  int (__thiscall *get_con)(TypeNarrowPtr *this);
};

/* 3673 */
struct __cppobj TypeNarrowOop : TypeNarrowPtr
{
};

/* 3674 */
struct /*VFT*/ TypeF_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3675 */
struct __cppobj TypeF : Type
{
  const float _f;
};

/* 3676 */
struct /*VFT*/ TypeNarrowKlass_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const TypeNarrowPtr *(__thiscall *isa_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *is_same_narrowptr)(TypeNarrowPtr *this, const Type *);
  const TypeNarrowPtr *(__thiscall *make_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  const TypeNarrowPtr *(__thiscall *make_hash_same_narrowptr)(TypeNarrowPtr *this, const TypePtr *);
  int (__thiscall *get_con)(TypeNarrowPtr *this);
};

/* 3677 */
struct __cppobj TypeNarrowKlass : TypeNarrowPtr
{
};

/* 3678 */
struct /*VFT*/ TypeD_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 3679 */
struct __cppobj TypeD : Type
{
  const long double _d;
};

/* 3680 */
struct __cppobj ciTypeFlow::SuccIter : StackObj
{
  ciTypeFlow::Block *_pred;
  int _index;
  ciTypeFlow::Block *_succ;
};

/* 3681 */
struct __cppobj ciTypeFlow::PostorderLoops : StackObj
{
  ciTypeFlow::Loop *_root;
  ciTypeFlow::Loop *_current;
};

/* 3682 */
struct __cppobj ciTypeFlow::PreorderLoops : StackObj
{
  ciTypeFlow::Loop *_root;
  ciTypeFlow::Loop *_current;
};

/* 3683 */
struct __cppobj ciBytecodeStream : StackObj
{
  ciMethod *_method;
  ciInstanceKlass *_holder;
  unsigned __int8 *_bc_start;
  unsigned __int8 *_was_wide;
  int *_table_base;
  unsigned __int8 *_start;
  unsigned __int8 *_end;
  unsigned __int8 *_pc;
  Bytecodes::Code _bc;
  Bytecodes::Code _raw_bc;
};

/* 3684 */
struct /*VFT*/ ciObjArrayKlass_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
  oopDesc *(__thiscall *loader)(ciKlass *this);
  _jobject *(__thiscall *loader_handle)(ciKlass *this);
  oopDesc *(__thiscall *protection_domain)(ciKlass *this);
  _jobject *(__thiscall *protection_domain_handle)(ciKlass *this);
  bool (__thiscall *is_java_lang_Object)(ciKlass *this);
  bool (__thiscall *is_interface)(ciKlass *this);
  bool (__thiscall *is_abstract)(ciKlass *this);
  bool (__thiscall *is_leaf_type)(ciKlass *this);
  ciKlass *(__thiscall *exact_klass)(ciKlass *this);
};

/* 3685 */
struct __cppobj ciObjArrayKlass : ciArrayKlass
{
  ciKlass *_element_klass;
  ciKlass *_base_element_klass;
};

/* 3686 */
struct /*VFT*/ ciTypeArrayKlass_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  bool (__thiscall *is_classless)(ciMetadata *this);
  bool (__thiscall *is_type)(ciMetadata *this);
  bool (__thiscall *is_cpcache)(ciMetadata *this);
  bool (__thiscall *is_return_address)(ciMetadata *this);
  bool (__thiscall *is_method)(ciMetadata *this);
  bool (__thiscall *is_method_data)(ciMetadata *this);
  bool (__thiscall *is_klass)(ciMetadata *this);
  bool (__thiscall *is_instance_klass)(ciMetadata *this);
  bool (__thiscall *is_array_klass)(ciMetadata *this);
  bool (__thiscall *is_obj_array_klass)(ciMetadata *this);
  bool (__thiscall *is_type_array_klass)(ciMetadata *this);
  void (__thiscall *dump_replay_data)(ciMetadata *this, outputStream *);
  void (__thiscall *print_impl)(ciMetadata *this, outputStream *);
  ciInstance *(__thiscall *java_mirror)(ciType *this);
  void (__thiscall *print_name_on)(ciType *this, outputStream *);
  oopDesc *(__thiscall *loader)(ciKlass *this);
  _jobject *(__thiscall *loader_handle)(ciKlass *this);
  oopDesc *(__thiscall *protection_domain)(ciKlass *this);
  _jobject *(__thiscall *protection_domain_handle)(ciKlass *this);
  bool (__thiscall *is_java_lang_Object)(ciKlass *this);
  bool (__thiscall *is_interface)(ciKlass *this);
  bool (__thiscall *is_abstract)(ciKlass *this);
  bool (__thiscall *is_leaf_type)(ciKlass *this);
  ciKlass *(__thiscall *exact_klass)(ciKlass *this);
};

/* 3687 */
struct __cppobj ciTypeArrayKlass : ciArrayKlass
{
};

/* 3688 */
struct __cppobj InstanceMirrorKlass : InstanceKlass
{
};

/* 3689 */
struct __cppobj instanceOopDesc : oopDesc
{
};

/* 3690 */
struct __cppobj SWNodeInfo : _ValueObj
{
  int _alignment;
  int _depth;
  const Type *_velt_type;
  Node_List *_my_pack;
};

/* 3691 */
struct __cppobj OrderedPair : _ValueObj
{
  Node *_p1;
  Node *_p2;
};

/* 3692 */
struct /*VFT*/ DivINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3693 */
struct __cppobj DivINode : Node
{
};

/* 3694 */
struct /*VFT*/ DivLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3695 */
struct __cppobj DivLNode : Node
{
};

/* 3696 */
struct /*VFT*/ DivFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3697 */
struct __cppobj DivFNode : Node
{
};

/* 3698 */
struct /*VFT*/ DivDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3699 */
struct __cppobj DivDNode : Node
{
};

/* 3700 */
struct /*VFT*/ ModINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3701 */
struct __cppobj ModINode : Node
{
};

/* 3702 */
struct /*VFT*/ ModLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3703 */
struct __cppobj ModLNode : Node
{
};

/* 3704 */
struct /*VFT*/ ModFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3705 */
struct __cppobj ModFNode : Node
{
};

/* 3706 */
struct /*VFT*/ ModDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3707 */
struct __cppobj ModDNode : Node
{
};

/* 3708 */
struct __cppobj DivModNode : MultiNode
{
};

/* 3709 */
struct __cppobj DivModINode : DivModNode
{
};

/* 3710 */
struct __cppobj DivModLNode : DivModNode
{
};

/* 3711 */
struct __cppobj DepMem : ResourceObj
{
  Node *_node;
  DepEdge *_in_head;
  DepEdge *_out_head;
};

/* 3712 */
struct __cppobj DepEdge : ResourceObj
{
  DepMem *_pred;
  DepMem *_succ;
  DepEdge *_next_in;
  DepEdge *_next_out;
};

/* 3713 */
struct __cppobj GrowableArray<DepMem *> : GenericGrowableArray
{
  DepMem **_data;
};

/* 3714 */
struct __cppobj DepGraph : _ValueObj
{
  Arena *_arena;
  GrowableArray<DepMem *> _map;
  DepMem *_root;
  DepMem *_tail;
};

/* 3715 */
struct __cppobj __declspec(align(4)) DepPreds : StackObj
{
  Node *_n;
  int _next_idx;
  int _end_idx;
  DepEdge *_dep_next;
  Node *_current;
  bool _done;
};

/* 3716 */
struct __cppobj __declspec(align(4)) DepSuccs : StackObj
{
  Node *_n;
  int _next_idx;
  int _end_idx;
  DepEdge *_dep_next;
  Node *_current;
  bool _done;
};

/* 3717 */
struct __cppobj __declspec(align(4)) IdealLoopTree : ResourceObj
{
  IdealLoopTree *_parent;
  IdealLoopTree *_next;
  IdealLoopTree *_child;
  Node *_head;
  Node *_tail;
  PhaseIdealLoop *_phase;
  Node_List _body;
  unsigned __int8 _nest;
  unsigned __int8 _irreducible : 1;
  unsigned __int8 _has_call : 1;
  unsigned __int8 _has_sfpt : 1;
  unsigned __int8 _rce_candidate : 1;
  Node_List *_safepts;
  Node_List *_required_safept;
  bool _allow_optimizations;
};

/* 3718 */
struct __cppobj __declspec(align(4)) PhaseIdealLoop : PhaseTransform
{
  PhaseIterGVN *_igvn;
  IdealLoopTree *_ltree_root;
  unsigned int *_preorders;
  unsigned int _max_preorder;
  const PhaseIdealLoop *_verify_me;
  bool _verify_only;
  Node_List _deadlist;
  Node_Array _dom_lca_tags;
  unsigned int _idom_size;
  Node **_idom;
  unsigned int *_dom_depth;
  GrowableArray<unsigned int> *_dom_stk;
  bool _has_irreducible_loops;
  bool _created_loop_node;
};

/* 3719 */
struct /*VFT*/ PhaseIdealLoop_vtbl
{
  ConNode *(__thiscall *uncached_makecon)(PhaseTransform *this, const Type *);
  Node *(__thiscall *transform)(PhaseTransform *this, Node *);
  const Type *(__thiscall *saturate)(PhaseTransform *this, const Type *, const Type *, const Type *);
  PhaseIterGVN *(__thiscall *is_IterGVN)(PhaseTransform *this);
};

/* 3720 */
struct __cppobj GrowableArray<Node_List *> : GenericGrowableArray
{
  Node_List **_data;
};

/* 3721 */
struct __cppobj GrowableArray<SWNodeInfo> : GenericGrowableArray
{
  SWNodeInfo *_data;
};

/* 3722 */
struct __cppobj GrowableArray<OrderedPair> : GenericGrowableArray
{
  OrderedPair *_data;
};

/* 3723 */
struct __cppobj PhiNode : TypeNode
{
  const TypePtr *const _adr_type;
  int _inst_mem_id;
  const int _inst_id;
  const int _inst_index;
  const int _inst_offset;
};

/* 3724 */
struct __cppobj SuperWord : ResourceObj
{
  PhaseIdealLoop *_phase;
  Arena *_arena;
  PhaseIterGVN *_igvn;
  GrowableArray<Node_List *> _packset;
  GrowableArray<int> _bb_idx;
  GrowableArray<Node *> _block;
  GrowableArray<Node *> _data_entry;
  GrowableArray<Node *> _mem_slice_head;
  GrowableArray<Node *> _mem_slice_tail;
  GrowableArray<SWNodeInfo> _node_info;
  MemNode *_align_to_ref;
  GrowableArray<OrderedPair> _disjoint_ptrs;
  DepGraph _dg;
  VectorSet _visited;
  VectorSet _post_visited;
  Node_Stack _n_idx_list;
  GrowableArray<Node *> _nlist;
  GrowableArray<Node *> _stk;
  IdealLoopTree *_lpt;
  LoopNode *_lp;
  Node *_bb;
  PhiNode *_iv;
};

/* 3725 */
struct __cppobj __declspec(align(4)) SWPointer : _ValueObj
{
  MemNode *_mem;
  SuperWord *_slp;
  Node *_base;
  Node *_adr;
  int _scale;
  int _offset;
  Node *_invar;
  bool _negate_invar;
};

/* 3726 */
struct __cppobj MultiBranchNode : MultiNode
{
};

/* 3727 */
struct __cppobj IfNode : MultiBranchNode
{
  float _prob;
  float _fcnt;
};

/* 3728 */
struct __cppobj CountedLoopEndNode : IfNode
{
};

/* 3729 */
struct __cppobj CountedLoopNode : LoopNode
{
  unsigned int _main_idx;
  unsigned int _trip_count;
  float _profile_trip_cnt;
  int _unrolled_count_log2;
  int _node_count_before_unroll;
};

/* 3730 */
struct __cppobj GraphKit : Phase
{
  GraphKit_vtbl *__vftable /*VFT*/;
  ciEnv *_env;
  PhaseGVN *_gvn;
  SafePointNode *_map;
  SafePointNode *_exceptions;
  int _bci;
  ciMethod *_method;
  int _sp;
};

/* 3731 */
struct __cppobj __declspec(align(4)) MethodLivenessResult : BitMap
{
  bool _is_valid;
};

/* 3732 */
struct __cppobj Parse::Block
{
  ciTypeFlow::Block *_flow;
  int _pred_count;
  int _preds_parsed;
  unsigned int _count;
  bool _is_parsed;
  bool _is_handler;
  bool _has_merged_backedge;
  SafePointNode *_start_map;
  MethodLivenessResult _live_locals;
  int _num_successors;
  int _all_successors;
  Parse::Block **_successors;
};

/* 3733 */
struct __cppobj __unaligned __declspec(align(4)) Parse : GraphKit
{
  JVMState *_caller;
  float _expected_uses;
  float _prof_factor;
  int _depth;
  const TypeFunc *_tf;
  int _entry_bci;
  ciTypeFlow *_flow;
  Parse::Block *_blocks;
  int _block_count;
  GraphKit _exits;
  bool _wrote_final;
  bool _wrote_volatile;
  bool _count_invocations;
  bool _method_data_update;
  Node *_alloc_with_final;
  Parse::Block *_block;
  ciBytecodeStream _iter;
  int _blocks_merged;
  int _blocks_parsed;
  const FastLockNode *_synch_lock;
  bool _first_return;
  bool _replaced_nodes_for_exceptions;
  __declspec(align(4)) unsigned int _new_idx;
};

/* 3734 */
struct /*VFT*/ InlineCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 3735 */
struct __cppobj InlineCallGenerator : CallGenerator
{
};

/* 3736 */
struct /*VFT*/ LibraryIntrinsic_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 3737 */
struct __cppobj LibraryIntrinsic : InlineCallGenerator
{
  bool _is_virtual;
  bool _does_virtual_dispatch;
  char _predicates_count;
  char _last_predicate;
  vmIntrinsics::ID _intrinsic_id;
};

/* 3738 */
struct __cppobj __unaligned __declspec(align(4)) LibraryCallKit : GraphKit
{
  LibraryIntrinsic *_intrinsic;
  Node *_result;
  int _reexecute_sp;
};

/* 3739 */
struct /*VFT*/ GraphKit_vtbl
{
  Parse *(__thiscall *is_Parse)(GraphKit *this);
  LibraryCallKit *(__thiscall *is_LibraryCallKit)(GraphKit *this);
  int (__thiscall *reexecute_sp)(GraphKit *this);
};

/* 3740 */
struct __cppobj ProfileData : ResourceObj
{
  ProfileData_vtbl *__vftable /*VFT*/;
  DataLayout *_data;
};

/* 3741 */
struct __cppobj __declspec(align(4)) BaseBytecodeStream : StackObj
{
  methodHandle _method;
  int _bci;
  int _next_bci;
  int _end_bci;
  Bytecodes::Code _raw_code;
  bool _is_wide;
  bool _is_raw;
};

/* 3742 */
struct __cppobj BytecodeStream : BaseBytecodeStream
{
  Bytecodes::Code _code;
};

/* 3743 */
struct /*VFT*/ ProfileData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 3744 */
struct __cppobj IdealKit : StackObj
{
  Compile *const C;
  PhaseGVN *_gvn;
  GrowableArray<Node *> *_pending_cvstates;
  Node *_cvstate;
  unsigned int _var_ct;
  bool _delay_all_transforms;
  Node *_initial_ctrl;
  Node *_initial_memory;
  Node *_initial_i_o;
};

/* 3745 */
struct __cppobj __declspec(align(4)) AllocateNode : CallNode
{
  bool _is_scalar_replaceable;
  bool _is_non_escaping;
};

/* 3746 */
struct __cppobj __declspec(align(4)) MemoryGraphFixer : ResourceObj
{
  Node_List _memory_nodes;
  int _alias;
  PhaseIdealLoop *_phase;
  bool _include_lsm;
};

/* 3747 */
struct /*VFT*/ LoadStoreNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3748 */
struct __cppobj LoadStoreNode : Node
{
  const Type *const _type;
  const TypePtr *_adr_type;
};

/* 3749 */
struct /*VFT*/ LoadStoreConditionalNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3750 */
struct __cppobj LoadStoreConditionalNode : LoadStoreNode
{
};

/* 3751 */
struct /*VFT*/ CompareAndSwapPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3752 */
struct __cppobj CompareAndSwapPNode : LoadStoreConditionalNode
{
};

/* 3753 */
struct /*VFT*/ ShenandoahCompareAndSwapPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3754 */
struct __cppobj ShenandoahCompareAndSwapPNode : CompareAndSwapPNode
{
};

/* 3755 */
struct /*VFT*/ CompareAndSwapNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3756 */
struct __cppobj CompareAndSwapNNode : LoadStoreConditionalNode
{
};

/* 3757 */
struct /*VFT*/ ShenandoahCompareAndSwapNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3758 */
struct __cppobj ShenandoahCompareAndSwapNNode : CompareAndSwapNNode
{
};

/* 3759 */
struct __cppobj ShenandoahBarrierSetC2 : CHeapObj<5>
{
};

/* 3760 */
struct __cppobj BoolTest : _ValueObj
{
  BoolTest::mask _test;
};

/* 3761 */
struct /*VFT*/ BoolNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3762 */
struct __cppobj BoolNode : Node
{
  const BoolTest _test;
};

/* 3763 */
struct /*VFT*/ SubINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3764 */
struct __cppobj SubINode : SubNode
{
};

/* 3765 */
struct /*VFT*/ SubLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3766 */
struct __cppobj SubLNode : SubNode
{
};

/* 3767 */
struct /*VFT*/ SubFPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3768 */
struct __cppobj SubFPNode : SubNode
{
};

/* 3769 */
struct /*VFT*/ SubFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3770 */
struct __cppobj SubFNode : SubFPNode
{
};

/* 3771 */
struct /*VFT*/ SubDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3772 */
struct __cppobj SubDNode : SubFPNode
{
};

/* 3773 */
struct /*VFT*/ CmpINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3774 */
struct __cppobj CmpINode : CmpNode
{
};

/* 3775 */
struct /*VFT*/ CmpUNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3776 */
struct __cppobj CmpUNode : CmpNode
{
};

/* 3777 */
struct /*VFT*/ CmpLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3778 */
struct __cppobj CmpLNode : CmpNode
{
};

/* 3779 */
struct /*VFT*/ CmpULNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3780 */
struct __cppobj CmpULNode : CmpNode
{
};

/* 3781 */
struct /*VFT*/ CmpPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3782 */
struct __cppobj CmpPNode : CmpNode
{
};

/* 3783 */
struct /*VFT*/ CmpFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3784 */
struct __cppobj CmpFNode : CmpNode
{
};

/* 3785 */
struct /*VFT*/ CmpDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3786 */
struct __cppobj CmpDNode : CmpNode
{
};

/* 3787 */
struct /*VFT*/ SqrtDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3788 */
struct __cppobj SqrtDNode : Node
{
};

/* 3789 */
struct /*VFT*/ CosDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3790 */
struct __cppobj CosDNode : Node
{
};

/* 3791 */
struct /*VFT*/ SinDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3792 */
struct __cppobj SinDNode : Node
{
};

/* 3793 */
struct /*VFT*/ TanDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3794 */
struct __cppobj TanDNode : Node
{
};

/* 3795 */
struct /*VFT*/ LogDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3796 */
struct __cppobj LogDNode : Node
{
};

/* 3797 */
struct /*VFT*/ Log10DNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3798 */
struct __cppobj Log10DNode : Node
{
};

/* 3799 */
struct /*VFT*/ ExpDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3800 */
struct __cppobj ExpDNode : Node
{
};

/* 3801 */
struct /*VFT*/ PowDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3802 */
struct __cppobj PowDNode : Node
{
};

/* 3803 */
struct /*VFT*/ UncommonTrapBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 3804 */
struct __cppobj UncommonTrapBlob : SingletonBlob
{
};

/* 3805 */
struct __cppobj ciMethodHandle : ciInstance
{
};

/* 3806 */
struct __cppobj ciCallProfile : StackObj
{
  int _limit;
  int _morphism;
  int _count;
  int _receiver_count[3];
  ciMethod *_method[3];
  ciKlass *_receiver[3];
};

/* 3807 */
struct __cppobj IdealVariable : StackObj
{
  int _id;
};

/* 3808 */
struct /*VFT*/ HaltNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3809 */
struct __cppobj HaltNode : Node
{
};

/* 3810 */
struct __cppobj PhaseStringOpts : Phase
{
  PhaseGVN *_gvn;
  Unique_Node_List dead_worklist;
  int char_adr_idx;
  ciField *size_table_field;
  VectorSet _visited;
};

/* 3811 */
struct __cppobj StringConcat : ResourceObj
{
  PhaseStringOpts *_stringopts;
  Node *_string_alloc;
  AllocateNode *_begin;
  CallStaticJavaNode *_end;
  bool _multiple;
  Node *_arguments;
  GrowableArray<int> _mode;
  Node_List _constructors;
  Node_List _control;
  Node_List _uncommon_traps;
};

/* 3812 */
struct __cppobj MemBarNode : MultiNode
{
  const TypePtr *_adr_type;
  MemBarNode::<unnamed_type__kind> _kind;
};

/* 3813 */
struct __cppobj __declspec(align(4)) InitializeNode : MemBarNode
{
  int _is_complete;
  bool _does_not_escape;
};

/* 3814 */
struct __cppobj GrowableArray<StringConcat *> : GenericGrowableArray
{
  StringConcat **_data;
};

/* 3815 */
struct __cppobj PreserveJVMState : StackObj
{
  GraphKit *_kit;
  SafePointNode *_map;
  unsigned int _sp;
};

/* 3816 */
struct __cppobj PreserveReexecuteState : StackObj
{
  GraphKit *_kit;
  unsigned int _sp;
  JVMState::ReexecuteState _reexecute;
};

/* 3817 */
struct /*VFT*/ ciTypeArray_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  void (__thiscall *print_impl)(ciObject *this, outputStream *);
  bool (__thiscall *is_null_object)(ciObject *this);
  bool (__thiscall *is_call_site)(ciObject *this);
  bool (__thiscall *is_cpcache)(ciObject *this);
  bool (__thiscall *is_instance)(ciObject *this);
  bool (__thiscall *is_member_name)(ciObject *this);
  bool (__thiscall *is_method_handle)(ciObject *this);
  bool (__thiscall *is_method_type)(ciObject *this);
  bool (__thiscall *is_array)(ciObject *this);
  bool (__thiscall *is_obj_array)(ciObject *this);
  bool (__thiscall *is_type_array)(ciObject *this);
  bool (__thiscall *is_classless)(ciObject *this);
  void (__thiscall *dump_replay_data)(ciObject *this, outputStream *);
};

/* 3818 */
struct __cppobj ciTypeArray : ciArray
{
};

/* 3819 */
struct __cppobj SimpleDUIterator : StackObj
{
  Node *node;
  Node **i;
  Node **imax;
};

/* 3820 */
struct __cppobj CallProjections : StackObj
{
  Node *fallthrough_proj;
  Node *fallthrough_catchproj;
  Node *fallthrough_memproj;
  Node *fallthrough_ioproj;
  Node *catchall_catchproj;
  Node *catchall_memproj;
  Node *catchall_ioproj;
  Node *resproj;
  Node *exobj;
};

/* 3821 */
struct __cppobj small_cache : Dict
{
};

/* 3822 */
struct __cppobj NamedCounter : CHeapObj<6>
{
  const char *_name;
  int _count;
  NamedCounter::CounterTag _tag;
  NamedCounter *_next;
};

/* 3823 */
struct __declspec(align(4)) NarrowPtrStruct
{
  unsigned __int8 *_base;
  int _shift;
  bool _use_implicit_null_checks;
};

/* 3824 */
struct __cppobj AllStatic
{
};

/* 3825 */
struct __cppobj InlineCacheBuffer : AllStatic
{
};

/* 3826 */
struct __cppobj StubInterface : CHeapObj<4>
{
  StubInterface_vtbl *__vftable /*VFT*/;
};

/* 3827 */
struct /*VFT*/ StubInterface_vtbl
{
  void (__thiscall *initialize)(StubInterface *this, Stub *, int, CodeStrings *);
  void (__thiscall *finalize)(StubInterface *this, Stub *);
  int (__thiscall *size)(StubInterface *this, Stub *);
  int (__thiscall *code_size_to_size)(StubInterface *this, int);
  unsigned __int8 *(__thiscall *code_begin)(StubInterface *this, Stub *);
  unsigned __int8 *(__thiscall *code_end)(StubInterface *this, Stub *);
  void (__thiscall *verify)(StubInterface *this, Stub *);
  void (__thiscall *print)(StubInterface *this, Stub *);
};

/* 3828 */
struct __cppobj StubQueue : CHeapObj<4>
{
  StubInterface *_stub_interface;
  unsigned __int8 *_stub_buffer;
  int _buffer_size;
  int _buffer_limit;
  int _queue_begin;
  int _queue_end;
  int _number_of_stubs;
  Mutex *const _mutex;
};

/* 3829 */
struct __cppobj SimpleScopeDesc : StackObj
{
  Method *_method;
  int _bci;
};

/* 3830 */
struct __cppobj ScopeDesc : ResourceObj
{
  Method *_method;
  int _bci;
  bool _reexecute;
  bool _return_oop;
  int _decode_offset;
  int _sender_decode_offset;
  int _locals_decode_offset;
  int _expressions_decode_offset;
  int _monitors_decode_offset;
  GrowableArray<ScopeValue *> *_objects;
  const nmethod *_code;
};

/* 3831 */
struct __cppobj CompressedReadStream : CompressedStream
{
};

/* 3832 */
struct __cppobj DebugInfoReadStream : CompressedReadStream
{
  const nmethod *_code;
  GrowableArray<ScopeValue *> *_obj_pool;
};

/* 3833 */
struct __cppobj __declspec(align(2)) VtableStub
{
  VtableStub *_next;
  const __int16 _index;
  __int16 _ame_offset;
  __int16 _npe_offset;
  bool _is_vtable_stub;
};

/* 3834 */
struct __cppobj VtableStubs : AllStatic
{
};

/* 3835 */
struct __cppobj FlatProfiler : AllStatic
{
};

/* 3836 */
struct /*VFT*/ FlatProfilerTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 3837 */
struct __cppobj FlatProfilerTask : PeriodicTask
{
};

/* 3838 */
struct __cppobj vframe : ResourceObj
{
  vframe_vtbl *__vftable /*VFT*/;
  frame _fr;
  RegisterMap _reg_map;
  JavaThread *_thread;
};

/* 3839 */
struct /*VFT*/ vframe_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
};

/* 3840 */
struct __cppobj javaVFrame : vframe
{
};

/* 3841 */
struct /*VFT*/ javaVFrame_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
  Method *(__thiscall *method)(javaVFrame *this);
  int (__thiscall *bci)(javaVFrame *this);
  StackValueCollection *(__thiscall *locals)(javaVFrame *this);
  StackValueCollection *(__thiscall *expressions)(javaVFrame *this);
  GrowableArray<MonitorInfo *> *(__thiscall *monitors)(javaVFrame *this);
  void (__thiscall *set_locals)(javaVFrame *this, StackValueCollection *);
};

/* 3842 */
struct /*VFT*/ compiledVFrame_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
  Method *(__thiscall *method)(javaVFrame *this);
  int (__thiscall *bci)(javaVFrame *this);
  StackValueCollection *(__thiscall *locals)(javaVFrame *this);
  StackValueCollection *(__thiscall *expressions)(javaVFrame *this);
  GrowableArray<MonitorInfo *> *(__thiscall *monitors)(javaVFrame *this);
  void (__thiscall *set_locals)(javaVFrame *this, StackValueCollection *);
};

/* 3843 */
struct __cppobj __declspec(align(8)) compiledVFrame : javaVFrame
{
  ScopeDesc *_scope;
};

/* 3844 */
struct __cppobj GrowableArray<compiledVFrame *> : GenericGrowableArray
{
  compiledVFrame **_data;
};

/* 3845 */
struct __cppobj OptoRuntime : AllStatic
{
};

/* 3846 */
struct __cppobj JavaCallWrapper : StackObj
{
  JavaThread *_thread;
  JNIHandleBlock *_handles;
  Method *_callee_method;
  oopDesc *_receiver;
  JavaFrameAnchor _anchor;
  JavaValue *_result;
};

/* 3847 */
struct __cppobj __declspec(align(8)) ArrayKlass : Klass
{
  int _dimension;
  Klass *volatile _higher_dimension;
  Klass *volatile _lower_dimension;
  int _vtable_len;
  oopDesc *_component_mirror;
};

/* 3848 */
struct /*VFT*/ ArrayKlass_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
  GrowableArray<Klass *> *(__thiscall *compute_secondary_supers)(Klass *this, int);
  Klass *(__thiscall *java_super)(Klass *this);
  bool (__thiscall *can_be_primary_super_slow)(Klass *this);
  klassVtable *(__thiscall *vtable)(Klass *this);
  int (__thiscall *vtable_length)(Klass *this);
  void (__thiscall *check_valid_for_instantiation)(Klass *this, bool, Thread *);
  void (__thiscall *copy_array)(Klass *this, arrayOopDesc *, int, arrayOopDesc *, int, int, Thread *);
  bool (__thiscall *should_be_initialized)(Klass *this);
  void (__thiscall *initialize)(Klass *this, Thread *);
  Klass *(__thiscall *find_field)(Klass *this, Symbol *, Symbol *, fieldDescriptor *);
  Method *(__thiscall *uncached_lookup_method)(Klass *this, Symbol *, Symbol *, Klass::OverpassLookupMode);
  oopDesc *(__thiscall *protection_domain)(Klass *this);
  oopDesc *(__thiscall *klass_holder)(Klass *this);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, Thread *);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, int, Thread *);
  void (__thiscall *remove_unshareable_info)(Klass *this);
  void (__thiscall *restore_unshareable_info)(Klass *this, ClassLoaderData *, Handle, Thread *);
  bool (__thiscall *compute_is_subtype_of)(Klass *this, Klass *);
  bool (__thiscall *is_leaf_class)(Klass *this);
  int (__thiscall *oop_size)(Klass *this, oopDesc *);
  int (__thiscall *size)(Klass *this);
  void (__thiscall *collect_statistics)(Klass *this, KlassSizeStats *);
  const char *(__thiscall *signature_name)(Klass *this);
  void (__thiscall *oop_follow_contents)(Klass *this, ParCompactionManager *, oopDesc *);
  void (__thiscall *oop_follow_contents)(Klass *this, oopDesc *);
  int (__thiscall *oop_adjust_pointers)(Klass *this, oopDesc *);
  void (__thiscall *oop_push_contents)(Klass *this, PSPromotionManager *, oopDesc *);
  int (__thiscall *oop_update_pointers)(Klass *this, ParCompactionManager *, oopDesc *);
  bool (__thiscall *oop_is_instance_slow)(Klass *this);
  bool (__thiscall *oop_is_array_slow)(Klass *this);
  bool (__thiscall *oop_is_objArray_slow)(Klass *this);
  bool (__thiscall *oop_is_typeArray_slow)(Klass *this);
  bool (__thiscall *oop_is_instanceClassLoader)(Klass *this);
  bool (__thiscall *oop_is_instanceMirror)(Klass *this);
  bool (__thiscall *oop_is_instanceRef)(Klass *this);
  void (__thiscall *oops_do)(Klass *this, OopClosure *);
  int (__thiscall *oop_oop_iterate)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_v_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1TriggerClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1Mux2Closure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1RootRegionScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1CMOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterOutOfRegionClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterIntoCSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSKeepAliveClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilteringClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FastScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  void (__thiscall *array_klasses_do)(Klass *this, void (__cdecl *)(Klass *));
  int (__thiscall *compute_modifier_flags)(Klass *this, Thread *);
  int (__thiscall *jvmti_class_status)(Klass *this);
  void (__thiscall *oop_print_value_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *oop_print_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *verify_on)(Klass *this, outputStream *);
  void (__thiscall *oop_verify_on)(Klass *this, oopDesc *, outputStream *);
  oopDesc *(__thiscall *multi_allocate)(ArrayKlass *this, int, int *, Thread *);
};

/* 3849 */
struct __cppobj ResourceMark : StackObj
{
  ResourceArea *_area;
  Chunk *_chunk;
  char *_hwm;
  char *_max;
  unsigned int _size_in_bytes;
};

/* 3850 */
struct __cppobj __declspec(align(8)) TraceTime : StackObj
{
  bool _active;
  bool _verbose;
  elapsedTimer _t;
  elapsedTimer *_accum;
};

/* 3851 */
struct __cppobj __declspec(align(4)) Compile::TracePhase : TraceTime
{
  Compile *C;
  CompileLog *_log;
  const char *_phase_name;
  bool _dolog;
};

/* 3852 */
struct __cppobj StartNode : MultiNode
{
  const TypeTuple *_domain;
};

/* 3853 */
struct /*VFT*/ C2Compiler_vtbl
{
  const char *(__thiscall *name)(AbstractCompiler *this);
  bool (__thiscall *supports_native)(AbstractCompiler *this);
  bool (__thiscall *supports_osr)(AbstractCompiler *this);
  bool (__thiscall *can_compile_method)(AbstractCompiler *this, methodHandle);
  bool (__thiscall *is_c1)(AbstractCompiler *this);
  bool (__thiscall *is_c2)(AbstractCompiler *this);
  bool (__thiscall *is_shark)(AbstractCompiler *this);
  void (__thiscall *initialize)(AbstractCompiler *this);
  void (__thiscall *compile_method)(AbstractCompiler *this, ciEnv *, ciMethod *, int);
  void (__thiscall *print_timers)(AbstractCompiler *this);
};

/* 3854 */
struct __cppobj C2Compiler : AbstractCompiler
{
};

/* 3855 */
struct /*VFT*/ ObjectValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 3856 */
struct __cppobj __declspec(align(4)) ObjectValue : ScopeValue
{
  int _id;
  ScopeValue *_klass;
  GrowableArray<ScopeValue *> _field_values;
  Handle _value;
  bool _visited;
};

/* 3857 */
struct __cppobj Final_Reshape_Counts : StackObj
{
  int _call_count;
  int _float_count;
  int _double_count;
  int _java_call_count;
  int _inner_loop_count;
  VectorSet _visited;
  Node_List _tests;
};

/* 3859 */
union IndexSet::BitBlock::<unnamed_type__data>
{
  unsigned int _words[8];
  IndexSet::BitBlock *_next;
};

/* 3858 */
struct __cppobj IndexSet::BitBlock : ResourceObj
{
  IndexSet::BitBlock::<unnamed_type__data> _data;
};

/* 3860 */
struct __cppobj IndexSet : ResourceObj
{
  unsigned int _count;
  IndexSet::BitBlock **_blocks;
  IndexSet::BitBlock *_preallocated_block_list[16];
  unsigned int _max_blocks;
  IndexSet *_next;
};

/* 3861 */
struct __cppobj __declspec(align(8)) LRG : ResourceObj
{
  long double _cost;
  long double _area;
  long double _maxfreq;
  Node *_def;
  unsigned int _risk_bias;
  unsigned int _copy_bias;
  unsigned int _next;
  unsigned int _prev;
  unsigned int _reg;
  unsigned int _eff_degree;
  RegMask _mask;
  unsigned int _mask_size;
  unsigned __int8 _num_regs;
  unsigned __int8 _reg_pressure;
  unsigned __int32 _is_oop : 1;
  unsigned __int32 _is_float : 1;
  unsigned __int32 _is_vector : 1;
  unsigned __int32 _was_spilled1 : 1;
  unsigned __int32 _was_spilled2 : 1;
  unsigned __int32 _is_bound : 1;
  unsigned __int32 _direct_conflict : 1;
  unsigned __int32 _must_spill : 1;
  unsigned __int32 _fat_proj : 1;
  unsigned __int32 _was_lo : 1;
  unsigned __int32 _msize_valid : 1;
  unsigned __int32 _degree_valid : 1;
  unsigned __int32 _has_copy : 1;
  unsigned __int32 _at_risk : 1;
};

/* 3862 */
struct __cppobj PhaseIFG : Phase
{
  IndexSet *_adjs;
  bool _is_square;
  LRG *_lrgs;
  unsigned int _maxlrg;
  Arena *_arena;
  VectorSet *_yanked;
};

/* 3863 */
struct __cppobj IndexSetIterator : _ValueObj
{
  unsigned int _current;
  unsigned int _value;
  unsigned int _next_word;
  unsigned int *_words;
  unsigned int _next_block;
  IndexSet::BitBlock **_blocks;
  unsigned int _max_blocks;
  IndexSet *_set;
};

/* 3864 */
struct __cppobj PhaseLive : Phase
{
  IndexSet *_live;
  IndexSet *_defs;
  IndexSet **_deltas;
  IndexSet *_free_IndexSet;
  Block_List *_worklist;
  const PhaseCFG *_cfg;
  const GrowableArray<unsigned int> *_names;
  unsigned int _maxlrg;
  Arena *_arena;
};

/* 3865 */
struct __cppobj LiveRangeMap : _ValueObj
{
  unsigned int _max_lrg_id;
  GrowableArray<unsigned int> _uf_map;
  GrowableArray<unsigned int> _names;
};

/* 3866 */
struct /*VFT*/ PhaseChaitin_vtbl
{
  void (__thiscall *Register_Allocate)(PhaseRegAlloc *this);
  void (__thiscall *add_reference)(PhaseRegAlloc *this, const Node *, const Node *);
};

/* 3867 */
struct __cppobj PhaseChaitin : PhaseRegAlloc
{
  int _trip_cnt;
  int _alternate;
  PhaseLive *_live;
  PhaseIFG *_ifg;
  Node_List **_lrg_nodes;
  VectorSet _spilled_once;
  VectorSet _spilled_twice;
  unsigned int _lo_degree;
  unsigned int _lo_stk_degree;
  unsigned int _hi_degree;
  unsigned int _simplified;
  unsigned int _oldphi;
  Block **_blks;
  float _high_frequency_lrg;
  LiveRangeMap _lrg_map;
};

/* 3868 */
struct __cppobj PhaseChaitin::RegDefUse
{
  Node *_def;
  Node *_first_use;
};

/* 3869 */
struct __cppobj GrowableArray<PhaseChaitin::RegDefUse> : GenericGrowableArray
{
  PhaseChaitin::RegDefUse *_data;
};

/* 3870 */
struct __cppobj MachMergeNode : MachIdealNode
{
};

/* 3871 */
struct /*VFT*/ PhasePeephole_vtbl
{
  ConNode *(__thiscall *uncached_makecon)(PhaseTransform *this, const Type *);
  Node *(__thiscall *transform)(PhaseTransform *this, Node *);
  const Type *(__thiscall *saturate)(PhaseTransform *this, const Type *, const Type *, const Type *);
  PhaseIterGVN *(__thiscall *is_IterGVN)(PhaseTransform *this);
};

/* 3872 */
struct __cppobj PhasePeephole : PhaseTransform
{
  PhaseRegAlloc *_regalloc;
  PhaseCFG *_cfg;
};

/* 3873 */
struct __cppobj PhaseCCP : PhaseIterGVN
{
};

/* 3874 */
struct __cppobj PhaseRemoveUseless : Phase
{
  Unique_Node_List _useful;
};

/* 3875 */
struct __cppobj PhaseRenumberLive : PhaseRemoveUseless
{
};

/* 3876 */
struct __cppobj Bytecode : StackObj
{
  unsigned __int8 *const _bcp;
  const Bytecodes::Code _code;
};

/* 3877 */
struct __cppobj RawBytecodeStream : BaseBytecodeStream
{
};

/* 3882 */
struct __cppobj RetTable : _ValueObj
{
  RetTableEntry *_first;
};

/* 3878 */
struct __cppobj GenerateOopMap : _ValueObj
{
  GenerateOopMap_vtbl *__vftable /*VFT*/;
  methodHandle _method;
  RetTable _rt;
  int _max_locals;
  int _max_stack;
  int _max_monitors;
  int _has_exceptions;
  bool _got_error;
  Handle _exception;
  bool _did_rewriting;
  bool _did_relocation;
  bool _monitor_safe;
  int _state_len;
  CellTypeState *_state;
  char *_state_vec_buf;
  int _stack_top;
  int _monitor_top;
  BasicBlock *_basic_blocks;
  int _gc_points;
  int _bb_count;
  BitMap _bb_hdr_bits;
  bool _report_result;
  bool _report_result_for_send;
  BytecodeStream *_itr_send;
  GrowableArray<int> *_init_vars;
  bool _conflict;
  int _nof_refval_conflicts;
  int *_new_var_map;
  GrowableArray<int> *_ret_adr_tos;
};

/* 3879 */
struct __cppobj CellTypeState : _ValueObj
{
  unsigned int _state;
};

/* 3880 */
struct /*VFT*/ GenerateOopMap_vtbl
{
  bool (__thiscall *allow_rewrites)(GenerateOopMap *this);
  bool (__thiscall *report_results)(GenerateOopMap *this);
  bool (__thiscall *report_init_vars)(GenerateOopMap *this);
  bool (__thiscall *possible_gc_point)(GenerateOopMap *this, BytecodeStream *);
  void (__thiscall *fill_stackmap_prolog)(GenerateOopMap *this, int);
  void (__thiscall *fill_stackmap_epilog)(GenerateOopMap *this);
  void (__thiscall *fill_stackmap_for_opcodes)(GenerateOopMap *this, BytecodeStream *, CellTypeState *, CellTypeState *, int);
  void (__thiscall *fill_init_vars)(GenerateOopMap *this, GrowableArray<int> *);
};

/* 3881 */
struct __cppobj RetTableEntry : ResourceObj
{
  int _target_bci;
  GrowableArray<int> *_jsrs;
  RetTableEntry *_next;
};

/* 3883 */
struct __cppobj BasicBlock : ResourceObj
{
  bool _changed;
  int _bci;
  int _end_bci;
  int _max_locals;
  int _max_stack;
  CellTypeState *_state;
  int _stack_top;
  int _monitor_top;
};

/* 3884 */
struct /*VFT*/ ResolveOopMapConflicts_vtbl
{
  bool (__thiscall *allow_rewrites)(GenerateOopMap *this);
  bool (__thiscall *report_results)(GenerateOopMap *this);
  bool (__thiscall *report_init_vars)(GenerateOopMap *this);
  bool (__thiscall *possible_gc_point)(GenerateOopMap *this, BytecodeStream *);
  void (__thiscall *fill_stackmap_prolog)(GenerateOopMap *this, int);
  void (__thiscall *fill_stackmap_epilog)(GenerateOopMap *this);
  void (__thiscall *fill_stackmap_for_opcodes)(GenerateOopMap *this, BytecodeStream *, CellTypeState *, CellTypeState *, int);
  void (__thiscall *fill_init_vars)(GenerateOopMap *this, GrowableArray<int> *);
};

/* 3885 */
struct __cppobj __declspec(align(4)) ResolveOopMapConflicts : GenerateOopMap
{
  bool _must_clear_locals;
};

/* 3886 */
struct /*VFT*/ GeneratePairingInfo_vtbl
{
  bool (__thiscall *allow_rewrites)(GenerateOopMap *this);
  bool (__thiscall *report_results)(GenerateOopMap *this);
  bool (__thiscall *report_init_vars)(GenerateOopMap *this);
  bool (__thiscall *possible_gc_point)(GenerateOopMap *this, BytecodeStream *);
  void (__thiscall *fill_stackmap_prolog)(GenerateOopMap *this, int);
  void (__thiscall *fill_stackmap_epilog)(GenerateOopMap *this);
  void (__thiscall *fill_stackmap_for_opcodes)(GenerateOopMap *this, BytecodeStream *, CellTypeState *, CellTypeState *, int);
  void (__thiscall *fill_init_vars)(GenerateOopMap *this, GrowableArray<int> *);
};

/* 3887 */
struct __cppobj GeneratePairingInfo : GenerateOopMap
{
};

/* 3888 */
struct __cppobj SwitchRange : CompilationResourceObj
{
  int _low_key;
  int _high_key;
  BlockBegin *_sux;
};

/* 3889 */
struct __cppobj __declspec(align(4)) ciExceptionHandlerStream : StackObj
{
  ciMethod *_method;
  int _pos;
  int _end;
  ciInstanceKlass *_exception_klass;
  int _bci;
  bool _is_exact;
};

/* 3890 */
struct __cppobj BuildCutout : PreserveJVMState
{
};

/* 3891 */
struct __cppobj AddNode : Node
{
};

/* 3892 */
struct /*VFT*/ AddNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 3893 */
struct /*VFT*/ AddFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 3894 */
struct __cppobj AddFNode : AddNode
{
};

/* 3895 */
struct /*VFT*/ XorLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 3896 */
struct __cppobj XorLNode : AddNode
{
};

/* 3897 */
struct /*VFT*/ ConvD2FNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3898 */
struct __cppobj ConvD2FNode : Node
{
};

/* 3899 */
struct /*VFT*/ ConvD2INode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3900 */
struct __cppobj ConvD2INode : Node
{
};

/* 3901 */
struct /*VFT*/ ConvF2DNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3902 */
struct __cppobj ConvF2DNode : Node
{
};

/* 3903 */
struct /*VFT*/ ConvF2INode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3904 */
struct __cppobj ConvF2INode : Node
{
};

/* 3905 */
struct /*VFT*/ ConvF2LNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3906 */
struct __cppobj ConvF2LNode : Node
{
};

/* 3907 */
struct /*VFT*/ ConvI2DNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3908 */
struct __cppobj ConvI2DNode : Node
{
};

/* 3909 */
struct /*VFT*/ ConvI2FNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3910 */
struct __cppobj ConvI2FNode : Node
{
};

/* 3911 */
struct /*VFT*/ ConvL2FNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3912 */
struct __cppobj ConvL2FNode : Node
{
};

/* 3913 */
struct __cppobj JProjNode : ProjNode
{
};

/* 3914 */
struct __cppobj JumpProjNode : JProjNode
{
  const int _dest_bci;
  const unsigned int _proj_no;
  const int _switch_val;
};

/* 3915 */
struct /*VFT*/ CmpL3Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3916 */
struct __cppobj CmpL3Node : CmpLNode
{
};

/* 3917 */
struct /*VFT*/ CmpF3Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3918 */
struct __cppobj CmpF3Node : CmpFNode
{
};

/* 3919 */
struct /*VFT*/ CmpD3Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3920 */
struct __cppobj CmpD3Node : CmpDNode
{
};

/* 3921 */
struct /*VFT*/ NegNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3922 */
struct __cppobj NegNode : Node
{
};

/* 3923 */
struct /*VFT*/ NegFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3924 */
struct __cppobj NegFNode : NegNode
{
};

/* 3925 */
struct __cppobj PCTableNode : MultiBranchNode
{
  const unsigned int _size;
};

/* 3926 */
struct __cppobj JumpNode : PCTableNode
{
};

/* 3927 */
struct __cppobj constantTag : _ValueObj
{
  char _tag;
};

/* 3928 */
struct __cppobj ConPNode : ConNode
{
};

/* 3929 */
struct __cppobj MergeMemStream : StackObj
{
  MergeMemNode *_mm;
  const MergeMemNode *_mm2;
  Node *_mm_base;
  int _idx;
  int _cnt;
  Node *_mem;
  Node *_mem2;
  int _cnt2;
};

/* 3930 */
struct /*VFT*/ Opaque2Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3931 */
struct __cppobj Opaque2Node : Node
{
};

/* 3932 */
struct /*VFT*/ Opaque3Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3933 */
struct __cppobj Opaque3Node : Opaque2Node
{
  int _opt;
};

/* 3934 */
struct __cppobj Scheduling
{
  Arena *_arena;
  PhaseCFG *_cfg;
  PhaseRegAlloc *_regalloc;
  unsigned int _node_bundling_limit;
  Node_List _scheduled;
  Node_List _available;
  Bundle *_node_bundling_base;
  Node_List _reg_node;
  Node_List _pinch_free_list;
  unsigned __int16 *_node_latency;
  __int16 *_uses;
  unsigned int _bb_start;
  unsigned int _bb_end;
  unsigned __int16 *_current_latency;
  Node *_next_node;
  Node *_unconditional_delay_slot;
  MachNopNode *_nop;
  unsigned int _bundle_instr_count;
  unsigned int _bundle_cycle_number;
  Pipeline_Use_Element _bundle_use_elements[9];
  Pipeline_Use _bundle_use;
};

/* 3935 */
struct __cppobj NonSafepointEmitter
{
  Compile *C;
  JVMState *_pending_jvms;
  int _pending_offset;
};

/* 3936 */
struct /*VFT*/ LocationValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 3937 */
struct __cppobj LocationValue : ScopeValue
{
  Location _location;
};

/* 3938 */
union jlong_accessor
{
  int words[2];
  __int64 long_value;
};

/* 3939 */
struct /*VFT*/ OverflowNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 3940 */
struct __cppobj OverflowNode : CmpNode
{
};

/* 3941 */
struct __cppobj OverflowINode : OverflowNode
{
};

/* 3942 */
struct /*VFT*/ OverflowINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowINode *this, int, int);
  bool (__thiscall *can_overflow)(OverflowINode *this, const Type *, const Type *);
};

/* 3943 */
struct __cppobj OverflowLNode : OverflowNode
{
};

/* 3944 */
struct /*VFT*/ OverflowLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowLNode *this, __int64, __int64);
  bool (__thiscall *can_overflow)(OverflowLNode *this, const Type *, const Type *);
};

/* 3945 */
struct /*VFT*/ AddINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 3946 */
struct __cppobj AddINode : AddNode
{
};

/* 3947 */
struct /*VFT*/ OverflowAddINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowINode *this, int, int);
  bool (__thiscall *can_overflow)(OverflowINode *this, const Type *, const Type *);
};

/* 3948 */
struct __cppobj OverflowAddINode : OverflowINode
{
};

/* 3949 */
struct /*VFT*/ OverflowSubINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowINode *this, int, int);
  bool (__thiscall *can_overflow)(OverflowINode *this, const Type *, const Type *);
};

/* 3950 */
struct __cppobj OverflowSubINode : OverflowINode
{
};

/* 3951 */
struct __cppobj MulNode : Node
{
};

/* 3952 */
struct /*VFT*/ MulNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3953 */
struct /*VFT*/ MulINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3954 */
struct __cppobj MulINode : MulNode
{
};

/* 3955 */
struct /*VFT*/ OverflowMulINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowINode *this, int, int);
  bool (__thiscall *can_overflow)(OverflowINode *this, const Type *, const Type *);
};

/* 3956 */
struct __cppobj OverflowMulINode : OverflowINode
{
};

/* 3957 */
struct /*VFT*/ AddLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 3958 */
struct __cppobj AddLNode : AddNode
{
};

/* 3959 */
struct /*VFT*/ OverflowAddLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowLNode *this, __int64, __int64);
  bool (__thiscall *can_overflow)(OverflowLNode *this, const Type *, const Type *);
};

/* 3960 */
struct __cppobj OverflowAddLNode : OverflowLNode
{
};

/* 3961 */
struct /*VFT*/ OverflowSubLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowLNode *this, __int64, __int64);
  bool (__thiscall *can_overflow)(OverflowLNode *this, const Type *, const Type *);
};

/* 3962 */
struct __cppobj OverflowSubLNode : OverflowLNode
{
};

/* 3963 */
struct /*VFT*/ MulLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3964 */
struct __cppobj MulLNode : MulNode
{
};

/* 3965 */
struct /*VFT*/ OverflowMulLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
  bool (__thiscall *will_overflow)(OverflowLNode *this, __int64, __int64);
  bool (__thiscall *can_overflow)(OverflowLNode *this, const Type *, const Type *);
};

/* 3966 */
struct __cppobj OverflowMulLNode : OverflowLNode
{
};

/* 3967 */
struct __cppobj ShenandoahBarrierC2Support : AllStatic
{
};

/* 3968 */
struct /*VFT*/ MulFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3969 */
struct __cppobj MulFNode : MulNode
{
};

/* 3970 */
struct /*VFT*/ MulDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3971 */
struct __cppobj MulDNode : MulNode
{
};

/* 3972 */
struct /*VFT*/ MulHiLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3973 */
struct __cppobj MulHiLNode : Node
{
};

/* 3974 */
struct /*VFT*/ AndINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3975 */
struct __cppobj AndINode : MulINode
{
};

/* 3976 */
struct /*VFT*/ AndLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *mul_ring)(MulNode *this, const Type *, const Type *);
  const Type *(__thiscall *mul_id)(MulNode *this);
  const Type *(__thiscall *add_id)(MulNode *this);
  int (__thiscall *add_opcode)(MulNode *this);
  int (__thiscall *mul_opcode)(MulNode *this);
};

/* 3977 */
struct __cppobj AndLNode : MulLNode
{
};

/* 3978 */
struct /*VFT*/ LShiftINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3979 */
struct __cppobj LShiftINode : Node
{
};

/* 3980 */
struct /*VFT*/ LShiftLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3981 */
struct __cppobj LShiftLNode : Node
{
};

/* 3982 */
struct /*VFT*/ RShiftINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3983 */
struct __cppobj RShiftINode : Node
{
};

/* 3984 */
struct /*VFT*/ RShiftLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3985 */
struct __cppobj RShiftLNode : Node
{
};

/* 3986 */
struct /*VFT*/ URShiftINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3987 */
struct __cppobj URShiftINode : Node
{
};

/* 3988 */
struct /*VFT*/ URShiftLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3989 */
struct __cppobj URShiftLNode : Node
{
};

/* 3990 */
struct /*VFT*/ LoadPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 3991 */
struct __cppobj LoadPNode : LoadNode
{
};

/* 3992 */
struct /*VFT*/ LoadKlassNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 3993 */
struct __cppobj LoadKlassNode : LoadPNode
{
};

/* 3994 */
struct __cppobj SCMemProjNode : ProjNode
{
};

/* 3995 */
struct /*VFT*/ ClearArrayNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3996 */
struct __cppobj ClearArrayNode : Node
{
};

/* 3997 */
struct /*VFT*/ StrIntrinsicNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 3998 */
struct __cppobj StrIntrinsicNode : Node
{
};

/* 3999 */
struct /*VFT*/ EncodeISOArrayNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4000 */
struct __cppobj EncodeISOArrayNode : Node
{
};

/* 4001 */
struct /*VFT*/ LoadUBNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4002 */
struct __cppobj LoadUBNode : LoadNode
{
};

/* 4003 */
struct /*VFT*/ LoadUSNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4004 */
struct __cppobj LoadUSNode : LoadNode
{
};

/* 4005 */
struct /*VFT*/ LoadSNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4006 */
struct __cppobj LoadSNode : LoadNode
{
};

/* 4007 */
struct /*VFT*/ StoreBNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4008 */
struct __cppobj StoreBNode : StoreNode
{
};

/* 4009 */
struct /*VFT*/ StoreCNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4010 */
struct __cppobj StoreCNode : StoreNode
{
};

/* 4011 */
struct /*VFT*/ StoreINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4012 */
struct __cppobj StoreINode : StoreNode
{
};

/* 4013 */
struct /*VFT*/ StoreLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4014 */
struct __cppobj __declspec(align(4)) StoreLNode : StoreNode
{
  const bool _require_atomic_access;
};

/* 4015 */
struct /*VFT*/ StoreFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4016 */
struct __cppobj StoreFNode : StoreNode
{
};

/* 4017 */
struct /*VFT*/ StoreDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4018 */
struct __cppobj __declspec(align(4)) StoreDNode : StoreNode
{
  const bool _require_atomic_access;
};

/* 4019 */
struct /*VFT*/ LoadLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4020 */
struct __cppobj __declspec(align(4)) LoadLNode : LoadNode
{
  const bool _require_atomic_access;
};

/* 4021 */
struct /*VFT*/ LoadDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4022 */
struct __cppobj __declspec(align(4)) LoadDNode : LoadNode
{
  const bool _require_atomic_access;
};

/* 4023 */
struct /*VFT*/ LoadINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4024 */
struct __cppobj LoadINode : LoadNode
{
};

/* 4025 */
struct /*VFT*/ LoadRangeNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4026 */
struct __cppobj LoadRangeNode : LoadINode
{
};

/* 4027 */
struct /*VFT*/ StoreCMNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4028 */
struct __cppobj StoreCMNode : StoreNode
{
  int _oop_alias_idx;
};

/* 4029 */
struct __cppobj EncodeNarrowPtrNode : TypeNode
{
};

/* 4030 */
struct __cppobj MemBarStoreStoreNode : MemBarNode
{
};

/* 4031 */
struct __cppobj MemBarCPUOrderNode : MemBarNode
{
};

/* 4032 */
union InitializeNode::coalesce_subword_stores::__l38::<unnamed_type_u>
{
  __int64 con;
  int intcon[2];
};

/* 4033 */
struct /*VFT*/ LoadBNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4034 */
struct __cppobj LoadBNode : LoadNode
{
};

/* 4035 */
struct __cppobj AddHelper<OverflowAddINode>
{
};

/* 4036 */
struct __cppobj SubHelper<OverflowSubINode>
{
};

/* 4037 */
struct __cppobj AddHelper<OverflowAddLNode>
{
};

/* 4038 */
struct __cppobj SubHelper<OverflowSubLNode>
{
};

/* 4039 */
struct __cppobj MulHelper<OverflowMulINode>
{
};

/* 4040 */
struct __cppobj MulHelper<OverflowMulLNode>
{
};

/* 4041 */
struct __cppobj IdealHelper<OverflowINode>
{
};

/* 4042 */
struct __cppobj IdealHelper<OverflowLNode>
{
};

/* 4043 */
struct __cppobj MStack : Node_Stack
{
};

/* 4044 */
struct __cppobj FusedPatternMatcher<TypeInt>
{
  Node *_op1_node;
  Node *_mop_node;
  int _con_op;
};

/* 4045 */
struct __cppobj FusedPatternMatcher<TypeLong>
{
  Node *_op1_node;
  Node *_mop_node;
  int _con_op;
};

/* 4046 */
struct /*VFT*/ BinaryNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4047 */
struct __cppobj BinaryNode : Node
{
};

/* 4048 */
struct /*VFT*/ LoadFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4049 */
struct __cppobj LoadFNode : LoadNode
{
};

/* 4050 */
struct __cppobj __declspec(align(4)) PhaseMacroExpand : Phase
{
  PhaseIterGVN *_igvn;
  ProjNode *_fallthroughproj;
  ProjNode *_fallthroughcatchproj;
  ProjNode *_ioproj_fallthrough;
  ProjNode *_ioproj_catchall;
  ProjNode *_catchallcatchproj;
  ProjNode *_memproj_fallthrough;
  ProjNode *_memproj_catchall;
  ProjNode *_resproj;
  bool _has_locks;
};

/* 4051 */
struct __cppobj AllocateArrayNode : AllocateNode
{
};

/* 4052 */
struct __cppobj GrowableArray<SafePointNode *> : GenericGrowableArray
{
  SafePointNode **_data;
};

/* 4053 */
struct __cppobj UnlockNode : AbstractLockNode
{
};

/* 4054 */
struct /*VFT*/ StorePNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 4055 */
struct __cppobj StorePNode : StoreNode
{
};

/* 4056 */
struct /*VFT*/ LoadPLockedNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4057 */
struct __cppobj LoadPLockedNode : LoadPNode
{
};

/* 4058 */
struct /*VFT*/ StorePConditionalNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4059 */
struct __cppobj StorePConditionalNode : LoadStoreConditionalNode
{
};

/* 4060 */
struct /*VFT*/ StoreIConditionalNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4061 */
struct __cppobj StoreIConditionalNode : LoadStoreConditionalNode
{
};

/* 4062 */
struct /*VFT*/ PrefetchAllocationNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4063 */
struct __cppobj PrefetchAllocationNode : Node
{
};

/* 4064 */
struct __cppobj DecodeNarrowPtrNode : TypeNode
{
};

/* 4065 */
struct __cppobj SafePointScalarObjectNode : TypeNode
{
  unsigned int _first_index;
  unsigned int _n_fields;
};

/* 4066 */
struct __cppobj MachNullCheckNode : MachBranchNode
{
  const unsigned int _vidx;
};

/* 4067 */
struct __cppobj __declspec(align(8)) MachProjNode : ProjNode
{
  RegMask _rout;
  const unsigned int _ideal_reg;
};

/* 4068 */
struct /*VFT*/ MaxNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4069 */
struct __cppobj MaxNode : AddNode
{
};

/* 4070 */
struct /*VFT*/ MaxINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4071 */
struct __cppobj MaxINode : MaxNode
{
};

/* 4072 */
struct __cppobj LoopTreeIterator : StackObj
{
  IdealLoopTree *_root;
  IdealLoopTree *_curnt;
};

/* 4073 */
struct __cppobj Invariance : StackObj
{
  VectorSet _visited;
  VectorSet _invariant;
  Node_Stack _stack;
  VectorSet _clone_visited;
  Node_List _old_new;
  IdealLoopTree *_lpt;
  PhaseIdealLoop *_phase;
};

/* 4074 */
struct /*VFT*/ OrLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4075 */
struct __cppobj OrLNode : AddNode
{
};

/* 4076 */
struct /*VFT*/ LoopLimitNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4077 */
struct __cppobj LoopLimitNode : Node
{
};

/* 4078 */
struct __cppobj NeverBranchNode : MultiBranchNode
{
};

/* 4079 */
struct __cppobj ShenandoahRuntime : AllStatic
{
};

/* 4080 */
struct /*VFT*/ AddDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4081 */
struct __cppobj AddDNode : AddNode
{
};

/* 4082 */
struct /*VFT*/ ConvD2LNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4083 */
struct __cppobj ConvD2LNode : Node
{
};

/* 4084 */
struct /*VFT*/ ConvL2DNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4085 */
struct __cppobj ConvL2DNode : Node
{
};

/* 4086 */
struct /*VFT*/ ProfileBooleanNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4087 */
struct __cppobj __declspec(align(4)) ProfileBooleanNode : Node
{
  unsigned int _false_cnt;
  unsigned int _true_cnt;
  bool _consumed;
  bool _delay_removal;
};

/* 4088 */
struct /*VFT*/ MoveI2FNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4089 */
struct __cppobj MoveI2FNode : Node
{
};

/* 4090 */
struct /*VFT*/ MoveL2DNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4091 */
struct __cppobj MoveL2DNode : Node
{
};

/* 4092 */
struct /*VFT*/ MoveF2INode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4093 */
struct __cppobj MoveF2INode : Node
{
};

/* 4094 */
struct /*VFT*/ MoveD2LNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4095 */
struct __cppobj MoveD2LNode : Node
{
};

/* 4096 */
struct /*VFT*/ CountBitsNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4097 */
struct __cppobj CountBitsNode : Node
{
};

/* 4098 */
struct /*VFT*/ GetAndAddINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4099 */
struct __cppobj GetAndAddINode : LoadStoreNode
{
};

/* 4100 */
struct /*VFT*/ GetAndAddLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4101 */
struct __cppobj GetAndAddLNode : LoadStoreNode
{
};

/* 4102 */
struct /*VFT*/ GetAndSetINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4103 */
struct __cppobj GetAndSetINode : LoadStoreNode
{
};

/* 4104 */
struct /*VFT*/ GetAndSetLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4105 */
struct __cppobj GetAndSetLNode : LoadStoreNode
{
};

/* 4106 */
struct /*VFT*/ GetAndSetPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4107 */
struct __cppobj GetAndSetPNode : LoadStoreNode
{
};

/* 4108 */
struct /*VFT*/ StrCompNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4109 */
struct __cppobj StrCompNode : StrIntrinsicNode
{
};

/* 4110 */
struct /*VFT*/ StrEqualsNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4111 */
struct __cppobj StrEqualsNode : StrIntrinsicNode
{
};

/* 4112 */
struct /*VFT*/ StrIndexOfNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4113 */
struct __cppobj StrIndexOfNode : StrIntrinsicNode
{
};

/* 4114 */
struct /*VFT*/ AryEqNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4115 */
struct __cppobj AryEqNode : StrIntrinsicNode
{
};

/* 4116 */
struct /*VFT*/ PrefetchReadNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4117 */
struct __cppobj PrefetchReadNode : Node
{
};

/* 4118 */
struct /*VFT*/ PrefetchWriteNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4119 */
struct __cppobj PrefetchWriteNode : Node
{
};

/* 4120 */
struct /*VFT*/ NegDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4121 */
struct __cppobj NegDNode : NegNode
{
};

/* 4122 */
struct /*VFT*/ ReverseBytesINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4123 */
struct __cppobj ReverseBytesINode : Node
{
};

/* 4124 */
struct /*VFT*/ ReverseBytesLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4125 */
struct __cppobj ReverseBytesLNode : Node
{
};

/* 4126 */
struct /*VFT*/ ReverseBytesUSNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4127 */
struct __cppobj ReverseBytesUSNode : Node
{
};

/* 4128 */
struct /*VFT*/ ReverseBytesSNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4129 */
struct __cppobj ReverseBytesSNode : Node
{
};

/* 4130 */
struct __cppobj ShenandoahAllocRequest : StackObj
{
  unsigned int _min_size;
  unsigned int _requested_size;
  unsigned int _actual_size;
  ShenandoahAllocRequest::Type _alloc_type;
};

/* 4131 */
struct __cppobj ShenandoahLocker : StackObj
{
  ShenandoahLock *_lock;
};

/* 4132 */
struct __cppobj ShenandoahHeapRegionClosure : StackObj
{
  ShenandoahHeapRegionClosure_vtbl *__vftable /*VFT*/;
};

/* 4133 */
struct /*VFT*/ ShenandoahHeapRegionClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4134 */
struct /*VFT*/ ShenandoahWorkGang_vtbl
{
  void (__thiscall *run_task)(AbstractWorkGang *this, AbstractGangTask *);
  void (__thiscall *stop)(AbstractWorkGang *this);
  bool (__thiscall *needs_more_workers)(AbstractWorkGang *this);
  unsigned int (__thiscall *active_workers)(AbstractWorkGang *this);
  GangWorker *(__thiscall *allocate_worker)(WorkGang *this, unsigned int);
};

/* 4135 */
struct __cppobj ShenandoahWorkGang : FlexibleWorkGang
{
};

/* 4136 */
struct RangeCheck
{
  Node *ctl;
  int off;
};

/* 4137 */
struct __cppobj CProjNode : ProjNode
{
};

/* 4138 */
struct __cppobj IfTrueNode : CProjNode
{
};

/* 4139 */
struct __cppobj IfFalseNode : CProjNode
{
};

/* 4140 */
struct __cppobj PhaseCoalesce : Phase
{
  PhaseCoalesce_vtbl *__vftable /*VFT*/;
  PhaseChaitin *_phc;
};

/* 4141 */
struct /*VFT*/ PhaseCoalesce_vtbl
{
  void (__thiscall *verify)(PhaseCoalesce *this);
  void (__thiscall *coalesce)(PhaseCoalesce *this, Block *);
};

/* 4142 */
struct /*VFT*/ PhaseAggressiveCoalesce_vtbl
{
  void (__thiscall *verify)(PhaseCoalesce *this);
  void (__thiscall *coalesce)(PhaseCoalesce *this, Block *);
};

/* 4143 */
struct __cppobj PhaseAggressiveCoalesce : PhaseCoalesce
{
  unsigned int _unique;
};

/* 4144 */
struct /*VFT*/ OrINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4145 */
struct __cppobj OrINode : AddNode
{
};

/* 4146 */
struct /*VFT*/ RoundFloatNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4147 */
struct __cppobj RoundFloatNode : Node
{
};

/* 4148 */
struct /*VFT*/ RoundDoubleNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4149 */
struct __cppobj RoundDoubleNode : Node
{
};

/* 4150 */
struct /*VFT*/ PartialSubtypeCheckNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4151 */
struct __cppobj PartialSubtypeCheckNode : Node
{
};

/* 4152 */
struct __cppobj CallRuntimeNode : CallNode
{
  const char *_name;
};

/* 4153 */
struct __cppobj CallLeafNode : CallRuntimeNode
{
};

/* 4154 */
struct __cppobj CallLeafNoFPNode : CallLeafNode
{
};

/* 4155 */
struct __cppobj ciMethodType : ciInstance
{
};

/* 4156 */
struct /*VFT*/ ciObjArray_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  void (__thiscall *print_impl)(ciObject *this, outputStream *);
  bool (__thiscall *is_null_object)(ciObject *this);
  bool (__thiscall *is_call_site)(ciObject *this);
  bool (__thiscall *is_cpcache)(ciObject *this);
  bool (__thiscall *is_instance)(ciObject *this);
  bool (__thiscall *is_member_name)(ciObject *this);
  bool (__thiscall *is_method_handle)(ciObject *this);
  bool (__thiscall *is_method_type)(ciObject *this);
  bool (__thiscall *is_array)(ciObject *this);
  bool (__thiscall *is_obj_array)(ciObject *this);
  bool (__thiscall *is_type_array)(ciObject *this);
  bool (__thiscall *is_classless)(ciObject *this);
  void (__thiscall *dump_replay_data)(ciObject *this, outputStream *);
};

/* 4157 */
struct __cppobj ciObjArray : ciArray
{
};

/* 4158 */
struct /*VFT*/ Opaque1Node_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4159 */
struct __cppobj Opaque1Node : Node
{
};

/* 4160 */
struct /*VFT*/ ReturnNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4161 */
struct __cppobj ReturnNode : Node
{
};

/* 4162 */
struct /*VFT*/ TailJumpNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4163 */
struct __cppobj TailJumpNode : ReturnNode
{
};

/* 4164 */
struct __cppobj Node_Backward_Iterator
{
  VectorSet *_visited;
  Node_List *_stack;
  PhaseCFG *_cfg;
};

/* 4165 */
struct __cppobj BCEscapeAnalyzer::ArgumentMap
{
  unsigned int _bits;
};

/* 4166 */
struct __cppobj BCEscapeAnalyzer::StateInfo
{
  BCEscapeAnalyzer::ArgumentMap *_vars;
  BCEscapeAnalyzer::ArgumentMap *_stack;
  int _stack_height;
  int _max_stack;
  bool _initialized;
  BCEscapeAnalyzer::ArgumentMap empty_map;
};

/* 4167 */
struct __cppobj LocalVarNode : PointsToNode
{
};

/* 4168 */
struct __cppobj __declspec(align(4)) FieldNode : PointsToNode
{
  GrowableArray<PointsToNode *> _bases;
  const int _offset;
  const bool _is_oop;
  bool _has_unknown_base;
};

/* 4169 */
struct __cppobj ArraycopyNode : PointsToNode
{
};

/* 4170 */
struct __cppobj PointsToIterator : StackObj
{
  const PointsToNode *node;
  const int cnt;
  int i;
};

/* 4171 */
struct __cppobj EdgeIterator : PointsToIterator
{
};

/* 4172 */
struct __cppobj UseIterator : PointsToIterator
{
};

/* 4173 */
struct __cppobj BaseIterator : PointsToIterator
{
};

/* 4174 */
struct __cppobj GrowableArray<JavaObjectNode *> : GenericGrowableArray
{
  JavaObjectNode **_data;
};

/* 4175 */
struct __cppobj GrowableArray<FieldNode *> : GenericGrowableArray
{
  FieldNode **_data;
};

/* 4176 */
struct __cppobj GrowableArray<PhiNode *> : GenericGrowableArray
{
  PhiNode **_data;
};

/* 4177 */
struct /*VFT*/ AddPNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4178 */
struct __cppobj AddPNode : Node
{
};

/* 4179 */
struct Tarjan
{
  Block *_block;
  unsigned int _semi;
  unsigned int _size;
  Tarjan *_parent;
  Tarjan *_label;
  Tarjan *_ancestor;
  Tarjan *_child;
  Tarjan *_dom;
  Tarjan *_bucket;
  Tarjan *_dom_child;
  Tarjan *_dom_next;
};

/* 4180 */
struct Block_Stack::Block_Descr
{
  Block *block;
  int index;
  int freq_idx;
};

/* 4181 */
struct __cppobj Block_Stack
{
  Block_Stack::Block_Descr *_stack_top;
  Block_Stack::Block_Descr *_stack_max;
  Block_Stack::Block_Descr *_stack;
  Tarjan *_tarjan;
};

/* 4182 */
struct NTarjan
{
  Node *_control;
  unsigned int _semi;
  unsigned int _size;
  NTarjan *_parent;
  NTarjan *_label;
  NTarjan *_ancestor;
  NTarjan *_child;
  NTarjan *_dom;
  NTarjan *_bucket;
  NTarjan *_dom_child;
  NTarjan *_dom_next;
};

/* 4183 */
struct __cppobj GrowableArray<Type const *> : GenericGrowableArray
{
  const Type **_data;
};

/* 4184 */
struct __cppobj CatchProjNode : CProjNode
{
  const int _handler_bci;
};

/* 4185 */
struct __cppobj CreateExNode : TypeNode
{
};

/* 4186 */
struct __cppobj ConstraintCastNode : TypeNode
{
};

/* 4187 */
struct __cppobj __declspec(align(4)) CastIINode : ConstraintCastNode
{
  const bool _carry_dependency;
  const bool _range_check_dependency;
};

/* 4188 */
struct /*VFT*/ ConvL2INode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4189 */
struct __cppobj ConvL2INode : Node
{
};

/* 4190 */
struct __cppobj CMoveNode : TypeNode
{
};

/* 4191 */
struct __cppobj CheckCastPPNode : TypeNode
{
};

/* 4192 */
struct __cppobj DecodeNNode : DecodeNarrowPtrNode
{
};

/* 4193 */
struct __cppobj EncodePKlassNode : EncodeNarrowPtrNode
{
};

/* 4194 */
struct /*VFT*/ Conv2BNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4195 */
struct __cppobj Conv2BNode : Node
{
};

/* 4196 */
struct __cppobj ConvI2LNode : TypeNode
{
};

/* 4197 */
struct /*VFT*/ CastX2PNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4198 */
struct __cppobj CastX2PNode : Node
{
};

/* 4199 */
struct /*VFT*/ CastP2XNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4200 */
struct __cppobj CastP2XNode : Node
{
};

/* 4201 */
struct /*VFT*/ CountLeadingZerosINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4202 */
struct __cppobj CountLeadingZerosINode : CountBitsNode
{
};

/* 4203 */
struct /*VFT*/ CountLeadingZerosLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4204 */
struct __cppobj CountLeadingZerosLNode : CountBitsNode
{
};

/* 4205 */
struct /*VFT*/ CountTrailingZerosINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4206 */
struct __cppobj CountTrailingZerosINode : CountBitsNode
{
};

/* 4207 */
struct /*VFT*/ CountTrailingZerosLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4208 */
struct __cppobj CountTrailingZerosLNode : CountBitsNode
{
};

/* 4209 */
struct __cppobj CMovePNode : CMoveNode
{
};

/* 4210 */
struct __cppobj CMoveNNode : CMoveNode
{
};

/* 4211 */
struct __cppobj CMoveINode : CMoveNode
{
};

/* 4212 */
struct __cppobj CMoveFNode : CMoveNode
{
};

/* 4213 */
struct __cppobj CMoveDNode : CMoveNode
{
};

/* 4214 */
struct __cppobj CompileWrapper : StackObj
{
  Compile *const _compile;
};

/* 4215 */
struct __cppobj CFGEdge : ResourceObj
{
  Block *_from;
  Block *_to;
  float _freq;
  int _state;
  bool _infrequent;
  int _from_pct;
  int _to_pct;
};

/* 4216 */
struct __cppobj GrowableArray<CFGEdge *> : GenericGrowableArray
{
  CFGEdge **_data;
};

/* 4217 */
struct __cppobj Trace : ResourceObj
{
  unsigned int _id;
  Block **_next_list;
  Block **_prev_list;
  Block *_first;
  Block *_last;
};

/* 4218 */
struct __cppobj __declspec(align(4)) UnionFind : ResourceObj
{
  unsigned int _cnt;
  unsigned int _max;
  unsigned int *_indices;
  ReallocMark _nesting;
};

/* 4219 */
struct __cppobj PhaseBlockLayout : Phase
{
  PhaseCFG *_cfg;
  GrowableArray<CFGEdge *> *edges;
  Trace **traces;
  Block **next;
  Block **prev;
  UnionFind *uf;
};

/* 4220 */
struct /*VFT*/ PhaseConservativeCoalesce_vtbl
{
  void (__thiscall *verify)(PhaseCoalesce *this);
  void (__thiscall *coalesce)(PhaseCoalesce *this, Block *);
};

/* 4221 */
struct __cppobj PhaseConservativeCoalesce : PhaseCoalesce
{
  IndexSet _ulr;
};

/* 4222 */
struct /*VFT*/ AbsNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4223 */
struct __cppobj AbsNode : Node
{
};

/* 4224 */
struct /*VFT*/ AbsDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4225 */
struct __cppobj AbsDNode : AbsNode
{
};

/* 4226 */
struct /*VFT*/ AbsFNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4227 */
struct __cppobj AbsFNode : AbsNode
{
};

/* 4228 */
struct __cppobj CallDynamicJavaNode : CallJavaNode
{
  int _vtable_index;
};

/* 4229 */
struct __cppobj CastPPNode : ConstraintCastNode
{
};

/* 4230 */
struct __cppobj CatchNode : PCTableNode
{
};

/* 4231 */
struct __cppobj CMoveLNode : CMoveNode
{
};

/* 4232 */
struct /*VFT*/ CmpLTMaskNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4233 */
struct __cppobj CmpLTMaskNode : Node
{
};

/* 4234 */
struct /*VFT*/ CompareAndSwapINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4235 */
struct __cppobj CompareAndSwapINode : LoadStoreConditionalNode
{
};

/* 4236 */
struct /*VFT*/ CompareAndSwapLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4237 */
struct __cppobj CompareAndSwapLNode : LoadStoreConditionalNode
{
};

/* 4238 */
struct __cppobj ConNNode : ConNode
{
};

/* 4239 */
struct __cppobj ConNKlassNode : ConNode
{
};

/* 4240 */
struct __cppobj ConDNode : ConNode
{
};

/* 4241 */
struct __cppobj ConFNode : ConNode
{
};

/* 4242 */
struct /*VFT*/ GotoNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4243 */
struct __cppobj GotoNode : Node
{
};

/* 4244 */
struct /*VFT*/ LoadD_unalignedNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4245 */
struct __cppobj LoadD_unalignedNode : LoadDNode
{
};

/* 4246 */
struct /*VFT*/ LoadL_unalignedNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 4247 */
struct __cppobj LoadL_unalignedNode : LoadLNode
{
};

/* 4248 */
struct __cppobj MemBarAcquireNode : MemBarNode
{
};

/* 4249 */
struct __cppobj LoadFenceNode : MemBarNode
{
};

/* 4250 */
struct __cppobj MemBarAcquireLockNode : MemBarNode
{
};

/* 4251 */
struct __cppobj MemBarReleaseNode : MemBarNode
{
};

/* 4252 */
struct __cppobj StoreFenceNode : MemBarNode
{
};

/* 4253 */
struct __cppobj MemBarReleaseLockNode : MemBarNode
{
};

/* 4254 */
struct __cppobj MemBarVolatileNode : MemBarNode
{
};

/* 4255 */
struct /*VFT*/ MinINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4256 */
struct __cppobj MinINode : MaxNode
{
};

/* 4257 */
struct __cppobj ParmNode : ProjNode
{
};

/* 4258 */
struct /*VFT*/ PopCountINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4259 */
struct __cppobj PopCountINode : CountBitsNode
{
};

/* 4260 */
struct /*VFT*/ PopCountLNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4261 */
struct __cppobj PopCountLNode : CountBitsNode
{
};

/* 4262 */
struct /*VFT*/ RethrowNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4263 */
struct __cppobj RethrowNode : Node
{
};

/* 4264 */
struct __cppobj StartOSRNode : StartNode
{
};

/* 4265 */
struct /*VFT*/ TailCallNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4266 */
struct __cppobj TailCallNode : ReturnNode
{
};

/* 4267 */
struct /*VFT*/ ThreadLocalNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 4268 */
struct __cppobj ThreadLocalNode : Node
{
};

/* 4269 */
struct /*VFT*/ XorINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *add_of_identity)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_ring)(AddNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(AddNode *this);
};

/* 4270 */
struct __cppobj XorINode : AddNode
{
};

/* 4271 */
struct __cppobj AddVBNode : VectorNode
{
};

/* 4272 */
struct __cppobj AddVSNode : VectorNode
{
};

/* 4273 */
struct __cppobj AddVINode : VectorNode
{
};

/* 4274 */
struct __cppobj AddVLNode : VectorNode
{
};

/* 4275 */
struct __cppobj AddVFNode : VectorNode
{
};

/* 4276 */
struct __cppobj AddVDNode : VectorNode
{
};

/* 4277 */
struct __cppobj SubVBNode : VectorNode
{
};

/* 4278 */
struct __cppobj SubVSNode : VectorNode
{
};

/* 4279 */
struct __cppobj SubVINode : VectorNode
{
};

/* 4280 */
struct __cppobj SubVLNode : VectorNode
{
};

/* 4281 */
struct __cppobj SubVFNode : VectorNode
{
};

/* 4282 */
struct __cppobj SubVDNode : VectorNode
{
};

/* 4283 */
struct __cppobj MulVSNode : VectorNode
{
};

/* 4284 */
struct __cppobj MulVINode : VectorNode
{
};

/* 4285 */
struct __cppobj MulVFNode : VectorNode
{
};

/* 4286 */
struct __cppobj MulVDNode : VectorNode
{
};

/* 4287 */
struct __cppobj DivVFNode : VectorNode
{
};

/* 4288 */
struct __cppobj DivVDNode : VectorNode
{
};

/* 4289 */
struct __cppobj LShiftVBNode : VectorNode
{
};

/* 4290 */
struct __cppobj LShiftVSNode : VectorNode
{
};

/* 4291 */
struct __cppobj LShiftVINode : VectorNode
{
};

/* 4292 */
struct __cppobj LShiftVLNode : VectorNode
{
};

/* 4293 */
struct __cppobj RShiftVBNode : VectorNode
{
};

/* 4294 */
struct __cppobj RShiftVSNode : VectorNode
{
};

/* 4295 */
struct __cppobj RShiftVINode : VectorNode
{
};

/* 4296 */
struct __cppobj RShiftVLNode : VectorNode
{
};

/* 4297 */
struct __cppobj URShiftVBNode : VectorNode
{
};

/* 4298 */
struct __cppobj URShiftVSNode : VectorNode
{
};

/* 4299 */
struct __cppobj URShiftVINode : VectorNode
{
};

/* 4300 */
struct __cppobj URShiftVLNode : VectorNode
{
};

/* 4301 */
struct __cppobj AndVNode : VectorNode
{
};

/* 4302 */
struct __cppobj OrVNode : VectorNode
{
};

/* 4303 */
struct __cppobj XorVNode : VectorNode
{
};

/* 4304 */
struct __cppobj Pack2LNode : PackNode
{
};

/* 4305 */
struct __cppobj Pack2DNode : PackNode
{
};

/* 4306 */
struct __cppobj GrowableArray<AbstractLockNode *> : GenericGrowableArray
{
  AbstractLockNode **_data;
};

/* 4307 */
struct __cppobj ciMemberName : ciInstance
{
};

/* 4308 */
struct __cppobj instanceHandle : Handle
{
};

/* 4309 */
struct /*VFT*/ ParseGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4310 */
struct __cppobj ParseGenerator : InlineCallGenerator
{
  bool _is_osr;
  float _expected_uses;
};

/* 4311 */
struct /*VFT*/ DirectCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4312 */
struct __cppobj __declspec(align(4)) DirectCallGenerator : CallGenerator
{
  CallStaticJavaNode *_call_node;
  bool _separate_io_proj;
};

/* 4313 */
struct /*VFT*/ VirtualCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4314 */
struct __cppobj VirtualCallGenerator : CallGenerator
{
  int _vtable_index;
};

/* 4315 */
struct __cppobj LateInlineCallGenerator : DirectCallGenerator
{
  CallGenerator *_inline_cg;
};

/* 4316 */
struct /*VFT*/ LateInlineCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
  bool (__thiscall *do_late_inline_check)(LateInlineCallGenerator *this, JVMState *);
};

/* 4317 */
struct /*VFT*/ LateInlineMHCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
  bool (__thiscall *do_late_inline_check)(LateInlineCallGenerator *this, JVMState *);
};

/* 4318 */
struct __cppobj __declspec(align(4)) LateInlineMHCallGenerator : LateInlineCallGenerator
{
  ciMethod *_caller;
  int _attempt;
  bool _input_not_const;
};

/* 4319 */
struct /*VFT*/ LateInlineStringCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
  bool (__thiscall *do_late_inline_check)(LateInlineCallGenerator *this, JVMState *);
};

/* 4320 */
struct __cppobj LateInlineStringCallGenerator : LateInlineCallGenerator
{
};

/* 4321 */
struct /*VFT*/ LateInlineBoxingCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
  bool (__thiscall *do_late_inline_check)(LateInlineCallGenerator *this, JVMState *);
};

/* 4322 */
struct __cppobj LateInlineBoxingCallGenerator : LateInlineCallGenerator
{
};

/* 4323 */
struct /*VFT*/ WarmCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4324 */
struct __cppobj __declspec(align(4)) WarmCallGenerator : CallGenerator
{
  WarmCallInfo *_call_info;
  CallGenerator *_if_cold;
  CallGenerator *_if_hot;
  bool _is_virtual;
  bool _is_inline;
};

/* 4325 */
struct /*VFT*/ PredictedCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4326 */
struct __cppobj PredictedCallGenerator : CallGenerator
{
  ciKlass *_predicted_receiver;
  CallGenerator *_if_missed;
  CallGenerator *_if_hit;
  float _hit_prob;
};

/* 4327 */
struct __cppobj PredicatedIntrinsicGenerator : CallGenerator
{
  CallGenerator *_intrinsic;
  CallGenerator *_cg;
};

/* 4328 */
struct /*VFT*/ PredicatedIntrinsicGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
  bool (__thiscall *is_inlined)(PredicatedIntrinsicGenerator *this);
};

/* 4329 */
struct /*VFT*/ UncommonTrapCallGenerator_vtbl
{
  bool (__thiscall *is_inline)(CallGenerator *this);
  bool (__thiscall *is_intrinsic)(CallGenerator *this);
  bool (__thiscall *is_parse)(CallGenerator *this);
  bool (__thiscall *is_virtual)(CallGenerator *this);
  bool (__thiscall *is_deferred)(CallGenerator *this);
  bool (__thiscall *is_predicated)(CallGenerator *this);
  int (__thiscall *predicates_count)(CallGenerator *this);
  bool (__thiscall *is_trap)(CallGenerator *this);
  bool (__thiscall *does_virtual_dispatch)(CallGenerator *this);
  bool (__thiscall *is_late_inline)(CallGenerator *this);
  bool (__thiscall *is_mh_late_inline)(CallGenerator *this);
  bool (__thiscall *is_string_late_inline)(CallGenerator *this);
  bool (__thiscall *already_attempted)(CallGenerator *this);
  void (__thiscall *do_late_inline)(CallGenerator *this);
  CallStaticJavaNode *(__thiscall *call_node)(CallGenerator *this);
  JVMState *(__thiscall *generate)(CallGenerator *this, JVMState *);
  Node *(__thiscall *generate_predicate)(CallGenerator *this, JVMState *, int);
  void (__thiscall *print_inlining_late)(CallGenerator *this, const char *);
};

/* 4330 */
struct __cppobj UncommonTrapCallGenerator : CallGenerator
{
  Deoptimization::DeoptReason _reason;
  Deoptimization::DeoptAction _action;
};

/* 4331 */
struct __cppobj OopFlow : ResourceObj
{
  __int16 *_callees;
  Node **_defs;
  Block *_b;
  OopFlow *_next;
  Compile *C;
};

/* 4332 */
struct __cppobj OptoReg : _ValueObj
{
};

/* 4333 */
struct __cppobj boolArray : ResourceArray
{
};

/* 4334 */
struct __cppobj BlockPair : CompilationResourceObj
{
  BlockBegin *_from;
  BlockBegin *_to;
};

/* 4335 */
struct __cppobj BlockPairArray : ResourceArray
{
};

/* 4336 */
struct __cppobj BlockPairList : BlockPairArray
{
  int _size;
};

/* 4337 */
struct __cppobj XHandler : CompilationResourceObj
{
  ciExceptionHandler *_desc;
  BlockBegin *_entry_block;
  LIR_List *_entry_code;
  int _entry_pco;
  int _phi_operand;
  int _scope_count;
};

/* 4338 */
struct /*VFT*/ SubstitutionResolver_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4339 */
struct __cppobj SubstitutionResolver : BlockClosure, ValueVisitor
{
  _BYTE gap4[4];
};

/* 4340 */
struct __cppobj Runtime1 : AllStatic
{
};

/* 4341 */
struct /*VFT*/ StubAssembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
  void (__thiscall *call_VM_leaf_base)(MacroAssembler *this, unsigned __int8 *, int);
  void (__thiscall *call_VM_base)(MacroAssembler *this, RegisterImpl *, RegisterImpl *, RegisterImpl *, unsigned __int8 *, int, bool);
  void (__thiscall *check_and_handle_popframe)(MacroAssembler *this, RegisterImpl *);
  void (__thiscall *check_and_handle_earlyret)(MacroAssembler *this, RegisterImpl *);
};

/* 4342 */
struct __cppobj StubAssembler : C1_MacroAssembler
{
  const char *_name;
  bool _must_gc_arguments;
  int _frame_size;
  int _num_rt_args;
  int _stub_id;
};

/* 4343 */
struct __cppobj ValueSet : CompilationResourceObj
{
  BitMap _map;
};

/* 4344 */
struct /*VFT*/ Canonicalizer_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
};

/* 4345 */
struct __cppobj Canonicalizer : InstructionVisitor
{
  Compilation *_compilation;
  Instruction *_canonical;
  int _bci;
};

/* 4346 */
struct __cppobj ValueMapEntry : CompilationResourceObj
{
  int _hash;
  Instruction *_value;
  int _nesting;
  ValueMapEntry *_next;
};

/* 4347 */
struct __cppobj ValueMapEntryArray : ResourceArray
{
};

/* 4348 */
struct __cppobj ValueMapEntryList : ValueMapEntryArray
{
  int _size;
};

/* 4349 */
struct __cppobj ValueMap : CompilationResourceObj
{
  int _nesting;
  ValueMapEntryArray _entries;
  ValueSet _killed_values;
  int _entry_count;
};

/* 4350 */
struct __cppobj ValueMapArray : ResourceArray
{
};

/* 4351 */
struct __cppobj ValueNumberingVisitor : InstructionVisitor
{
};

/* 4352 */
struct /*VFT*/ ValueNumberingVisitor_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
  void (__thiscall *kill_memory)(ValueNumberingVisitor *this);
  void (__thiscall *kill_field)(ValueNumberingVisitor *this, ciField *, bool);
  void (__thiscall *kill_array)(ValueNumberingVisitor *this, ValueType *);
};

/* 4353 */
struct /*VFT*/ ValueNumberingEffects_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
  void (__thiscall *kill_memory)(ValueNumberingVisitor *this);
  void (__thiscall *kill_field)(ValueNumberingVisitor *this, ciField *, bool);
  void (__thiscall *kill_array)(ValueNumberingVisitor *this, ValueType *);
};

/* 4354 */
struct __cppobj ValueNumberingEffects : ValueNumberingVisitor
{
  ValueMap *_map;
};

/* 4355 */
struct /*VFT*/ GlobalValueNumbering_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
  void (__thiscall *kill_memory)(ValueNumberingVisitor *this);
  void (__thiscall *kill_field)(ValueNumberingVisitor *this, ciField *, bool);
  void (__thiscall *kill_array)(ValueNumberingVisitor *this, ValueType *);
};

/* 4356 */
struct __cppobj __declspec(align(4)) GlobalValueNumbering : ValueNumberingVisitor
{
  Compilation *_compilation;
  ValueMap *_current_map;
  ValueMapArray _value_maps;
  ValueSet _processed_values;
  bool _has_substitutions;
};

/* 4357 */
struct /*VFT*/ ShortLoopOptimizer_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
  void (__thiscall *kill_memory)(ValueNumberingVisitor *this);
  void (__thiscall *kill_field)(ValueNumberingVisitor *this, ciField *, bool);
  void (__thiscall *kill_array)(ValueNumberingVisitor *this, ValueType *);
};

/* 4358 */
struct __cppobj __declspec(align(4)) ShortLoopOptimizer : ValueNumberingVisitor
{
  GlobalValueNumbering *_gvn;
  BlockList _loop_blocks;
  bool _too_complicated_loop;
  bool _has_field_store[14];
  bool _has_indexed_store[14];
};

/* 4359 */
struct __cppobj __declspec(align(4)) LoopInvariantCodeMotion : StackObj
{
  GlobalValueNumbering *_gvn;
  ShortLoopOptimizer *_short_loop_optimizer;
  Instruction *_insertion_point;
  ValueStack *_state;
  bool _insert_is_pred;
};

/* 4360 */
struct __cppobj CompilationPolicy : CHeapObj<6>
{
  CompilationPolicy_vtbl *__vftable /*VFT*/;
};

/* 4361 */
struct __cppobj CompileQueue : CHeapObj<6>
{
  const char *_name;
  Monitor *_lock;
  CompileTask *_first;
  CompileTask *_last;
  CompileTask *_first_stale;
  int _size;
};

/* 4362 */
struct /*VFT*/ CompilationPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
};

/* 4363 */
struct /*VFT*/ CounterOverflowStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4364 */
struct __cppobj CounterOverflowStub : CodeStub
{
  CodeEmitInfo *_info;
  int _bci;
  LIR_OprDesc *_method;
};

/* 4365 */
struct /*VFT*/ RangeCheckStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4366 */
struct __cppobj __declspec(align(4)) RangeCheckStub : CodeStub
{
  CodeEmitInfo *_info;
  LIR_OprDesc *_index;
  bool _throw_index_out_of_bounds_exception;
};

/* 4367 */
struct /*VFT*/ PredicateFailedStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4368 */
struct __cppobj PredicateFailedStub : CodeStub
{
  CodeEmitInfo *_info;
};

/* 4369 */
struct /*VFT*/ DivByZeroStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4370 */
struct __cppobj DivByZeroStub : CodeStub
{
  CodeEmitInfo *_info;
  int _offset;
};

/* 4371 */
struct /*VFT*/ ImplicitNullCheckStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4372 */
struct __cppobj ImplicitNullCheckStub : CodeStub
{
  CodeEmitInfo *_info;
  int _offset;
};

/* 4373 */
struct /*VFT*/ NewInstanceStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4374 */
struct __cppobj NewInstanceStub : CodeStub
{
  ciInstanceKlass *_klass;
  LIR_OprDesc *_klass_reg;
  LIR_OprDesc *_result;
  CodeEmitInfo *_info;
  Runtime1::StubID _stub_id;
};

/* 4375 */
struct /*VFT*/ NewTypeArrayStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4376 */
struct __cppobj NewTypeArrayStub : CodeStub
{
  LIR_OprDesc *_klass_reg;
  LIR_OprDesc *_length;
  LIR_OprDesc *_result;
  CodeEmitInfo *_info;
};

/* 4377 */
struct /*VFT*/ NewObjectArrayStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4378 */
struct __cppobj NewObjectArrayStub : CodeStub
{
  LIR_OprDesc *_klass_reg;
  LIR_OprDesc *_length;
  LIR_OprDesc *_result;
  CodeEmitInfo *_info;
};

/* 4379 */
struct /*VFT*/ MonitorAccessStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4380 */
struct __cppobj MonitorAccessStub : CodeStub
{
  LIR_OprDesc *_obj_reg;
  LIR_OprDesc *_lock_reg;
};

/* 4381 */
struct /*VFT*/ MonitorEnterStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4382 */
struct __cppobj MonitorEnterStub : MonitorAccessStub
{
  CodeEmitInfo *_info;
};

/* 4383 */
struct /*VFT*/ MonitorExitStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4384 */
struct __cppobj MonitorExitStub : MonitorAccessStub
{
  bool _compute_lock;
  int _monitor_ix;
};

/* 4385 */
struct /*VFT*/ PatchingStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4386 */
struct __cppobj PatchingStub : CodeStub
{
  PatchingStub::PatchID _id;
  unsigned __int8 *_pc_start;
  int _bytes_to_copy;
  Label _patched_code_entry;
  Label _patch_site_entry;
  Label _patch_site_continuation;
  RegisterImpl *_obj;
  CodeEmitInfo *_info;
  int _index;
};

/* 4387 */
struct /*VFT*/ DeoptimizeStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4388 */
struct __cppobj DeoptimizeStub : CodeStub
{
  CodeEmitInfo *_info;
};

/* 4389 */
struct /*VFT*/ SimpleExceptionStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4390 */
struct __cppobj SimpleExceptionStub : CodeStub
{
  LIR_OprDesc *_obj;
  Runtime1::StubID _stub;
  CodeEmitInfo *_info;
};

/* 4391 */
struct /*VFT*/ ArrayStoreExceptionStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4392 */
struct __cppobj ArrayStoreExceptionStub : SimpleExceptionStub
{
  CodeEmitInfo *_info;
};

/* 4393 */
struct /*VFT*/ G1PreBarrierStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4394 */
struct __cppobj G1PreBarrierStub : CodeStub
{
  bool _do_load;
  LIR_OprDesc *_addr;
  LIR_OprDesc *_pre_val;
  LIR_PatchCode _patch_code;
  CodeEmitInfo *_info;
};

/* 4395 */
struct /*VFT*/ G1PostBarrierStub_vtbl
{
  void (__thiscall *emit_code)(CodeStub *this, LIR_Assembler *);
  CodeEmitInfo *(__thiscall *info)(CodeStub *this);
  bool (__thiscall *is_exception_throw_stub)(CodeStub *this);
  bool (__thiscall *is_range_check_stub)(CodeStub *this);
  bool (__thiscall *is_divbyzero_stub)(CodeStub *this);
  bool (__thiscall *is_simple_exception_stub)(CodeStub *this);
  void (__thiscall *visit)(CodeStub *this, LIR_OpVisitState *);
};

/* 4396 */
struct __cppobj G1PostBarrierStub : CodeStub
{
  LIR_OprDesc *_addr;
  LIR_OprDesc *_new_val;
};

/* 4397 */
struct __cppobj NonTieredCompPolicy : CompilationPolicy
{
  int _compiler_count;
};

/* 4398 */
struct /*VFT*/ NonTieredCompPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
  void (__thiscall *method_invocation_event)(NonTieredCompPolicy *this, methodHandle, JavaThread *);
  void (__thiscall *method_back_branch_event)(NonTieredCompPolicy *this, methodHandle, int, JavaThread *);
};

/* 4399 */
struct __cppobj SurrogateLockerThread : JavaThread
{
  SurrogateLockerThread::SLT_msg_type _buffer;
  Monitor _monitor;
  BasicLock _basicLock;
};

/* 4400 */
struct __cppobj ShenandoahForwarding
{
};

/* 4401 */
struct __cppobj SuspendibleThreadSet : AllStatic
{
};

/* 4402 */
struct __cppobj SuspendibleThreadSetJoiner : StackObj
{
};

/* 4403 */
struct __cppobj ShenandoahHeapRegionSet : CHeapObj<5>
{
  ShenandoahHeap *const _heap;
  const unsigned int _map_size;
  const unsigned int _region_size_bytes_shift;
  char *const _set_map;
  char *const _biased_set_map;
  unsigned int _region_count;
};

/* 4404 */
struct __cppobj ShenandoahEvacOOMScope : StackObj
{
};

/* 4405 */
struct __cppobj ThreadStateTransition : StackObj
{
  JavaThread *_thread;
};

/* 4406 */
struct __cppobj ThreadInVMfromJava : ThreadStateTransition
{
};

/* 4407 */
struct __cppobj ExceptionMark
{
  Thread *_thread;
};

/* 4408 */
struct __cppobj Bytecode_instanceof : Bytecode
{
};

/* 4409 */
struct __cppobj Bytecode_new : Bytecode
{
};

/* 4410 */
struct __cppobj Bytecode_multianewarray : Bytecode
{
};

/* 4411 */
struct __cppobj Bytecode_anewarray : Bytecode
{
};

/* 4412 */
struct __cppobj ThreadInVMfromJavaNoAsyncException : ThreadStateTransition
{
};

/* 4413 */
struct __cppobj FieldInfo : _ValueObj
{
  unsigned __int16 _shorts[6];
};

/* 4414 */
struct __cppobj Bytecode_member_ref : Bytecode
{
  const methodHandle _method;
};

/* 4415 */
struct __cppobj Bytecode_field : Bytecode_member_ref
{
};

/* 4416 */
struct __cppobj __declspec(align(8)) vframeStreamCommon : StackObj
{
  frame _frame;
  JavaThread *_thread;
  RegisterMap _reg_map;
  vframeStreamCommon::<unnamed_type__mode> _mode;
  int _sender_decode_offset;
  Method *_method;
  int _bci;
  bool _stop_at_java_call_stub;
};

/* 4417 */
struct __cppobj vframeStream : vframeStreamCommon
{
};

/* 4418 */
struct __cppobj HandleMarkCleaner : StackObj
{
  Thread *_thread;
};

/* 4419 */
struct __cppobj Bytecode_checkcast : Bytecode
{
};

/* 4420 */
struct __cppobj Bytecode_loadconstant : Bytecode
{
  const methodHandle _method;
};

/* 4421 */
struct __cppobj Bytecode_invoke : Bytecode_member_ref
{
};

/* 4422 */
struct __cppobj MutexLockerEx : StackObj
{
  Monitor *_mutex;
};

/* 4423 */
struct __cppobj DataRelocation : Relocation
{
};

/* 4424 */
struct /*VFT*/ DataRelocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4425 */
struct /*VFT*/ oop_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4426 */
struct __cppobj oop_Relocation : DataRelocation
{
  int _oop_index;
  int _offset;
};

/* 4427 */
struct /*VFT*/ metadata_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4428 */
struct __cppobj metadata_Relocation : DataRelocation
{
  int _metadata_index;
  int _offset;
};

/* 4429 */
struct /*VFT*/ opt_virtual_call_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4430 */
struct __cppobj opt_virtual_call_Relocation : CallRelocation
{
};

/* 4431 */
struct /*VFT*/ static_call_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4432 */
struct __cppobj static_call_Relocation : CallRelocation
{
};

/* 4433 */
struct /*VFT*/ runtime_call_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4434 */
struct __cppobj runtime_call_Relocation : CallRelocation
{
};

/* 4435 */
struct /*VFT*/ external_word_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4436 */
struct __cppobj external_word_Relocation : DataRelocation
{
  unsigned __int8 *_target;
};

/* 4437 */
struct /*VFT*/ internal_word_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4438 */
struct __cppobj internal_word_Relocation : DataRelocation
{
  unsigned __int8 *_target;
  int _section;
};

/* 4439 */
struct /*VFT*/ poll_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4440 */
struct __cppobj poll_Relocation : Relocation
{
};

/* 4441 */
struct /*VFT*/ poll_return_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4442 */
struct __cppobj poll_return_Relocation : Relocation
{
};

/* 4443 */
struct /*VFT*/ section_word_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
  int (__thiscall *offset)(DataRelocation *this);
};

/* 4444 */
struct __cppobj section_word_Relocation : internal_word_Relocation
{
};

/* 4445 */
struct /*VFT*/ trampoline_stub_Relocation_vtbl
{
  void (__thiscall *pack_data_to)(Relocation *this, CodeSection *);
  void (__thiscall *unpack_data)(Relocation *this);
  relocInfo::relocType (__thiscall *type)(Relocation *this);
  bool (__thiscall *is_call)(Relocation *this);
  bool (__thiscall *is_data)(Relocation *this);
  unsigned __int8 *(__thiscall *value)(Relocation *this);
  void (__thiscall *set_value)(Relocation *this, unsigned __int8 *);
  void (__thiscall *clear_inline_cache)(Relocation *this);
  void (__thiscall *fix_relocation_after_move)(Relocation *this, const CodeBuffer *, CodeBuffer *);
};

/* 4446 */
struct __cppobj trampoline_stub_Relocation : Relocation
{
  unsigned __int8 *_owner;
};

/* 4447 */
struct __cppobj RangeCheckEliminator::BlockBeginArray : ResourceArray
{
};

/* 4448 */
struct __cppobj RangeCheckEliminator::BlockBeginList : RangeCheckEliminator::BlockBeginArray
{
  int _size;
};

/* 4449 */
struct __cppobj RangeCheckEliminator::IntegerStack : intArray
{
  int _size;
};

/* 4450 */
struct __cppobj RangeCheckEliminator::IntegerMap : ResourceArray
{
};

/* 4451 */
struct /*VFT*/ RangeCheckEliminator::Verification_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4452 */
struct __cppobj RangeCheckEliminator::Verification : BlockClosure, _ValueObj
{
  _BYTE gap4;
  IR *_ir;
  boolArray _used;
  RangeCheckEliminator::BlockBeginList _current;
  RangeCheckEliminator::BlockBeginList _successors;
};

/* 4453 */
struct __cppobj RangeCheckEliminator::Bound : CompilationResourceObj
{
  int _upper;
  Instruction *_upper_instr;
  int _lower;
  Instruction *_lower_instr;
};

/* 4454 */
struct __cppobj RangeCheckEliminator::BoundMap : ResourceArray
{
};

/* 4455 */
struct __cppobj RangeCheckEliminator::AccessIndexedInfoArray : ResourceArray
{
};

/* 4456 */
struct __cppobj RangeCheckEliminator::Visitor : InstructionVisitor
{
  RangeCheckEliminator::Bound *_bound;
  RangeCheckEliminator *_rce;
};

/* 4457 */
struct __cppobj RangeCheckEliminator : _ValueObj
{
  int _number_of_instructions;
  bool _optimistic;
  IR *_ir;
  RangeCheckEliminator::BoundMap _bounds;
  RangeCheckEliminator::AccessIndexedInfoArray _access_indexed_info;
  __unaligned __declspec(align(1)) RangeCheckEliminator::Visitor _visitor;
};

/* 4458 */
struct /*VFT*/ RangeCheckEliminator::Visitor_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
};

/* 4459 */
struct __cppobj RangeCheckEliminator::BoundArray : ResourceArray
{
};

/* 4460 */
struct __cppobj RangeCheckEliminator::BoundStack : RangeCheckEliminator::BoundArray
{
  int _size;
};

/* 4461 */
struct __cppobj RangeCheckEliminator::AccessIndexedArray : ResourceArray
{
};

/* 4462 */
struct __cppobj RangeCheckEliminator::AccessIndexedList : RangeCheckEliminator::AccessIndexedArray
{
  int _size;
};

/* 4463 */
struct __cppobj RangeCheckEliminator::InstructionArray : ResourceArray
{
};

/* 4464 */
struct __cppobj RangeCheckEliminator::InstructionList : RangeCheckEliminator::InstructionArray
{
  int _size;
};

/* 4465 */
struct __cppobj RangeCheckEliminator::AccessIndexedInfo : CompilationResourceObj
{
  RangeCheckEliminator::AccessIndexedList *_list;
  int _min;
  int _max;
};

/* 4466 */
struct __cppobj RangeCheckElimination : AllStatic
{
};

/* 4467 */
struct __cppobj Optimizer : _ValueObj
{
  IR *_ir;
};

/* 4468 */
struct __cppobj ValueSetArray : ResourceArray
{
};

/* 4469 */
struct __cppobj ValueSetList : ValueSetArray
{
  int _size;
};

/* 4470 */
struct /*VFT*/ CE_Eliminator_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4471 */
struct __cppobj CE_Eliminator : BlockClosure
{
  IR *_hir;
  int _cee_count;
  int _ifop_count;
  int _has_substitution;
};

/* 4472 */
struct /*VFT*/ BlockMerger_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4473 */
struct __cppobj BlockMerger : BlockClosure
{
  IR *_hir;
  int _merge_count;
};

/* 4476 */
struct __cppobj NullCheckVisitor : InstructionVisitor
{
  NullCheckEliminator *_nce;
};

/* 4474 */
struct __cppobj NullCheckEliminator : ValueVisitor
{
  Optimizer *_opt;
  ValueSet *_visitable_instructions;
  BlockList *_work_list;
  ValueSet *_set;
  ValueSetList _block_states;
  NullCheckVisitor _visitor;
  NullCheck *_last_explicit_null_check;
};

/* 4475 */
struct /*VFT*/ NullCheckVisitor_vtbl
{
  void (__thiscall *do_Phi)(InstructionVisitor *this, Phi *);
  void (__thiscall *do_Local)(InstructionVisitor *this, Local *);
  void (__thiscall *do_Constant)(InstructionVisitor *this, Constant *);
  void (__thiscall *do_LoadField)(InstructionVisitor *this, LoadField *);
  void (__thiscall *do_StoreField)(InstructionVisitor *this, StoreField *);
  void (__thiscall *do_ArrayLength)(InstructionVisitor *this, ArrayLength *);
  void (__thiscall *do_LoadIndexed)(InstructionVisitor *this, LoadIndexed *);
  void (__thiscall *do_StoreIndexed)(InstructionVisitor *this, StoreIndexed *);
  void (__thiscall *do_NegateOp)(InstructionVisitor *this, NegateOp *);
  void (__thiscall *do_ArithmeticOp)(InstructionVisitor *this, ArithmeticOp *);
  void (__thiscall *do_ShiftOp)(InstructionVisitor *this, ShiftOp *);
  void (__thiscall *do_LogicOp)(InstructionVisitor *this, LogicOp *);
  void (__thiscall *do_CompareOp)(InstructionVisitor *this, CompareOp *);
  void (__thiscall *do_IfOp)(InstructionVisitor *this, IfOp *);
  void (__thiscall *do_Convert)(InstructionVisitor *this, Convert *);
  void (__thiscall *do_NullCheck)(InstructionVisitor *this, NullCheck *);
  void (__thiscall *do_TypeCast)(InstructionVisitor *this, TypeCast *);
  void (__thiscall *do_Invoke)(InstructionVisitor *this, Invoke *);
  void (__thiscall *do_NewInstance)(InstructionVisitor *this, NewInstance *);
  void (__thiscall *do_NewTypeArray)(InstructionVisitor *this, NewTypeArray *);
  void (__thiscall *do_NewObjectArray)(InstructionVisitor *this, NewObjectArray *);
  void (__thiscall *do_NewMultiArray)(InstructionVisitor *this, NewMultiArray *);
  void (__thiscall *do_CheckCast)(InstructionVisitor *this, CheckCast *);
  void (__thiscall *do_InstanceOf)(InstructionVisitor *this, InstanceOf *);
  void (__thiscall *do_MonitorEnter)(InstructionVisitor *this, MonitorEnter *);
  void (__thiscall *do_MonitorExit)(InstructionVisitor *this, MonitorExit *);
  void (__thiscall *do_Intrinsic)(InstructionVisitor *this, Intrinsic *);
  void (__thiscall *do_BlockBegin)(InstructionVisitor *this, BlockBegin *);
  void (__thiscall *do_Goto)(InstructionVisitor *this, Goto *);
  void (__thiscall *do_If)(InstructionVisitor *this, If *);
  void (__thiscall *do_IfInstanceOf)(InstructionVisitor *this, IfInstanceOf *);
  void (__thiscall *do_TableSwitch)(InstructionVisitor *this, TableSwitch *);
  void (__thiscall *do_LookupSwitch)(InstructionVisitor *this, LookupSwitch *);
  void (__thiscall *do_Return)(InstructionVisitor *this, Return *);
  void (__thiscall *do_Throw)(InstructionVisitor *this, Throw *);
  void (__thiscall *do_Base)(InstructionVisitor *this, Base *);
  void (__thiscall *do_OsrEntry)(InstructionVisitor *this, OsrEntry *);
  void (__thiscall *do_ExceptionObject)(InstructionVisitor *this, ExceptionObject *);
  void (__thiscall *do_RoundFP)(InstructionVisitor *this, RoundFP *);
  void (__thiscall *do_UnsafeGetRaw)(InstructionVisitor *this, UnsafeGetRaw *);
  void (__thiscall *do_UnsafePutRaw)(InstructionVisitor *this, UnsafePutRaw *);
  void (__thiscall *do_UnsafeGetObject)(InstructionVisitor *this, UnsafeGetObject *);
  void (__thiscall *do_UnsafePutObject)(InstructionVisitor *this, UnsafePutObject *);
  void (__thiscall *do_UnsafeGetAndSetObject)(InstructionVisitor *this, UnsafeGetAndSetObject *);
  void (__thiscall *do_UnsafePrefetchRead)(InstructionVisitor *this, UnsafePrefetchRead *);
  void (__thiscall *do_UnsafePrefetchWrite)(InstructionVisitor *this, UnsafePrefetchWrite *);
  void (__thiscall *do_ProfileCall)(InstructionVisitor *this, ProfileCall *);
  void (__thiscall *do_ProfileReturnType)(InstructionVisitor *this, ProfileReturnType *);
  void (__thiscall *do_ProfileInvoke)(InstructionVisitor *this, ProfileInvoke *);
  void (__thiscall *do_RuntimeCall)(InstructionVisitor *this, RuntimeCall *);
  void (__thiscall *do_MemBar)(InstructionVisitor *this, MemBar *);
  void (__thiscall *do_RangeCheckPredicate)(InstructionVisitor *this, RangeCheckPredicate *);
};

/* 4477 */
struct /*VFT*/ NullCheckEliminator_vtbl
{
  void (__thiscall *visit)(ValueVisitor *this, Instruction **);
};

/* 4478 */
struct __cppobj LIRItem : CompilationResourceObj
{
  Instruction *_value;
  LIRGenerator *_gen;
  LIR_OprDesc *_result;
  bool _destroys_register;
  LIR_OprDesc *_new_result;
};

/* 4479 */
struct __cppobj LIRItemArray : ResourceArray
{
};

/* 4480 */
struct __cppobj LIRItemList : LIRItemArray
{
  int _size;
};

/* 4481 */
struct __cppobj SwitchRangeArray : ResourceArray
{
};

/* 4482 */
struct __cppobj SwitchRangeList : SwitchRangeArray
{
  int _size;
};

/* 4483 */
struct __cppobj __declspec(align(2)) ResolveNode : CompilationResourceObj
{
  LIR_OprDesc *_operand;
  NodeList _destinations;
  bool _assigned;
  bool _visited;
  bool _start_node;
};

/* 4484 */
struct __cppobj PhiResolver : CompilationResourceObj
{
  LIRGenerator *_gen;
  PhiResolverState *_state;
  ResolveNode *_loop;
  LIR_OprDesc *_temp;
};

/* 4485 */
struct __cppobj ShenandoahBarrierSetC1 : CHeapObj<5>
{
  CodeBlob *_pre_barrier_c1_runtime_code_blob;
};

/* 4486 */
struct __cppobj ciSignatureStream : StackObj
{
  ciSignature *_sig;
  int _pos;
  ciKlass *_holder;
};

/* 4487 */
struct __cppobj LIR_OprFact : AllStatic
{
};

/* 4488 */
struct __cppobj LabelObj : CompilationResourceObj
{
  Label _label;
};

/* 4489 */
struct __cppobj TypeEntries
{
  ProfileData *_pd;
  const int _base_off;
};

/* 4490 */
struct __cppobj TypeStackSlotEntries : TypeEntries
{
  const int _number_of_entries;
};

/* 4491 */
struct __cppobj ciTypeEntries
{
};

/* 4492 */
struct __cppobj ciTypeStackSlotEntries : TypeStackSlotEntries, ciTypeEntries
{
};

/* 4493 */
struct __cppobj ExceptionInfo : CompilationResourceObj
{
  int _pco;
  XHandlers *_exception_handlers;
};

/* 4494 */
struct __cppobj intStack : intArray
{
  int _size;
};

/* 4495 */
struct __cppobj LIR_InsertionBuffer : CompilationResourceObj
{
  LIR_List *_lir;
  intStack _index_and_count;
  LIR_OpList _ops;
};

/* 4496 */
struct /*VFT*/ ConstantOopWriteValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 4497 */
struct __cppobj ConstantOopWriteValue : ScopeValue
{
  _jobject *_value;
};

/* 4498 */
struct /*VFT*/ ConstantIntValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 4499 */
struct __cppobj ConstantIntValue : ScopeValue
{
  int _value;
};

/* 4500 */
struct __cppobj Range : CompilationResourceObj
{
  int _from;
  int _to;
  Range *_next;
};

/* 4501 */
struct __cppobj Interval : CompilationResourceObj
{
  int _reg_num;
  BasicType _type;
  Range *_first;
  intStack _use_pos_and_kinds;
  Range *_current;
  Interval *_next;
  IntervalState _state;
  int _assigned_reg;
  int _assigned_regHi;
  int _cached_to;
  LIR_OprDesc *_cached_opr;
  VMRegImpl *_cached_vm_reg;
  Interval *_split_parent;
  IntervalList _split_children;
  Interval *_current_split_child;
  int _canonical_spill_slot;
  bool _insert_move_when_activated;
  IntervalSpillState _spill_state;
  int _spill_definition_pos;
  Interval *_register_hint;
};

/* 4502 */
struct __cppobj IntervalsArray : ResourceArray
{
};

/* 4503 */
struct __cppobj IntervalsList : IntervalsArray
{
  int _size;
};

/* 4504 */
struct __cppobj OopMapArray : ResourceArray
{
};

/* 4505 */
struct __cppobj OopMapList : OopMapArray
{
  int _size;
};

/* 4506 */
struct __cppobj LIR_OpListArray : ResourceArray
{
};

/* 4507 */
struct __cppobj LIR_OpListStack : LIR_OpListArray
{
  int _size;
};

/* 4508 */
struct __cppobj UseKindArray : ResourceArray
{
};

/* 4509 */
struct __cppobj UseKindStack : UseKindArray
{
  int _size;
};

/* 4510 */
struct __cppobj MoveResolver : StackObj
{
  LinearScan *_allocator;
  LIR_List *_insert_list;
  int _insert_idx;
  LIR_InsertionBuffer _insertion_buffer;
  IntervalList _mapping_from;
  LIR_OprList _mapping_from_opr;
  IntervalList _mapping_to;
  bool _multiple_reads_allowed;
  int _register_blocked[24];
};

/* 4511 */
struct __cppobj IntervalWalker : CompilationResourceObj
{
  IntervalWalker_vtbl *__vftable /*VFT*/;
  Compilation *_compilation;
  LinearScan *_allocator;
  Interval *_unhandled_first[2];
  Interval *_active_first[2];
  Interval *_inactive_first[2];
  Interval *_current;
  int _current_position;
  IntervalKind _current_kind;
};

/* 4512 */
struct /*VFT*/ IntervalWalker_vtbl
{
  bool (__thiscall *activate_current)(IntervalWalker *this);
  void (__thiscall *interval_moved)(IntervalWalker *this, Interval *, IntervalKind, IntervalState, IntervalState);
};

/* 4513 */
struct /*VFT*/ LinearScanWalker_vtbl
{
  bool (__thiscall *activate_current)(IntervalWalker *this);
  void (__thiscall *interval_moved)(IntervalWalker *this, Interval *, IntervalKind, IntervalState, IntervalState);
};

/* 4514 */
struct __cppobj LinearScanWalker : IntervalWalker
{
  int _first_reg;
  int _last_reg;
  int _num_phys_regs;
  bool _adjacent_regs;
  int _use_pos[24];
  int _block_pos[24];
  IntervalList *_spill_intervals[24];
  MoveResolver _move_resolver;
};

/* 4515 */
struct __cppobj EdgeMoveOptimizer : StackObj
{
  LIR_OpListStack _edge_instructions;
  intStack _edge_instructions_idx;
};

/* 4516 */
struct __cppobj ControlFlowOptimizer : StackObj
{
  BlockList _original_preds;
};

/* 4517 */
struct __cppobj GraphBuilder::ScopeData : CompilationResourceObj
{
  GraphBuilder::ScopeData *_parent;
  BlockList *_bci2block;
  IRScope *_scope;
  bool _has_handler;
  ciBytecodeStream *_stream;
  BlockList *_work_list;
  int _max_inline_size;
  int _caller_stack_size;
  BlockBegin *_continuation;
  bool _parsing_jsr;
  int _jsr_entry_bci;
  int _jsr_ret_addr_local;
  BlockBegin *_jsr_continuation;
  XHandlers *_jsr_xhandlers;
  int _num_returns;
  BlockBegin *_cleanup_block;
  Instruction *_cleanup_return_prev;
  ValueStack *_cleanup_state;
};

/* 4518 */
struct __cppobj GrowableArray<Instruction *> : GenericGrowableArray
{
  Instruction **_data;
};

/* 4519 */
struct __cppobj FieldBuffer : CompilationResourceObj
{
  GrowableArray<Instruction *> _values;
};

/* 4520 */
struct __cppobj GrowableArray<FieldBuffer *> : GenericGrowableArray
{
  FieldBuffer **_data;
};

/* 4521 */
struct __cppobj MemoryBuffer : CompilationResourceObj
{
  FieldBuffer _values;
  GrowableArray<Instruction *> _objects;
  GrowableArray<Instruction *> _newobjects;
  GrowableArray<FieldBuffer *> _fields;
};

/* 4522 */
struct __cppobj __declspec(align(4)) GraphBuilder : _ValueObj
{
  GraphBuilder::ScopeData *_scope_data;
  Compilation *_compilation;
  ValueMap *_vmap;
  MemoryBuffer *_memory;
  const char *_inline_bailout_msg;
  int _instruction_count;
  BlockBegin *_start;
  BlockBegin *_osr_entry;
  ValueStack *_initial_state;
  BlockBegin *_block;
  ValueStack *_state;
  Instruction *_last;
  bool _skip_block;
};

/* 4523 */
struct /*VFT*/ CriticalEdgeFinder_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4524 */
struct __cppobj CriticalEdgeFinder : BlockClosure
{
  BlockPairList blocks;
  IR *_ir;
};

/* 4525 */
struct /*VFT*/ UseCountComputer_vtbl
{
  void (__thiscall *visit)(ValueVisitor *this, Instruction **);
};

/* 4526 */
struct __cppobj UseCountComputer : ValueVisitor, BlockClosure
{
  _BYTE gap4[4];
  Values *worklist;
  int depth;
};

/* 4527 */
struct __cppobj ComputeLinearScanOrder : StackObj
{
  int _max_block_id;
  int _num_blocks;
  int _num_loops;
  bool _iterative_dominators;
  BlockList *_linear_scan_order;
  BitMap _visited_blocks;
  BitMap _active_blocks;
  BitMap _dominator_blocks;
  intArray _forward_branches;
  BlockList _loop_end_blocks;
  BitMap2D _loop_map;
  BlockList _work_list;
  BlockList _loop_headers;
  Compilation *_compilation;
};

/* 4528 */
struct __cppobj BlockListBuilder : _ValueObj
{
  Compilation *_compilation;
  IRScope *_scope;
  BlockList _blocks;
  BlockList *_bci2block;
  BitMap _active;
  BitMap _visited;
  intArray _loop_map;
  int _next_loop_index;
  int _next_block_number;
};

/* 4529 */
struct /*VFT*/ PhiSimplifier_vtbl
{
  void (__thiscall *block_do)(BlockClosure *this, BlockBegin *);
};

/* 4530 */
struct __cppobj __declspec(align(4)) PhiSimplifier : BlockClosure
{
  bool _has_substitutions;
};

/* 4531 */
struct __cppobj Bytecodes : AllStatic
{
};

/* 4532 */
struct __cppobj Bytecode_tableswitch : Bytecode
{
};

/* 4533 */
struct __cppobj Bytecode_lookupswitch : Bytecode
{
};

/* 4534 */
struct __cppobj LookupswitchPair : _ValueObj
{
  unsigned __int8 *const _bcp;
};

/* 4535 */
struct /*VFT*/ Compiler_vtbl
{
  const char *(__thiscall *name)(AbstractCompiler *this);
  bool (__thiscall *supports_native)(AbstractCompiler *this);
  bool (__thiscall *supports_osr)(AbstractCompiler *this);
  bool (__thiscall *can_compile_method)(AbstractCompiler *this, methodHandle);
  bool (__thiscall *is_c1)(AbstractCompiler *this);
  bool (__thiscall *is_c2)(AbstractCompiler *this);
  bool (__thiscall *is_shark)(AbstractCompiler *this);
  void (__thiscall *initialize)(AbstractCompiler *this);
  void (__thiscall *compile_method)(AbstractCompiler *this, ciEnv *, ciMethod *, int);
  void (__thiscall *print_timers)(AbstractCompiler *this);
};

/* 4536 */
struct __cppobj Compiler : AbstractCompiler
{
};

/* 4537 */
struct __cppobj __declspec(align(8)) PhaseTraceTime : TraceTime
{
  JavaThread *_thread;
  CompileLog *_log;
  TimerName _timer;
};

/* 4538 */
struct /*VFT*/ PrintValueVisitor_vtbl
{
  void (__thiscall *visit)(ValueVisitor *this, Instruction **);
};

/* 4539 */
struct __cppobj PrintValueVisitor : ValueVisitor
{
};

/* 4540 */
struct __cppobj ShenandoahWorkerScope : StackObj
{
  unsigned int _n_workers;
  ShenandoahWorkGang *_workers;
};

/* 4541 */
struct __cppobj ShenandoahLogger
{
};

/* 4542 */
struct __cppobj ShenandoahPushWorkerScope : StackObj
{
  unsigned int _n_workers;
  unsigned int _old_workers;
  ShenandoahWorkGang *_workers;
};

/* 4543 */
struct __cppobj ShenandoahWorkerPolicy : AllStatic
{
};

/* 4544 */
struct __cppobj ShenandoahWorkerDataArray<unsigned int>::WDAPrinter
{
};

/* 4545 */
struct __cppobj ShenandoahWorkerDataArray<double>::WDAPrinter
{
};

/* 4546 */
struct __cppobj KlassInfoEntry : CHeapObj<7>
{
  KlassInfoEntry *_next;
  Klass *_klass;
  int _instance_count;
  unsigned int _instance_words;
  int _index;
};

/* 4547 */
struct __cppobj KlassInfoBucket : CHeapObj<7>
{
  KlassInfoEntry *_list;
};

/* 4548 */
struct __cppobj KlassInfoClosure : StackObj
{
  KlassInfoClosure_vtbl *__vftable /*VFT*/;
};

/* 4549 */
struct /*VFT*/ KlassInfoClosure_vtbl
{
  void (__thiscall *do_cinfo)(KlassInfoClosure *this, KlassInfoEntry *);
};

/* 4550 */
struct __cppobj KlassInfoTable : StackObj
{
  int _size;
  unsigned int _size_of_instances_in_words;
  HeapWord *_ref;
  KlassInfoBucket *_buckets;
};

/* 4551 */
struct /*VFT*/ KlassInfoTable::AllClassesFinder_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 4552 */
struct __cppobj KlassInfoTable::AllClassesFinder : KlassClosure
{
  KlassInfoTable *_table;
};

/* 4553 */
struct __cppobj GrowableArray<KlassInfoEntry *> : GenericGrowableArray
{
  KlassInfoEntry **_data;
};

/* 4554 */
struct __cppobj KlassInfoHisto : StackObj
{
  KlassInfoTable *_cit;
  GrowableArray<KlassInfoEntry *> *_elements;
  const char *_title;
  const char *_selected_columns;
};

/* 4555 */
struct __cppobj HeapInspection : StackObj
{
  bool _csv_format;
  bool _print_help;
  bool _print_class_stats;
  const char *_columns;
};

/* 4556 */
struct __cppobj VM_Operation : CHeapObj<7>
{
  VM_Operation_vtbl *__vftable /*VFT*/;
  Thread *_calling_thread;
  ThreadPriority _priority;
  int _timestamp;
  VM_Operation *_next;
  VM_Operation *_prev;
};

/* 4557 */
struct /*VFT*/ VM_Operation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4558 */
struct __cppobj __declspec(align(4)) VM_GC_Operation : VM_Operation
{
  BasicLock _pending_list_basic_lock;
  unsigned int _gc_count_before;
  unsigned int _full_gc_count_before;
  bool _full;
  bool _prologue_succeeded;
  GCCause::Cause _gc_cause;
  bool _gc_locked;
};

/* 4559 */
struct /*VFT*/ VM_GC_Operation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4560 */
struct __cppobj VM_GC_HeapInspection : VM_GC_Operation
{
  outputStream *_out;
  bool _full_gc;
  bool _csv_format;
  bool _print_help;
  bool _print_class_stats;
  const char *_columns;
};

/* 4561 */
struct /*VFT*/ VM_GC_HeapInspection_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4562 */
struct __cppobj VM_CollectForAllocation : VM_GC_Operation
{
  unsigned int _word_size;
  HeapWord *_result;
};

/* 4563 */
struct /*VFT*/ VM_CollectForAllocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4564 */
struct __cppobj __declspec(align(4)) VM_GenCollectForAllocation : VM_CollectForAllocation
{
  bool _tlab;
};

/* 4565 */
struct /*VFT*/ VM_GenCollectForAllocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4566 */
struct __cppobj VM_GenCollectFull : VM_GC_Operation
{
  int _max_level;
};

/* 4567 */
struct /*VFT*/ VM_GenCollectFull_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4568 */
struct __cppobj VM_CollectForMetadataAllocation : VM_GC_Operation
{
  MetaWord *_result;
  unsigned int _size;
  Metaspace::MetadataType _mdtype;
  ClassLoaderData *_loader_data;
};

/* 4569 */
struct /*VFT*/ VM_CollectForMetadataAllocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4570 */
struct __cppobj JvmtiGCMarker : StackObj
{
};

/* 4571 */
struct __cppobj SvcGCMarker : StackObj
{
  JvmtiGCMarker _jgcm;
};

/* 4572 */
struct __cppobj VM_ShenandoahOperation : VM_Operation
{
};

/* 4573 */
struct /*VFT*/ VM_ShenandoahOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4574 */
struct __cppobj VM_ShenandoahReferenceOperation : VM_ShenandoahOperation
{
  BasicLock _pending_list_basic_lock;
};

/* 4575 */
struct /*VFT*/ VM_ShenandoahReferenceOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4576 */
struct __cppobj VM_ShenandoahInitMark : VM_ShenandoahOperation
{
};

/* 4577 */
struct /*VFT*/ VM_ShenandoahInitMark_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4578 */
struct __cppobj VM_ShenandoahFinalMarkStartEvac : VM_ShenandoahReferenceOperation
{
};

/* 4579 */
struct /*VFT*/ VM_ShenandoahFinalMarkStartEvac_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4580 */
struct __cppobj VM_ShenandoahDegeneratedGC : VM_ShenandoahReferenceOperation
{
  int _point;
};

/* 4581 */
struct /*VFT*/ VM_ShenandoahDegeneratedGC_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4582 */
struct __cppobj VM_ShenandoahFullGC : VM_ShenandoahReferenceOperation
{
  GCCause::Cause _gc_cause;
};

/* 4583 */
struct /*VFT*/ VM_ShenandoahFullGC_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4584 */
struct __cppobj VM_ShenandoahInitUpdateRefs : VM_ShenandoahOperation
{
};

/* 4585 */
struct /*VFT*/ VM_ShenandoahInitUpdateRefs_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4586 */
struct __cppobj VM_ShenandoahFinalUpdateRefs : VM_ShenandoahOperation
{
};

/* 4587 */
struct /*VFT*/ VM_ShenandoahFinalUpdateRefs_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 4588 */
struct __cppobj IsGCActiveMark : StackObj
{
};

/* 4589 */
struct __cppobj ShenandoahGCPhase : StackObj
{
  ShenandoahPhaseTimings *const _timings;
  const ShenandoahPhaseTimings::Phase _phase;
  ShenandoahPhaseTimings::Phase _parent_phase;
  long double _start;
};

/* 4590 */
struct __cppobj ShenandoahSafepoint : AllStatic
{
};

/* 4591 */
struct __cppobj ShenandoahWorkerSession : StackObj
{
  unsigned int _worker_id;
};

/* 4592 */
struct __cppobj ShenandoahConcurrentWorkerSession : ShenandoahWorkerSession
{
};

/* 4593 */
struct __cppobj ShenandoahParallelWorkerSession : ShenandoahWorkerSession
{
};

/* 4594 */
struct __cppobj TraceMemoryManagerStats : StackObj
{
  bool _fullGC;
  bool _allMemoryPoolsAffected;
  bool _recordGCBeginTime;
  bool _recordPreGCUsage;
  bool _recordPeakUsage;
  bool _recordPostGCUsage;
  bool _recordAccumulatedGCTime;
  bool _recordGCEndTime;
  bool _countCollection;
  GCCause::Cause _cause;
};

/* 4595 */
struct __cppobj ShenandoahGCPauseMark : StackObj
{
  ShenandoahHeap *const _heap;
  const SvcGCMarker _svc_gc_mark;
  const IsGCActiveMark _is_gc_active_mark;
  TraceMemoryManagerStats _trace_pause;
};

/* 4596 */
struct __cppobj ShenandoahVerifier::VerifyOptions
{
  ShenandoahVerifier::VerifyForwarded _verify_forwarded;
  ShenandoahVerifier::VerifyMarked _verify_marked;
  ShenandoahVerifier::VerifyCollectionSet _verify_cset;
  ShenandoahVerifier::VerifyLiveness _verify_liveness;
  ShenandoahVerifier::VerifyRegions _verify_regions;
  ShenandoahVerifier::VerifyGCState _verify_gcstate;
};

/* 4597 */
struct __cppobj ShenandoahNMethod : CHeapObj<5>
{
  nmethod *_nm;
  oopDesc ***_oops;
  int _oops_count;
};

/* 4598 */
struct __cppobj GrowableArray<oopDesc * *> : GenericGrowableArray
{
  oopDesc ***_data;
};

/* 4599 */
struct __cppobj __declspec(align(4)) ShenandoahParallelCodeCacheIterator : _ValueObj
{
  char _pad0[64];
  volatile int _claimed_idx;
  volatile bool _finished;
  char _pad1[64];
};

/* 4600 */
struct __cppobj ShenandoahCodeRootsIterator : _ValueObj
{
  ShenandoahHeap *_heap;
  ShenandoahParallelCodeCacheIterator _par_iterator;
  ShenandoahSharedFlag _seq_claimed;
  char _pad0[64];
  volatile __int64 _claimed;
  char _pad1[64];
};

/* 4601 */
struct __cppobj ShenandoahAllCodeRootsIterator : ShenandoahCodeRootsIterator
{
};

/* 4602 */
struct __cppobj ShenandoahCsetCodeRootsIterator : ShenandoahCodeRootsIterator
{
};

/* 4603 */
struct __cppobj ShenandoahCodeRoots : AllStatic
{
};

/* 4604 */
struct ShenandoahCodeRoots::PaddedLock
{
  char _pad0[64];
  volatile int _lock;
  char _pad1[64];
};

/* 4605 */
struct __cppobj GrowableArray<ShenandoahNMethod *> : GenericGrowableArray
{
  ShenandoahNMethod **_data;
};

/* 4606 */
struct __cppobj ShenandoahCodeRootsLock : StackObj
{
  const bool _write;
};

/* 4607 */
struct __cppobj MarkingCodeBlobClosure::MarkScope : StackObj
{
  bool _active;
};

/* 4608 */
struct __cppobj SharedHeap::StrongRootsScope : MarkingCodeBlobClosure::MarkScope
{
  SharedHeap *_sh;
};

/* 4609 */
struct __cppobj ShenandoahRootProcessor : StackObj
{
  SharedHeap::StrongRootsScope _srs;
  ShenandoahHeap *const _heap;
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4610 */
struct __cppobj ShenandoahVerifierTask
{
  oopDesc *_obj;
};

/* 4611 */
struct __cppobj Stack<ShenandoahVerifierTask,5> : StackBase<5>
{
  Stack<ShenandoahVerifierTask,5>_vtbl *__vftable /*VFT*/;
  ShenandoahVerifierTask *_cur_seg;
  ShenandoahVerifierTask *_cache;
};

/* 4612 */
struct /*VFT*/ Stack<ShenandoahVerifierTask,5>_vtbl
{
  ShenandoahVerifierTask *(__thiscall *alloc)(Stack<ShenandoahVerifierTask,5> *this, unsigned int);
  void (__thiscall *free)(Stack<ShenandoahVerifierTask,5> *this, ShenandoahVerifierTask *, unsigned int);
};

/* 4613 */
struct /*VFT*/ ShenandoahVerifyOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4614 */
struct __cppobj ShenandoahVerifyOopClosure : ExtendedOopClosure
{
  const char *_phase;
  ShenandoahVerifier::VerifyOptions _options;
  Stack<ShenandoahVerifierTask,5> *_stack;
  ShenandoahHeap *_heap;
  MarkBitMap *_map;
  volatile int *_ld;
  void *_interior_loc;
  oopDesc *_loc;
};

/* 4615 */
struct /*VFT*/ ShenandoahCalculateRegionStatsClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4616 */
struct __cppobj ShenandoahCalculateRegionStatsClosure : ShenandoahHeapRegionClosure
{
  unsigned int _used;
  unsigned int _committed;
  unsigned int _garbage;
};

/* 4617 */
struct /*VFT*/ ShenandoahVerifyHeapRegionClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4618 */
struct __cppobj ShenandoahVerifyHeapRegionClosure : ShenandoahHeapRegionClosure
{
  ShenandoahHeap *_heap;
  const char *_phase;
  ShenandoahVerifier::VerifyRegions _regions;
};

/* 4619 */
struct __cppobj FormatBuffer<8192> : FormatBufferBase
{
  char _buffer[8192];
};

/* 4620 */
struct __cppobj ShenandoahRootVerifier : StackObj
{
  ShenandoahRootVerifier::RootTypes _types;
};

/* 4621 */
struct /*VFT*/ ShenandoahVerifierReachableTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4622 */
struct __cppobj ShenandoahVerifierReachableTask : AbstractGangTask
{
  const char *_label;
  ShenandoahRootVerifier *_verifier;
  ShenandoahVerifier::VerifyOptions _options;
  ShenandoahHeap *_heap;
  volatile int *_ld;
  MarkBitMap *_bitmap;
  volatile __int64 _processed;
};

/* 4623 */
struct __cppobj ShenandoahVerifierMarkedRegionTask : AbstractGangTask
{
  const char *_label;
  ShenandoahVerifier::VerifyOptions _options;
  ShenandoahHeap *_heap;
  volatile int *_ld;
  MarkBitMap *_bitmap;
  volatile int _claimed;
  volatile __int64 _processed;
};

/* 4624 */
struct /*VFT*/ ShenandoahVerifierMarkedRegionTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
  void (__thiscall *work_humongous)(ShenandoahVerifierMarkedRegionTask *this, ShenandoahHeapRegion *, Stack<ShenandoahVerifierTask,5> *, ShenandoahVerifyOopClosure *);
  void (__thiscall *work_regular)(ShenandoahVerifierMarkedRegionTask *this, ShenandoahHeapRegion *, Stack<ShenandoahVerifierTask,5> *, ShenandoahVerifyOopClosure *);
};

/* 4625 */
struct /*VFT*/ VerifyThreadGCState_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4626 */
struct __cppobj __declspec(align(4)) VerifyThreadGCState : ThreadClosure
{
  const char *_label;
  char _expected;
};

/* 4627 */
struct __cppobj __declspec(align(4)) ShenandoahGCStateResetter : StackObj
{
  ShenandoahHeap *const _heap;
  char _gc_state;
};

/* 4628 */
struct /*VFT*/ ShenandoahVerifyNoForwared_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4629 */
struct __cppobj ShenandoahVerifyNoForwared : OopClosure
{
};

/* 4630 */
struct /*VFT*/ ShenandoahVerifyInToSpaceClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4631 */
struct __cppobj ShenandoahVerifyInToSpaceClosure : OopClosure
{
};

/* 4632 */
struct __cppobj TimePartitionPhasesIterator
{
  TimePartitionPhasesIterator_vtbl *__vftable /*VFT*/;
  TimePartitions *_time_partitions;
  int _next;
};

/* 4633 */
struct /*VFT*/ TimePartitionPhasesIterator_vtbl
{
  bool (__thiscall *has_next)(TimePartitionPhasesIterator *this);
  GCPhase *(__thiscall *next)(TimePartitionPhasesIterator *this);
};

/* 4634 */
struct __cppobj ShenandoahGCSession : StackObj
{
  ShenandoahHeap *const _heap;
  GCTimer *const _timer;
  GCTracer *const _tracer;
  TraceMemoryManagerStats _trace_cycle;
};

/* 4635 */
struct __cppobj ShenandoahGCWorkerPhase : StackObj
{
  ShenandoahPhaseTimings *const _timings;
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4636 */
struct /*VFT*/ ShenandoahTerminatorTerminator_vtbl
{
  bool (__thiscall *should_exit_termination)(TerminatorTerminator *this);
};

/* 4637 */
struct __cppobj ShenandoahTerminatorTerminator : TerminatorTerminator
{
  ShenandoahHeap *const _heap;
};

/* 4638 */
struct /*VFT*/ ShenandoahTaskTerminator_vtbl
{
  void (__thiscall *yield)(ParallelTaskTerminator *this);
  bool (__thiscall *offer_termination)(ParallelTaskTerminator *this);
};

/* 4639 */
struct __cppobj ShenandoahTaskTerminator : ParallelTaskTerminator
{
  Monitor *_blocker;
  Thread *_spin_master;
};

/* 4640 */
struct __cppobj ShenandoahSynchronizerIterator : _ValueObj
{
  ObjectMonitor *volatile _cur;
};

/* 4641 */
struct __cppobj ShenandoahStrDedupEntry : CHeapObj<5>
{
  ShenandoahStrDedupEntry *volatile _next;
  unsigned int _hash;
  typeArrayOopDesc *_obj;
};

/* 4642 */
struct __cppobj typeArrayOopDesc : arrayOopDesc
{
};

/* 4643 */
struct __cppobj ShenandoahStrDedupTable : CHeapObj<5>
{
  ShenandoahStrDedupEntry *volatile *_buckets;
  unsigned int _size;
  volatile unsigned int _entries;
  unsigned int _shrink_threshold;
  unsigned int _grow_threshold;
  bool _rehash_needed;
  int _hash_seed;
  volatile unsigned int _claimed;
  unsigned int _partition_size;
};

/* 4644 */
struct __cppobj __declspec(align(8)) ShenandoahStrDedupThread : ConcurrentGCThread
{
  ShenandoahStrDedupQueueSet *_queues;
  ShenandoahStrDedupChunkedList<64> **_work_list;
  volatile unsigned int _claimed;
};

/* 4645 */
struct __cppobj __declspec(align(8)) ShenandoahStrDedupStats : _ValueObj
{
  volatile unsigned int _inspected;
  volatile unsigned int _deduped;
  volatile unsigned int _skipped;
  volatile unsigned int _known;
  unsigned int _idle;
  unsigned int _exec;
  unsigned int _block;
  long double _start_concurrent;
  long double _end_concurrent;
  long double _start_phase;
  long double _idle_elapsed;
  long double _exec_elapsed;
  long double _block_elapsed;
  unsigned int _table_expanded_count;
  unsigned int _table_shrinked_count;
  unsigned int _table_rehashed_count;
};

/* 4646 */
struct __cppobj AltHashing : AllStatic
{
};

/* 4647 */
struct /*VFT*/ ShenandoahStrDedupQueueCleanupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4648 */
struct __cppobj ShenandoahStrDedupQueueCleanupClosure : OopClosure
{
  ShenandoahHeap *_heap;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4649 */
struct __cppobj ShenandoahStrDedupTableCleanupTask : CHeapObj<5>
{
  ShenandoahStrDedupTableCleanupTask_vtbl *__vftable /*VFT*/;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4650 */
struct /*VFT*/ ShenandoahStrDedupTableCleanupTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4651 */
struct __cppobj ShenandoahStrDedupTableRemapTask : ShenandoahStrDedupTableCleanupTask
{
  ShenandoahStrDedupTable *const _src_table;
  ShenandoahStrDedupTable *const _dest_table;
};

/* 4652 */
struct /*VFT*/ ShenandoahStrDedupTableRemapTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4653 */
struct __cppobj ShenandoahStringDedup : AllStatic
{
};

/* 4654 */
struct __cppobj ShenandoahWorkerTimingsTracker : StackObj
{
  ShenandoahPhaseTimings *const _timings;
  const ShenandoahPhaseTimings::Phase _phase;
  const ShenandoahPhaseTimings::ParPhase _par_phase;
  const unsigned int _worker_id;
  long double _start_time;
};

/* 4655 */
struct /*VFT*/ ShenandoahStrDedupCleanupTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4656 */
struct __cppobj ShenandoahStrDedupCleanupTask : AbstractGangTask
{
  ShenandoahStrDedupQueueSet *_queues;
  ShenandoahStrDedupThread *_thread;
  ShenandoahStrDedupTable **_table;
  ShenandoahStrDedupTable *_dest_table;
  ShenandoahStrDedupTableCleanupTask *_dedup_table_cleanup_task;
};

/* 4657 */
struct __cppobj ShenandoahStrDedupTableRehashTask : ShenandoahStrDedupTableRemapTask
{
};

/* 4658 */
struct /*VFT*/ ShenandoahStrDedupTableRehashTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4659 */
struct __cppobj ShenandoahStrDedupExpandTableTask : ShenandoahStrDedupTableRemapTask
{
  int _bit_mask;
};

/* 4660 */
struct /*VFT*/ ShenandoahStrDedupExpandTableTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4661 */
struct __cppobj ShenandoahStrDedupShrinkTableTask : ShenandoahStrDedupTableRemapTask
{
};

/* 4662 */
struct /*VFT*/ ShenandoahStrDedupShrinkTableTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4663 */
struct __cppobj ShenandoahStrDedupTableUnlinkTask : ShenandoahStrDedupTableCleanupTask
{
  ShenandoahStrDedupTable *const _table;
};

/* 4664 */
struct /*VFT*/ ShenandoahStrDedupTableUnlinkTask_vtbl
{
  void (__thiscall *~ShenandoahStrDedupTableCleanupTask)(ShenandoahStrDedupTableCleanupTask *this);
  void (__thiscall *do_parallel_cleanup)(ShenandoahStrDedupTableCleanupTask *this);
};

/* 4665 */
struct /*VFT*/ ShenandoahBarrierSet_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
};

/* 4666 */
struct __cppobj ShenandoahBarrierSet : BarrierSet
{
  ShenandoahHeap *_heap;
  ShenandoahBarrierSetAssembler *const _bsasm;
  ShenandoahBarrierSetC1 *const _bsc1;
  ShenandoahBarrierSetC2 *const _bsc2;
};

/* 4667 */
struct /*VFT*/ ShenandoahUpdateRefsForOopClosure<0,0,1>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4668 */
struct __cppobj ShenandoahUpdateRefsForOopClosure<0,0,1> : ExtendedOopClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahBarrierSet *const _bs;
  const ShenandoahCollectionSet *const _cset;
  Thread *const _thread;
};

/* 4669 */
struct /*VFT*/ ShenandoahUpdateRefsForOopClosure<1,1,0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4670 */
struct __cppobj ShenandoahUpdateRefsForOopClosure<1,1,0> : ExtendedOopClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahBarrierSet *const _bs;
  const ShenandoahCollectionSet *const _cset;
  Thread *const _thread;
};

/* 4671 */
struct /*VFT*/ ShenandoahUpdateRefsForOopClosure<1,0,0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4672 */
struct __cppobj ShenandoahUpdateRefsForOopClosure<1,0,0> : ExtendedOopClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahBarrierSet *const _bs;
  const ShenandoahCollectionSet *const _cset;
  Thread *const _thread;
};

/* 4673 */
struct jmmOptionalSupport
{
  unsigned __int32 isLowMemoryDetectionSupported : 1;
  unsigned __int32 isCompilationTimeMonitoringSupported : 1;
  unsigned __int32 isThreadContentionMonitoringSupported : 1;
  unsigned __int32 isCurrentThreadCpuTimeSupported : 1;
  unsigned __int32 isOtherThreadCpuTimeSupported : 1;
  unsigned __int32 isBootClassPathSupported : 1;
  unsigned __int32 isObjectMonitorUsageSupported : 1;
  unsigned __int32 isSynchronizerUsageSupported : 1;
  unsigned __int32 isThreadAllocatedMemorySupported : 1;
  unsigned __int32 isRemoteDiagnosticCommandsSupported : 1;
};

/* 4674 */
struct __cppobj Management : AllStatic
{
};

/* 4675 */
struct __cppobj GrowableArray<KlassHandle> : GenericGrowableArray
{
  KlassHandle *_data;
};

/* 4676 */
struct __cppobj StackFrameInfo : CHeapObj<7>
{
  Method *_method;
  int _bci;
  GrowableArray<oopDesc *> *_locked_monitors;
  oopDesc *_class_holder;
};

/* 4677 */
struct __cppobj GrowableArray<StackFrameInfo *> : GenericGrowableArray
{
  StackFrameInfo **_data;
};

/* 4678 */
struct __cppobj ThreadStackTrace : CHeapObj<7>
{
  JavaThread *_thread;
  int _depth;
  bool _with_locked_monitors;
  GrowableArray<StackFrameInfo *> *_frames;
  GrowableArray<oopDesc *> *_jni_locked_monitors;
};

/* 4679 */
struct __cppobj GrowableArray<instanceOopDesc *> : GenericGrowableArray
{
  instanceOopDesc **_data;
};

/* 4680 */
struct __cppobj ThreadConcurrentLocks : CHeapObj<7>
{
  GrowableArray<instanceOopDesc *> *_owned_locks;
  ThreadConcurrentLocks *_next;
  JavaThread *_thread;
};

/* 4681 */
struct __cppobj __declspec(align(8)) ThreadSnapshot : CHeapObj<7>
{
  JavaThread *_thread;
  oopDesc *_threadObj;
  java_lang_Thread::ThreadStatus _thread_status;
  bool _is_ext_suspended;
  bool _is_in_native;
  __int64 _contended_enter_ticks;
  __int64 _contended_enter_count;
  __int64 _monitor_wait_ticks;
  __int64 _monitor_wait_count;
  __int64 _sleep_ticks;
  __int64 _sleep_count;
  oopDesc *_blocker_object;
  oopDesc *_blocker_object_owner;
  ThreadStackTrace *_stack_trace;
  ThreadConcurrentLocks *_concurrent_locks;
  ThreadSnapshot *_next;
};

/* 4682 */
struct __cppobj objArrayHandle : Handle
{
};

/* 4683 */
struct __cppobj typeArrayHandle : Handle
{
};

/* 4684 */
struct __cppobj TraceVmCreationTime : StackObj
{
  TimeStamp _timer;
  __int64 _begin_time;
};

/* 4685 */
struct /*VFT*/ CodeBlobToOopClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 4686 */
struct __cppobj __declspec(align(4)) CodeBlobToOopClosure : CodeBlobClosure
{
  OopClosure *_cl;
  bool _fix_relocations;
};

/* 4687 */
struct /*VFT*/ CLDToOopClosure_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 4688 */
struct __cppobj __declspec(align(4)) CLDToOopClosure : CLDClosure
{
  OopClosure *_oop_closure;
  KlassToOopClosure _klass_closure;
  bool _must_claim_cld;
};

/* 4689 */
struct /*VFT*/ AlwaysTrueClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 4690 */
struct __cppobj AlwaysTrueClosure : BoolObjectClosure
{
};

/* 4691 */
struct /*VFT*/ ShenandoahForwardedIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 4692 */
struct __cppobj ShenandoahForwardedIsAliveClosure : BoolObjectClosure
{
  ShenandoahMarkingContext *const _mark_context;
};

/* 4693 */
struct /*VFT*/ ShenandoahIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 4694 */
struct __cppobj ShenandoahIsAliveClosure : BoolObjectClosure
{
  ShenandoahMarkingContext *const _mark_context;
};

/* 4695 */
struct __cppobj ShenandoahIsAliveSelector : StackObj
{
  ShenandoahIsAliveClosure _alive_cl;
  ShenandoahForwardedIsAliveClosure _fwd_alive_cl;
};

/* 4696 */
struct /*VFT*/ ShenandoahUpdateRefsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4697 */
struct __cppobj ShenandoahUpdateRefsClosure : OopClosure
{
  ShenandoahHeap *_heap;
};

/* 4698 */
struct /*VFT*/ ShenandoahEvacuateUpdateRootsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4699 */
struct __cppobj ShenandoahEvacuateUpdateRootsClosure : ExtendedOopClosure
{
  ShenandoahHeap *_heap;
  Thread *_thread;
};

/* 4700 */
struct __cppobj ShenandoahSerialRoot
{
  volatile int _claimed;
  void (__cdecl *const _oops_do)(OopClosure *);
  const ShenandoahPhaseTimings::Phase _phase;
  const ShenandoahPhaseTimings::ParPhase _par_phase;
};

/* 4701 */
struct __cppobj ShenandoahSerialRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
  ShenandoahSerialRoot _universe_roots;
  ShenandoahSerialRoot _management_roots;
  ShenandoahSerialRoot _jvmti_roots;
  ShenandoahSerialRoot _jni_handle_roots;
  ShenandoahSerialRoot _flat_profiler_roots;
  ShenandoahSynchronizerIterator _om_iterator;
};

/* 4702 */
struct __cppobj ShenandoahSystemDictionaryRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
  volatile int _claimed;
};

/* 4703 */
struct __cppobj ShenandoahStringTableRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4704 */
struct __cppobj ShenandoahThreadRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4705 */
struct __cppobj ShenandoahWeakRoot
{
  const ShenandoahPhaseTimings::Phase _phase;
  const ShenandoahPhaseTimings::ParPhase _par_phase;
  volatile int _claimed;
  void (__cdecl *const _weak_oops_do)(BoolObjectClosure *, OopClosure *);
};

/* 4706 */
struct __cppobj ShenandoahWeakRoots
{
  ShenandoahWeakRoot _jni_weak_roots;
};

/* 4707 */
struct __cppobj ShenandoahStringDedupRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4708 */
struct __cppobj ShenandoahClassLoaderDataRoots
{
  const ShenandoahPhaseTimings::Phase _phase;
};

/* 4709 */
struct __cppobj ShenandoahCodeCacheRoots<ShenandoahCsetCodeRootsIterator>
{
  const ShenandoahPhaseTimings::Phase _phase;
  ShenandoahCsetCodeRootsIterator _coderoots_iterator;
};

/* 4710 */
struct __cppobj ShenandoahRootEvacuator : ShenandoahRootProcessor
{
  ShenandoahSerialRoots _serial_roots;
  ShenandoahSystemDictionaryRoots _dict_roots;
  ShenandoahClassLoaderDataRoots _cld_roots;
  ShenandoahThreadRoots _thread_roots;
  ShenandoahWeakRoots _weak_roots;
  ShenandoahStringDedupRoots _dedup_roots;
  ShenandoahStringTableRoots _string_table_roots;
  ShenandoahCodeCacheRoots<ShenandoahCsetCodeRootsIterator> _code_roots;
};

/* 4711 */
struct __cppobj ShenandoahCodeCacheRoots<ShenandoahAllCodeRootsIterator>
{
  const ShenandoahPhaseTimings::Phase _phase;
  ShenandoahAllCodeRootsIterator _coderoots_iterator;
};

/* 4712 */
struct __cppobj ShenandoahHeapIterationRootScanner : ShenandoahRootProcessor
{
  ShenandoahSerialRoots _serial_roots;
  ShenandoahSystemDictionaryRoots _dict_roots;
  ShenandoahThreadRoots _thread_roots;
  ShenandoahClassLoaderDataRoots _cld_roots;
  ShenandoahWeakRoots _weak_roots;
  ShenandoahStringDedupRoots _dedup_roots;
  ShenandoahStringTableRoots _string_table_roots;
  ShenandoahCodeCacheRoots<ShenandoahAllCodeRootsIterator> _code_roots;
};

/* 4713 */
struct __cppobj __declspec(align(8)) ShenandoahRootUpdater : ShenandoahRootProcessor
{
  ShenandoahSerialRoots _serial_roots;
  ShenandoahSystemDictionaryRoots _dict_roots;
  ShenandoahClassLoaderDataRoots _cld_roots;
  ShenandoahThreadRoots _thread_roots;
  ShenandoahWeakRoots _weak_roots;
  ShenandoahStringDedupRoots _dedup_roots;
  ShenandoahStringTableRoots _string_table_roots;
  ShenandoahCodeCacheRoots<ShenandoahCsetCodeRootsIterator> _code_roots;
  const bool _update_code_cache;
};

/* 4714 */
struct __cppobj ShenandoahRootAdjuster : ShenandoahRootProcessor
{
  ShenandoahSerialRoots _serial_roots;
  ShenandoahSystemDictionaryRoots _dict_roots;
  ShenandoahClassLoaderDataRoots _cld_roots;
  ShenandoahThreadRoots _thread_roots;
  ShenandoahWeakRoots _weak_roots;
  ShenandoahStringDedupRoots _dedup_roots;
  ShenandoahStringTableRoots _string_table_roots;
  ShenandoahCodeCacheRoots<ShenandoahAllCodeRootsIterator> _code_roots;
};

/* 4715 */
struct /*VFT*/ MarkingCodeBlobClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 4716 */
struct __cppobj MarkingCodeBlobClosure : CodeBlobToOopClosure
{
};

/* 4717 */
struct /*VFT*/ ShenandoahStringSymbolTableUnlinkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4718 */
struct __cppobj __declspec(align(4)) ShenandoahStringSymbolTableUnlinkTask : AbstractGangTask
{
  BoolObjectClosure *_is_alive;
  int _initial_string_table_size;
  int _initial_symbol_table_size;
  bool _process_strings;
  int _strings_processed;
  int _strings_removed;
  bool _process_symbols;
  int _symbols_processed;
  int _symbols_removed;
  bool _do_in_parallel;
};

/* 4719 */
struct __cppobj ShenandoahCodeCacheUnloadingTask : _ValueObj
{
  BoolObjectClosure *const _is_alive;
  const bool _unloading_occurred;
  const unsigned int _num_workers;
  nmethod *_first_nmethod;
  volatile nmethod *_claimed_nmethod;
  volatile nmethod *_postponed_list;
  volatile unsigned int _num_entered_barrier;
};

/* 4720 */
struct __cppobj MetadataOnStackMark : StackObj
{
};

/* 4721 */
struct __cppobj ClassLoaderDataGraphKlassIteratorAtomic : StackObj
{
  Klass *volatile _next_klass;
};

/* 4722 */
struct __cppobj ShenandoahKlassCleaningTask : StackObj
{
  BoolObjectClosure *_is_alive;
  volatile int _clean_klass_tree_claimed;
  ClassLoaderDataGraphKlassIteratorAtomic _klass_iterator;
};

/* 4723 */
struct /*VFT*/ ShenandoahParallelCleaningTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4724 */
struct __cppobj ShenandoahParallelCleaningTask : AbstractGangTask
{
  ShenandoahStringSymbolTableUnlinkTask _string_symbol_task;
  ShenandoahCodeCacheUnloadingTask _code_cache_task;
  ShenandoahKlassCleaningTask _klass_cleaning_task;
};

/* 4725 */
struct /*VFT*/ ShenandoahYoungGenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 4726 */
struct __cppobj ShenandoahYoungGenerationCounters : GenerationCounters
{
};

/* 4727 */
struct /*VFT*/ ShenandoahGenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 4728 */
struct __cppobj ShenandoahGenerationCounters : GenerationCounters
{
  ShenandoahHeap *_heap;
};

/* 4729 */
struct __cppobj ShenandoahMetricsSnapshot : StackObj
{
  ShenandoahHeap *_heap;
  unsigned int _used_before;
  unsigned int _used_after;
  long double _if_before;
  long double _if_after;
  long double _ef_before;
  long double _ef_after;
};

/* 4730 */
struct __cppobj ShenandoahGCTraceTime
{
  ShenandoahHeap *_heap;
  const char *_title;
  bool _doit;
  bool _print_heap;
  GCTimer *_timer;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _start_counter;
  unsigned int _bytes_before;
  GCId _gc_id;
};

/* 4731 */
struct __cppobj RestorePreservedMarksTaskExecutor
{
  RestorePreservedMarksTaskExecutor_vtbl *__vftable /*VFT*/;
};

/* 4732 */
struct /*VFT*/ RestorePreservedMarksTaskExecutor_vtbl
{
  void (__thiscall *restore)(RestorePreservedMarksTaskExecutor *this, PreservedMarksSet *, volatile unsigned int *);
};

/* 4733 */
struct /*VFT*/ SharedRestorePreservedMarksTaskExecutor_vtbl
{
  void (__thiscall *restore)(RestorePreservedMarksTaskExecutor *this, PreservedMarksSet *, volatile unsigned int *);
};

/* 4734 */
struct __cppobj SharedRestorePreservedMarksTaskExecutor : RestorePreservedMarksTaskExecutor
{
  WorkGang *_workers;
};

/* 4735 */
struct __cppobj SATBBufferClosure : StackObj
{
  SATBBufferClosure_vtbl *__vftable /*VFT*/;
};

/* 4736 */
struct /*VFT*/ SATBBufferClosure_vtbl
{
  void (__thiscall *do_buffer)(SATBBufferClosure *this, void **, unsigned int);
};

/* 4737 */
struct /*VFT*/ ShenandoahSATBBufferClosure_vtbl
{
  void (__thiscall *do_buffer)(SATBBufferClosure *this, void **, unsigned int);
};

/* 4738 */
struct __cppobj ShenandoahSATBBufferClosure : SATBBufferClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahStrDedupQueue *_dedup_queue;
  ShenandoahHeap *_heap;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4739 */
struct /*VFT*/ ShenandoahPrepareForMarkClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4740 */
struct __cppobj ShenandoahPrepareForMarkClosure : ShenandoahHeapRegionClosure
{
  ShenandoahMarkingContext *const _ctx;
};

/* 4741 */
struct __cppobj GrowableArray<ShenandoahHeapRegion *> : GenericGrowableArray
{
  ShenandoahHeapRegion **_data;
};

/* 4742 */
struct /*VFT*/ ShenandoahPrepareForCompactionObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4743 */
struct __cppobj ShenandoahPrepareForCompactionObjectClosure : ObjectClosure
{
  PreservedMarks *const _preserved_marks;
  ShenandoahHeap *const _heap;
  GrowableArray<ShenandoahHeapRegion *> *_empty_regions;
  int _empty_regions_pos;
  ShenandoahHeapRegion *_to_region;
  ShenandoahHeapRegion *_from_region;
  HeapWord *_compact_point;
};

/* 4744 */
struct /*VFT*/ ShenandoahPrepareForCompactionTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4745 */
struct __cppobj ShenandoahPrepareForCompactionTask : AbstractGangTask
{
  PreservedMarksSet *const _preserved_marks;
  ShenandoahHeap *const _heap;
  ShenandoahHeapRegionSet **const _worker_slices;
};

/* 4746 */
struct __cppobj ShenandoahHeapRegionSetIterator : StackObj
{
  const ShenandoahHeapRegionSet *_set;
  ShenandoahHeap *const _heap;
  char _pad0[64];
  volatile int _current_index;
  char _pad1[64];
};

/* 4747 */
struct /*VFT*/ ShenandoahEnsureHeapActiveClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4748 */
struct __cppobj ShenandoahEnsureHeapActiveClosure : ShenandoahHeapRegionClosure
{
  ShenandoahHeap *const _heap;
};

/* 4749 */
struct /*VFT*/ ShenandoahTrashImmediateGarbageClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4750 */
struct __cppobj ShenandoahTrashImmediateGarbageClosure : ShenandoahHeapRegionClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahMarkingContext *const _ctx;
};

/* 4751 */
struct /*VFT*/ ShenandoahAdjustPointersClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4752 */
struct __cppobj ShenandoahAdjustPointersClosure : MetadataAwareOopClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahMarkingContext *const _ctx;
};

/* 4753 */
struct /*VFT*/ ShenandoahAdjustPointersObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4754 */
struct __cppobj ShenandoahAdjustPointersObjectClosure : ObjectClosure
{
  ShenandoahHeap *const _heap;
  ShenandoahAdjustPointersClosure _cl;
};

/* 4755 */
struct /*VFT*/ ShenandoahAdjustPointersTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4756 */
struct __cppobj ShenandoahAdjustPointersTask : AbstractGangTask
{
  ShenandoahHeap *const _heap;
  ShenandoahRegionIterator _regions;
};

/* 4757 */
struct /*VFT*/ ShenandoahAdjustRootPointersTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4758 */
struct __cppobj ShenandoahAdjustRootPointersTask : AbstractGangTask
{
  ShenandoahRootAdjuster *_rp;
  PreservedMarksSet *_preserved_marks;
};

/* 4759 */
struct /*VFT*/ ShenandoahCompactObjectsClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4760 */
struct __cppobj ShenandoahCompactObjectsClosure : ObjectClosure
{
  ShenandoahHeap *const _heap;
};

/* 4761 */
struct /*VFT*/ ShenandoahCompactObjectsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4762 */
struct __cppobj ShenandoahCompactObjectsTask : AbstractGangTask
{
  ShenandoahHeap *const _heap;
  ShenandoahHeapRegionSet **const _worker_slices;
};

/* 4763 */
struct /*VFT*/ ShenandoahPostCompactClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4764 */
struct __cppobj ShenandoahPostCompactClosure : ShenandoahHeapRegionClosure
{
  ShenandoahHeap *const _heap;
  unsigned int _live;
};

/* 4765 */
struct /*VFT*/ ShenandoahMCResetCompleteBitmapTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4766 */
struct __cppobj ShenandoahMCResetCompleteBitmapTask : AbstractGangTask
{
  ShenandoahRegionIterator _regions;
};

/* 4767 */
struct __cppobj FormatBuffer<256> : FormatBufferBase
{
  char _buffer[256];
};

/* 4768 */
struct /*VFT*/ SATBMarkQueueSet_vtbl
{
  bool (__thiscall *mut_process_buffer)(PtrQueueSet *this, void **);
};

/* 4769 */
struct __cppobj SATBMarkQueueSet : PtrQueueSet
{
  ObjPtrQueue _shared_satb_queue;
};

/* 4770 */
struct __cppobj CHeapObj<9>
{
};

/* 4771 */
struct __cppobj BasicHashtableEntry<9> : CHeapObj<9>
{
  unsigned int _hash;
  BasicHashtableEntry<9> *_next;
};

/* 4772 */
struct __cppobj HashtableBucket<9> : CHeapObj<9>
{
  BasicHashtableEntry<9> *_entry;
};

/* 4773 */
struct __cppobj BasicHashtable<9> : CHeapObj<9>
{
  int _table_size;
  HashtableBucket<9> *_buckets;
  BasicHashtableEntry<9> *volatile _free_list;
  char *_first_free_entry;
  char *_end_block;
  int _entry_size;
  volatile int _number_of_entries;
};

/* 4774 */
struct __cppobj Hashtable<Symbol *,9> : BasicHashtable<9>
{
};

/* 4775 */
struct __cppobj RehashableHashtable<Symbol *,9> : Hashtable<Symbol *,9>
{
};

/* 4776 */
struct __cppobj SymbolTable : RehashableHashtable<Symbol *,9>
{
};

/* 4777 */
struct __cppobj VMError : StackObj
{
  int _id;
  const char *_message;
  const char *_detail_msg;
  Thread *_thread;
  unsigned __int8 *_pc;
  void *_siginfo;
  void *_context;
  const char *_filename;
  int _lineno;
  int _current_step;
  const char *_current_step_info;
  int _verbose;
  unsigned int _size;
};

/* 4778 */
struct __cppobj Hashtable<oopDesc *,9> : BasicHashtable<9>
{
};

/* 4779 */
struct __cppobj RehashableHashtable<oopDesc *,9> : Hashtable<oopDesc *,9>
{
};

/* 4780 */
struct __cppobj StringTable : RehashableHashtable<oopDesc *,9>
{
};

/* 4781 */
struct __cppobj StringLogMessage : FormatBuffer<256>
{
};

/* 4782 */
struct __cppobj EventLogBase<StringLogMessage>::EventRecord<StringLogMessage> : CHeapObj<7>
{
  long double timestamp;
  Thread *thread;
  StringLogMessage data;
};

/* 4783 */
struct /*VFT*/ EventLogBase<StringLogMessage>_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 4784 */
struct __cppobj EventLogBase<StringLogMessage> : EventLog
{
  Mutex _mutex;
  const char *_name;
  int _length;
  int _index;
  int _count;
  EventLogBase<StringLogMessage>::EventRecord<StringLogMessage> *_records;
};

/* 4785 */
struct /*VFT*/ StringEventLog_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 4786 */
struct __cppobj StringEventLog : EventLogBase<StringLogMessage>
{
};

/* 4787 */
struct /*VFT*/ ShenandoahIUMode_vtbl
{
  void (__thiscall *initialize_flags)(ShenandoahMode *this);
  ShenandoahHeuristics *(__thiscall *initialize_heuristics)(ShenandoahMode *this);
  const char *(__thiscall *name)(ShenandoahMode *this);
  bool (__thiscall *is_diagnostic)(ShenandoahMode *this);
  bool (__thiscall *is_experimental)(ShenandoahMode *this);
};

/* 4788 */
struct __cppobj ShenandoahIUMode : ShenandoahMode
{
};

/* 4789 */
struct /*VFT*/ ShenandoahPassiveMode_vtbl
{
  void (__thiscall *initialize_flags)(ShenandoahMode *this);
  ShenandoahHeuristics *(__thiscall *initialize_heuristics)(ShenandoahMode *this);
  const char *(__thiscall *name)(ShenandoahMode *this);
  bool (__thiscall *is_diagnostic)(ShenandoahMode *this);
  bool (__thiscall *is_experimental)(ShenandoahMode *this);
};

/* 4790 */
struct __cppobj ShenandoahPassiveMode : ShenandoahMode
{
};

/* 4791 */
struct /*VFT*/ ShenandoahSATBMode_vtbl
{
  void (__thiscall *initialize_flags)(ShenandoahMode *this);
  ShenandoahHeuristics *(__thiscall *initialize_heuristics)(ShenandoahMode *this);
  const char *(__thiscall *name)(ShenandoahMode *this);
  bool (__thiscall *is_diagnostic)(ShenandoahMode *this);
  bool (__thiscall *is_experimental)(ShenandoahMode *this);
};

/* 4792 */
struct __cppobj ShenandoahSATBMode : ShenandoahMode
{
};

/* 4793 */
struct /*VFT*/ ShenandoahPretouchHeapTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4794 */
struct __cppobj ShenandoahPretouchHeapTask : AbstractGangTask
{
  ShenandoahRegionIterator _regions;
  const unsigned int _page_size;
};

/* 4795 */
struct /*VFT*/ ShenandoahPretouchBitmapTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4796 */
struct __cppobj ShenandoahPretouchBitmapTask : AbstractGangTask
{
  ShenandoahRegionIterator _regions;
  char *_bitmap_base;
  const unsigned int _bitmap_size;
  const unsigned int _page_size;
};

/* 4797 */
struct /*VFT*/ ShenandoahResetBitmapTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4798 */
struct __cppobj ShenandoahResetBitmapTask : AbstractGangTask
{
  ShenandoahRegionIterator _regions;
};

/* 4799 */
struct /*VFT*/ ShenandoahInitGCLABClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4800 */
struct __cppobj ShenandoahInitGCLABClosure : ThreadClosure
{
};

/* 4801 */
struct /*VFT*/ ShenandoahConcurrentEvacuateRegionObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4802 */
struct __cppobj ShenandoahConcurrentEvacuateRegionObjectClosure : ObjectClosure
{
  ShenandoahHeap *const _heap;
  Thread *const _thread;
};

/* 4803 */
struct /*VFT*/ ShenandoahEvacuationTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4804 */
struct __cppobj __declspec(align(4)) ShenandoahEvacuationTask : AbstractGangTask
{
  ShenandoahHeap *const _sh;
  ShenandoahCollectionSet *const _cs;
  bool _concurrent;
};

/* 4805 */
struct /*VFT*/ ShenandoahRetireGCLABClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4806 */
struct __cppobj __declspec(align(4)) ShenandoahRetireGCLABClosure : ThreadClosure
{
  bool _retire;
};

/* 4807 */
struct /*VFT*/ ShenandoahEvacuateUpdateRootsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4808 */
struct __cppobj ShenandoahEvacuateUpdateRootsTask : AbstractGangTask
{
  ShenandoahRootEvacuator *_rp;
};

/* 4809 */
struct /*VFT*/ ShenandoahResizeGCLABClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4810 */
struct __cppobj ShenandoahResizeGCLABClosure : ThreadClosure
{
};

/* 4811 */
struct /*VFT*/ ShenandoahAccumulateStatisticsGCLABClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4812 */
struct __cppobj ShenandoahAccumulateStatisticsGCLABClosure : ThreadClosure
{
};

/* 4813 */
struct /*VFT*/ ObjectIterateScanRootClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4814 */
struct __cppobj ObjectIterateScanRootClosure : ExtendedOopClosure
{
  MarkBitMap *_bitmap;
  Stack<oopDesc *,5> *_oop_stack;
};

/* 4815 */
struct /*VFT*/ ShenandoahParallelHeapRegionTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4816 */
struct __cppobj ShenandoahParallelHeapRegionTask : AbstractGangTask
{
  ShenandoahHeap *const _heap;
  ShenandoahHeapRegionClosure *const _blk;
  char _pad0[64];
  volatile int _index;
  char _pad1[64];
};

/* 4817 */
struct /*VFT*/ ShenandoahInitMarkUpdateRegionStateClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4818 */
struct __cppobj ShenandoahInitMarkUpdateRegionStateClosure : ShenandoahHeapRegionClosure
{
  ShenandoahMarkingContext *const _ctx;
};

/* 4819 */
struct /*VFT*/ ShenandoahFinalMarkUpdateRegionStateClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4820 */
struct __cppobj ShenandoahFinalMarkUpdateRegionStateClosure : ShenandoahHeapRegionClosure
{
  ShenandoahMarkingContext *const _ctx;
  ShenandoahLock *const _lock;
};

/* 4821 */
struct /*VFT*/ ShenandoahResetUpdateRegionStateClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4822 */
struct __cppobj ShenandoahResetUpdateRegionStateClosure : ShenandoahHeapRegionClosure
{
  ShenandoahMarkingContext *const _ctx;
};

/* 4823 */
struct /*VFT*/ ShenandoahUpdateHeapRefsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4824 */
struct __cppobj __declspec(align(4)) ShenandoahUpdateHeapRefsTask : AbstractGangTask
{
  ShenandoahHeap *_heap;
  ShenandoahRegionIterator *_regions;
  bool _concurrent;
};

/* 4825 */
struct /*VFT*/ ShenandoahFinalUpdateRefsUpdateRegionStateClosure_vtbl
{
  void (__thiscall *heap_region_do)(ShenandoahHeapRegionClosure *this, ShenandoahHeapRegion *);
  bool (__thiscall *is_thread_safe)(ShenandoahHeapRegionClosure *this);
};

/* 4826 */
struct __cppobj ShenandoahFinalUpdateRefsUpdateRegionStateClosure : ShenandoahHeapRegionClosure
{
  ShenandoahLock *const _lock;
};

/* 4827 */
struct /*VFT*/ ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure>_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4828 */
struct __cppobj ShenandoahObjectToOopBoundedClosure<ShenandoahUpdateHeapRefsClosure> : ObjectClosure
{
  ShenandoahUpdateHeapRefsClosure *_cl;
  MemRegion _bounds;
};

/* 4829 */
struct /*VFT*/ ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure>_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4830 */
struct __cppobj ShenandoahObjectToOopClosure<ShenandoahUpdateHeapRefsClosure> : ObjectClosure
{
  ShenandoahUpdateHeapRefsClosure *_cl;
};

/* 4831 */
struct /*VFT*/ ObjectToOopClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4832 */
struct __cppobj ObjectToOopClosure : ObjectClosure
{
  ExtendedOopClosure *_cl;
};

/* 4833 */
struct __cppobj EventMark : StackObj
{
  StringLogMessage _buffer;
};

/* 4834 */
struct __cppobj PerfTraceTime : StackObj
{
  elapsedTimer _t;
  PerfLongCounter *_timerp;
  int *_recursion_counter;
};

/* 4835 */
struct __cppobj __declspec(align(8)) PerfTraceTimedEvent : PerfTraceTime
{
  PerfLongCounter *_eventp;
};

/* 4836 */
struct __cppobj __declspec(align(8)) TraceCollectorStats : PerfTraceTimedEvent
{
  CollectorCounters *_c;
};

/* 4837 */
struct __cppobj ShenandoahRootScanner<ShenandoahAllCodeRootsIterator> : ShenandoahRootProcessor
{
  ShenandoahSerialRoots _serial_roots;
  ShenandoahSystemDictionaryRoots _dict_roots;
  ShenandoahClassLoaderDataRoots _cld_roots;
  ShenandoahThreadRoots _thread_roots;
  ShenandoahWeakRoots _weak_roots;
  ShenandoahStringDedupRoots _dedup_roots;
  ShenandoahStringTableRoots _string_table_roots;
  ShenandoahCodeCacheRoots<ShenandoahAllCodeRootsIterator> _code_roots;
};

/* 4838 */
struct /*VFT*/ ShenandoahUpdateRootsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4839 */
struct __cppobj ShenandoahUpdateRootsTask : AbstractGangTask
{
  ShenandoahRootUpdater *_root_updater;
};

/* 4840 */
struct /*VFT*/ ShenandoahConcurrentMarkingTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4841 */
struct __cppobj ShenandoahConcurrentMarkingTask : AbstractGangTask
{
  ShenandoahConcurrentMark *_cm;
  ShenandoahTaskTerminator *_terminator;
};

/* 4842 */
struct /*VFT*/ ShenandoahSATBAndRemarkCodeRootsThreadsClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 4843 */
struct __cppobj ShenandoahSATBAndRemarkCodeRootsThreadsClosure : ThreadClosure
{
  ShenandoahSATBBufferClosure *_satb_cl;
  OopClosure *const _cl;
  MarkingCodeBlobClosure *_code_cl;
  int _thread_parity;
};

/* 4844 */
struct /*VFT*/ ShenandoahFinalMarkingTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4845 */
struct __cppobj __declspec(align(4)) ShenandoahFinalMarkingTask : AbstractGangTask
{
  ShenandoahConcurrentMark *_cm;
  ShenandoahTaskTerminator *_terminator;
  bool _dedup_string;
};

/* 4846 */
struct /*VFT*/ ShenandoahInitMarkRootsTask<1>_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4847 */
struct __cppobj ShenandoahInitMarkRootsTask<1> : AbstractGangTask
{
  ShenandoahRootScanner<ShenandoahAllCodeRootsIterator> *_rp;
};

/* 4848 */
struct /*VFT*/ ShenandoahInitMarkRootsTask<0>_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4849 */
struct __cppobj ShenandoahInitMarkRootsTask<0> : AbstractGangTask
{
  ShenandoahRootScanner<ShenandoahAllCodeRootsIterator> *_rp;
};

/* 4850 */
struct /*VFT*/ ShenandoahUpdateThreadRootsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4851 */
struct __cppobj ShenandoahUpdateThreadRootsTask : AbstractGangTask
{
  SharedHeap::StrongRootsScope _srs;
  ShenandoahPhaseTimings::Phase _phase;
  ShenandoahGCWorkerPhase _worker_phase;
};

/* 4852 */
struct /*VFT*/ ShenandoahCMDrainMarkingStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 4853 */
struct __cppobj __declspec(align(4)) ShenandoahCMDrainMarkingStackClosure : VoidClosure
{
  unsigned int _worker_id;
  ShenandoahTaskTerminator *_terminator;
  bool _reset_terminator;
};

/* 4854 */
struct /*VFT*/ ShenandoahCMKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4855 */
struct __cppobj ShenandoahCMKeepAliveClosure : OopClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahHeap *_heap;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4856 */
struct /*VFT*/ ShenandoahCMKeepAliveUpdateClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4857 */
struct __cppobj ShenandoahCMKeepAliveUpdateClosure : OopClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahHeap *_heap;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4858 */
struct __cppobj __declspec(align(4)) AbstractRefProcTaskExecutor::ProcessTask
{
  AbstractRefProcTaskExecutor::ProcessTask_vtbl *__vftable /*VFT*/;
  ReferenceProcessor *_ref_processor;
  DiscoveredList *_refs_lists;
  const bool _marks_oops_alive;
};

/* 4859 */
struct /*VFT*/ AbstractRefProcTaskExecutor::ProcessTask_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::ProcessTask *this, unsigned int, BoolObjectClosure *, OopClosure *, VoidClosure *);
};

/* 4860 */
struct /*VFT*/ ShenandoahRefProcTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4861 */
struct __cppobj ShenandoahRefProcTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::ProcessTask *_proc_task;
  ShenandoahTaskTerminator *_terminator;
};

/* 4862 */
struct __cppobj AbstractRefProcTaskExecutor::EnqueueTask
{
  AbstractRefProcTaskExecutor::EnqueueTask_vtbl *__vftable /*VFT*/;
  ReferenceProcessor *_ref_processor;
  DiscoveredList *_refs_lists;
  HeapWord *_pending_list_addr;
  int _n_queues;
};

/* 4863 */
struct /*VFT*/ AbstractRefProcTaskExecutor::EnqueueTask_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::EnqueueTask *this, unsigned int);
};

/* 4864 */
struct /*VFT*/ ShenandoahRefEnqueueTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4865 */
struct __cppobj ShenandoahRefEnqueueTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_enqueue_task;
};

/* 4866 */
struct __cppobj AbstractRefProcTaskExecutor
{
  AbstractRefProcTaskExecutor_vtbl *__vftable /*VFT*/;
};

/* 4867 */
struct /*VFT*/ AbstractRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 4868 */
struct /*VFT*/ ShenandoahRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 4869 */
struct __cppobj ShenandoahRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
  WorkGang *_workers;
};

/* 4870 */
struct /*VFT*/ DoNothingClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4871 */
struct __cppobj DoNothingClosure : OopClosure
{
};

/* 4872 */
struct /*VFT*/ ShenandoahWeakUpdateClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4873 */
struct __cppobj ShenandoahWeakUpdateClosure : OopClosure
{
  ShenandoahHeap *const _heap;
};

/* 4874 */
struct __cppobj YieldClosure : StackObj
{
  YieldClosure_vtbl *__vftable /*VFT*/;
};

/* 4875 */
struct /*VFT*/ YieldClosure_vtbl
{
  bool (__thiscall *should_return)(YieldClosure *this);
};

/* 4876 */
struct /*VFT*/ ShenandoahCancelledGCYieldClosure_vtbl
{
  bool (__thiscall *should_return)(YieldClosure *this);
};

/* 4877 */
struct __cppobj ShenandoahCancelledGCYieldClosure : YieldClosure
{
  ShenandoahHeap *const _heap;
};

/* 4878 */
struct /*VFT*/ ShenandoahPrecleanCompleteGCClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 4879 */
struct __cppobj ShenandoahPrecleanCompleteGCClosure : VoidClosure
{
};

/* 4880 */
struct /*VFT*/ ShenandoahPrecleanTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4881 */
struct __cppobj ShenandoahPrecleanTask : AbstractGangTask
{
  ReferenceProcessor *_rp;
};

/* 4882 */
struct /*VFT*/ ShenandoahInitMarkRootsClosure<1>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4883 */
struct __cppobj ShenandoahInitMarkRootsClosure<1> : OopClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahHeap *_heap;
  ShenandoahStrDedupQueue *_dedup_queue;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4884 */
struct /*VFT*/ ShenandoahInitMarkRootsClosure<0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4885 */
struct __cppobj ShenandoahInitMarkRootsClosure<0> : OopClosure
{
  Padded<BufferedOverflowTaskQueue<ObjArrayChunkedTask,5,16384>,64> *_queue;
  ShenandoahHeap *_heap;
  ShenandoahStrDedupQueue *_dedup_queue;
  ShenandoahMarkingContext *const _mark_context;
};

/* 4886 */
struct __cppobj __declspec(align(4)) ReferenceProcessorMTDiscoveryMutator : StackObj
{
  ReferenceProcessor *_rp;
  bool _saved_mt;
};

/* 4887 */
struct __cppobj ReferenceProcessorIsAliveMutator : StackObj
{
  ReferenceProcessor *_rp;
  BoolObjectClosure *_saved_cl;
};

/* 4888 */
struct /*VFT*/ ShenandoahMarkResolveRefsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4889 */
struct __cppobj ShenandoahMarkResolveRefsClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 4890 */
struct /*VFT*/ ShenandoahNMethodOopDetector_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4891 */
struct __cppobj ShenandoahNMethodOopDetector : OopClosure
{
  ResourceMark rm;
  GrowableArray<oopDesc * *> _oops;
};

/* 4892 */
struct __cppobj ShenandoahAsserts
{
};

/* 4893 */
struct __cppobj StackIterator<PreservedMarks::OopAndMarkOop,5> : StackObj
{
  Stack<PreservedMarks::OopAndMarkOop,5> *_stack;
  unsigned int _cur_seg_size;
  PreservedMarks::OopAndMarkOop *_cur_seg;
  unsigned int _full_seg_size;
};

/* 4894 */
struct /*VFT*/ RemoveForwardedPointerClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 4895 */
struct __cppobj RemoveForwardedPointerClosure : ObjectClosure
{
};

/* 4896 */
struct /*VFT*/ ParRestoreTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4897 */
struct __cppobj ParRestoreTask : AbstractGangTask
{
  PreservedMarksSet *const _preserved_marks_set;
  SequentialSubTasksDone _sub_tasks;
  volatile unsigned int *const _total_size_addr;
};

/* 4898 */
struct __cppobj ParScanThreadStateSet : ResourceArray
{
  ParallelTaskTerminator *_term;
  ParNewGeneration *_gen;
  Generation *_next_gen;
};

/* 4899 */
struct /*VFT*/ ParNewGenTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4900 */
struct __cppobj ParNewGenTask : AbstractGangTask
{
  ParNewGeneration *_gen;
  Generation *_next_gen;
  HeapWord *_young_old_boundary;
  ParScanThreadStateSet *_state_set;
};

/* 4901 */
struct /*VFT*/ ParNewRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 4902 */
struct __cppobj ParNewRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
  ParNewGeneration *_generation;
  ParScanThreadStateSet *_state_set;
};

/* 4903 */
struct __cppobj SubTasksDone : CHeapObj<7>
{
  unsigned int *_tasks;
  unsigned int _n_tasks;
  unsigned int _n_threads;
  unsigned int _threads_completed;
};

/* 4904 */
struct /*VFT*/ GenCollectedHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
  void (__thiscall *ref_processing_init)(SharedHeap *this);
  void (__thiscall *space_iterate)(SharedHeap *this, SpaceClosure *);
  Space *(__thiscall *space_containing)(SharedHeap *this, const void *);
  void (__thiscall *gc_prologue)(SharedHeap *this, bool);
  void (__thiscall *gc_epilogue)(SharedHeap *this, bool);
};

/* 4905 */
struct __cppobj GenCollectedHeap : SharedHeap
{
  int _n_gens;
  Generation *_gens[10];
  GenerationSpec **_gen_specs;
  GenCollectorPolicy *_gen_policy;
  bool _incremental_collection_failed;
  unsigned int _full_collections_completed;
  SubTasksDone *_process_strong_tasks;
};

/* 4906 */
struct /*VFT*/ ParNewTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 4907 */
struct __cppobj ParNewTracer : YoungGCTracer
{
};

/* 4908 */
struct /*VFT*/ CardTableExtension_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
  bool (__thiscall *card_will_be_scanned)(CardTableModRefBS *this, char);
  bool (__thiscall *card_may_have_been_dirty)(CardTableModRefBS *this, char);
  void (__thiscall *initialize)(CardTableModRefBS *this);
};

/* 4909 */
struct __cppobj CardTableExtension : CardTableModRefBS
{
};

/* 4910 */
struct __cppobj ImmutableSpace : CHeapObj<5>
{
  ImmutableSpace_vtbl *__vftable /*VFT*/;
  HeapWord *_bottom;
  HeapWord *_end;
};

/* 4911 */
struct /*VFT*/ ImmutableSpace_vtbl
{
  unsigned int (__thiscall *capacity_in_words)(ImmutableSpace *this, Thread *);
  void (__thiscall *oop_iterate)(ImmutableSpace *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(ImmutableSpace *this, ObjectClosure *);
  void (__thiscall *print)(ImmutableSpace *this);
  void (__thiscall *print_short)(ImmutableSpace *this);
  void (__thiscall *verify)(ImmutableSpace *this);
};

/* 4912 */
struct __cppobj MutableSpace : ImmutableSpace
{
  MutableSpaceMangler *_mangler;
  MemRegion _last_setup_region;
  unsigned int _alignment;
  HeapWord *_top;
};

/* 4913 */
struct /*VFT*/ MutableSpaceMangler_vtbl
{
  HeapWord *(__thiscall *top)(SpaceMangler *this);
  HeapWord *(__thiscall *end)(SpaceMangler *this);
};

/* 4914 */
struct __cppobj MutableSpaceMangler : SpaceMangler
{
  MutableSpace *_sp;
};

/* 4915 */
struct /*VFT*/ MutableSpace_vtbl
{
  unsigned int (__thiscall *capacity_in_words)(ImmutableSpace *this, Thread *);
  void (__thiscall *oop_iterate)(ImmutableSpace *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(ImmutableSpace *this, ObjectClosure *);
  void (__thiscall *print)(ImmutableSpace *this);
  void (__thiscall *print_short)(ImmutableSpace *this);
  void (__thiscall *verify)(ImmutableSpace *this);
  void (__thiscall *~MutableSpace)(MutableSpace *this);
  void (__thiscall *set_top)(MutableSpace *this, HeapWord *);
  void (__thiscall *set_bottom)(MutableSpace *this, HeapWord *);
  void (__thiscall *set_end)(MutableSpace *this, HeapWord *);
  void (__thiscall *initialize)(MutableSpace *this, MemRegion, bool, bool, bool);
  void (__thiscall *clear)(MutableSpace *this, bool);
  void (__thiscall *update)(MutableSpace *this);
  void (__thiscall *accumulate_statistics)(MutableSpace *this);
  void (__thiscall *mangle_unused_area)(MutableSpace *this);
  void (__thiscall *mangle_unused_area_complete)(MutableSpace *this);
  void (__thiscall *check_mangled_unused_area)(MutableSpace *this, HeapWord *);
  void (__thiscall *check_mangled_unused_area_complete)(MutableSpace *this);
  void (__thiscall *set_top_for_allocations)(MutableSpace *this);
  void (__thiscall *set_top_for_allocations)(MutableSpace *this, HeapWord *);
  void (__thiscall *ensure_parsability)(MutableSpace *this);
  void (__thiscall *mangle_region)(MutableSpace *this, MemRegion);
  unsigned int (__thiscall *used_in_words)(MutableSpace *this);
  unsigned int (__thiscall *free_in_words)(MutableSpace *this);
  unsigned int (__thiscall *tlab_capacity)(MutableSpace *this, Thread *);
  unsigned int (__thiscall *tlab_used)(MutableSpace *this, Thread *);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(MutableSpace *this, Thread *);
  HeapWord *(__thiscall *allocate)(MutableSpace *this, unsigned int);
  HeapWord *(__thiscall *cas_allocate)(MutableSpace *this, unsigned int);
  void (__thiscall *print_on)(MutableSpace *this, outputStream *);
  void (__thiscall *print_short_on)(MutableSpace *this, outputStream *);
};

/* 4916 */
struct /*VFT*/ PSIsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 4917 */
struct __cppobj PSIsAliveClosure : BoolObjectClosure
{
};

/* 4918 */
struct /*VFT*/ ParallelScavengeTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 4919 */
struct __cppobj ParallelScavengeTracer : YoungGCTracer
{
};

/* 4920 */
struct __cppobj PSScavenge : AllStatic
{
};

/* 4921 */
struct __cppobj GCTaskManager : CHeapObj<5>
{
  NotifyDoneClosure *_ndc;
  const unsigned int _workers;
  Monitor *_monitor;
  SynchronizedGCTaskQueue *_queue;
  GCTaskThread **_thread;
  unsigned int _active_workers;
  unsigned int _busy_workers;
  unsigned int _blocking_worker;
  bool *_resource_flag;
  unsigned int _delivered_tasks;
  unsigned int _completed_tasks;
  unsigned int _barriers;
  unsigned int _emptied_queue;
  NoopGCTask *_noop_task;
  unsigned int _noop_tasks;
  WaitForBarrierGCTask *_idle_inactive_task;
  volatile unsigned int _idle_workers;
};

/* 4922 */
struct __cppobj NotifyDoneClosure : CHeapObj<5>
{
  NotifyDoneClosure_vtbl *__vftable /*VFT*/;
};

/* 4923 */
struct /*VFT*/ NotifyDoneClosure_vtbl
{
  void (__thiscall *notify)(NotifyDoneClosure *this, GCTaskManager *);
  void (__thiscall *~NotifyDoneClosure)(NotifyDoneClosure *this);
};

/* 4924 */
struct __cppobj __declspec(align(4)) GCTaskQueue : ResourceObj
{
  GCTaskQueue_vtbl *__vftable /*VFT*/;
  GCTask *_insert_end;
  GCTask *_remove_end;
  unsigned int _length;
  const bool _is_c_heap_obj;
};

/* 4925 */
struct /*VFT*/ GCTaskQueue_vtbl
{
  void (__thiscall *destruct)(GCTaskQueue *this);
};

/* 4926 */
struct __cppobj GCTask : ResourceObj
{
  GCTask_vtbl *__vftable /*VFT*/;
  const GCTask::Kind::kind _kind;
  const unsigned int _affinity;
  GCTask *_newer;
  GCTask *_older;
};

/* 4927 */
struct /*VFT*/ GCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 4928 */
struct __cppobj SynchronizedGCTaskQueue : CHeapObj<5>
{
  GCTaskQueue *_unsynchronized_queue;
  Monitor *_lock;
};

/* 4929 */
struct __cppobj __declspec(align(8)) GCTaskTimeStamp : CHeapObj<5>
{
  __int64 _entry_time;
  __int64 _exit_time;
  char *_name;
};

/* 4930 */
struct __cppobj __declspec(align(8)) GCTaskThread : WorkerThread
{
  GCTaskManager *_manager;
  const unsigned int _processor_id;
  GCTaskTimeStamp *_time_stamps;
  unsigned int _time_stamp_index;
  bool _is_working;
};

/* 4931 */
struct /*VFT*/ NoopGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 4932 */
struct __cppobj __declspec(align(4)) NoopGCTask : GCTask
{
  const bool _is_c_heap_obj;
};

/* 4933 */
struct /*VFT*/ BarrierGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 4934 */
struct __cppobj BarrierGCTask : GCTask
{
};

/* 4935 */
struct /*VFT*/ WaitForBarrierGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 4936 */
struct __cppobj __declspec(align(4)) WaitForBarrierGCTask : BarrierGCTask
{
  Monitor *_monitor;
  volatile bool _should_wait;
  const bool _is_c_heap_obj;
};

/* 4937 */
struct __cppobj PaddedEndImpl<PSPromotionManager,40> : PSPromotionManager
{
  char _pad_buf[40];
};

/* 4938 */
struct __cppobj PaddedEnd<PSPromotionManager,64> : PaddedEndImpl<PSPromotionManager,40>
{
};

/* 4939 */
struct /*VFT*/ TaskQueueSetSuperImpl<1>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 4940 */
struct __cppobj TaskQueueSetSuperImpl<1> : TaskQueueSetSuper, CHeapObj<1>
{
};

/* 4941 */
struct /*VFT*/ GenericTaskQueueSet<OverflowTaskQueue<StarTask,1,16384>,1>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 4942 */
struct __cppobj GenericTaskQueueSet<OverflowTaskQueue<StarTask,1,16384>,1> : TaskQueueSetSuperImpl<1>
{
  unsigned int _n;
  OverflowTaskQueue<StarTask,1,16384> **_queues;
};

/* 4943 */
struct __cppobj PSOldGen : CHeapObj<5>
{
  PSOldGen_vtbl *__vftable /*VFT*/;
  MemRegion _reserved;
  PSVirtualSpace *_virtual_space;
  ObjectStartArray _start_array;
  MutableSpace *_object_space;
  PSMarkSweepDecorator *_object_mark_sweep;
  const char *const _name;
  PSGenerationCounters *_gen_counters;
  SpaceCounters *_space_counters;
  const unsigned int _init_gen_size;
  const unsigned int _min_gen_size;
  const unsigned int _max_gen_size;
};

/* 4944 */
struct /*VFT*/ PSOldGen_vtbl
{
  void (__thiscall *initialize)(PSOldGen *this, ReservedSpace, unsigned int, const char *, int);
  void (__thiscall *initialize_work)(PSOldGen *this, const char *, int);
  void (__thiscall *initialize_performance_counters)(PSOldGen *this, const char *, int);
  unsigned int (__thiscall *max_gen_size)(PSOldGen *this);
  unsigned int (__thiscall *gen_size_limit)(PSOldGen *this);
  void (__thiscall *precompact)(PSOldGen *this);
  void (__thiscall *print)(PSOldGen *this);
  void (__thiscall *print_on)(PSOldGen *this, outputStream *);
  void (__thiscall *reset_after_change)(PSOldGen *this);
  unsigned int (__thiscall *available_for_expansion)(PSOldGen *this);
  unsigned int (__thiscall *available_for_contraction)(PSOldGen *this);
  const char *(__thiscall *name)(PSOldGen *this);
};

/* 4945 */
struct __cppobj PSMarkSweepDecorator : CHeapObj<5>
{
  MutableSpace *_space;
  ObjectStartArray *_start_array;
  HeapWord *_first_dead;
  HeapWord *_end_of_live;
  HeapWord *_compaction_top;
  unsigned int _allowed_dead_ratio;
};

/* 4946 */
struct /*VFT*/ PSGenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 4947 */
struct __cppobj PSGenerationCounters : GenerationCounters
{
  PSVirtualSpace *_ps_virtual_space;
};

/* 4948 */
struct __cppobj SpaceCounters : CHeapObj<5>
{
  PerfLongVariable *_capacity;
  PerfLongVariable *_used;
  MutableSpace *_object_space;
  char *_name_space;
};

/* 4949 */
struct /*VFT*/ PSScavengeFromKlassClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4950 */
struct __cppobj PSScavengeFromKlassClosure : OopClosure
{
  PSPromotionManager *_pm;
  Klass *_scanned_klass;
};

/* 4951 */
struct /*VFT*/ PSScavengeKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 4952 */
struct __cppobj PSScavengeKlassClosure : KlassClosure
{
  PSScavengeFromKlassClosure _oop_closure;
};

/* 4953 */
struct /*VFT*/ KeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 4954 */
struct __cppobj KeepAliveClosure : DefNewGeneration::KeepAliveClosure
{
};

/* 4955 */
struct /*VFT*/ ScanClosureWithParBarrier_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 4956 */
struct __cppobj ScanClosureWithParBarrier : ScanClosure
{
};

/* 4957 */
struct /*VFT*/ ParNewRefProcTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4958 */
struct __cppobj ParNewRefProcTaskProxy : AbstractGangTask
{
  ParNewGeneration *_gen;
  AbstractRefProcTaskExecutor::ProcessTask *_task;
  Generation *_next_gen;
  HeapWord *_young_old_boundary;
  ParScanThreadStateSet *_state_set;
};

/* 4959 */
struct /*VFT*/ ParNewRefEnqueueTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 4960 */
struct __cppobj ParNewRefEnqueueTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_task;
};

/* 4961 */
struct /*VFT*/ EvacuateFollowersClosureGeneral_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 4962 */
struct __cppobj EvacuateFollowersClosureGeneral : VoidClosure
{
  GenCollectedHeap *_gch;
  int _level;
  OopsInGenClosure *_scan_cur_or_nonheap;
  OopsInGenClosure *_scan_older;
};

/* 4963 */
struct __cppobj GCTraceTime
{
  const char *_title;
  bool _doit;
  bool _print_cr;
  GCTimer *_timer;
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _start_counter;
};

/* 4964 */
struct /*VFT*/ CLDToKlassAndOopClosure_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 4965 */
struct __cppobj __declspec(align(4)) CLDToKlassAndOopClosure : CLDClosure
{
  OopClosure *_oop_closure;
  KlassClosure *_klass_closure;
  bool _must_claim_cld;
};

/* 4966 */
struct /*VFT*/ KlassScanClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 4967 */
struct __cppobj __declspec(align(4)) KlassScanClosure : KlassClosure
{
  OopsInKlassOrGenClosure *_scavenge_closure;
  bool _accumulate_modified_oops;
};

/* 4968 */
struct __cppobj ReferenceProcessorStats
{
  unsigned int _soft_count;
  unsigned int _weak_count;
  unsigned int _final_count;
  unsigned int _phantom_count;
};

/* 4969 */
struct /*VFT*/ ClearNoncleanCardWrapper_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 4970 */
struct __cppobj __declspec(align(4)) ClearNoncleanCardWrapper : MemRegionClosure
{
  DirtyCardToOopClosure *_dirty_card_closure;
  CardTableRS *_ct;
  bool _is_par;
};

/* 4971 */
struct __cppobj MutexLocker : StackObj
{
  Monitor *_mutex;
};

/* 4972 */
struct __cppobj __declspec(align(8)) CMSAdaptiveSizePolicy : AdaptiveSizePolicy
{
  int _processor_count;
  int _concurrent_processor_count;
  long double _latest_cms_reset_end_to_initial_mark_start_secs;
  long double _latest_cms_initial_mark_end_to_remark_start_secs;
  long double _latest_cms_collection_end_to_collection_start_secs;
  long double _latest_cms_concurrent_marking_time_secs;
  long double _latest_cms_concurrent_precleaning_time_secs;
  long double _latest_cms_concurrent_sweeping_time_secs;
  long double _latest_cms_msc_end_to_msc_start_time_secs;
  long double _latest_cms_ms_end_to_ms_start;
  long double _latest_cms_initial_mark_start_to_end_time_secs;
  long double _latest_cms_remark_start_to_end_time_secs;
  long double _latest_cms_ms_marking_start_to_end_time_secs;
  unsigned int _generation_alignment;
  int _change_young_gen_for_maj_pauses;
  bool _first_after_collection;
  AdaptiveWeightedAverage *_avg_concurrent_time;
  AdaptiveWeightedAverage *_avg_concurrent_interval;
  AdaptiveWeightedAverage *_avg_concurrent_gc_cost;
  AdaptivePaddedAverage *_avg_initial_pause;
  AdaptivePaddedAverage *_avg_remark_pause;
  AdaptiveWeightedAverage *_avg_cms_STW_time;
  AdaptiveWeightedAverage *_avg_cms_STW_gc_cost;
  AdaptiveWeightedAverage *_avg_cms_free_at_sweep;
  AdaptiveWeightedAverage *_avg_cms_free;
  AdaptiveWeightedAverage *_avg_cms_promo;
  AdaptiveWeightedAverage *_avg_msc_pause;
  AdaptiveWeightedAverage *_avg_msc_interval;
  AdaptiveWeightedAverage *_avg_msc_gc_cost;
  AdaptiveWeightedAverage *_avg_ms_pause;
  AdaptiveWeightedAverage *_avg_ms_interval;
  AdaptiveWeightedAverage *_avg_ms_gc_cost;
  LinearLeastSquareFit *_remark_pause_old_estimator;
  LinearLeastSquareFit *_initial_pause_old_estimator;
  LinearLeastSquareFit *_remark_pause_young_estimator;
  LinearLeastSquareFit *_initial_pause_young_estimator;
};

/* 4973 */
struct /*VFT*/ CMSAdaptiveSizePolicy_vtbl
{
  AdaptiveSizePolicy::GCPolicyKind (__thiscall *kind)(AdaptiveSizePolicy *this);
  long double (__thiscall *gc_cost)(AdaptiveSizePolicy *this);
  long double (__thiscall *time_since_major_gc)(AdaptiveSizePolicy *this);
  long double (__thiscall *major_gc_interval_average_for_decay)(AdaptiveSizePolicy *this);
  long double (__thiscall *mutator_cost)(AdaptiveSizePolicy *this);
  void (__thiscall *update_minor_pause_old_estimator)(AdaptiveSizePolicy *this, long double);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *eden_decrement)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_decrement)(AdaptiveSizePolicy *this, unsigned int);
  void (__thiscall *clear_generation_free_space_flags)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_begin)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_end)(AdaptiveSizePolicy *this, GCCause::Cause);
  LinearLeastSquareFit *(__thiscall *minor_pause_old_estimator)(AdaptiveSizePolicy *this);
  bool (__thiscall *print_adaptive_size_policy_on)(AdaptiveSizePolicy *this, outputStream *);
  void (__thiscall *compute_eden_space_size)(CMSAdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *compute_survivor_space_size_and_threshold)(CMSAdaptiveSizePolicy *this, bool, unsigned int, unsigned int);
  void (__thiscall *compute_tenured_generation_free_space)(CMSAdaptiveSizePolicy *this, unsigned int, unsigned int, unsigned int);
};

/* 4974 */
struct __cppobj GCAdaptivePolicyCounters : GCPolicyCounters
{
  PerfLongVariable *_eden_size_counter;
  PerfLongVariable *_promo_size_counter;
  PerfLongVariable *_young_capacity_counter;
  PerfLongVariable *_minor_gc_cost_counter;
  PerfLongVariable *_major_gc_cost_counter;
  PerfLongVariable *_mutator_cost_counter;
  PerfLongVariable *_avg_young_live_counter;
  PerfLongVariable *_avg_old_live_counter;
  PerfLongVariable *_avg_minor_pause_counter;
  PerfLongVariable *_avg_minor_interval_counter;
  PerfLongVariable *_minor_pause_counter;
  PerfLongVariable *_change_young_gen_for_min_pauses_counter;
  PerfLongVariable *_change_young_gen_for_throughput_counter;
  PerfLongVariable *_change_old_gen_for_maj_pauses_counter;
  PerfLongVariable *_change_old_gen_for_throughput_counter;
  PerfLongVariable *_decrease_for_footprint_counter;
  PerfLongVariable *_minor_pause_young_slope_counter;
  PerfLongVariable *_major_pause_old_slope_counter;
  PerfLongVariable *_decide_at_full_gc_counter;
  PerfLongVariable *_survived_counter;
  PerfLongVariable *_promoted_counter;
  PerfLongVariable *_avg_survived_avg_counter;
  PerfLongVariable *_avg_survived_dev_counter;
  PerfLongVariable *_avg_survived_padded_avg_counter;
  PerfLongVariable *_survivor_overflowed_counter;
  PerfLongVariable *_increment_tenuring_threshold_for_gc_cost_counter;
  PerfLongVariable *_decrement_tenuring_threshold_for_gc_cost_counter;
  PerfLongVariable *_decrement_tenuring_threshold_for_survivor_limit_counter;
  PerfLongVariable *_minor_collection_slope_counter;
  PerfLongVariable *_major_collection_slope_counter;
  AdaptiveSizePolicy *_size_policy;
};

/* 4975 */
struct /*VFT*/ GCAdaptivePolicyCounters_vtbl
{
  void (__thiscall *update_counters)(GCPolicyCounters *this);
  GCPolicyCounters::Name (__thiscall *kind)(GCPolicyCounters *this);
  void (__thiscall *update_counters_from_policy)(GCAdaptivePolicyCounters *this);
  AdaptiveSizePolicy *(__thiscall *size_policy)(GCAdaptivePolicyCounters *this);
};

/* 4976 */
struct /*VFT*/ CMSGCAdaptivePolicyCounters_vtbl
{
  void (__thiscall *update_counters)(GCPolicyCounters *this);
  GCPolicyCounters::Name (__thiscall *kind)(GCPolicyCounters *this);
  void (__thiscall *update_counters_from_policy)(GCAdaptivePolicyCounters *this);
  AdaptiveSizePolicy *(__thiscall *size_policy)(GCAdaptivePolicyCounters *this);
};

/* 4977 */
struct __cppobj CMSGCAdaptivePolicyCounters : GCAdaptivePolicyCounters
{
  PerfLongVariable *_cms_capacity_counter;
  PerfLongVariable *_avg_cms_STW_time_counter;
  PerfLongVariable *_avg_cms_STW_gc_cost_counter;
  PerfLongVariable *_initial_pause_counter;
  PerfLongVariable *_remark_pause_counter;
  PerfLongVariable *_avg_initial_pause_counter;
  PerfLongVariable *_avg_remark_pause_counter;
  PerfLongVariable *_avg_concurrent_time_counter;
  PerfLongVariable *_avg_concurrent_interval_counter;
  PerfLongVariable *_avg_concurrent_gc_cost_counter;
  PerfLongVariable *_avg_cms_free_counter;
  PerfLongVariable *_avg_cms_free_at_sweep_counter;
  PerfLongVariable *_avg_cms_promo_counter;
  PerfLongVariable *_avg_msc_pause_counter;
  PerfLongVariable *_avg_msc_interval_counter;
  PerfLongVariable *_msc_gc_cost_counter;
  PerfLongVariable *_avg_ms_pause_counter;
  PerfLongVariable *_avg_ms_interval_counter;
  PerfLongVariable *_ms_gc_cost_counter;
  PerfLongVariable *_promoted_avg_counter;
  PerfLongVariable *_promoted_avg_dev_counter;
  PerfLongVariable *_promoted_padded_avg_counter;
  PerfLongVariable *_change_young_gen_for_maj_pauses_counter;
  PerfLongVariable *_remark_pause_old_slope_counter;
  PerfLongVariable *_initial_pause_old_slope_counter;
  PerfLongVariable *_remark_pause_young_slope_counter;
  PerfLongVariable *_initial_pause_young_slope_counter;
};

/* 4978 */
struct /*VFT*/ CMSGCStats_vtbl
{
  GCStats::Name (__thiscall *kind)(GCStats *this);
};

/* 4979 */
struct __cppobj CMSGCStats : GCStats
{
};

/* 4980 */
struct __cppobj __declspec(align(8)) ASParNewGeneration : ParNewGeneration
{
  unsigned int _min_gen_size;
};

/* 4981 */
struct __cppobj MarkSweep : AllStatic
{
};

/* 4982 */
struct __cppobj PSMarkSweep : MarkSweep
{
};

/* 4983 */
struct /*VFT*/ PSAdaptiveSizePolicy_vtbl
{
  AdaptiveSizePolicy::GCPolicyKind (__thiscall *kind)(AdaptiveSizePolicy *this);
  long double (__thiscall *gc_cost)(AdaptiveSizePolicy *this);
  long double (__thiscall *time_since_major_gc)(AdaptiveSizePolicy *this);
  long double (__thiscall *major_gc_interval_average_for_decay)(AdaptiveSizePolicy *this);
  long double (__thiscall *mutator_cost)(AdaptiveSizePolicy *this);
  void (__thiscall *update_minor_pause_old_estimator)(AdaptiveSizePolicy *this, long double);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *eden_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *eden_decrement)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int, unsigned int);
  unsigned int (__thiscall *promo_increment)(AdaptiveSizePolicy *this, unsigned int);
  unsigned int (__thiscall *promo_decrement)(AdaptiveSizePolicy *this, unsigned int);
  void (__thiscall *clear_generation_free_space_flags)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_begin)(AdaptiveSizePolicy *this);
  void (__thiscall *minor_collection_end)(AdaptiveSizePolicy *this, GCCause::Cause);
  LinearLeastSquareFit *(__thiscall *minor_pause_old_estimator)(AdaptiveSizePolicy *this);
  bool (__thiscall *print_adaptive_size_policy_on)(AdaptiveSizePolicy *this, outputStream *);
};

/* 4984 */
struct __cppobj __declspec(align(8)) PSAdaptiveSizePolicy : AdaptiveSizePolicy
{
  AdaptivePaddedAverage *_avg_major_pause;
  AdaptiveWeightedAverage *_avg_base_footprint;
  GCStats _gc_stats;
  unsigned int _survivor_size_limit;
  const long double _collection_cost_margin_fraction;
  LinearLeastSquareFit *_major_pause_old_estimator;
  LinearLeastSquareFit *_major_pause_young_estimator;
  long double _latest_major_mutator_interval_seconds;
  const unsigned int _space_alignment;
  const long double _gc_minor_pause_goal_sec;
  unsigned int _live_at_last_full_gc;
  int _change_old_gen_for_min_pauses;
  int _change_young_gen_for_maj_pauses;
  bool _old_gen_policy_is_ready;
  unsigned __int64 _young_gen_change_for_major_pause_count;
  unsigned int _young_gen_size_increment_supplement;
  unsigned int _old_gen_size_increment_supplement;
  unsigned int _bytes_absorbed_from_eden;
};

/* 4985 */
struct __cppobj PSYoungGen : CHeapObj<5>
{
  PSYoungGen_vtbl *__vftable /*VFT*/;
  MemRegion _reserved;
  PSVirtualSpace *_virtual_space;
  MutableSpace *_eden_space;
  MutableSpace *_from_space;
  MutableSpace *_to_space;
  PSMarkSweepDecorator *_eden_mark_sweep;
  PSMarkSweepDecorator *_from_mark_sweep;
  PSMarkSweepDecorator *_to_mark_sweep;
  const unsigned int _init_gen_size;
  const unsigned int _min_gen_size;
  const unsigned int _max_gen_size;
  PSGenerationCounters *_gen_counters;
  SpaceCounters *_eden_counters;
  SpaceCounters *_from_counters;
  SpaceCounters *_to_counters;
};

/* 4986 */
struct /*VFT*/ PSYoungGen_vtbl
{
  bool (__thiscall *resize_generation)(PSYoungGen *this, unsigned int, unsigned int);
  void (__thiscall *resize_spaces)(PSYoungGen *this, unsigned int, unsigned int);
  unsigned int (__thiscall *available_for_expansion)(PSYoungGen *this);
  unsigned int (__thiscall *available_for_contraction)(PSYoungGen *this);
  unsigned int (__thiscall *limit_gen_shrink)(PSYoungGen *this, unsigned int);
  unsigned int (__thiscall *available_to_live)(PSYoungGen *this);
  void (__thiscall *initialize)(PSYoungGen *this, ReservedSpace, unsigned int);
  void (__thiscall *initialize_virtual_space)(PSYoungGen *this, ReservedSpace, unsigned int);
  void (__thiscall *reset_after_change)(PSYoungGen *this);
  void (__thiscall *reset_survivors_after_shrink)(PSYoungGen *this);
  const char *(__thiscall *name)(PSYoungGen *this);
};

/* 4987 */
struct __cppobj VM_ParallelGCFailedAllocation : VM_CollectForAllocation
{
};

/* 4988 */
struct /*VFT*/ VM_ParallelGCFailedAllocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4989 */
struct __cppobj VM_ParallelGCSystemGC : VM_GC_Operation
{
};

/* 4990 */
struct /*VFT*/ VM_ParallelGCSystemGC_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 4991 */
struct __cppobj GCCauseSetter : StackObj
{
  CollectedHeap *_heap;
  GCCause::Cause _previous_cause;
};

/* 4992 */
struct __cppobj GenerationSizer : TwoGenerationCollectorPolicy
{
};

/* 4993 */
struct __cppobj AdjoiningVirtualSpaces
{
  PSVirtualSpace *_high;
  PSVirtualSpace *_low;
  ReservedSpace _reserved_space;
  unsigned int _min_low_byte_size;
  unsigned int _min_high_byte_size;
  const unsigned int _alignment;
};

/* 4994 */
struct __cppobj AdjoiningGenerations : CHeapObj<5>
{
  PSYoungGen *_young_gen;
  PSOldGen *_old_gen;
  AdjoiningVirtualSpaces _virtual_spaces;
};

/* 4995 */
struct /*VFT*/ ParallelScavengeHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
};

/* 4996 */
struct __cppobj ParallelScavengeHeap : CollectedHeap
{
  GenerationSizer *_collector_policy;
  AdjoiningGenerations *_gens;
  unsigned int _death_march_count;
};

/* 4997 */
struct __cppobj MutableNUMASpace::LGRPSpace::SpaceStats
{
  unsigned int _local_space;
  unsigned int _remote_space;
  unsigned int _unbiased_space;
  unsigned int _uncommited_space;
  unsigned int _large_pages;
  unsigned int _small_pages;
};

/* 4998 */
struct __cppobj MutableNUMASpace::LGRPSpace : CHeapObj<5>
{
  int _lgrp_id;
  MutableSpace *_space;
  MemRegion _invalid_region;
  AdaptiveWeightedAverage *_alloc_rate;
  bool _allocation_failed;
  MutableNUMASpace::LGRPSpace::SpaceStats _space_stats;
  char *_last_page_scanned;
};

/* 4999 */
struct __cppobj GrowableArray<MutableNUMASpace::LGRPSpace *> : GenericGrowableArray
{
  MutableNUMASpace::LGRPSpace **_data;
};

/* 5000 */
struct __cppobj MutableNUMASpace : MutableSpace
{
  GrowableArray<MutableNUMASpace::LGRPSpace *> *_lgrp_spaces;
  unsigned int _page_size;
  unsigned int _adaptation_cycles;
  unsigned int _samples_count;
  unsigned int _base_space_size;
};

/* 5001 */
struct /*VFT*/ MutableNUMASpace_vtbl
{
  unsigned int (__thiscall *capacity_in_words)(ImmutableSpace *this, Thread *);
  void (__thiscall *oop_iterate)(ImmutableSpace *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(ImmutableSpace *this, ObjectClosure *);
  void (__thiscall *print)(ImmutableSpace *this);
  void (__thiscall *print_short)(ImmutableSpace *this);
  void (__thiscall *verify)(ImmutableSpace *this);
  void (__thiscall *~MutableSpace)(MutableSpace *this);
  void (__thiscall *set_top)(MutableSpace *this, HeapWord *);
  void (__thiscall *set_bottom)(MutableSpace *this, HeapWord *);
  void (__thiscall *set_end)(MutableSpace *this, HeapWord *);
  void (__thiscall *initialize)(MutableSpace *this, MemRegion, bool, bool, bool);
  void (__thiscall *clear)(MutableSpace *this, bool);
  void (__thiscall *update)(MutableSpace *this);
  void (__thiscall *accumulate_statistics)(MutableSpace *this);
  void (__thiscall *mangle_unused_area)(MutableSpace *this);
  void (__thiscall *mangle_unused_area_complete)(MutableSpace *this);
  void (__thiscall *check_mangled_unused_area)(MutableSpace *this, HeapWord *);
  void (__thiscall *check_mangled_unused_area_complete)(MutableSpace *this);
  void (__thiscall *set_top_for_allocations)(MutableSpace *this);
  void (__thiscall *set_top_for_allocations)(MutableSpace *this, HeapWord *);
  void (__thiscall *ensure_parsability)(MutableSpace *this);
  void (__thiscall *mangle_region)(MutableSpace *this, MemRegion);
  unsigned int (__thiscall *used_in_words)(MutableSpace *this);
  unsigned int (__thiscall *free_in_words)(MutableSpace *this);
  unsigned int (__thiscall *tlab_capacity)(MutableSpace *this, Thread *);
  unsigned int (__thiscall *tlab_used)(MutableSpace *this, Thread *);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(MutableSpace *this, Thread *);
  HeapWord *(__thiscall *allocate)(MutableSpace *this, unsigned int);
  HeapWord *(__thiscall *cas_allocate)(MutableSpace *this, unsigned int);
  void (__thiscall *print_on)(MutableSpace *this, outputStream *);
  void (__thiscall *print_short_on)(MutableSpace *this, outputStream *);
};

/* 5002 */
struct /*VFT*/ PSVirtualSpaceHighToLow_vtbl
{
  bool (__thiscall *expand_by)(PSVirtualSpace *this, unsigned int);
  bool (__thiscall *shrink_by)(PSVirtualSpace *this, unsigned int);
  unsigned int (__thiscall *expand_into)(PSVirtualSpace *this, PSVirtualSpace *, unsigned int);
  void (__thiscall *print_space_boundaries_on)(PSVirtualSpace *this, outputStream *);
};

/* 5003 */
struct __cppobj PSVirtualSpaceHighToLow : PSVirtualSpace
{
};

/* 5004 */
struct __cppobj GCTask::Kind : AllStatic
{
};

/* 5005 */
struct /*VFT*/ ReleasingBarrierGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5006 */
struct __cppobj ReleasingBarrierGCTask : BarrierGCTask
{
};

/* 5007 */
struct /*VFT*/ NotifyingBarrierGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5008 */
struct __cppobj NotifyingBarrierGCTask : BarrierGCTask
{
  NotifyDoneClosure *_ndc;
};

/* 5009 */
struct /*VFT*/ IdleGCTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5010 */
struct __cppobj __declspec(align(4)) IdleGCTask : GCTask
{
  const bool _is_c_heap_obj;
};

/* 5011 */
struct __cppobj GrowableArray<Monitor *> : GenericGrowableArray
{
  Monitor **_data;
};

/* 5012 */
struct __cppobj MonitorSupply : AllStatic
{
};

/* 5013 */
struct /*VFT*/ PSRootsClosure<0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5014 */
struct __cppobj PSRootsClosure<0> : OopClosure
{
  PSPromotionManager *_promotion_manager;
};

/* 5015 */
struct /*VFT*/ PSRootsClosure<1>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5016 */
struct __cppobj PSRootsClosure<1> : OopClosure
{
  PSPromotionManager *_promotion_manager;
};

/* 5017 */
struct /*VFT*/ ScavengeRootsTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5018 */
struct __cppobj ScavengeRootsTask : GCTask
{
  ScavengeRootsTask::RootType _root_type;
};

/* 5019 */
struct __cppobj VMThread : NamedThread
{
};

/* 5020 */
struct /*VFT*/ ThreadRootsTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5021 */
struct __cppobj ThreadRootsTask : GCTask
{
  JavaThread *_java_thread;
  VMThread *_vm_thread;
};

/* 5022 */
struct /*VFT*/ StealTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5023 */
struct __cppobj StealTask : GCTask
{
  ParallelTaskTerminator *const _terminator;
};

/* 5024 */
struct /*VFT*/ OldToYoungRootsTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5025 */
struct __cppobj OldToYoungRootsTask : GCTask
{
  PSOldGen *_gen;
  HeapWord *_gen_top;
  unsigned int _stripe_number;
  unsigned int _stripe_total;
};

/* 5026 */
struct /*VFT*/ PSGCAdaptivePolicyCounters_vtbl
{
  void (__thiscall *update_counters)(GCPolicyCounters *this);
  GCPolicyCounters::Name (__thiscall *kind)(GCPolicyCounters *this);
  void (__thiscall *update_counters_from_policy)(GCAdaptivePolicyCounters *this);
  AdaptiveSizePolicy *(__thiscall *size_policy)(GCAdaptivePolicyCounters *this);
};

/* 5027 */
struct __cppobj PSGCAdaptivePolicyCounters : GCAdaptivePolicyCounters
{
  PerfLongVariable *_old_promo_size;
  PerfLongVariable *_old_eden_size;
  PerfLongVariable *_avg_promoted_avg_counter;
  PerfLongVariable *_avg_promoted_dev_counter;
  PerfLongVariable *_avg_promoted_padded_avg_counter;
  PerfLongVariable *_avg_pretenured_padded_avg;
  PerfLongVariable *_avg_major_pause;
  PerfLongVariable *_avg_major_interval;
  PerfLongVariable *_live_space;
  PerfLongVariable *_free_space;
  PerfLongVariable *_avg_base_footprint;
  PerfLongVariable *_gc_overhead_limit_exceeded_counter;
  PerfLongVariable *_live_at_last_full_gc_counter;
  PerfLongVariable *_old_capacity;
  PerfLongVariable *_boundary_moved;
  PerfLongVariable *_change_old_gen_for_min_pauses;
  PerfLongVariable *_change_young_gen_for_maj_pauses_counter;
  PerfLongVariable *_major_pause_old_slope;
  PerfLongVariable *_minor_pause_old_slope;
  PerfLongVariable *_major_pause_young_slope;
  PerfLongVariable *_scavenge_skipped;
  PerfLongVariable *_full_follows_scavenge;
  TimeStamp _counter_time_stamp;
};

/* 5028 */
struct /*VFT*/ PSKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5029 */
struct __cppobj PSKeepAliveClosure : OopClosure
{
  MutableSpace *_to_space;
  PSPromotionManager *_promotion_manager;
};

/* 5030 */
struct /*VFT*/ PSEvacuateFollowersClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5031 */
struct __cppobj PSEvacuateFollowersClosure : VoidClosure
{
  PSPromotionManager *_promotion_manager;
};

/* 5032 */
struct /*VFT*/ PSPromotionFailedClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5033 */
struct __cppobj PSPromotionFailedClosure : ObjectClosure
{
};

/* 5034 */
struct /*VFT*/ PSRefProcTaskProxy_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5035 */
struct __cppobj PSRefProcTaskProxy : GCTask
{
  AbstractRefProcTaskExecutor::ProcessTask *_rp_task;
  unsigned int _work_id;
};

/* 5036 */
struct /*VFT*/ PSRefEnqueueTaskProxy_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5037 */
struct __cppobj PSRefEnqueueTaskProxy : GCTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_enq_task;
  unsigned int _work_id;
};

/* 5038 */
struct /*VFT*/ PSRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 5039 */
struct __cppobj PSRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
};

/* 5040 */
struct __cppobj ThreadCritical : StackObj
{
};

/* 5041 */
struct __cppobj __declspec(align(4)) TraceCPUTime : StackObj
{
  bool _active;
  bool _print_cr;
  long double _starting_user_time;
  long double _starting_system_time;
  long double _starting_real_time;
  outputStream *_logfile;
  bool _error;
};

/* 5042 */
struct __cppobj ParallelScavengeHeap::ParStrongRootsScope : MarkingCodeBlobClosure::MarkScope
{
};

/* 5043 */
struct __cppobj PaddedArray<PSPromotionManager,5,64>
{
};

/* 5044 */
struct __cppobj ParallelOldGCInfo : _ValueObj
{
  void *_dense_prefix;
};

/* 5045 */
struct /*VFT*/ ParallelOldTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 5046 */
struct __cppobj __declspec(align(8)) ParallelOldTracer : OldGCTracer
{
  ParallelOldGCInfo _parallel_old_gc_info;
};

/* 5047 */
struct __cppobj ParMarkBitMap : CHeapObj<5>
{
  HeapWord *_region_start;
  unsigned int _region_size;
  BitMap _beg_bits;
  BitMap _end_bits;
  PSVirtualSpace *_virtual_space;
  unsigned int _reserved_byte_size;
};

/* 5048 */
struct __cppobj ParMarkBitMapClosure : StackObj
{
  ParMarkBitMapClosure_vtbl *__vftable /*VFT*/;
  ParMarkBitMap *const _bitmap;
  ParCompactionManager *const _compaction_manager;
  unsigned int _words_remaining;
  HeapWord *_source;
};

/* 5049 */
struct /*VFT*/ ParMarkBitMapClosure_vtbl
{
  ParMarkBitMap::IterationStatus (__thiscall *do_addr)(ParMarkBitMapClosure *this, HeapWord *, unsigned int);
};

/* 5050 */
struct __declspec(align(4)) ParallelCompactData::RegionData
{
  HeapWord *_destination;
  unsigned int _source_region;
  HeapWord *_partial_obj_addr;
  unsigned int _partial_obj_size;
  volatile unsigned int _dc_and_los;
  volatile bool _blocks_filled;
};

/* 5051 */
struct ParallelCompactData::BlockData
{
  unsigned __int16 _offset;
};

/* 5052 */
struct __cppobj ParallelCompactData
{
  HeapWord *_region_start;
  PSVirtualSpace *_region_vspace;
  unsigned int _reserved_byte_size;
  ParallelCompactData::RegionData *_region_data;
  unsigned int _region_count;
  PSVirtualSpace *_block_vspace;
  ParallelCompactData::BlockData *_block_data;
  unsigned int _block_count;
};

/* 5053 */
struct SplitInfo
{
  unsigned int _src_region_idx;
  unsigned int _partial_obj_size;
  HeapWord *_destination;
  unsigned int _destination_count;
  HeapWord *_dest_region_addr;
  HeapWord *_first_src_addr;
};

/* 5054 */
struct /*VFT*/ PSParallelCompact::IsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 5055 */
struct __cppobj PSParallelCompact::IsAliveClosure : BoolObjectClosure
{
};

/* 5056 */
struct SpaceInfo
{
  MutableSpace *_space;
  HeapWord *_new_top;
  HeapWord *_min_dense_prefix;
  HeapWord *_dense_prefix;
  ObjectStartArray *_start_array;
  SplitInfo _split_info;
};

/* 5057 */
struct __cppobj PSParallelCompact::AdjustPointerClosure : OopClosure
{
};

/* 5058 */
struct /*VFT*/ PSParallelCompact::AdjustPointerClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  void (__thiscall *do_code_blob)(PSParallelCompact::AdjustPointerClosure *this, CodeBlob *);
};

/* 5059 */
struct /*VFT*/ PSParallelCompact::AdjustKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5060 */
struct __cppobj PSParallelCompact::AdjustKlassClosure : KlassClosure
{
};

/* 5061 */
struct /*VFT*/ GenericTaskQueueSet<OverflowTaskQueue<unsigned int,7,16384>,1>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 5062 */
struct __cppobj GenericTaskQueueSet<OverflowTaskQueue<unsigned int,7,16384>,1> : TaskQueueSetSuperImpl<1>
{
  unsigned int _n;
  OverflowTaskQueue<unsigned int,7,16384> **_queues;
};

/* 5063 */
struct /*VFT*/ ThreadRootsMarkingTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5064 */
struct __cppobj ThreadRootsMarkingTask : GCTask
{
  JavaThread *_java_thread;
  VMThread *_vm_thread;
};

/* 5065 */
struct /*VFT*/ MarkFromRootsTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5066 */
struct __cppobj MarkFromRootsTask : GCTask
{
  MarkFromRootsTask::RootType _root_type;
};

/* 5067 */
struct /*VFT*/ RefProcTaskProxy_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5068 */
struct __cppobj RefProcTaskProxy : GCTask
{
  AbstractRefProcTaskExecutor::ProcessTask *_rp_task;
  unsigned int _work_id;
};

/* 5069 */
struct /*VFT*/ RefEnqueueTaskProxy_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5070 */
struct __cppobj RefEnqueueTaskProxy : GCTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_enq_task;
  unsigned int _work_id;
};

/* 5071 */
struct /*VFT*/ StealMarkingTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5072 */
struct __cppobj StealMarkingTask : GCTask
{
  ParallelTaskTerminator *const _terminator;
};

/* 5073 */
struct /*VFT*/ StealRegionCompactionTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5074 */
struct __cppobj StealRegionCompactionTask : GCTask
{
  ParallelTaskTerminator *const _terminator;
};

/* 5075 */
struct /*VFT*/ UpdateDensePrefixTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5076 */
struct __cppobj UpdateDensePrefixTask : GCTask
{
  PSParallelCompact::SpaceId _space_id;
  unsigned int _region_index_start;
  unsigned int _region_index_end;
};

/* 5077 */
struct /*VFT*/ DrainStacksCompactionTask_vtbl
{
  char *(__thiscall *name)(GCTask *this);
  void (__thiscall *do_it)(GCTask *this, GCTaskManager *, unsigned int);
  void (__thiscall *destruct)(GCTask *this);
};

/* 5078 */
struct __cppobj DrainStacksCompactionTask : GCTask
{
  unsigned int _stack_index;
};

/* 5079 */
struct __cppobj PreGCValues
{
  unsigned int _heap_used;
  unsigned int _young_gen_used;
  unsigned int _old_gen_used;
  unsigned int _metadata_used;
};

/* 5080 */
struct /*VFT*/ RefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 5081 */
struct __cppobj RefProcTaskExecutor : AbstractRefProcTaskExecutor
{
};

/* 5082 */
struct /*VFT*/ PSParallelCompact::FollowStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5083 */
struct __cppobj PSParallelCompact::FollowStackClosure : VoidClosure
{
  ParCompactionManager *_compaction_manager;
};

/* 5084 */
struct /*VFT*/ PSParallelCompact::MarkAndPushClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5085 */
struct __cppobj PSParallelCompact::MarkAndPushClosure : OopClosure
{
  ParCompactionManager *_compaction_manager;
};

/* 5086 */
struct /*VFT*/ PSParallelCompact::FollowKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5087 */
struct __cppobj PSParallelCompact::FollowKlassClosure : KlassClosure
{
  PSParallelCompact::MarkAndPushClosure *_mark_and_push_closure;
};

/* 5088 */
struct __cppobj PSParallelCompact : AllStatic
{
};

/* 5089 */
struct /*VFT*/ MoveAndUpdateClosure_vtbl
{
  ParMarkBitMap::IterationStatus (__thiscall *do_addr)(ParMarkBitMapClosure *this, HeapWord *, unsigned int);
};

/* 5090 */
struct __cppobj MoveAndUpdateClosure : ParMarkBitMapClosure
{
  ObjectStartArray *const _start_array;
  HeapWord *_destination;
};

/* 5091 */
struct /*VFT*/ FillClosure_vtbl
{
  ParMarkBitMap::IterationStatus (__thiscall *do_addr)(ParMarkBitMapClosure *this, HeapWord *, unsigned int);
};

/* 5092 */
struct __cppobj FillClosure : ParMarkBitMapClosure
{
  ObjectStartArray *const _start_array;
};

/* 5093 */
struct /*VFT*/ UpdateOnlyClosure_vtbl
{
  ParMarkBitMap::IterationStatus (__thiscall *do_addr)(ParMarkBitMapClosure *this, HeapWord *, unsigned int);
};

/* 5094 */
struct __cppobj UpdateOnlyClosure : ParMarkBitMapClosure
{
  const PSParallelCompact::SpaceId _space_id;
  ObjectStartArray *const _start_array;
};

/* 5095 */
struct __cppobj ClearedAllSoftRefs : StackObj
{
  bool _clear_all_soft_refs;
  CollectorPolicy *_collector_policy;
};

/* 5096 */
struct /*VFT*/ VerifyObjectStartArrayClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5097 */
struct __cppobj VerifyObjectStartArrayClosure : ObjectClosure
{
  PSOldGen *_gen;
  ObjectStartArray *_start_array;
};

/* 5098 */
struct __cppobj LiveRange : MemRegion
{
};

/* 5099 */
struct __cppobj PreservedMark : _ValueObj
{
  oopDesc *_obj;
  markOopDesc *_mark;
};

/* 5100 */
struct /*VFT*/ SerialOldTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 5101 */
struct __cppobj SerialOldTracer : OldGCTracer
{
};

/* 5102 */
struct /*VFT*/ MarkSweep::IsAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 5103 */
struct __cppobj MarkSweep::IsAliveClosure : BoolObjectClosure
{
};

/* 5104 */
struct /*VFT*/ MarkSweep::MarkAndPushClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5105 */
struct __cppobj MarkSweep::MarkAndPushClosure : OopClosure
{
};

/* 5106 */
struct /*VFT*/ MarkSweep::FollowStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5107 */
struct __cppobj MarkSweep::FollowStackClosure : VoidClosure
{
};

/* 5108 */
struct /*VFT*/ MarkSweep::AdjustPointerClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5109 */
struct __cppobj MarkSweep::AdjustPointerClosure : OopsInGenClosure
{
};

/* 5110 */
struct /*VFT*/ GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask,5,4096>,5>_vtbl
{
  bool (__thiscall *peek)(TaskQueueSetSuper *this);
  unsigned int (__thiscall *tasks)(TaskQueueSetSuper *this);
};

/* 5111 */
struct __cppobj GenericTaskQueueSet<OverflowTaskQueue<ObjArrayTask,5,4096>,5> : TaskQueueSetSuperImpl<5>
{
  unsigned int _n;
  OverflowTaskQueue<ObjArrayTask,5,4096> **_queues;
};

/* 5112 */
struct __cppobj ASPSOldGen : PSOldGen
{
  unsigned int _gen_size_limit;
};

/* 5113 */
struct /*VFT*/ ASPSOldGen_vtbl
{
  void (__thiscall *initialize)(PSOldGen *this, ReservedSpace, unsigned int, const char *, int);
  void (__thiscall *initialize_work)(PSOldGen *this, const char *, int);
  void (__thiscall *initialize_performance_counters)(PSOldGen *this, const char *, int);
  unsigned int (__thiscall *max_gen_size)(PSOldGen *this);
  unsigned int (__thiscall *gen_size_limit)(PSOldGen *this);
  void (__thiscall *precompact)(PSOldGen *this);
  void (__thiscall *print)(PSOldGen *this);
  void (__thiscall *print_on)(PSOldGen *this, outputStream *);
  void (__thiscall *reset_after_change)(PSOldGen *this);
  unsigned int (__thiscall *available_for_expansion)(PSOldGen *this);
  unsigned int (__thiscall *available_for_contraction)(PSOldGen *this);
  const char *(__thiscall *name)(PSOldGen *this);
  const char *(__thiscall *short_name)(ASPSOldGen *this);
};

/* 5114 */
struct __cppobj ASPSYoungGen : PSYoungGen
{
  unsigned int _gen_size_limit;
};

/* 5115 */
struct /*VFT*/ ASPSYoungGen_vtbl
{
  bool (__thiscall *resize_generation)(PSYoungGen *this, unsigned int, unsigned int);
  void (__thiscall *resize_spaces)(PSYoungGen *this, unsigned int, unsigned int);
  unsigned int (__thiscall *available_for_expansion)(PSYoungGen *this);
  unsigned int (__thiscall *available_for_contraction)(PSYoungGen *this);
  unsigned int (__thiscall *limit_gen_shrink)(PSYoungGen *this, unsigned int);
  unsigned int (__thiscall *available_to_live)(PSYoungGen *this);
  void (__thiscall *initialize)(PSYoungGen *this, ReservedSpace, unsigned int);
  void (__thiscall *initialize_virtual_space)(PSYoungGen *this, ReservedSpace, unsigned int);
  void (__thiscall *reset_after_change)(PSYoungGen *this);
  void (__thiscall *reset_survivors_after_shrink)(PSYoungGen *this);
  const char *(__thiscall *name)(PSYoungGen *this);
  const char *(__thiscall *short_name)(ASPSYoungGen *this);
};

/* 5116 */
struct /*VFT*/ CheckForUnmarkedOops_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5117 */
struct __cppobj CheckForUnmarkedOops : OopClosure
{
  PSYoungGen *_young_gen;
  CardTableExtension *_card_table;
  HeapWord *_unmarked_addr;
  char *_unmarked_card;
};

/* 5118 */
struct /*VFT*/ CheckForUnmarkedObjects_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5119 */
struct __cppobj CheckForUnmarkedObjects : ObjectClosure
{
  PSYoungGen *_young_gen;
  CardTableExtension *_card_table;
};

/* 5120 */
struct /*VFT*/ CheckForPreciseMarks_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5121 */
struct __cppobj CheckForPreciseMarks : OopClosure
{
  PSYoungGen *_young_gen;
  CardTableExtension *_card_table;
};

/* 5122 */
struct __cppobj G1Log : AllStatic
{
};

/* 5123 */
struct __cppobj __declspec(align(4)) VM_G1OperationWithAllocRequest : VM_CollectForAllocation
{
  bool _pause_succeeded;
  unsigned __int8 _allocation_context;
};

/* 5124 */
struct /*VFT*/ VM_G1OperationWithAllocRequest_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 5125 */
struct __cppobj VM_G1CollectFull : VM_GC_Operation
{
};

/* 5126 */
struct /*VFT*/ VM_G1CollectFull_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
  const char *(__thiscall *name)(VM_G1CollectFull *this);
};

/* 5127 */
struct __cppobj VM_G1CollectForAllocation : VM_G1OperationWithAllocRequest
{
};

/* 5128 */
struct /*VFT*/ VM_G1CollectForAllocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
  const char *(__thiscall *name)(VM_G1CollectForAllocation *this);
};

/* 5129 */
struct __cppobj __declspec(align(8)) VM_G1IncCollectionPause : VM_G1OperationWithAllocRequest
{
  bool _should_initiate_conc_mark;
  bool _should_retry_gc;
  long double _target_pause_time_ms;
  unsigned int _old_marking_cycles_completed_before;
};

/* 5130 */
struct /*VFT*/ VM_G1IncCollectionPause_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
  const char *(__thiscall *name)(VM_G1IncCollectionPause *this);
};

/* 5131 */
struct __cppobj __declspec(align(4)) VM_CGC_Operation : VM_Operation
{
  VoidClosure *_cl;
  const char *_printGCMessage;
  bool _needs_pll;
};

/* 5132 */
struct /*VFT*/ VM_CGC_Operation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  const char *(__thiscall *name)(VM_CGC_Operation *this);
};

/* 5133 */
struct __cppobj ThreadToNativeFromVM : ThreadStateTransition
{
};

/* 5134 */
struct __cppobj RSHashTableIter : _ValueObj
{
  int _tbl_ind;
  int _bl_ind;
  __int16 _card_ind;
  RSHashTable *_rsht;
};

/* 5135 */
struct __cppobj SparsePRTCleanupTask : _ValueObj
{
  SparsePRT *_head;
  SparsePRT *_tail;
};

/* 5136 */
struct __cppobj SparsePRTIter : RSHashTableIter
{
};

/* 5137 */
struct __cppobj FromCardCache : AllStatic
{
};

/* 5138 */
struct __cppobj HRRSCleanupTask : SparsePRTCleanupTask
{
};

/* 5139 */
struct __cppobj HeapRegionRemSetIterator : StackObj
{
  HeapRegionRemSet *_hrrs;
  const BitMap *_coarse_map;
  G1BlockOffsetSharedArray *_bosa;
  G1CollectedHeap *_g1h;
  unsigned int _n_yielded_fine;
  unsigned int _n_yielded_coarse;
  unsigned int _n_yielded_sparse;
  HeapRegionRemSetIterator::IterState _is;
  unsigned int _cur_region_card_offset;
  int _coarse_cur_region_index;
  unsigned int _coarse_cur_region_cur_card;
  PerRegionTable *_fine_cur_prt;
  unsigned int _cur_card_in_prt;
  SparsePRTIter _sparse_iter;
};

/* 5140 */
struct __cppobj HeapRegionTracer : AllStatic
{
};

/* 5141 */
struct /*VFT*/ SecondaryFreeRegionListMtSafeChecker_vtbl
{
  void (__thiscall *check)(HRSMtSafeChecker *this);
};

/* 5142 */
struct __cppobj SecondaryFreeRegionListMtSafeChecker : HRSMtSafeChecker
{
};

/* 5143 */
struct /*VFT*/ MasterFreeRegionListMtSafeChecker_vtbl
{
  void (__thiscall *check)(HRSMtSafeChecker *this);
};

/* 5144 */
struct __cppobj MasterFreeRegionListMtSafeChecker : HRSMtSafeChecker
{
};

/* 5145 */
struct /*VFT*/ OldRegionSetMtSafeChecker_vtbl
{
  void (__thiscall *check)(HRSMtSafeChecker *this);
};

/* 5146 */
struct __cppobj OldRegionSetMtSafeChecker : HRSMtSafeChecker
{
};

/* 5147 */
struct /*VFT*/ HumongousRegionSetMtSafeChecker_vtbl
{
  void (__thiscall *check)(HRSMtSafeChecker *this);
};

/* 5148 */
struct __cppobj HumongousRegionSetMtSafeChecker : HRSMtSafeChecker
{
};

/* 5149 */
struct __cppobj Padded2DArray<int,5,64>
{
};

/* 5150 */
struct __cppobj FormatBuffer<128> : FormatBufferBase
{
  char _buffer[128];
};

/* 5151 */
struct __cppobj MemoryUsage : _ValueObj
{
  unsigned int _initSize;
  unsigned int _used;
  unsigned int _committed;
  unsigned int _maxSize;
};

/* 5152 */
struct __cppobj __declspec(align(4)) HeapRegionClosure : StackObj
{
  HeapRegionClosure_vtbl *__vftable /*VFT*/;
  bool _complete;
};

/* 5153 */
struct /*VFT*/ HeapRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5154 */
struct /*VFT*/ CountNonCleanMemRegionClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 5155 */
struct __cppobj CountNonCleanMemRegionClosure : MemRegionClosure
{
  G1CollectedHeap *_g1;
  int _n;
  HeapWord *_start_first;
};

/* 5156 */
struct /*VFT*/ UpdateRSOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5157 */
struct __cppobj UpdateRSOopClosure : ExtendedOopClosure
{
  HeapRegion *_from;
  G1RemSet *_rs;
  unsigned int _worker_i;
};

/* 5158 */
struct __cppobj HeapRegionBounds : AllStatic
{
};

/* 5159 */
struct /*VFT*/ VerifyStrongCodeRootOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5160 */
struct __cppobj __declspec(align(4)) VerifyStrongCodeRootOopClosure : OopClosure
{
  const HeapRegion *_hr;
  nmethod *_nm;
  bool _failures;
  bool _has_oops_in_region;
};

/* 5161 */
struct /*VFT*/ VerifyStrongCodeRootCodeBlobClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 5162 */
struct __cppobj __declspec(align(4)) VerifyStrongCodeRootCodeBlobClosure : CodeBlobClosure
{
  const HeapRegion *_hr;
  bool _failures;
};

/* 5163 */
struct /*VFT*/ G1VerificationClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5164 */
struct __cppobj G1VerificationClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  CardTableModRefBS *_bs;
  oopDesc *_containing_obj;
  bool _failures;
  int _n_failures;
  VerifyOption _vo;
};

/* 5165 */
struct /*VFT*/ VerifyLiveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5166 */
struct __cppobj VerifyLiveClosure : G1VerificationClosure
{
};

/* 5167 */
struct /*VFT*/ VerifyRemSetClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5168 */
struct __cppobj VerifyRemSetClosure : G1VerificationClosure
{
};

/* 5169 */
struct /*VFT*/ HeapRegionDCTOC_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
  HeapWord *(__thiscall *get_actual_top)(DirtyCardToOopClosure *this, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region)(DirtyCardToOopClosure *this, MemRegion, HeapWord *, HeapWord *);
};

/* 5170 */
struct __cppobj HeapRegionDCTOC : DirtyCardToOopClosure
{
  HeapRegion *_hr;
  G1ParPushHeapRSClosure *_rs_scan;
  G1CollectedHeap *_g1;
};

/* 5171 */
struct __cppobj G1StringDedupThread : ConcurrentGCThread
{
};

/* 5172 */
struct __cppobj G1StringDedupStat : StackObj
{
  unsigned int _inspected;
  unsigned int _skipped;
  unsigned int _hashed;
  unsigned int _known;
  unsigned int _new;
  unsigned int _new_bytes;
  unsigned int _deduped;
  unsigned int _deduped_bytes;
  unsigned int _deduped_young;
  unsigned int _deduped_young_bytes;
  unsigned int _deduped_old;
  unsigned int _deduped_old_bytes;
  unsigned int _idle;
  unsigned int _exec;
  unsigned int _block;
  long double _start;
  long double _idle_elapsed;
  long double _exec_elapsed;
  long double _block_elapsed;
};

/* 5173 */
struct __cppobj G1StringDedupEntry : CHeapObj<5>
{
  G1StringDedupEntry *_next;
  unsigned int _hash;
  typeArrayOopDesc *_obj;
};

/* 5174 */
struct __cppobj G1StringDedupTable : CHeapObj<5>
{
  G1StringDedupEntry **_buckets;
  unsigned int _size;
  unsigned int _entries;
  unsigned int _shrink_threshold;
  unsigned int _grow_threshold;
  bool _rehash_needed;
  int _hash_seed;
};

/* 5175 */
struct __cppobj G1StringDedupEntryList : CHeapObj<5>
{
  G1StringDedupEntry *_list;
  unsigned int _length;
};

/* 5176 */
struct __cppobj PaddedEndImpl<G1StringDedupEntryList,56> : G1StringDedupEntryList
{
  char _pad_buf[56];
};

/* 5177 */
struct __cppobj PaddedEnd<G1StringDedupEntryList,64> : PaddedEndImpl<G1StringDedupEntryList,56>
{
};

/* 5178 */
struct __cppobj G1StringDedupEntryCache : CHeapObj<5>
{
  unsigned int _nlists;
  unsigned int _max_list_length;
  PaddedEnd<G1StringDedupEntryList,64> *_cached;
  PaddedEnd<G1StringDedupEntryList,64> *_overflowed;
};

/* 5179 */
struct __cppobj G1StringDedupUnlinkOrOopsDoClosure : StackObj
{
  BoolObjectClosure *_is_alive;
  OopClosure *_keep_alive;
  G1StringDedupTable *_resized_table;
  G1StringDedupTable *_rehashed_table;
  unsigned int _next_queue;
  unsigned int _next_bucket;
};

/* 5180 */
struct __cppobj G1StringDedupQueue : CHeapObj<5>
{
  Stack<oopDesc *,5> *_queues;
  unsigned int _nqueues;
  unsigned int _cursor;
  bool _cancel;
  volatile bool _empty;
  unsigned int _dropped;
};

/* 5181 */
struct __cppobj PaddedArray<G1StringDedupEntryList,5,64>
{
};

/* 5182 */
struct __cppobj StackIterator<oopDesc *,5> : StackObj
{
  Stack<oopDesc *,5> *_stack;
  unsigned int _cur_seg_size;
  oopDesc **_cur_seg;
  unsigned int _full_seg_size;
};

/* 5183 */
struct /*VFT*/ G1StringDedupUnlinkOrOopsDoTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5184 */
struct __cppobj G1StringDedupUnlinkOrOopsDoTask : AbstractGangTask
{
  G1StringDedupUnlinkOrOopsDoClosure _cl;
  G1GCPhaseTimes *_phase_times;
};

/* 5185 */
struct __cppobj __declspec(align(8)) G1GCParPhaseTimesTracker : StackObj
{
  TimeInstant<CounterRepresentation,ElapsedCounterSource> _start_time;
  G1GCPhaseTimes::GCParPhases _phase;
  G1GCPhaseTimes *_phase_times;
  unsigned int _worker_id;
};

/* 5186 */
struct __cppobj G1StringDedup : AllStatic
{
};

/* 5189 */
struct __cppobj G1SATBCardTableLoggingModRefBSChangedListener : G1MappingChangedListener
{
  G1SATBCardTableLoggingModRefBS *_card_table;
};

/* 5187 */
struct __cppobj G1SATBCardTableLoggingModRefBS : G1SATBCardTableModRefBS
{
  G1SATBCardTableLoggingModRefBSChangedListener _listener;
  DirtyCardQueueSet *_dcqs;
};

/* 5188 */
struct /*VFT*/ G1SATBCardTableLoggingModRefBSChangedListener_vtbl
{
  void (__thiscall *on_commit)(G1MappingChangedListener *this, unsigned int, unsigned int, bool);
};

/* 5190 */
struct /*VFT*/ G1SATBCardTableLoggingModRefBS_vtbl
{
  bool (__thiscall *is_a)(BarrierSet *this, BarrierSet::Name);
  bool (__thiscall *has_read_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_read_prim_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_ref_pre_barrier)(BarrierSet *this);
  bool (__thiscall *has_write_prim_barrier)(BarrierSet *this);
  bool (__thiscall *read_ref_needs_barrier)(BarrierSet *this, void *);
  bool (__thiscall *read_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int);
  bool (__thiscall *write_prim_needs_barrier)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  void (__thiscall *read_ref_field)(BarrierSet *this, void *);
  void (__thiscall *read_prim_field)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, unsigned int *, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, oopDesc **, oopDesc *);
  void (__thiscall *write_ref_field_pre_work)(BarrierSet *this, void *, oopDesc *);
  void (__thiscall *write_ref_field_work)(BarrierSet *this, void *, oopDesc *, bool);
  void (__thiscall *write_prim_field)(BarrierSet *this, HeapWord *, unsigned int, unsigned int, unsigned int);
  bool (__thiscall *has_read_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_pre_opt)(BarrierSet *this);
  bool (__thiscall *has_write_ref_array_opt)(BarrierSet *this);
  bool (__thiscall *has_write_prim_array_opt)(BarrierSet *this);
  bool (__thiscall *has_read_region_opt)(BarrierSet *this);
  bool (__thiscall *has_write_region_opt)(BarrierSet *this);
  void (__thiscall *read_ref_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, unsigned int *, int, bool);
  void (__thiscall *write_ref_array_pre)(BarrierSet *this, oopDesc **, int, bool);
  void (__thiscall *write_ref_array)(BarrierSet *this, HeapWord *, unsigned int);
  void (__thiscall *write_ref_array_work)(BarrierSet *this, MemRegion);
  void (__thiscall *write_prim_array)(BarrierSet *this, MemRegion);
  void (__thiscall *read_region)(BarrierSet *this, MemRegion);
  void (__thiscall *write_region_work)(BarrierSet *this, MemRegion);
  void (__thiscall *resize_covered_region)(BarrierSet *this, MemRegion);
  bool (__thiscall *is_aligned)(BarrierSet *this, HeapWord *);
  void (__thiscall *print_on)(BarrierSet *this, outputStream *);
  void (__thiscall *invalidate)(ModRefBarrierSet *this, MemRegion, bool);
  void (__thiscall *clear)(ModRefBarrierSet *this, MemRegion);
  bool (__thiscall *card_will_be_scanned)(CardTableModRefBS *this, char);
  bool (__thiscall *card_may_have_been_dirty)(CardTableModRefBS *this, char);
  void (__thiscall *initialize)(CardTableModRefBS *this);
  void (__thiscall *initialize)(G1SATBCardTableLoggingModRefBS *this, G1RegionToSpaceMapper *);
};

/* 5191 */
struct /*VFT*/ BufferingOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5192 */
struct __cppobj BufferingOopClosure : OopClosure
{
  void *_buffer[1024];
  void **_oop_top;
  void **_narrowOop_bottom;
  OopClosure *_oc;
  long double _closure_app_seconds;
};

/* 5193 */
struct /*VFT*/ G1CodeBlobClosure::HeapRegionGatheringOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5194 */
struct __cppobj G1CodeBlobClosure::HeapRegionGatheringOopClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  OopClosure *_work;
  nmethod *_nm;
};

/* 5195 */
struct /*VFT*/ G1CodeBlobClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 5196 */
struct __cppobj G1CodeBlobClosure : CodeBlobClosure
{
  G1CodeBlobClosure::HeapRegionGatheringOopClosure _oc;
};

/* 5197 */
struct __cppobj G1RootProcessor : StackObj
{
  G1CollectedHeap *_g1h;
  SubTasksDone _process_strong_tasks;
  SharedHeap::StrongRootsScope _srs;
  Monitor _lock;
  volatile int _n_workers_discovered_strong_classes;
};

/* 5198 */
struct /*VFT*/ GetRSThreadVTimeClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 5199 */
struct __cppobj GetRSThreadVTimeClosure : ThreadClosure
{
  G1RemSetSummary *_summary;
  unsigned int _counter;
};

/* 5200 */
struct __cppobj RegionTypeCounter : _ValueObj
{
  const char *_name;
  unsigned int _rs_mem_size;
  unsigned int _cards_occupied;
  unsigned int _amount;
  unsigned int _code_root_mem_size;
  unsigned int _code_root_elems;
};

/* 5201 */
struct /*VFT*/ HRRSStatsIter_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5202 */
struct __cppobj HRRSStatsIter : HeapRegionClosure
{
  RegionTypeCounter _young;
  RegionTypeCounter _humonguous;
  RegionTypeCounter _free;
  RegionTypeCounter _old;
  RegionTypeCounter _all;
  unsigned int _max_rs_mem_sz;
  HeapRegion *_max_rs_mem_sz_region;
  unsigned int _max_code_root_mem_sz;
  HeapRegion *_max_code_root_mem_sz_region;
};

/* 5203 */
struct __cppobj IntHistogram : CHeapObj<7>
{
  int _max;
  int _tot;
  GrowableArray<int> *_elements;
};

/* 5204 */
struct /*VFT*/ ScanRSClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5205 */
struct __cppobj __declspec(align(8)) ScanRSClosure : HeapRegionClosure
{
  unsigned int _cards_done;
  unsigned int _cards;
  G1CollectedHeap *_g1h;
  G1ParPushHeapRSClosure *_oc;
  CodeBlobClosure *_code_root_cl;
  G1BlockOffsetSharedArray *_bot_shared;
  G1SATBCardTableModRefBS *_ct_bs;
  long double _strong_code_root_scan_time_sec;
  unsigned int _worker_i;
  int _block_size;
  bool _try_claimed;
};

/* 5206 */
struct /*VFT*/ RefineRecordRefsIntoCSCardTableEntryClosure_vtbl
{
  bool (__thiscall *do_card_ptr)(CardTableEntryClosure *this, char *, unsigned int);
};

/* 5207 */
struct __cppobj RefineRecordRefsIntoCSCardTableEntryClosure : CardTableEntryClosure
{
  G1RemSet *_g1rs;
  DirtyCardQueue *_into_cset_dcq;
};

/* 5208 */
struct /*VFT*/ ScrubRSClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5209 */
struct __cppobj ScrubRSClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  BitMap *_region_bm;
  BitMap *_card_bm;
  CardTableModRefBS *_ctbs;
};

/* 5210 */
struct __cppobj G1RegionsLargerThanCommitSizeMapper : G1RegionToSpaceMapper
{
  unsigned int _pages_per_region;
};

/* 5211 */
struct /*VFT*/ G1RegionsLargerThanCommitSizeMapper_vtbl
{
  void (__thiscall *~G1RegionToSpaceMapper)(G1RegionToSpaceMapper *this);
  void (__thiscall *commit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
  void (__thiscall *uncommit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
};

/* 5212 */
struct __cppobj G1BiasedMappedArray<unsigned int> : G1BiasedMappedArrayBase
{
  G1BiasedMappedArray<unsigned int>_vtbl *__vftable /*VFT*/;
};

/* 5213 */
struct /*VFT*/ G1BiasedMappedArray<unsigned int>_vtbl
{
  unsigned int (__thiscall *default_value)(G1BiasedMappedArray<unsigned int> *this);
};

/* 5214 */
struct /*VFT*/ G1RegionsSmallerThanCommitSizeMapper::CommitRefcountArray_vtbl
{
  unsigned int (__thiscall *default_value)(G1BiasedMappedArray<unsigned int> *this);
};

/* 5215 */
struct __cppobj G1RegionsSmallerThanCommitSizeMapper::CommitRefcountArray : G1BiasedMappedArray<unsigned int>
{
};

/* 5216 */
struct __cppobj G1RegionsSmallerThanCommitSizeMapper : G1RegionToSpaceMapper
{
  unsigned int _regions_per_page;
  G1RegionsSmallerThanCommitSizeMapper::CommitRefcountArray _refcounts;
};

/* 5217 */
struct /*VFT*/ G1RegionsSmallerThanCommitSizeMapper_vtbl
{
  void (__thiscall *~G1RegionToSpaceMapper)(G1RegionToSpaceMapper *this);
  void (__thiscall *commit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
  void (__thiscall *uncommit_regions)(G1RegionToSpaceMapper *this, unsigned int, unsigned int);
};

/* 5218 */
struct /*VFT*/ G1ParCopyHelper_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5219 */
struct __cppobj G1ParCopyHelper : G1ParClosureSuper
{
  Klass *_scanned_klass;
  ConcurrentMark *_cm;
};

/* 5220 */
struct /*VFT*/ G1GenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 5221 */
struct __cppobj G1GenerationCounters : GenerationCounters
{
  G1MonitoringSupport *_g1mm;
};

/* 5222 */
struct /*VFT*/ G1YoungGenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 5223 */
struct __cppobj G1YoungGenerationCounters : G1GenerationCounters
{
};

/* 5224 */
struct /*VFT*/ G1OldGenerationCounters_vtbl
{
  void (__thiscall *update_all)(GenerationCounters *this);
};

/* 5225 */
struct __cppobj G1OldGenerationCounters : G1GenerationCounters
{
};

/* 5226 */
struct __cppobj G1MMUTrackerQueueElem : _ValueObj
{
  long double _start_time;
  long double _end_time;
};

/* 5227 */
struct /*VFT*/ G1MMUTrackerQueue_vtbl
{
  void (__thiscall *add_pause)(G1MMUTracker *this, long double, long double, bool);
  long double (__thiscall *longest_pause)(G1MMUTracker *this, long double);
  long double (__thiscall *when_sec)(G1MMUTracker *this, long double, long double);
};

/* 5228 */
struct __cppobj __declspec(align(8)) G1MMUTrackerQueue : G1MMUTracker
{
  G1MMUTrackerQueueElem _array[64];
  int _head_index;
  int _tail_index;
  int _no_entries;
};

/* 5229 */
struct __cppobj G1MarkSweep : AllStatic
{
};

/* 5230 */
struct __cppobj G1PrepareCompactClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ModRefBarrierSet *_mrbs;
  CompactPoint _cp;
  HeapRegionSetCount _humongous_regions_removed;
};

/* 5231 */
struct /*VFT*/ G1PrepareCompactClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
  void (__thiscall *prepare_for_compaction)(G1PrepareCompactClosure *this, HeapRegion *, HeapWord *);
};

/* 5232 */
struct /*VFT*/ MarkSweep::KeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5233 */
struct __cppobj MarkSweep::KeepAliveClosure : OopClosure
{
};

/* 5234 */
struct /*VFT*/ MarkSweep::FollowRootClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5235 */
struct __cppobj MarkSweep::FollowRootClosure : OopsInGenClosure
{
};

/* 5236 */
struct __cppobj GenMarkSweep : MarkSweep
{
};

/* 5237 */
struct /*VFT*/ G1AdjustPointersClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5238 */
struct __cppobj G1AdjustPointersClosure : HeapRegionClosure
{
};

/* 5239 */
struct /*VFT*/ G1SpaceCompactClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5240 */
struct __cppobj G1SpaceCompactClosure : HeapRegionClosure
{
};

/* 5241 */
struct /*VFT*/ DumpEventInfoClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5242 */
struct __cppobj DumpEventInfoClosure : HeapRegionClosure
{
};

/* 5243 */
struct __cppobj G1HeapRegionEventSender : AllStatic
{
};

/* 5244 */
struct __cppobj LineBuffer : StackObj
{
  char _buffer[1024];
  int _indent_level;
  int _cur;
};

/* 5245 */
struct __cppobj G1GCParPhasePrinter : StackObj
{
  G1GCPhaseTimes *_phase_times;
};

/* 5246 */
struct __cppobj G1ErgoVerbose : AllStatic
{
};

/* 5247 */
struct /*VFT*/ KnownGarbageClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5248 */
struct __cppobj KnownGarbageClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  CollectionSetChooser *_hrSorted;
};

/* 5249 */
struct __cppobj CSetChooserParUpdater : StackObj
{
  CollectionSetChooser *_chooser;
  bool _parallel;
  unsigned int _chunk_size;
  unsigned int _cur_chunk_idx;
  unsigned int _cur_chunk_end;
  unsigned int _regions_added;
  unsigned int _reclaimable_bytes_added;
};

/* 5250 */
struct /*VFT*/ ParKnownGarbageHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5251 */
struct __cppobj ParKnownGarbageHRClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  CSetChooserParUpdater _cset_updater;
};

/* 5252 */
struct /*VFT*/ ParKnownGarbageTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5253 */
struct __cppobj ParKnownGarbageTask : AbstractGangTask
{
  CollectionSetChooser *_hrSorted;
  unsigned int _chunk_size;
  G1CollectedHeap *_g1;
};

/* 5254 */
struct /*VFT*/ UpdateRSetDeferred_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5255 */
struct __cppobj UpdateRSetDeferred : OopsInHeapRegionClosure
{
  G1CollectedHeap *_g1;
  DirtyCardQueue *_dcq;
  G1SATBCardTableModRefBS *_ct_bs;
};

/* 5256 */
struct /*VFT*/ RemoveSelfForwardPtrObjClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5257 */
struct __cppobj RemoveSelfForwardPtrObjClosure : ObjectClosure
{
  G1CollectedHeap *_g1;
  ConcurrentMark *_cm;
  HeapRegion *_hr;
  unsigned int _marked_bytes;
  OopsInHeapRegionClosure *_update_rset_cl;
  bool _during_initial_mark;
  bool _during_conc_mark;
  unsigned int _worker_id;
  HeapWord *_end_of_last_gap;
  HeapWord *_last_gap_threshold;
  HeapWord *_last_obj_threshold;
};

/* 5258 */
struct /*VFT*/ RemoveSelfForwardPtrHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5259 */
struct __cppobj RemoveSelfForwardPtrHRClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  unsigned int _worker_id;
  DirtyCardQueue _dcq;
  UpdateRSetDeferred _update_rset_cl;
};

/* 5260 */
struct /*VFT*/ G1ParRemoveSelfForwardPtrsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5261 */
struct __cppobj G1ParRemoveSelfForwardPtrsTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
};

/* 5262 */
struct /*VFT*/ ClearLoggedCardTableEntryClosure_vtbl
{
  bool (__thiscall *do_card_ptr)(CardTableEntryClosure *this, char *, unsigned int);
};

/* 5263 */
struct __cppobj ClearLoggedCardTableEntryClosure : CardTableEntryClosure
{
  unsigned int _num_processed;
  CardTableModRefBS *_ctbs;
  int _histo[256];
};

/* 5264 */
struct /*VFT*/ RedirtyLoggedCardTableEntryClosure_vtbl
{
  bool (__thiscall *do_card_ptr)(CardTableEntryClosure *this, char *, unsigned int);
};

/* 5265 */
struct __cppobj RedirtyLoggedCardTableEntryClosure : CardTableEntryClosure
{
  unsigned int _num_processed;
};

/* 5266 */
struct /*VFT*/ PostMCRemSetClearClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5267 */
struct __cppobj PostMCRemSetClearClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ModRefBarrierSet *_mr_bs;
};

/* 5268 */
struct /*VFT*/ RebuildRSOutOfRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5269 */
struct __cppobj RebuildRSOutOfRegionClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  UpdateRSOopClosure _cl;
  int _worker_i;
};

/* 5270 */
struct /*VFT*/ ParRebuildRSTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5271 */
struct __cppobj ParRebuildRSTask : AbstractGangTask
{
  G1CollectedHeap *_g1;
};

/* 5272 */
struct /*VFT*/ PostCompactionPrinterClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5273 */
struct __cppobj PostCompactionPrinterClosure : HeapRegionClosure
{
  G1HRPrinter *_hr_printer;
};

/* 5274 */
struct /*VFT*/ SumUsedClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5275 */
struct __cppobj SumUsedClosure : HeapRegionClosure
{
  unsigned int _used;
};

/* 5276 */
struct /*VFT*/ IterateOopClosureRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5277 */
struct __cppobj IterateOopClosureRegionClosure : HeapRegionClosure
{
  ExtendedOopClosure *_cl;
};

/* 5278 */
struct /*VFT*/ IterateObjectClosureRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5279 */
struct __cppobj IterateObjectClosureRegionClosure : HeapRegionClosure
{
  ObjectClosure *_cl;
};

/* 5280 */
struct /*VFT*/ SpaceClosureRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5281 */
struct __cppobj SpaceClosureRegionClosure : HeapRegionClosure
{
  SpaceClosure *_cl;
};

/* 5282 */
struct /*VFT*/ ResetClaimValuesClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5283 */
struct __cppobj ResetClaimValuesClosure : HeapRegionClosure
{
};

/* 5284 */
struct /*VFT*/ VerifyRootsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5285 */
struct __cppobj __declspec(align(4)) VerifyRootsClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  VerifyOption _vo;
  bool _failures;
};

/* 5286 */
struct /*VFT*/ G1VerifyCodeRootOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5287 */
struct __cppobj __declspec(align(4)) G1VerifyCodeRootOopClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  OopClosure *_root_cl;
  nmethod *_nm;
  VerifyOption _vo;
  bool _failures;
};

/* 5288 */
struct /*VFT*/ G1VerifyCodeRootBlobClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 5289 */
struct __cppobj G1VerifyCodeRootBlobClosure : CodeBlobClosure
{
  G1VerifyCodeRootOopClosure *_oop_cl;
};

/* 5290 */
struct /*VFT*/ YoungRefCounterClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5291 */
struct __cppobj YoungRefCounterClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  int _count;
};

/* 5292 */
struct /*VFT*/ VerifyKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5293 */
struct __cppobj VerifyKlassClosure : KlassClosure
{
  YoungRefCounterClosure _young_ref_counter_closure;
  OopClosure *_oop_closure;
};

/* 5294 */
struct /*VFT*/ VerifyLivenessOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5295 */
struct __cppobj VerifyLivenessOopClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  VerifyOption _vo;
};

/* 5296 */
struct /*VFT*/ VerifyObjsInRegionClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5297 */
struct __cppobj VerifyObjsInRegionClosure : ObjectClosure
{
  G1CollectedHeap *_g1h;
  unsigned int _live_bytes;
  HeapRegion *_hr;
  VerifyOption _vo;
};

/* 5298 */
struct /*VFT*/ PrintObjsInRegionClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 5299 */
struct __cppobj PrintObjsInRegionClosure : ObjectClosure
{
  HeapRegion *_hr;
  G1CollectedHeap *_g1;
};

/* 5300 */
struct /*VFT*/ VerifyRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5301 */
struct __cppobj __declspec(align(4)) VerifyRegionClosure : HeapRegionClosure
{
  bool _par;
  VerifyOption _vo;
  bool _failures;
};

/* 5302 */
struct /*VFT*/ G1ParVerifyTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5303 */
struct __cppobj __declspec(align(4)) G1ParVerifyTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  VerifyOption _vo;
  bool _failures;
};

/* 5304 */
struct /*VFT*/ PrintRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5305 */
struct __cppobj PrintRegionClosure : HeapRegionClosure
{
  outputStream *_st;
};

/* 5306 */
struct /*VFT*/ RegisterHumongousWithInCSetFastTestClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5307 */
struct __cppobj RegisterHumongousWithInCSetFastTestClosure : HeapRegionClosure
{
  unsigned int _total_humongous;
  unsigned int _candidate_humongous;
  DirtyCardQueue _dcq;
};

/* 5308 */
struct /*VFT*/ VerifyRegionRemSetClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5309 */
struct __cppobj VerifyRegionRemSetClosure : HeapRegionClosure
{
};

/* 5310 */
struct /*VFT*/ G1ParEvacuateFollowersClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5311 */
struct __cppobj G1ParEvacuateFollowersClosure : VoidClosure
{
  G1CollectedHeap *_g1h;
  G1ParScanThreadState *_par_scan_state;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_queues;
  ParallelTaskTerminator *_terminator;
};

/* 5312 */
struct /*VFT*/ G1KlassScanClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5313 */
struct __cppobj G1KlassScanClosure : KlassClosure
{
  G1ParCopyHelper *_closure;
  bool _process_only_dirty;
  int _count;
};

/* 5314 */
struct /*VFT*/ G1ParTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5315 */
struct __cppobj G1ParTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_queues;
  G1RootProcessor *_root_processor;
  ParallelTaskTerminator _terminator;
  unsigned int _n_workers;
  Mutex _stats_lock;
};

/* 5316 */
struct /*VFT*/ G1ParCopyClosure<1,0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5317 */
struct __cppobj G1ParCopyClosure<1,0> : G1ParCopyHelper
{
};

/* 5318 */
struct /*VFT*/ G1ParCopyClosure<0,0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5319 */
struct __cppobj G1ParCopyClosure<0,0> : G1ParCopyHelper
{
};

/* 5320 */
struct /*VFT*/ G1ParCopyClosure<2,0>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5321 */
struct __cppobj G1ParCopyClosure<2,0> : G1ParCopyHelper
{
};

/* 5322 */
struct /*VFT*/ G1ParTask::G1CLDClosure<0>_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 5323 */
struct __cppobj __declspec(align(4)) G1ParTask::G1CLDClosure<0> : CLDClosure
{
  G1ParCopyClosure<0,0> *_oop_closure;
  G1ParCopyClosure<2,0> _oop_in_klass_closure;
  G1KlassScanClosure _klass_in_cld_closure;
  bool _claim;
};

/* 5324 */
struct /*VFT*/ G1ParCopyClosure<0,1>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5325 */
struct __cppobj G1ParCopyClosure<0,1> : G1ParCopyHelper
{
};

/* 5326 */
struct /*VFT*/ G1ParCopyClosure<2,1>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5327 */
struct __cppobj G1ParCopyClosure<2,1> : G1ParCopyHelper
{
};

/* 5328 */
struct /*VFT*/ G1ParTask::G1CLDClosure<1>_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 5329 */
struct __cppobj __declspec(align(4)) G1ParTask::G1CLDClosure<1> : CLDClosure
{
  G1ParCopyClosure<0,1> *_oop_closure;
  G1ParCopyClosure<2,1> _oop_in_klass_closure;
  G1KlassScanClosure _klass_in_cld_closure;
  bool _claim;
};

/* 5330 */
struct /*VFT*/ G1ParCopyClosure<0,2>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5331 */
struct __cppobj G1ParCopyClosure<0,2> : G1ParCopyHelper
{
};

/* 5332 */
struct /*VFT*/ G1ParCopyClosure<2,2>_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5333 */
struct __cppobj G1ParCopyClosure<2,2> : G1ParCopyHelper
{
};

/* 5334 */
struct /*VFT*/ G1ParTask::G1CLDClosure<2>_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
};

/* 5335 */
struct __cppobj __declspec(align(4)) G1ParTask::G1CLDClosure<2> : CLDClosure
{
  G1ParCopyClosure<0,2> *_oop_closure;
  G1ParCopyClosure<2,2> _oop_in_klass_closure;
  G1KlassScanClosure _klass_in_cld_closure;
  bool _claim;
};

/* 5336 */
struct /*VFT*/ G1StringSymbolTableUnlinkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5337 */
struct __cppobj __declspec(align(4)) G1StringSymbolTableUnlinkTask : AbstractGangTask
{
  BoolObjectClosure *_is_alive;
  int _initial_string_table_size;
  int _initial_symbol_table_size;
  bool _process_strings;
  int _strings_processed;
  int _strings_removed;
  bool _process_symbols;
  int _symbols_processed;
  int _symbols_removed;
  bool _do_in_parallel;
};

/* 5338 */
struct __cppobj G1CodeCacheUnloadingTask : _ValueObj
{
  BoolObjectClosure *const _is_alive;
  const bool _unloading_occurred;
  const unsigned int _num_workers;
  nmethod *_first_nmethod;
  volatile nmethod *_claimed_nmethod;
  volatile nmethod *_postponed_list;
  volatile unsigned int _num_entered_barrier;
};

/* 5339 */
struct __cppobj G1KlassCleaningTask : StackObj
{
  BoolObjectClosure *_is_alive;
  volatile int _clean_klass_tree_claimed;
  ClassLoaderDataGraphKlassIteratorAtomic _klass_iterator;
};

/* 5340 */
struct /*VFT*/ G1ParallelCleaningTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5341 */
struct __cppobj G1ParallelCleaningTask : AbstractGangTask
{
  G1StringSymbolTableUnlinkTask _string_symbol_task;
  G1CodeCacheUnloadingTask _code_cache_task;
  G1KlassCleaningTask _klass_cleaning_task;
};

/* 5342 */
struct /*VFT*/ G1RedirtyLoggedCardsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5343 */
struct __cppobj G1RedirtyLoggedCardsTask : AbstractGangTask
{
  DirtyCardQueueSet *_queue;
};

/* 5344 */
struct /*VFT*/ G1AlwaysAliveClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 5345 */
struct __cppobj G1AlwaysAliveClosure : BoolObjectClosure
{
  G1CollectedHeap *_g1;
};

/* 5346 */
struct /*VFT*/ G1KeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5347 */
struct __cppobj G1KeepAliveClosure : OopClosure
{
  G1CollectedHeap *_g1;
};

/* 5348 */
struct /*VFT*/ G1CopyingKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5349 */
struct __cppobj G1CopyingKeepAliveClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  OopClosure *_copy_non_heap_obj_cl;
  G1ParScanThreadState *_par_scan_state;
};

/* 5350 */
struct /*VFT*/ G1STWDrainQueueClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5351 */
struct __cppobj G1STWDrainQueueClosure : VoidClosure
{
  G1CollectedHeap *_g1h;
  G1ParScanThreadState *_par_scan_state;
};

/* 5352 */
struct /*VFT*/ G1STWRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 5353 */
struct __cppobj G1STWRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
  G1CollectedHeap *_g1h;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_queues;
  FlexibleWorkGang *_workers;
  int _active_workers;
};

/* 5354 */
struct /*VFT*/ G1STWRefProcTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5355 */
struct __cppobj G1STWRefProcTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::ProcessTask *_proc_task;
  G1CollectedHeap *_g1h;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_task_queues;
  ParallelTaskTerminator *_terminator;
};

/* 5356 */
struct /*VFT*/ G1STWRefEnqueueTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5357 */
struct __cppobj G1STWRefEnqueueTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_enq_task;
};

/* 5358 */
struct /*VFT*/ G1ParPreserveCMReferentsTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5359 */
struct __cppobj G1ParPreserveCMReferentsTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  GenericTaskQueueSet<OverflowTaskQueue<StarTask,5,16384>,5> *_queues;
  ParallelTaskTerminator _terminator;
  unsigned int _n_workers;
};

/* 5360 */
struct /*VFT*/ G1ParCleanupCTTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5361 */
struct __cppobj G1ParCleanupCTTask : AbstractGangTask
{
  G1SATBCardTableModRefBS *_ct_bs;
  G1CollectedHeap *_g1h;
  HeapRegion *volatile _su_head;
};

/* 5362 */
struct /*VFT*/ G1FreeHumongousRegionClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5363 */
struct __cppobj G1FreeHumongousRegionClosure : HeapRegionClosure
{
  FreeRegionList *_free_region_list;
  HeapRegionSet *_proxy_set;
  HeapRegionSetCount _humongous_regions_removed;
  unsigned int _freed_bytes;
};

/* 5364 */
struct /*VFT*/ NoYoungRegionsClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5365 */
struct __cppobj __declspec(align(4)) NoYoungRegionsClosure : HeapRegionClosure
{
  bool _success;
};

/* 5366 */
struct /*VFT*/ TearDownRegionSetsClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5367 */
struct __cppobj TearDownRegionSetsClosure : HeapRegionClosure
{
  HeapRegionSet *_old_set;
};

/* 5368 */
struct /*VFT*/ RebuildRegionSetsClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5369 */
struct __cppobj RebuildRegionSetsClosure : HeapRegionClosure
{
  bool _free_list_only;
  HeapRegionSet *_old_set;
  HeapRegionManager *_hrm;
  unsigned int _total_used;
};

/* 5370 */
struct /*VFT*/ VerifyRegionListsClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5371 */
struct __cppobj VerifyRegionListsClosure : HeapRegionClosure
{
  HeapRegionSet *_old_set;
  HeapRegionSet *_humongous_set;
  HeapRegionManager *_hrm;
  HeapRegionSetCount _old_count;
  HeapRegionSetCount _humongous_count;
  HeapRegionSetCount _free_count;
};

/* 5372 */
struct /*VFT*/ RegisterNMethodOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5373 */
struct __cppobj RegisterNMethodOopClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  nmethod *_nm;
};

/* 5374 */
struct /*VFT*/ UnregisterNMethodOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5375 */
struct __cppobj UnregisterNMethodOopClosure : OopClosure
{
  G1CollectedHeap *_g1h;
  nmethod *_nm;
};

/* 5376 */
struct /*VFT*/ RebuildStrongCodeRootClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 5377 */
struct __cppobj RebuildStrongCodeRootClosure : CodeBlobClosure
{
  G1CollectedHeap *_g1h;
};

/* 5378 */
struct __cppobj GCCauseString : StackObj
{
  char _buffer[128];
  int _position;
};

/* 5379 */
struct __cppobj DiscoveredListIterator
{
  DiscoveredList *_refs_list;
  HeapWord *_prev_next;
  oopDesc *_prev;
  oopDesc *_ref;
  HeapWord *_discovered_addr;
  oopDesc *_next;
  HeapWord *_referent_addr;
  oopDesc *_referent;
  OopClosure *_keep_alive;
  BoolObjectClosure *_is_alive;
};

/* 5380 */
struct __cppobj __declspec(align(4)) NoRefDiscovery : StackObj
{
  ReferenceProcessor *_rp;
  bool _was_discovering_refs;
};

/* 5381 */
struct __cppobj HashtableEntry<nmethod *,5> : BasicHashtableEntry<5>
{
  nmethod *_literal;
};

/* 5382 */
struct __cppobj BasicHashtable<5>::BucketUnlinkContext
{
  int _num_processed;
  int _num_removed;
  BasicHashtableEntry<5> *_removed_head;
  BasicHashtableEntry<5> *_removed_tail;
};

/* 5383 */
struct /*VFT*/ CleanCallback::PointsIntoHRDetectionClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5384 */
struct __cppobj __declspec(align(4)) CleanCallback::PointsIntoHRDetectionClosure : OopClosure
{
  HeapRegion *_hr;
  bool _points_into;
};

/* 5385 */
struct __cppobj CleanCallback : StackObj
{
  CleanCallback::PointsIntoHRDetectionClosure _detector;
  CodeBlobToOopClosure _blobs;
};

/* 5386 */
struct /*VFT*/ G1CardCountsClearClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5387 */
struct __cppobj G1CardCountsClearClosure : HeapRegionClosure
{
  G1CardCounts *_card_counts;
};

/* 5388 */
struct __cppobj PaddedPrimitiveArray<unsigned char,5,64>
{
};

/* 5389 */
struct /*VFT*/ G1DefaultAllocator_vtbl
{
  void (__thiscall *init_mutator_alloc_region)(G1Allocator *this);
  void (__thiscall *release_mutator_alloc_region)(G1Allocator *this);
  void (__thiscall *init_gc_alloc_regions)(G1Allocator *this, EvacuationInfo *);
  void (__thiscall *release_gc_alloc_regions)(G1Allocator *this, unsigned int, EvacuationInfo *);
  void (__thiscall *abandon_gc_alloc_regions)(G1Allocator *this);
  MutatorAllocRegion *(__thiscall *mutator_alloc_region)(G1Allocator *this, unsigned __int8);
  SurvivorGCAllocRegion *(__thiscall *survivor_gc_alloc_region)(G1Allocator *this, unsigned __int8);
  OldGCAllocRegion *(__thiscall *old_gc_alloc_region)(G1Allocator *this, unsigned __int8);
  unsigned int (__thiscall *used)(G1Allocator *this);
  bool (__thiscall *is_retained_old_region)(G1Allocator *this, HeapRegion *);
  HeapRegion *(__thiscall *new_heap_region)(G1Allocator *this, unsigned int, G1BlockOffsetSharedArray *, MemRegion);
};

/* 5390 */
struct __cppobj G1DefaultAllocator : G1Allocator
{
  MutatorAllocRegion _mutator_alloc_region;
  SurvivorGCAllocRegion _survivor_gc_alloc_region;
  OldGCAllocRegion _old_gc_alloc_region;
  HeapRegion *_retained_old_gc_alloc_region;
};

/* 5391 */
struct /*VFT*/ G1DefaultParGCAllocator_vtbl
{
  void (__thiscall *retire_alloc_buffers)(G1ParGCAllocator *this);
  G1ParGCAllocBuffer *(__thiscall *alloc_buffer)(G1ParGCAllocator *this, InCSetState, unsigned __int8);
};

/* 5392 */
struct __cppobj G1DefaultParGCAllocator : G1ParGCAllocator
{
  G1ParGCAllocBuffer _surviving_alloc_buffer;
  G1ParGCAllocBuffer _tenured_alloc_buffer;
  G1ParGCAllocBuffer *_alloc_buffers[3];
};

/* 5393 */
struct /*VFT*/ CMCheckpointRootsFinalClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5394 */
struct __cppobj CMCheckpointRootsFinalClosure : VoidClosure
{
  ConcurrentMark *_cm;
};

/* 5395 */
struct /*VFT*/ CMCleanUp_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5396 */
struct __cppobj CMCleanUp : VoidClosure
{
  ConcurrentMark *_cm;
};

/* 5397 */
struct /*VFT*/ ClearBitmapHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5398 */
struct __cppobj __declspec(align(4)) ClearBitmapHRClosure : HeapRegionClosure
{
  ConcurrentMark *_cm;
  CMBitMap *_bitmap;
  bool _may_yield;
};

/* 5399 */
struct /*VFT*/ CheckBitmapClearHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5400 */
struct __cppobj __declspec(align(4)) CheckBitmapClearHRClosure : HeapRegionClosure
{
  CMBitMap *_bitmap;
  bool _error;
};

/* 5401 */
struct /*VFT*/ NoteStartOfMarkHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5402 */
struct __cppobj NoteStartOfMarkHRClosure : HeapRegionClosure
{
};

/* 5403 */
struct /*VFT*/ CMConcurrentMarkingTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5404 */
struct __cppobj CMConcurrentMarkingTask : AbstractGangTask
{
  ConcurrentMark *_cm;
  ConcurrentMarkThread *_cmt;
};

/* 5405 */
struct /*VFT*/ CMRootRegionScanTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5406 */
struct __cppobj CMRootRegionScanTask : AbstractGangTask
{
  ConcurrentMark *_cm;
};

/* 5407 */
struct /*VFT*/ CMCountDataClosureBase_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5408 */
struct __cppobj CMCountDataClosureBase : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  CardTableModRefBS *_ct_bs;
  BitMap *_region_bm;
  BitMap *_card_bm;
};

/* 5409 */
struct /*VFT*/ CalcLiveObjectsClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5410 */
struct __cppobj CalcLiveObjectsClosure : CMCountDataClosureBase
{
  CMBitMapRO *_bm;
  unsigned int _region_marked_bytes;
};

/* 5411 */
struct /*VFT*/ VerifyLiveObjectDataHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5412 */
struct __cppobj VerifyLiveObjectDataHRClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  CalcLiveObjectsClosure _calc_cl;
  BitMap *_region_bm;
  BitMap *_card_bm;
  bool _verbose;
  BitMap *_exp_region_bm;
  BitMap *_exp_card_bm;
  int _failures;
};

/* 5413 */
struct /*VFT*/ G1ParVerifyFinalCountTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5414 */
struct __cppobj __declspec(align(4)) G1ParVerifyFinalCountTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  BitMap *_actual_region_bm;
  BitMap *_actual_card_bm;
  unsigned int _n_workers;
  BitMap *_expected_region_bm;
  BitMap *_expected_card_bm;
  int _failures;
  bool _verbose;
};

/* 5415 */
struct /*VFT*/ FinalCountDataUpdateClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5416 */
struct __cppobj FinalCountDataUpdateClosure : CMCountDataClosureBase
{
};

/* 5417 */
struct /*VFT*/ G1ParFinalCountTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5418 */
struct __cppobj G1ParFinalCountTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  BitMap *_actual_region_bm;
  BitMap *_actual_card_bm;
  unsigned int _n_workers;
};

/* 5419 */
struct /*VFT*/ G1NoteEndOfConcMarkClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5420 */
struct __cppobj G1NoteEndOfConcMarkClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1;
  unsigned int _max_live_bytes;
  unsigned int _regions_claimed;
  unsigned int _freed_bytes;
  FreeRegionList *_local_cleanup_list;
  HeapRegionSetCount _old_regions_removed;
  HeapRegionSetCount _humongous_regions_removed;
  HRRSCleanupTask *_hrrs_cleanup_task;
  long double _claimed_region_time;
  long double _max_region_time;
};

/* 5421 */
struct /*VFT*/ G1ParNoteEndTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5422 */
struct __cppobj G1ParNoteEndTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  unsigned int _max_live_bytes;
  unsigned int _freed_bytes;
  FreeRegionList *_cleanup_list;
};

/* 5423 */
struct /*VFT*/ G1ParScrubRemSetTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5424 */
struct __cppobj G1ParScrubRemSetTask : AbstractGangTask
{
  G1RemSet *_g1rs;
  BitMap *_region_bm;
  BitMap *_card_bm;
};

/* 5425 */
struct /*VFT*/ G1CMKeepAliveAndDrainClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5426 */
struct __cppobj __declspec(align(4)) G1CMKeepAliveAndDrainClosure : OopClosure
{
  ConcurrentMark *_cm;
  CMTask *_task;
  int _ref_counter_limit;
  int _ref_counter;
  bool _is_serial;
};

/* 5427 */
struct /*VFT*/ G1CMDrainMarkingStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5428 */
struct __cppobj __declspec(align(4)) G1CMDrainMarkingStackClosure : VoidClosure
{
  ConcurrentMark *_cm;
  CMTask *_task;
  bool _is_serial;
};

/* 5429 */
struct /*VFT*/ G1CMRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 5430 */
struct __cppobj G1CMRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  WorkGang *_workers;
  int _active_workers;
};

/* 5431 */
struct /*VFT*/ G1CMRefProcTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5432 */
struct __cppobj G1CMRefProcTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::ProcessTask *_proc_task;
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
};

/* 5433 */
struct /*VFT*/ G1CMRefEnqueueTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5434 */
struct __cppobj G1CMRefEnqueueTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_enq_task;
};

/* 5435 */
struct __cppobj G1RemarkGCTraceTime : GCTraceTime
{
};

/* 5436 */
struct /*VFT*/ CMSATBBufferClosure_vtbl
{
  void (__thiscall *do_buffer)(SATBBufferClosure *this, void **, unsigned int);
};

/* 5437 */
struct __cppobj CMSATBBufferClosure : SATBBufferClosure
{
  CMTask *_task;
  G1CollectedHeap *_g1h;
};

/* 5438 */
struct /*VFT*/ G1RemarkThreadsClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 5439 */
struct __cppobj __declspec(align(4)) G1RemarkThreadsClosure : ThreadClosure
{
  CMSATBBufferClosure _cm_satb_cl;
  G1CMOopClosure _cm_cl;
  MarkingCodeBlobClosure _code_cl;
  int _thread_parity;
  bool _is_par;
};

/* 5440 */
struct /*VFT*/ CMRemarkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5441 */
struct __cppobj __declspec(align(4)) CMRemarkTask : AbstractGangTask
{
  ConcurrentMark *_cm;
  bool _is_serial;
};

/* 5442 */
struct /*VFT*/ AggregateCountDataHRClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5443 */
struct __cppobj AggregateCountDataHRClosure : HeapRegionClosure
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  CardTableModRefBS *_ct_bs;
  BitMap *_cm_card_bm;
  unsigned int _max_worker_id;
};

/* 5444 */
struct /*VFT*/ G1AggregateCountDataTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5445 */
struct __cppobj G1AggregateCountDataTask : AbstractGangTask
{
  G1CollectedHeap *_g1h;
  ConcurrentMark *_cm;
  BitMap *_cm_card_bm;
  unsigned int _max_worker_id;
  int _active_workers;
};

/* 5446 */
struct /*VFT*/ CMBitMapClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 5447 */
struct __cppobj CMBitMapClosure : BitMapClosure
{
  CMBitMap *_nextMarkBitMap;
  ConcurrentMark *_cm;
  CMTask *_task;
};

/* 5448 */
struct /*VFT*/ G1PrintRegionLivenessInfoClosure_vtbl
{
  bool (__thiscall *doHeapRegion)(HeapRegionClosure *this, HeapRegion *);
};

/* 5449 */
struct __cppobj G1PrintRegionLivenessInfoClosure : HeapRegionClosure
{
  outputStream *_out;
  unsigned int _total_used_bytes;
  unsigned int _total_capacity_bytes;
  unsigned int _total_prev_live_bytes;
  unsigned int _total_next_live_bytes;
  unsigned int _hum_used_bytes;
  unsigned int _hum_capacity_bytes;
  unsigned int _hum_prev_live_bytes;
  unsigned int _hum_next_live_bytes;
  unsigned int _total_remset_bytes;
  unsigned int _total_strong_code_roots_bytes;
};

/* 5450 */
struct __cppobj CMSLockVerifier : AllStatic
{
};

/* 5451 */
struct __cppobj CMSSynchronousYieldRequest : StackObj
{
};

/* 5452 */
struct __cppobj CMSLoopCountWarn : StackObj
{
  const char *_src;
  const char *_msg;
  const int _threshold;
  int _ticks;
};

/* 5453 */
struct __cppobj __declspec(align(4)) VM_CMS_Operation : VM_Operation
{
  CMSCollector *_collector;
  bool _prologue_succeeded;
};

/* 5454 */
struct /*VFT*/ VM_CMS_Operation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  CMSCollector::CollectorState (__thiscall *legal_state)(VM_CMS_Operation *this);
  bool (__thiscall *needs_pll)(VM_CMS_Operation *this);
};

/* 5455 */
struct __cppobj VM_CMS_Initial_Mark : VM_CMS_Operation
{
};

/* 5456 */
struct /*VFT*/ VM_CMS_Initial_Mark_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  CMSCollector::CollectorState (__thiscall *legal_state)(VM_CMS_Operation *this);
  bool (__thiscall *needs_pll)(VM_CMS_Operation *this);
};

/* 5457 */
struct __cppobj VM_CMS_Final_Remark : VM_CMS_Operation
{
};

/* 5458 */
struct /*VFT*/ VM_CMS_Final_Remark_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  CMSCollector::CollectorState (__thiscall *legal_state)(VM_CMS_Operation *this);
  bool (__thiscall *needs_pll)(VM_CMS_Operation *this);
};

/* 5459 */
struct __cppobj __declspec(align(4)) VM_GenCollectFullConcurrent : VM_GC_Operation
{
  bool _disabled_icms;
};

/* 5460 */
struct /*VFT*/ VM_GenCollectFullConcurrent_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 5461 */
struct __cppobj ASConcurrentMarkSweepPolicy : ConcurrentMarkSweepPolicy
{
};

/* 5462 */
struct /*VFT*/ OneContigSpaceCardGeneration_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
  bool (__thiscall *expand)(CardGeneration *this, unsigned int, unsigned int);
  void (__thiscall *shrink)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_by)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_to_reserved)(CardGeneration *this);
};

/* 5463 */
struct __cppobj __declspec(align(8)) OneContigSpaceCardGeneration : CardGeneration
{
  ContiguousSpace *_the_space;
  WaterMark _last_gc;
};

/* 5464 */
struct /*VFT*/ BlockOffsetArrayContigSpace_vtbl
{
  void (__thiscall *resize)(BlockOffsetTable *this, unsigned int);
  void (__thiscall *set_bottom)(BlockOffsetTable *this, HeapWord *);
  HeapWord *(__thiscall *block_start_unsafe)(BlockOffsetTable *this, const void *);
  void (__thiscall *alloc_block)(BlockOffsetArray *this, HeapWord *, HeapWord *);
  unsigned int (__thiscall *last_active_index)(BlockOffsetArray *this);
};

/* 5465 */
struct __cppobj BlockOffsetArrayContigSpace : BlockOffsetArray
{
  HeapWord *_next_offset_threshold;
  unsigned int _next_offset_index;
};

/* 5466 */
struct __cppobj ParGCAllocBufferWithBOT : ParGCAllocBuffer
{
  BlockOffsetArrayContigSpace _bt;
  BlockOffsetSharedArray *_bsa;
  HeapWord *_true_end;
};

/* 5467 */
struct /*VFT*/ ParGCAllocBufferWithBOT_vtbl
{
  void (__thiscall *~ParGCAllocBuffer)(ParGCAllocBuffer *this);
  void (__thiscall *set_buf)(ParGCAllocBuffer *this, HeapWord *);
  void (__thiscall *retire)(ParGCAllocBuffer *this, bool, bool);
};

/* 5468 */
struct /*VFT*/ TenuredGeneration_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
  bool (__thiscall *expand)(CardGeneration *this, unsigned int, unsigned int);
  void (__thiscall *shrink)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_by)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_to_reserved)(CardGeneration *this);
};

/* 5469 */
struct __cppobj __declspec(align(8)) TenuredGeneration : OneContigSpaceCardGeneration
{
  ParGCAllocBufferWithBOT **_alloc_buffers;
  GenerationCounters *_gen_counters;
  CSpaceCounters *_space_counters;
};

/* 5470 */
struct __cppobj RuntimeService : AllStatic
{
};

/* 5471 */
struct __cppobj CMSTokenSync : StackObj
{
  bool _is_cms_thread;
};

/* 5472 */
struct __cppobj CMSTokenSyncWithLocks : CMSTokenSync
{
  MutexLockerEx _locker1;
  MutexLockerEx _locker2;
  MutexLockerEx _locker3;
};

/* 5473 */
struct __cppobj ICMSDisabler : StackObj
{
};

/* 5474 */
struct __cppobj ReleaseForegroundGC : StackObj
{
  CMSCollector *_c;
};

/* 5475 */
struct /*VFT*/ VerifyMarkedClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 5476 */
struct __cppobj __declspec(align(4)) VerifyMarkedClosure : BitMapClosure
{
  CMSBitMap *_marks;
  bool _failed;
};

/* 5477 */
struct /*VFT*/ VerifyKlassOopsKlassClosure::VerifyKlassOopsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5478 */
struct __cppobj VerifyKlassOopsKlassClosure::VerifyKlassOopsClosure : OopClosure
{
  CMSBitMap *_bitmap;
};

/* 5479 */
struct /*VFT*/ VerifyKlassOopsKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5480 */
struct __cppobj VerifyKlassOopsKlassClosure : KlassClosure
{
  VerifyKlassOopsKlassClosure::VerifyKlassOopsClosure _oop_closure;
};

/* 5481 */
struct __cppobj CMSPhaseAccounting : StackObj
{
  CMSCollector *_collector;
  const char *_phase;
  elapsedTimer _wallclock;
  bool _print_cr;
  const GCId _gc_id;
};

/* 5482 */
struct /*VFT*/ CMSParMarkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5483 */
struct __cppobj CMSParMarkTask : AbstractGangTask
{
  CMSCollector *_collector;
  int _n_workers;
};

/* 5484 */
struct /*VFT*/ CMSParInitialMarkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5485 */
struct __cppobj CMSParInitialMarkTask : CMSParMarkTask
{
};

/* 5486 */
struct /*VFT*/ Par_ConcMarkingClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5487 */
struct __cppobj Par_ConcMarkingClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  CMSConcMarkingTask *_task;
  MemRegion _span;
  CMSBitMap *_bit_map;
  CMSMarkStack *_overflow_stack;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
};

/* 5488 */
struct /*VFT*/ PrecleanKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5489 */
struct __cppobj PrecleanKlassClosure : KlassClosure
{
  KlassToOopClosure _cm_klass_closure;
};

/* 5490 */
struct /*VFT*/ CMSParRemarkTask_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5491 */
struct __cppobj CMSParRemarkTask : CMSParMarkTask
{
  CompactibleFreeListSpace *_cms_space;
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_task_queues;
  ParallelTaskTerminator _term;
};

/* 5492 */
struct /*VFT*/ RemarkKlassClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 5493 */
struct __cppobj RemarkKlassClosure : KlassClosure
{
  KlassToOopClosure _cm_klass_closure;
};

/* 5494 */
struct __cppobj GrowableArray<ClassLoaderData *> : GenericGrowableArray
{
  ClassLoaderData **_data;
};

/* 5495 */
struct /*VFT*/ AbstractGangTaskWOopQueues_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5496 */
struct __cppobj AbstractGangTaskWOopQueues : AbstractGangTask
{
  GenericTaskQueueSet<GenericTaskQueue<oopDesc *,5,16384>,5> *_queues;
  ParallelTaskTerminator _terminator;
};

/* 5497 */
struct /*VFT*/ CMSRefProcTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5498 */
struct __cppobj CMSRefProcTaskProxy : AbstractGangTaskWOopQueues
{
  CMSCollector *_collector;
  CMSBitMap *_mark_bit_map;
  const MemRegion _span;
  AbstractRefProcTaskExecutor::ProcessTask *_task;
};

/* 5499 */
struct /*VFT*/ CMSParDrainMarkingStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5500 */
struct __cppobj CMSParDrainMarkingStackClosure : VoidClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  CMSBitMap *_bit_map;
  CMSInnerParMarkAndPushClosure _mark_and_push;
};

/* 5501 */
struct /*VFT*/ CMSParKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5502 */
struct __cppobj CMSParKeepAliveClosure : MetadataAwareOopClosure
{
  MemRegion _span;
  GenericTaskQueue<oopDesc *,5,16384> *_work_queue;
  CMSBitMap *_bit_map;
  CMSInnerParMarkAndPushClosure _mark_and_push;
  const unsigned int _low_water_mark;
};

/* 5503 */
struct /*VFT*/ CMSRefEnqueueTaskProxy_vtbl
{
  void (__thiscall *work)(AbstractGangTask *this, unsigned int);
  void (__thiscall *set_for_termination)(AbstractGangTask *this, int);
};

/* 5504 */
struct __cppobj CMSRefEnqueueTaskProxy : AbstractGangTask
{
  AbstractRefProcTaskExecutor::EnqueueTask *_task;
};

/* 5505 */
struct __cppobj UpwardsObjectClosure : BoolObjectClosure
{
  HeapWord *_previous_address;
};

/* 5506 */
struct /*VFT*/ UpwardsObjectClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
  bool (__thiscall *do_object_bm)(UpwardsObjectClosure *this, oopDesc *, MemRegion);
};

/* 5507 */
struct /*VFT*/ ScanMarkedObjectsAgainClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
  bool (__thiscall *do_object_bm)(UpwardsObjectClosure *this, oopDesc *, MemRegion);
};

/* 5508 */
union $1A93A3DF36F2A06CF894F47F254D30BC
{
  MarkRefsIntoAndScanClosure *_scan_closure;
  Par_MarkRefsIntoAndScanClosure *_par_scan_closure;
};

/* 5509 */
struct __cppobj ScanMarkedObjectsAgainClosure : UpwardsObjectClosure
{
  bool _parallel;
  CMSBitMap *_bit_map;
  $1A93A3DF36F2A06CF894F47F254D30BC ___u3;
};

/* 5510 */
struct /*VFT*/ MarkFromDirtyCardsClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 5511 */
struct __cppobj MarkFromDirtyCardsClosure : MemRegionClosure
{
  CompactibleFreeListSpace *_space;
  ScanMarkedObjectsAgainClosure _scan_cl;
  unsigned int _num_dirty_cards;
};

/* 5512 */
struct __cppobj ObjectClosureCareful : ObjectClosure
{
};

/* 5513 */
struct /*VFT*/ ObjectClosureCareful_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
  unsigned int (__thiscall *do_object_careful_m)(ObjectClosureCareful *this, oopDesc *, MemRegion);
  unsigned int (__thiscall *do_object_careful)(ObjectClosureCareful *this, oopDesc *);
};

/* 5514 */
struct /*VFT*/ SurvivorSpacePrecleanClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
  unsigned int (__thiscall *do_object_careful_m)(ObjectClosureCareful *this, oopDesc *, MemRegion);
  unsigned int (__thiscall *do_object_careful)(ObjectClosureCareful *this, oopDesc *);
};

/* 5515 */
struct __cppobj SurvivorSpacePrecleanClosure : ObjectClosureCareful
{
  CMSCollector *_collector;
  MemRegion _span;
  bool _yield;
  CMSBitMap *_bit_map;
  CMSMarkStack *_mark_stack;
  PushAndMarkClosure *_scanning_closure;
  unsigned int _before_count;
};

/* 5516 */
struct __cppobj BlkClosure : StackObj
{
  BlkClosure_vtbl *__vftable /*VFT*/;
};

/* 5517 */
struct /*VFT*/ BlkClosure_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
};

/* 5518 */
struct __cppobj BlkClosureCareful : BlkClosure
{
};

/* 5519 */
struct /*VFT*/ BlkClosureCareful_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
  unsigned int (__thiscall *do_blk_careful)(BlkClosureCareful *this, HeapWord *);
};

/* 5520 */
struct /*VFT*/ MarkRefsIntoVerifyClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5521 */
struct __cppobj MarkRefsIntoVerifyClosure : MetadataAwareOopsInGenClosure
{
  const MemRegion _span;
  CMSBitMap *_verification_bm;
  CMSBitMap *_cms_bm;
};

/* 5522 */
struct __cppobj ASConcurrentMarkSweepGeneration : ConcurrentMarkSweepGeneration
{
};

/* 5523 */
struct /*VFT*/ ASConcurrentMarkSweepGeneration_vtbl
{
  void (__thiscall *ref_processor_init)(Generation *this);
  Generation::Name (__thiscall *kind)(Generation *this);
  bool (__thiscall *refs_discovery_is_atomic)(Generation *this);
  bool (__thiscall *refs_discovery_is_mt)(Generation *this);
  unsigned int (__thiscall *capacity)(Generation *this);
  unsigned int (__thiscall *used)(Generation *this);
  unsigned int (__thiscall *used_stable)(Generation *this);
  unsigned int (__thiscall *free)(Generation *this);
  unsigned int (__thiscall *max_capacity)(Generation *this);
  unsigned int (__thiscall *capacity_before_gc)(Generation *this);
  unsigned int (__thiscall *contiguous_available)(Generation *this);
  unsigned int (__thiscall *max_contiguous_available)(Generation *this);
  bool (__thiscall *promotion_attempt_is_safe)(Generation *this, unsigned int);
  void (__thiscall *promotion_failure_occurred)(Generation *this);
  unsigned int (__thiscall *unsafe_max_alloc_nogc)(Generation *this);
  bool (__thiscall *is_maximal_no_gc)(Generation *this);
  MemRegion *(__thiscall *used_region)(Generation *this, MemRegion *result);
  void (__thiscall *save_used_region)(Generation *this);
  bool (__thiscall *is_in)(Generation *this, const void *);
  Space *(__thiscall *space_containing)(Generation *this, const void *);
  void (__thiscall *space_iterate)(Generation *this, SpaceClosure *, bool);
  CompactibleSpace *(__thiscall *first_compaction_space)(Generation *this);
  bool (__thiscall *should_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *par_allocate)(Generation *this, unsigned int, bool);
  HeapWord *(__thiscall *allocation_limit_reached)(Generation *this, Space *, HeapWord *, unsigned int);
  bool (__thiscall *supports_inline_contig_alloc)(Generation *this);
  HeapWord **(__thiscall *top_addr)(Generation *this);
  HeapWord **(__thiscall *end_addr)(Generation *this);
  bool (__thiscall *supports_tlab_allocation)(Generation *this);
  unsigned int (__thiscall *tlab_capacity)(Generation *this);
  unsigned int (__thiscall *tlab_used)(Generation *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(Generation *this);
  oopDesc *(__thiscall *promote)(Generation *this, oopDesc *, unsigned int);
  oopDesc *(__thiscall *par_promote)(Generation *this, int, oopDesc *, markOopDesc *, unsigned int);
  void (__thiscall *par_promote_alloc_undo)(Generation *this, int, HeapWord *, unsigned int);
  void (__thiscall *par_promote_alloc_done)(Generation *this, int);
  void (__thiscall *par_oop_since_save_marks_iterate_done)(Generation *this, int);
  bool (__thiscall *full_collects_younger_generations)(Generation *this);
  bool (__thiscall *performs_in_place_marking)(Generation *this);
  bool (__thiscall *should_collect)(Generation *this, bool, unsigned int, bool);
  bool (__thiscall *collection_attempt_is_safe)(Generation *this);
  void (__thiscall *collect)(Generation *this, bool, bool, unsigned int, bool);
  HeapWord *(__thiscall *expand_and_allocate)(Generation *this, unsigned int, bool, bool);
  void (__thiscall *gc_prologue)(Generation *this, bool);
  void (__thiscall *gc_epilogue)(Generation *this, bool);
  void (__thiscall *record_spaces_top)(Generation *this);
  void (__thiscall *ensure_parsability)(Generation *this);
  __int64 (__thiscall *time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_time_of_last_gc)(Generation *this, __int64);
  void (__thiscall *update_gc_stats)(Generation *this, int, bool);
  void (__thiscall *prepare_for_compaction)(Generation *this, CompactPoint *);
  void (__thiscall *adjust_pointers)(Generation *this);
  void (__thiscall *compact)(Generation *this);
  void (__thiscall *post_compact)(Generation *this);
  void *(__thiscall *get_data_recorder)(Generation *this, int);
  void (__thiscall *sample_eden_chunk)(Generation *this);
  void (__thiscall *prepare_for_verify)(Generation *this);
  void (__thiscall *save_marks)(Generation *this);
  void (__thiscall *reset_saved_marks)(Generation *this);
  bool (__thiscall *no_allocs_since_save_marks)(Generation *this);
  void (__thiscall *oop_since_save_marks_iterate_v)(Generation *this, OopsInGenClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithoutBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ParScanWithBarrierClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, FastScanClosure *);
  void (__thiscall *oop_since_save_marks_iterate_nv)(Generation *this, ScanClosure *);
  void (__thiscall *contribute_scratch)(Generation *this, ScratchBlock **, Generation *, unsigned int);
  void (__thiscall *reset_scratch)(Generation *this);
  void (__thiscall *compute_new_size)(Generation *this);
  const char *(__thiscall *name)(Generation *this);
  const char *(__thiscall *short_name)(Generation *this);
  bool (__thiscall *must_be_youngest)(Generation *this);
  bool (__thiscall *must_be_oldest)(Generation *this);
  void (__thiscall *oop_iterate)(Generation *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Generation *this, ObjectClosure *);
  void (__thiscall *younger_refs_iterate)(Generation *this, OopsInGenClosure *);
  void (__thiscall *clear_remembered_set)(Generation *this);
  void (__thiscall *invalidate_remembered_set)(Generation *this);
  HeapWord *(__thiscall *block_start)(Generation *this, const void *);
  unsigned int (__thiscall *block_size)(Generation *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Generation *this, const HeapWord *);
  void (__thiscall *print)(Generation *this);
  void (__thiscall *print_on)(Generation *this, outputStream *);
  void (__thiscall *verify)(Generation *this);
  void (__thiscall *print_summary_info)(Generation *this);
  void (__thiscall *print_summary_info_on)(Generation *this, outputStream *);
  void (__thiscall *update_counters)(Generation *this);
  CollectorCounters *(__thiscall *counters)(Generation *this);
  bool (__thiscall *expand)(CardGeneration *this, unsigned int, unsigned int);
  void (__thiscall *shrink)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_by)(CardGeneration *this, unsigned int);
  bool (__thiscall *grow_to_reserved)(CardGeneration *this);
  bool (__thiscall *should_concurrent_collect)(ConcurrentMarkSweepGeneration *this);
  bool (__thiscall *is_too_full)(ConcurrentMarkSweepGeneration *this);
  void (__thiscall *update_counters)(ConcurrentMarkSweepGeneration *this, unsigned int);
  void (__thiscall *shrink_by)(ASConcurrentMarkSweepGeneration *this, unsigned int);
};

/* 5524 */
struct __cppobj TraceCMSMemoryManagerStats : TraceMemoryManagerStats
{
};

/* 5525 */
struct /*VFT*/ ScanMarkedObjectsAgainCarefullyClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
  unsigned int (__thiscall *do_object_careful_m)(ObjectClosureCareful *this, oopDesc *, MemRegion);
  unsigned int (__thiscall *do_object_careful)(ObjectClosureCareful *this, oopDesc *);
};

/* 5526 */
struct __cppobj ScanMarkedObjectsAgainCarefullyClosure : ObjectClosureCareful
{
  CMSCollector *_collector;
  MemRegion _span;
  bool _yield;
  Mutex *_freelistLock;
  CMSBitMap *_bitMap;
  CMSMarkStack *_markStack;
  MarkRefsIntoAndScanClosure *_scanningClosure;
};

/* 5527 */
struct __cppobj FreelistLocker : StackObj
{
  CMSCollector *_collector;
};

/* 5528 */
struct /*VFT*/ MarkRefsIntoClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5529 */
struct __cppobj MarkRefsIntoClosure : MetadataAwareOopsInGenClosure
{
  const MemRegion _span;
  CMSBitMap *_bitMap;
};

/* 5530 */
struct /*VFT*/ CMSRefProcTaskExecutor_vtbl
{
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::EnqueueTask *);
  void (__thiscall *execute)(AbstractRefProcTaskExecutor *this, AbstractRefProcTaskExecutor::ProcessTask *);
  void (__thiscall *set_single_threaded_mode)(AbstractRefProcTaskExecutor *this);
};

/* 5531 */
struct __cppobj CMSRefProcTaskExecutor : AbstractRefProcTaskExecutor
{
  CMSCollector *_collector;
};

/* 5532 */
struct /*VFT*/ Par_MarkRefsIntoClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5533 */
struct __cppobj Par_MarkRefsIntoClosure : MetadataAwareOopsInGenClosure
{
  const MemRegion _span;
  CMSBitMap *_bitMap;
};

/* 5534 */
struct /*VFT*/ PushAndMarkVerifyClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 5535 */
struct __cppobj PushAndMarkVerifyClosure : MetadataAwareOopClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_verification_bm;
  CMSBitMap *_cms_bm;
  CMSMarkStack *_mark_stack;
};

/* 5536 */
struct /*VFT*/ MarkFromRootsVerifyClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 5537 */
struct __cppobj MarkFromRootsVerifyClosure : BitMapClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSBitMap *_verification_bm;
  CMSBitMap *_cms_bm;
  CMSMarkStack *_mark_stack;
  HeapWord *_finger;
  PushAndMarkVerifyClosure _pam_verify_closure;
};

/* 5538 */
struct /*VFT*/ CMSPrecleanRefsYieldClosure_vtbl
{
  bool (__thiscall *should_return)(YieldClosure *this);
};

/* 5539 */
struct __cppobj CMSPrecleanRefsYieldClosure : YieldClosure
{
  CMSCollector *_collector;
};

/* 5540 */
struct /*VFT*/ SweepClosure_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
  unsigned int (__thiscall *do_blk_careful)(BlkClosureCareful *this, HeapWord *);
};

/* 5541 */
struct __cppobj SweepClosure : BlkClosureCareful
{
  CMSCollector *_collector;
  ConcurrentMarkSweepGeneration *_g;
  CompactibleFreeListSpace *_sp;
  HeapWord *_limit;
  Mutex *_freelistLock;
  CMSBitMap *_bitMap;
  bool _inFreeRange;
  bool _freeRangeInFreeLists;
  bool _lastFreeRangeCoalesced;
  bool _yield;
  HeapWord *_freeFinger;
  unsigned int _freeRangeSize;
};

/* 5542 */
struct /*VFT*/ CMSDrainMarkingStackClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 5543 */
struct __cppobj __declspec(align(4)) CMSDrainMarkingStackClosure : VoidClosure
{
  CMSCollector *_collector;
  MemRegion _span;
  CMSMarkStack *_mark_stack;
  CMSBitMap *_bit_map;
  CMSKeepAliveClosure *_keep_alive;
  bool _concurrent_precleaning;
};

/* 5544 */
struct __cppobj DerivedPointerTableDeactivate : StackObj
{
  bool _active;
};

/* 5545 */
struct __cppobj __declspec(align(4)) ReferenceProcessorMTProcMutator : StackObj
{
  ReferenceProcessor *_rp;
  bool _saved_mt;
};

/* 5546 */
struct __cppobj __declspec(align(4)) ReferenceProcessorAtomicMutator : StackObj
{
  ReferenceProcessor *_rp;
  bool _saved_atomic_discovery;
};

/* 5547 */
struct /*VFT*/ BlkPrintingClosure_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
};

/* 5548 */
struct __cppobj BlkPrintingClosure : BlkClosure
{
  const CMSCollector *_collector;
  const CompactibleFreeListSpace *_sp;
  const CMSBitMap *_live_bit_map;
  const bool _post_remark;
  outputStream *_st;
};

/* 5549 */
struct __cppobj Filtering_DCTOC : DirtyCardToOopClosure
{
};

/* 5550 */
struct /*VFT*/ Filtering_DCTOC_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
  HeapWord *(__thiscall *get_actual_top)(DirtyCardToOopClosure *this, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region)(DirtyCardToOopClosure *this, MemRegion, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, FilteringClosure *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, ExtendedOopClosure *);
};

/* 5551 */
struct /*VFT*/ FreeListSpace_DCTOC_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
  HeapWord *(__thiscall *get_actual_top)(DirtyCardToOopClosure *this, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region)(DirtyCardToOopClosure *this, MemRegion, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, FilteringClosure *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, ExtendedOopClosure *);
};

/* 5552 */
struct __cppobj FreeListSpace_DCTOC : Filtering_DCTOC
{
  CompactibleFreeListSpace *_cfls;
  CMSCollector *_collector;
};

/* 5553 */
struct /*VFT*/ VerifyAllBlksClosure_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
};

/* 5554 */
struct __cppobj __declspec(align(4)) VerifyAllBlksClosure : BlkClosure
{
  const CompactibleFreeListSpace *_sp;
  const MemRegion _span;
  HeapWord *_last_addr;
  unsigned int _last_size;
  bool _last_was_obj;
  bool _last_was_live;
};

/* 5555 */
struct /*VFT*/ VerifyAllOopsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5556 */
struct __cppobj VerifyAllOopsClosure : OopClosure
{
  const CMSCollector *_collector;
  const CompactibleFreeListSpace *_sp;
  const MemRegion _span;
  const bool _past_remark;
  const CMSBitMap *_bit_map;
};

/* 5557 */
struct __cppobj ShenandoahAdaptiveHeuristics : ShenandoahHeuristics
{
};

/* 5558 */
struct /*VFT*/ ShenandoahAdaptiveHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 5559 */
struct __cppobj ShenandoahAggressiveHeuristics : ShenandoahHeuristics
{
};

/* 5560 */
struct /*VFT*/ ShenandoahAggressiveHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 5561 */
struct __cppobj ShenandoahCompactHeuristics : ShenandoahHeuristics
{
};

/* 5562 */
struct /*VFT*/ ShenandoahCompactHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 5563 */
struct __cppobj ShenandoahStaticHeuristics : ShenandoahHeuristics
{
};

/* 5564 */
struct /*VFT*/ ShenandoahStaticHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 5565 */
struct __cppobj ShenandoahPassiveHeuristics : ShenandoahHeuristics
{
};

/* 5566 */
struct /*VFT*/ ShenandoahPassiveHeuristics_vtbl
{
  void (__thiscall *choose_collection_set_from_regiondata)(ShenandoahHeuristics *this, ShenandoahCollectionSet *, ShenandoahHeuristics::RegionData *, unsigned int, unsigned int);
  void (__thiscall *~ShenandoahHeuristics)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_start)(ShenandoahHeuristics *this);
  void (__thiscall *record_cycle_end)(ShenandoahHeuristics *this);
  bool (__thiscall *should_start_gc)(ShenandoahHeuristics *this);
  bool (__thiscall *should_degenerate_cycle)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_concurrent)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_degenerated)(ShenandoahHeuristics *this);
  void (__thiscall *record_success_full)(ShenandoahHeuristics *this);
  void (__thiscall *record_allocation_failure_gc)(ShenandoahHeuristics *this);
  void (__thiscall *record_requested_gc)(ShenandoahHeuristics *this);
  void (__thiscall *start_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *end_choose_collection_set)(ShenandoahHeuristics *this);
  void (__thiscall *choose_collection_set)(ShenandoahHeuristics *this, ShenandoahCollectionSet *);
  bool (__thiscall *can_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *should_process_references)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes)(ShenandoahHeuristics *this);
  bool (__thiscall *can_unload_classes_normal)(ShenandoahHeuristics *this);
  bool (__thiscall *should_unload_classes)(ShenandoahHeuristics *this);
  const char *(__thiscall *name)(ShenandoahHeuristics *this);
  bool (__thiscall *is_diagnostic)(ShenandoahHeuristics *this);
  bool (__thiscall *is_experimental)(ShenandoahHeuristics *this);
  void (__thiscall *initialize)(ShenandoahHeuristics *this);
};

/* 5567 */
struct __cppobj QuickSort : AllStatic
{
};

/* 5568 */
struct __cppobj WhiteBox : AllStatic
{
};

/* 5569 */
struct __cppobj GrowableArray<char *> : GenericGrowableArray
{
  char **_data;
};

/* 5570 */
struct __cppobj StringArrayArgument : CHeapObj<7>
{
  GrowableArray<char *> *_array;
};

/* 5571 */
struct __cppobj __declspec(align(2)) GenDCmdArgument : ResourceObj
{
  GenDCmdArgument_vtbl *__vftable /*VFT*/;
  GenDCmdArgument *_next;
  const char *_name;
  const char *_description;
  const char *_type;
  const char *_default_string;
  bool _is_set;
  bool _is_mandatory;
  bool _allow_multiple;
};

/* 5572 */
struct /*VFT*/ GenDCmdArgument_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5573 */
struct __declspec(align(8)) MemorySizeArgument
{
  unsigned __int64 _size;
  unsigned __int64 _val;
  char _multiplier;
};

/* 5574 */
struct __declspec(align(8)) NanoTimeArgument
{
  __int64 _nanotime;
  __int64 _time;
  char _unit[3];
};

/* 5575 */
struct __cppobj CmdLine : StackObj
{
  const char *_cmd;
  unsigned int _cmd_len;
  const char *_args;
  unsigned int _args_len;
};

/* 5576 */
struct __cppobj DCmdIter : StackObj
{
  const char *_str;
  char _delim;
  unsigned int _len;
  unsigned int _cursor;
};

/* 5577 */
struct __cppobj __declspec(align(4)) DCmdArgIter : ResourceObj
{
  const char *_buffer;
  unsigned int _len;
  unsigned int _cursor;
  const char *_key_addr;
  unsigned int _key_len;
  const char *_value_addr;
  unsigned int _value_len;
  char _delim;
};

/* 5578 */
struct JavaPermission
{
  const char *_class;
  const char *_name;
  const char *_action;
};

/* 5579 */
struct __cppobj __declspec(align(4)) DCmdInfo : ResourceObj
{
  const char *_name;
  const char *_description;
  const char *_impact;
  JavaPermission _permission;
  int _num_arguments;
  bool _is_enabled;
};

/* 5580 */
struct __cppobj DCmdArgumentInfo : ResourceObj
{
  const char *_name;
  const char *_description;
  const char *_type;
  const char *_default_string;
  bool _mandatory;
  bool _option;
  bool _multiple;
  int _position;
};

/* 5581 */
struct __cppobj __declspec(align(4)) DCmdParser
{
  GenDCmdArgument *_options;
  GenDCmdArgument *_arguments_list;
  char _delim;
};

/* 5582 */
struct __cppobj GrowableArray<char const *> : GenericGrowableArray
{
  const char **_data;
};

/* 5583 */
struct __cppobj GrowableArray<DCmdArgumentInfo *> : GenericGrowableArray
{
  DCmdArgumentInfo **_data;
};

/* 5584 */
struct __cppobj __declspec(align(4)) DCmd : ResourceObj
{
  DCmd_vtbl *__vftable /*VFT*/;
  outputStream *_output;
  bool _is_heap_allocated;
};

/* 5585 */
struct /*VFT*/ DCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 5586 */
struct /*VFT*/ DCmdWithParser_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 5587 */
struct __cppobj DCmdWithParser : DCmd
{
  DCmdParser _dcmdparser;
};

/* 5588 */
struct __cppobj DCmdMark : StackObj
{
  DCmd *_ref;
};

/* 5589 */
struct __cppobj DCmdFactory : CHeapObj<7>
{
  DCmdFactory_vtbl *__vftable /*VFT*/;
  DCmdFactory *_next;
  bool _enabled;
  bool _hidden;
  unsigned int _export_flags;
  int _num_arguments;
};

/* 5590 */
struct /*VFT*/ DCmdFactory_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 5591 */
struct __cppobj GrowableArray<DCmdInfo *> : GenericGrowableArray
{
  DCmdInfo **_data;
};

/* 5592 */
struct /*VFT*/ DCmdArgument<char *>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5593 */
struct __cppobj DCmdArgument<char *> : GenDCmdArgument
{
  char *_value;
};

/* 5594 */
struct /*VFT*/ DCmdArgument<NanoTimeArgument>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5595 */
struct __cppobj DCmdArgument<NanoTimeArgument> : GenDCmdArgument
{
  NanoTimeArgument _value;
};

/* 5596 */
struct /*VFT*/ DCmdArgument<__int64>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5597 */
struct __cppobj DCmdArgument<__int64> : GenDCmdArgument
{
  __int64 _value;
};

/* 5598 */
struct /*VFT*/ DCmdArgument<bool>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5599 */
struct __cppobj __declspec(align(4)) DCmdArgument<bool> : GenDCmdArgument
{
  bool _value;
};

/* 5600 */
struct /*VFT*/ DCmdArgument<MemorySizeArgument>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5601 */
struct __cppobj DCmdArgument<MemorySizeArgument> : GenDCmdArgument
{
  MemorySizeArgument _value;
};

/* 5602 */
struct /*VFT*/ DCmdArgument<StringArrayArgument *>_vtbl
{
  void (__thiscall *parse_value)(GenDCmdArgument *this, const char *, unsigned int, Thread *);
  void (__thiscall *init_value)(GenDCmdArgument *this, Thread *);
  void (__thiscall *reset)(GenDCmdArgument *this, Thread *);
  void (__thiscall *cleanup)(GenDCmdArgument *this);
  void (__thiscall *value_as_str)(GenDCmdArgument *this, char *, unsigned int);
};

/* 5603 */
struct __cppobj DCmdArgument<StringArrayArgument *> : GenDCmdArgument
{
  StringArrayArgument *_value;
};

/* 5604 */
struct __cppobj WeakPreserveExceptionMark
{
  Thread *_thread;
  Handle _preserved_exception_oop;
  int _preserved_exception_line;
  const char *_preserved_exception_file;
};

/* 5605 */
struct __cppobj JvmtiEventController : AllStatic
{
};

/* 5606 */
struct __cppobj JvmtiFramePop : _ValueObj
{
  int _frame_number;
};

/* 5607 */
struct __cppobj GrowableArray<_jvmtiMonitorStackDepthInfo *> : GenericGrowableArray
{
  _jvmtiMonitorStackDepthInfo **_data;
};

/* 5608 */
struct __cppobj RedefineVerifyMark : StackObj
{
  JvmtiThreadState *_state;
  KlassHandle _scratch_class;
  Handle _scratch_mirror;
};

/* 5609 */
struct __cppobj JvmtiEnvIterator : StackObj
{
  bool _entry_was_marked;
};

/* 5610 */
struct __cppobj VM_GetOwnedMonitorInfo : VM_Operation
{
  JvmtiEnv *_env;
  JavaThread *_calling_thread;
  JavaThread *_java_thread;
  jvmtiError _result;
  GrowableArray<_jvmtiMonitorStackDepthInfo *> *_owned_monitors_list;
};

/* 5611 */
struct /*VFT*/ VM_GetOwnedMonitorInfo_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5612 */
struct __cppobj VM_GetObjectMonitorUsage : VM_Operation
{
  JvmtiEnv *_env;
  _jobject *_object;
  JavaThread *_calling_thread;
  _jvmtiMonitorUsage *_info_ptr;
  jvmtiError _result;
};

/* 5613 */
struct /*VFT*/ VM_GetObjectMonitorUsage_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5614 */
struct __cppobj VM_GetCurrentContendedMonitor : VM_Operation
{
  JvmtiEnv *_env;
  JavaThread *_calling_thread;
  JavaThread *_java_thread;
  _jobject **_owned_monitor_ptr;
  jvmtiError _result;
};

/* 5615 */
struct /*VFT*/ VM_GetCurrentContendedMonitor_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5616 */
struct __cppobj VM_GetStackTrace : VM_Operation
{
  JvmtiEnv *_env;
  JavaThread *_java_thread;
  int _start_depth;
  int _max_count;
  _jvmtiFrameInfo *_frame_buffer;
  int *_count_ptr;
  jvmtiError _result;
};

/* 5617 */
struct /*VFT*/ VM_GetStackTrace_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5618 */
struct StackInfoNode
{
  StackInfoNode *next;
  _jvmtiStackInfo info;
};

/* 5619 */
struct __cppobj VM_GetMultipleStackTraces : VM_Operation
{
  JvmtiEnv *_env;
  int _max_frame_count;
  _jvmtiStackInfo *_stack_info;
  jvmtiError _result;
  int _frame_count_total;
  StackInfoNode *_head;
};

/* 5620 */
struct /*VFT*/ VM_GetMultipleStackTraces_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5621 */
struct __cppobj VM_GetAllStackTraces : VM_GetMultipleStackTraces
{
  JavaThread *_calling_thread;
  int _final_thread_count;
};

/* 5622 */
struct /*VFT*/ VM_GetAllStackTraces_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5623 */
struct __cppobj VM_GetThreadListStackTraces : VM_GetMultipleStackTraces
{
  int _thread_count;
  _jobject *const *_thread_list;
};

/* 5624 */
struct /*VFT*/ VM_GetThreadListStackTraces_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5625 */
struct __cppobj VM_GetFrameCount : VM_Operation
{
  JvmtiEnv *_env;
  JvmtiThreadState *_state;
  int *_count_ptr;
  jvmtiError _result;
};

/* 5626 */
struct /*VFT*/ VM_GetFrameCount_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5627 */
struct __cppobj VM_GetFrameLocation : VM_Operation
{
  JvmtiEnv *_env;
  JavaThread *_java_thread;
  int _depth;
  struct _jmethodID **_method_ptr;
  __int64 *_location_ptr;
  jvmtiError _result;
};

/* 5628 */
struct /*VFT*/ VM_GetFrameLocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5629 */
struct __cppobj MonitorClosure : StackObj
{
  MonitorClosure_vtbl *__vftable /*VFT*/;
};

/* 5630 */
struct /*VFT*/ MonitorClosure_vtbl
{
  void (__thiscall *do_monitor)(MonitorClosure *this, ObjectMonitor *);
};

/* 5631 */
struct /*VFT*/ JvmtiMonitorClosure_vtbl
{
  void (__thiscall *do_monitor)(MonitorClosure *this, ObjectMonitor *);
};

/* 5632 */
struct __cppobj JvmtiMonitorClosure : MonitorClosure
{
  JavaThread *_java_thread;
  JavaThread *_calling_thread;
  GrowableArray<_jvmtiMonitorStackDepthInfo *> *_owned_monitors_list;
  jvmtiError _error;
  JvmtiEnvBase *_env;
};

/* 5633 */
struct __cppobj JvmtiUtil : AllStatic
{
};

/* 5634 */
struct __cppobj SafeResourceMark : ResourceMark
{
};

/* 5635 */
struct __cppobj JvmtiTrace : AllStatic
{
};

/* 5636 */
struct __cppobj GrowableElement : CHeapObj<7>
{
  GrowableElement_vtbl *__vftable /*VFT*/;
};

/* 5637 */
struct /*VFT*/ GrowableElement_vtbl
{
  unsigned __int8 *(__thiscall *getCacheValue)(GrowableElement *this);
  bool (__thiscall *equals)(GrowableElement *this, GrowableElement *);
  bool (__thiscall *lessThan)(GrowableElement *this, GrowableElement *);
  GrowableElement *(__thiscall *clone)(GrowableElement *this);
  void (__thiscall *oops_do)(GrowableElement *this, OopClosure *);
  void (__thiscall *metadata_do)(GrowableElement *this, void (__cdecl *)(Metadata *));
};

/* 5638 */
struct __cppobj GrowableArray<GrowableElement *> : GenericGrowableArray
{
  GrowableElement **_data;
};

/* 5639 */
struct __cppobj GrowableCache : _ValueObj
{
  void *_this_obj;
  GrowableArray<GrowableElement *> *_elements;
  unsigned __int8 **_cache;
  void (__cdecl *_listener_fun)(void *, unsigned __int8 **);
};

/* 5640 */
struct __cppobj JvmtiBreakpointCache : CHeapObj<7>
{
  GrowableCache _cache;
};

/* 5641 */
struct /*VFT*/ JvmtiBreakpoint_vtbl
{
  unsigned __int8 *(__thiscall *getCacheValue)(GrowableElement *this);
  bool (__thiscall *equals)(GrowableElement *this, GrowableElement *);
  bool (__thiscall *lessThan)(GrowableElement *this, GrowableElement *);
  GrowableElement *(__thiscall *clone)(GrowableElement *this);
  void (__thiscall *oops_do)(GrowableElement *this, OopClosure *);
  void (__thiscall *metadata_do)(GrowableElement *this, void (__cdecl *)(Metadata *));
};

/* 5642 */
struct __cppobj JvmtiBreakpoint : GrowableElement
{
  Method *_method;
  int _bci;
  Bytecodes::Code _orig_bytecode;
  oopDesc *_class_holder;
};

/* 5643 */
struct __cppobj JvmtiBreakpoints : CHeapObj<7>
{
  JvmtiBreakpointCache _bps;
};

/* 5644 */
struct __cppobj JvmtiCurrentBreakpoints : AllStatic
{
};

/* 5645 */
struct __cppobj VM_ChangeBreakpoints : VM_Operation
{
  JvmtiBreakpoints *_breakpoints;
  int _operation;
  JvmtiBreakpoint *_bp;
};

/* 5646 */
struct /*VFT*/ VM_ChangeBreakpoints_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5647 */
struct __cppobj __declspec(align(8)) VM_GetOrSetLocal : VM_Operation
{
  JavaThread *_thread;
  JavaThread *_calling_thread;
  int _depth;
  int _index;
  BasicType _type;
  jvalue _value;
  javaVFrame *_jvf;
  bool _set;
  jvmtiError _result;
};

/* 5648 */
struct /*VFT*/ VM_GetOrSetLocal_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *getting_receiver)(VM_GetOrSetLocal *this);
};

/* 5649 */
struct __cppobj VM_GetReceiver : VM_GetOrSetLocal
{
};

/* 5650 */
struct /*VFT*/ VM_GetReceiver_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *getting_receiver)(VM_GetOrSetLocal *this);
};

/* 5651 */
struct JvmtiDeferredEvent::<unnamed_type__event_data>::<unnamed_type_compiled_method_unload>
{
  nmethod *nm;
  struct _jmethodID *method_id;
  const void *code_begin;
};

/* 5652 */
struct JvmtiDeferredEvent::<unnamed_type__event_data>::<unnamed_type_dynamic_code_generated>
{
  const char *name;
  const void *code_begin;
  const void *code_end;
};

/* 5653 */
union JvmtiDeferredEvent::<unnamed_type__event_data>
{
  nmethod *compiled_method_load;
  JvmtiDeferredEvent::<unnamed_type__event_data>::<unnamed_type_compiled_method_unload> compiled_method_unload;
  JvmtiDeferredEvent::<unnamed_type__event_data>::<unnamed_type_dynamic_code_generated> dynamic_code_generated;
};

/* 5654 */
struct __cppobj JvmtiDeferredEvent : _ValueObj
{
  JvmtiDeferredEvent::Type _type;
  JvmtiDeferredEvent::<unnamed_type__event_data> _event_data;
};

/* 5655 */
struct __cppobj JvmtiDeferredEventQueue::QueueNode : CHeapObj<7>
{
  JvmtiDeferredEvent _event;
  JvmtiDeferredEventQueue::QueueNode *_next;
};

/* 5656 */
struct __cppobj JvmtiDeferredEventQueue : AllStatic
{
};

/* 5657 */
struct __cppobj JvmtiRawMonitor : ObjectMonitor
{
  int _magic;
  char *_name;
};

/* 5658 */
struct __cppobj GrowableArray<JvmtiRawMonitor *> : GenericGrowableArray
{
  JvmtiRawMonitor **_data;
};

/* 5659 */
struct __cppobj JvmtiPendingMonitors : AllStatic
{
};

/* 5660 */
struct __cppobj CautiouslyPreserveExceptionMark
{
  Thread *_thread;
  Handle _preserved_exception_oop;
  int _preserved_exception_line;
  const char *_preserved_exception_file;
};

/* 5661 */
struct _LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 5662 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  unsigned int Attributes;
};

/* 5663 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};

/* 5664 */
union tagCY
{
  $983F061E0B702DD8AE0B4B955735A6A3 __s0;
  __int64 int64;
};

/* 5665 */
const struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 5666 */
struct __cppobj IUnknown
{
  IUnknown_vtbl *__vftable /*VFT*/;
};

/* 10530 */
typedef int HRESULT;

/* 5667 */
struct /*VFT*/ IUnknown_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 5668 */
struct __cppobj IDispatch : IUnknown
{
};

/* 5672 */
union $D6BCBE4FB015021FA1403A648261A171
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  unsigned int hreftype;
};

/* 5669 */
struct __declspec(align(4)) tagTYPEDESC
{
  $D6BCBE4FB015021FA1403A648261A171 ___u0;
  unsigned __int16 vt;
};

/* 5670 */
struct tagSAFEARRAYBOUND
{
  unsigned int cElements;
  int lLbound;
};

/* 5671 */
struct __unaligned __declspec(align(4)) tagARRAYDESC
{
  tagTYPEDESC tdescElem;
  unsigned __int16 cDims;
  __declspec(align(4)) tagSAFEARRAYBOUND rgbounds[1];
};

/* 5673 */
struct __declspec(align(4)) tagIDLDESC
{
  unsigned int dwReserved;
  unsigned __int16 wIDLFlags;
};

/* 10138 */
typedef unsigned __int16 wchar_t;

/* 5674 */
struct tagTYPEATTR
{
  _GUID guid;
  unsigned int lcid;
  unsigned int dwReserved;
  int memidConstructor;
  int memidDestructor;
  wchar_t *lpstrSchema;
  unsigned int cbSizeInstance;
  tagTYPEKIND typekind;
  unsigned __int16 cFuncs;
  unsigned __int16 cVars;
  unsigned __int16 cImplTypes;
  unsigned __int16 cbSizeVft;
  unsigned __int16 cbAlignment;
  unsigned __int16 wTypeFlags;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  tagTYPEDESC tdescAlias;
  tagIDLDESC idldescType;
};

/* 5675 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 5700 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  __int64 llVal;
};

/* 5693 */
struct $12FD4DC4C84824403B0456BCD8AF73C8
{
  unsigned __int8 scale;
  unsigned __int8 sign;
};

/* 5694 */
union $C12E5C2C6E114914F43D666BEC2B9673
{
  $12FD4DC4C84824403B0456BCD8AF73C8 __s0;
  unsigned __int16 signscale;
};

/* 5695 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
  unsigned int Lo32;
  unsigned int Mid32;
};

/* 5696 */
union $177C41A247A8E21484A30E4C2FC651FA
{
  $A04CD8C0331024E133CCEC4B0AB36956 __s0;
  unsigned __int64 Lo64;
};

/* 5697 */
struct tagDEC
{
  unsigned __int16 wReserved;
  $C12E5C2C6E114914F43D666BEC2B9673 ___u1;
  unsigned int Hi32;
  $177C41A247A8E21484A30E4C2FC651FA ___u3;
};

/* 5701 */
struct $BAFF477F3E247329051BD172607E995B
{
  _BYTE gap0[8];
  int lVal;
  IRecordInfo *pRecInfo;
};

/* 5702 */
struct $20D69447C97B677619C52B2E27D3FF49
{
  _BYTE gap0[8];
  unsigned __int8 bVal;
};

/* 5703 */
struct $31126B8528A05AF3606C6D495FD178E8
{
  _BYTE gap0[8];
  __int16 iVal;
};

/* 5704 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
  _BYTE gap0[8];
  float fltVal;
};

/* 5705 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
  _BYTE gap0[8];
  long double dblVal;
};

/* 5706 */
struct $6DB36323059316E675433BB10D285009
{
  _BYTE gap0[8];
  __int16 boolVal;
};

/* 5707 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
  _BYTE gap0[8];
  int scode;
};

/* 5708 */
struct $3A04CD2956E8214F4EDF41A063DD12A0
{
  _BYTE gap0[8];
  tagCY cyVal;
};

/* 5709 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
  _BYTE gap0[8];
  long double date;
};

/* 5710 */
struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
{
  _BYTE gap0[8];
  wchar_t *bstrVal;
};

/* 5711 */
struct $250DDD72E86D0B643954900723D3D9BE
{
  _BYTE gap0[8];
  IUnknown *punkVal;
};

/* 5712 */
struct $243018D6B30527D1B8D63C77FF15FE12
{
  _BYTE gap0[8];
  IDispatch *pdispVal;
};

/* 5713 */
struct $12A24554B0B656939A175EB5DF70E10C
{
  _BYTE gap0[8];
  tagSAFEARRAY *parray;
};

/* 5714 */
struct $CEB26E30A72A699742605DB617405969
{
  _BYTE gap0[8];
  unsigned __int8 *pbVal;
};

/* 5715 */
struct $76732A64405C0E287FCB302687644550
{
  _BYTE gap0[8];
  __int16 *piVal;
};

/* 5716 */
struct $E5FC128E66C26C95254032BA69D36E74
{
  _BYTE gap0[8];
  int *plVal;
};

/* 5717 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
  _BYTE gap0[8];
  __int64 *pllVal;
};

/* 5718 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
  _BYTE gap0[8];
  float *pfltVal;
};

/* 5719 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
  _BYTE gap0[8];
  long double *pdblVal;
};

/* 5720 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
  _BYTE gap0[8];
  __int16 *pboolVal;
};

/* 5721 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
  _BYTE gap0[8];
  int *pscode;
};

/* 5722 */
struct $DACB64E813C2CA89547468E3DD73B42F
{
  _BYTE gap0[8];
  tagCY *pcyVal;
};

/* 5723 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
  _BYTE gap0[8];
  long double *pdate;
};

/* 5724 */
struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
{
  _BYTE gap0[8];
  wchar_t **pbstrVal;
};

/* 5725 */
struct $628A75E49229B044C36F1D75047E4923
{
  _BYTE gap0[8];
  IUnknown **ppunkVal;
};

/* 5726 */
struct $3D5ED13C4A823C642DABFFE4145E292E
{
  _BYTE gap0[8];
  IDispatch **ppdispVal;
};

/* 5727 */
struct $B0D3223A9B2A61968D5ACBAD835CCDE4
{
  _BYTE gap0[8];
  tagSAFEARRAY **pparray;
};

/* 5728 */
struct $8B32BF1FD79E446506E46D77380DEEF2
{
  _BYTE gap0[8];
  tagVARIANT *pvarVal;
};

/* 5729 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
  _BYTE gap0[8];
  void *byref;
};

/* 5730 */
struct $E898A5260D8380431CCAA47FCC291563
{
  _BYTE gap0[8];
  char cVal;
};

/* 5731 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
  _BYTE gap0[8];
  unsigned __int16 uiVal;
};

/* 5732 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
  _BYTE gap0[8];
  unsigned int ulVal;
};

/* 5733 */
struct $EA00B0D50EAA1933F67C45009B664198
{
  _BYTE gap0[8];
  unsigned __int64 ullVal;
};

/* 5734 */
struct $5CA90CF57237397281FB12BFD52C1905
{
  _BYTE gap0[8];
  int intVal;
};

/* 5735 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
  _BYTE gap0[8];
  unsigned int uintVal;
};

/* 5736 */
struct $FDC3F1AC1BA9B01622E087090791D816
{
  _BYTE gap0[8];
  tagDEC *pdecVal;
};

/* 5737 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
  _BYTE gap0[8];
  char *pcVal;
};

/* 5738 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
  _BYTE gap0[8];
  unsigned __int16 *puiVal;
};

/* 5739 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
  _BYTE gap0[8];
  unsigned int *pulVal;
};

/* 5740 */
struct $ADBB94A21537A8461C6168A5B871A740
{
  _BYTE gap0[8];
  unsigned __int64 *pullVal;
};

/* 5741 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
  _BYTE gap0[8];
  int *pintVal;
};

/* 5742 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
  _BYTE gap0[8];
  unsigned int *puintVal;
};

/* 5743 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
  _BYTE gap0[8];
  void *pvRecord;
};

/* 5744 */
union $43BDAFD0C2A7F53FCB369F2E449093E0
{
  $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
  tagDEC decVal;
  $BAFF477F3E247329051BD172607E995B __s2;
  $20D69447C97B677619C52B2E27D3FF49 __s3;
  $31126B8528A05AF3606C6D495FD178E8 __s4;
  $50230A970D9734D4E9774CFC619DF0F6 __s5;
  $4C0EC2258454B893CE739DAE89D8DB7B __s6;
  $6DB36323059316E675433BB10D285009 __s7;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
  $3A04CD2956E8214F4EDF41A063DD12A0 __s9;
  $E94952165EEA9EEA990FEB33603E1B19 __s10;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
  $250DDD72E86D0B643954900723D3D9BE __s12;
  $243018D6B30527D1B8D63C77FF15FE12 __s13;
  $12A24554B0B656939A175EB5DF70E10C __s14;
  $CEB26E30A72A699742605DB617405969 __s15;
  $76732A64405C0E287FCB302687644550 __s16;
  $E5FC128E66C26C95254032BA69D36E74 __s17;
  $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
  $2CABE618CF1C2625A4479554E4967E0A __s20;
  $AAA92DA1D6E1B0E8462F69216B62027C __s21;
  $F7167AE7A8ABA03C094C204FB1564A28 __s22;
  $DACB64E813C2CA89547468E3DD73B42F __s23;
  $6857AE69DB7C952EEFD665431A7B503A __s24;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
  $628A75E49229B044C36F1D75047E4923 __s26;
  $3D5ED13C4A823C642DABFFE4145E292E __s27;
  $B0D3223A9B2A61968D5ACBAD835CCDE4 __s28;
  $8B32BF1FD79E446506E46D77380DEEF2 __s29;
  $6C39A09D97B880131B2C5BB4943CBB45 __s30;
  $E898A5260D8380431CCAA47FCC291563 __s31;
  $48802A31D3D0701BC13CEF9CEA041E7B __s32;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
  $EA00B0D50EAA1933F67C45009B664198 __s34;
  $5CA90CF57237397281FB12BFD52C1905 __s35;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
  $FDC3F1AC1BA9B01622E087090791D816 __s37;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
  $ADBB94A21537A8461C6168A5B871A740 __s41;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
  $2516E53E690D8CC5659AAB7EDC49E664 __s43;
  $17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 5681 */
struct tagVARIANT
{
  $43BDAFD0C2A7F53FCB369F2E449093E0 ___u0;
};

/* 5676 */
struct tagPARAMDESCEX
{
  unsigned int cBytes;
  tagVARIANT varDefaultValue;
};

/* 5677 */
struct __declspec(align(4)) tagPARAMDESC
{
  tagPARAMDESCEX *pparamdescex;
  unsigned __int16 wParamFlags;
};

/* 5678 */
union $DF94F234B5A968199AFB5CD522F3D79E
{
  tagIDLDESC idldesc;
  tagPARAMDESC paramdesc;
};

/* 5679 */
struct tagELEMDESC
{
  tagTYPEDESC tdesc;
  $DF94F234B5A968199AFB5CD522F3D79E ___u1;
};

/* 5680 */
struct __declspec(align(4)) tagFUNCDESC
{
  int memid;
  int *lprgscode;
  tagELEMDESC *lprgelemdescParam;
  tagFUNCKIND funckind;
  tagINVOKEKIND invkind;
  tagCALLCONV callconv;
  __int16 cParams;
  __int16 cParamsOpt;
  __int16 oVft;
  __int16 cScodes;
  tagELEMDESC elemdescFunc;
  unsigned __int16 wFuncFlags;
};

/* 5682 */
union $22E5F8E78938813DBBA5307EE0518442
{
  unsigned int oInst;
  tagVARIANT *lpvarValue;
};

/* 5683 */
struct tagVARDESC
{
  int memid;
  wchar_t *lpstrSchema;
  $22E5F8E78938813DBBA5307EE0518442 ___u2;
  tagELEMDESC elemdescVar;
  unsigned __int16 wVarFlags;
  tagVARKIND varkind;
};

/* 5684 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 5685 */
union tagBINDPTR
{
  tagFUNCDESC *lpfuncdesc;
  tagVARDESC *lpvardesc;
  ITypeComp *lptcomp;
};

/* 5686 */
struct /*VFT*/ ITypeComp_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Bind)(ITypeComp *this, wchar_t *, unsigned int, unsigned __int16, ITypeInfo **, tagDESCKIND *, tagBINDPTR *);
  HRESULT (__stdcall *BindType)(ITypeComp *this, wchar_t *, unsigned int, ITypeInfo **, ITypeComp **);
};

/* 5687 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 5688 */
struct __declspec(align(4)) tagTLIBATTR
{
  _GUID guid;
  unsigned int lcid;
  tagSYSKIND syskind;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  unsigned __int16 wLibFlags;
};

/* 5689 */
struct /*VFT*/ ITypeLib_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *GetTypeInfoCount)(ITypeLib *this);
  HRESULT (__stdcall *GetTypeInfo)(ITypeLib *this, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *this, unsigned int, tagTYPEKIND *);
  HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *this, const _GUID *, ITypeInfo **);
  HRESULT (__stdcall *GetLibAttr)(ITypeLib *this, tagTLIBATTR **);
  HRESULT (__stdcall *GetTypeComp)(ITypeLib *this, ITypeComp **);
  HRESULT (__stdcall *GetDocumentation)(ITypeLib *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *IsName)(ITypeLib *this, wchar_t *, unsigned int, int *);
  HRESULT (__stdcall *FindName)(ITypeLib *this, wchar_t *, unsigned int, ITypeInfo **, int *, unsigned __int16 *);
  void (__stdcall *ReleaseTLibAttr)(ITypeLib *this, tagTLIBATTR *);
};

/* 5690 */
struct /*VFT*/ ITypeInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *this, tagTYPEATTR **);
  HRESULT (__stdcall *GetTypeComp)(ITypeInfo *this, ITypeComp **);
  HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *this, unsigned int, tagFUNCDESC **);
  HRESULT (__stdcall *GetVarDesc)(ITypeInfo *this, unsigned int, tagVARDESC **);
  HRESULT (__stdcall *GetNames)(ITypeInfo *this, int, wchar_t **, unsigned int, unsigned int *);
  HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *this, unsigned int, unsigned int *);
  HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *this, unsigned int, int *);
  HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *this, wchar_t **, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *GetDocumentation)(ITypeInfo *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *GetDllEntry)(ITypeInfo *this, int, tagINVOKEKIND, wchar_t **, wchar_t **, unsigned __int16 *);
  HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *this, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *AddressOfMember)(ITypeInfo *this, int, tagINVOKEKIND, void **);
  HRESULT (__stdcall *CreateInstance)(ITypeInfo *this, IUnknown *, const _GUID *, void **);
  HRESULT (__stdcall *GetMops)(ITypeInfo *this, int, wchar_t **);
  HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *this, ITypeLib **, unsigned int *);
  void (__stdcall *ReleaseTypeAttr)(ITypeInfo *this, tagTYPEATTR *);
  void (__stdcall *ReleaseFuncDesc)(ITypeInfo *this, tagFUNCDESC *);
  void (__stdcall *ReleaseVarDesc)(ITypeInfo *this, tagVARDESC *);
};

/* 5691 */
struct /*VFT*/ IDispatch_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
};

/* 5692 */
struct tagSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  void *pvData;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 5698 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 5699 */
struct /*VFT*/ IRecordInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *RecordInit)(IRecordInfo *this, void *);
  HRESULT (__stdcall *RecordClear)(IRecordInfo *this, void *);
  HRESULT (__stdcall *RecordCopy)(IRecordInfo *this, void *, void *);
  HRESULT (__stdcall *GetGuid)(IRecordInfo *this, _GUID *);
  HRESULT (__stdcall *GetName)(IRecordInfo *this, wchar_t **);
  HRESULT (__stdcall *GetSize)(IRecordInfo *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *this, ITypeInfo **);
  HRESULT (__stdcall *GetField)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *, void **);
  HRESULT (__stdcall *PutField)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *GetFieldNames)(IRecordInfo *this, unsigned int *, wchar_t **);
  int (__stdcall *IsMatchingType)(IRecordInfo *this, IRecordInfo *);
  void *(__stdcall *RecordCreate)(IRecordInfo *this);
  HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *this, void *, void **);
  HRESULT (__stdcall *RecordDestroy)(IRecordInfo *this, void *);
};

/* 5745 */
struct HINSTANCE__
{
  int unused;
};

/* 5746 */
struct tagMODULEENTRY32
{
  unsigned int dwSize;
  unsigned int th32ModuleID;
  unsigned int th32ProcessID;
  unsigned int GlblcntUsage;
  unsigned int ProccntUsage;
  unsigned __int8 *modBaseAddr;
  unsigned int modBaseSize;
  HINSTANCE__ *hModule;
  char szModule[256];
  char szExePath[260];
};

/* 5747 */
struct $409DFF2A380C4FFE2B587D0390AC124E
{
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wReserved;
};

/* 5748 */
union $E15052BC7FC7962A9B848E9356DB523B
{
  unsigned int dwOemId;
  $409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 5749 */
struct _SYSTEM_INFO
{
  $E15052BC7FC7962A9B848E9356DB523B ___u0;
  unsigned int dwPageSize;
  void *lpMinimumApplicationAddress;
  void *lpMaximumApplicationAddress;
  unsigned int dwActiveProcessorMask;
  unsigned int dwNumberOfProcessors;
  unsigned int dwProcessorType;
  unsigned int dwAllocationGranularity;
  unsigned __int16 wProcessorLevel;
  unsigned __int16 wProcessorRevision;
};

/* 5750 */
struct JavaVMOption
{
  char *optionString;
  void *extraInfo;
};

/* 5751 */
struct __declspec(align(4)) JavaVMInitArgs
{
  int version;
  int nOptions;
  JavaVMOption *options;
  unsigned __int8 ignoreUnrecognized;
};

/* 5752 */
struct _TOKEN_PRIVILEGES
{
  unsigned int PrivilegeCount;
  _LUID_AND_ATTRIBUTES Privileges[1];
};

/* 5753 */
struct WSAData
{
  unsigned __int16 wVersion;
  unsigned __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
};

/* 5754 */
struct _MODULEINFO
{
  void *lpBaseOfDll;
  unsigned int SizeOfImage;
  void *EntryPoint;
};

/* 5755 */
struct _FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  unsigned __int8 RegisterArea[80];
  unsigned int Cr0NpxState;
};

/* 5756 */
struct _IMAGE_FILE_HEADER
{
  unsigned __int16 Machine;
  unsigned __int16 NumberOfSections;
  unsigned int TimeDateStamp;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
  unsigned __int16 SizeOfOptionalHeader;
  unsigned __int16 Characteristics;
};

/* 5757 */
struct _IMAGE_DATA_DIRECTORY
{
  unsigned int VirtualAddress;
  unsigned int Size;
};

/* 5758 */
struct _IMAGE_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  unsigned __int8 MajorLinkerVersion;
  unsigned __int8 MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned int SizeOfStackReserve;
  unsigned int SizeOfStackCommit;
  unsigned int SizeOfHeapReserve;
  unsigned int SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 5759 */
struct _IMAGE_NT_HEADERS
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 5760 */
struct _FILETIME
{
  unsigned int dwLowDateTime;
  unsigned int dwHighDateTime;
};

/* 5761 */
struct __declspec(align(4)) _WIN32_FIND_DATAA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
};

/* 5762 */
struct tagEXCEPINFO
{
  unsigned __int16 wCode;
  unsigned __int16 wReserved;
  wchar_t *bstrSource;
  wchar_t *bstrDescription;
  wchar_t *bstrHelpFile;
  unsigned int dwHelpContext;
  void *pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  int scode;
};

/* 5763 */
struct $B950AFB169DC87688B328897744C612F
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 5764 */
union _ULARGE_INTEGER
{
  $B950AFB169DC87688B328897744C612F __s0;
  $B950AFB169DC87688B328897744C612F u;
  unsigned __int64 QuadPart;
};

/* 5765 */
struct tagSTATSTG
{
  wchar_t *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 5766 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 5767 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 5768 */
struct _s__RTTIBaseClassDescriptor2
{
  _TypeDescriptor *pTypeDescriptor;
  unsigned int numContainedBases;
  _PMD where;
  unsigned int attributes;
  const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 5769 */
const struct __unaligned __declspec(align(1)) _s__RTTIBaseClassArray
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
};

/* 5770 */
const struct _s__RTTIClassHierarchyDescriptor
{
  unsigned int signature;
  unsigned int attributes;
  unsigned int numBaseClasses;
  const _s__RTTIBaseClassArray *pBaseClassArray;
};

/* 5771 */
struct __cppobj MemoryCounter : _ValueObj
{
  unsigned int _count;
  unsigned int _size;
};

/* 5774 */
struct __cppobj instanceKlassHandle : KlassHandle
{
};

/* 5772 */
struct __cppobj KlassStream : _ValueObj
{
  KlassStream_vtbl *__vftable /*VFT*/;
  instanceKlassHandle _klass;
  instanceKlassHandle _base_klass;
  Array<Klass *> *_interfaces;
  int _interface_index;
  bool _local_only;
  bool _classes_only;
  bool _walk_defaults;
  bool _base_class_search_defaults;
  bool _defaults_checked;
  int _index;
};

/* 5773 */
struct /*VFT*/ KlassStream_vtbl
{
  int (__thiscall *length)(KlassStream *this);
  void (__thiscall *next)(KlassStream *this);
};

/* 5775 */
struct /*VFT*/ FieldStream_vtbl
{
  int (__thiscall *length)(KlassStream *this);
  void (__thiscall *next)(KlassStream *this);
};

/* 5776 */
struct __cppobj FieldStream : KlassStream
{
  fieldDescriptor _fd_buf;
};

/* 5777 */
struct _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>::<unnamed_type_s>
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 5778 */
union _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>
{
  unsigned int Flags;
  _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u>::<unnamed_type_s> s;
};

/* 5779 */
struct _TP_CALLBACK_ENVIRON_V1
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  _TP_CALLBACK_ENVIRON_V1::<unnamed_type_u> u;
};

/* 5780 */
struct __cppobj OffsetTableContigSpace : ContiguousSpace
{
  BlockOffsetArrayContigSpace _offsets;
  Mutex _par_alloc_lock;
};

/* 5781 */
struct __cppobj No_GC_Verifier : StackObj
{
  bool _verifygc;
  unsigned int _old_invocations;
};

/* 5782 */
struct __cppobj No_Safepoint_Verifier : No_GC_Verifier
{
  bool _activated;
  Thread *_thread;
};

/* 5783 */
struct _EXCEPTION_RECORD
{
  int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 5784 */
struct __cppobj ConcEdenSpace : EdenSpace
{
};

/* 5785 */
struct __cppobj G1YCTypeHelper
{
};

/* 5786 */
struct __cppobj MemoryPool : CHeapObj<7>
{
  MemoryPool_vtbl *__vftable /*VFT*/;
  const char *_name;
  MemoryPool::PoolType _type;
  unsigned int _initial_size;
  unsigned int _max_size;
  bool _available_for_allocation;
  MemoryManager *_managers[5];
  int _num_managers;
  MemoryUsage _peak_usage;
  MemoryUsage _after_gc_usage;
  ThresholdSupport *_usage_threshold;
  ThresholdSupport *_gc_usage_threshold;
  SensorInfo *_usage_sensor;
  SensorInfo *_gc_usage_sensor;
  instanceOopDesc *volatile _memory_pool_obj;
};

/* 5787 */
struct /*VFT*/ MemoryPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 5788 */
struct __cppobj MemoryManager : CHeapObj<7>
{
  MemoryManager_vtbl *__vftable /*VFT*/;
  MemoryPool *_pools[10];
  int _num_pools;
  instanceOopDesc *volatile _memory_mgr_obj;
};

/* 5789 */
struct /*VFT*/ MemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 5790 */
struct __cppobj ThresholdSupport : CHeapObj<7>
{
  bool _support_high_threshold;
  bool _support_low_threshold;
  unsigned int _high_threshold;
  unsigned int _low_threshold;
};

/* 5791 */
struct __cppobj SensorInfo : CHeapObj<7>
{
  instanceOopDesc *_sensor_obj;
  bool _sensor_on;
  unsigned int _sensor_count;
  int _pending_trigger_count;
  int _pending_clear_count;
  MemoryUsage _usage;
};

/* 5792 */
struct /*VFT*/ CollectedMemoryPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 5793 */
struct __cppobj CollectedMemoryPool : MemoryPool
{
};

/* 5794 */
struct __cppobj __declspec(align(8)) PerfClassTraceTime
{
  elapsedTimer _t;
  PerfLongCounter *_timep;
  PerfLongCounter *_selftimep;
  PerfLongCounter *_eventp;
  int *_recursion_counters;
  elapsedTimer *_timers;
  int _event_type;
  int _prev_active_event;
};

/* 5795 */
struct __cppobj __declspec(align(4)) SymbolHashMapEntry : CHeapObj<9>
{
  unsigned int _hash;
  SymbolHashMapEntry *_next;
  Symbol *_symbol;
  unsigned __int16 _value;
};

/* 5796 */
struct __cppobj SymbolHashMapBucket : CHeapObj<9>
{
  SymbolHashMapEntry *_entry;
};

/* 5797 */
struct __cppobj SymbolHashMap : CHeapObj<9>
{
  int _table_size;
  SymbolHashMapBucket *_buckets;
};

/* 5798 */
struct /*VFT*/ PSParallelCompact::KeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 5799 */
struct __cppobj PSParallelCompact::KeepAliveClosure : OopClosure
{
  ParCompactionManager *_compaction_manager;
};

/* 5800 */
struct /*VFT*/ BitData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5801 */
struct __cppobj BitData : ProfileData
{
};

/* 5802 */
struct /*VFT*/ CounterData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5803 */
struct __cppobj CounterData : BitData
{
};

/* 5804 */
struct /*VFT*/ JumpData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5805 */
struct __cppobj JumpData : ProfileData
{
};

/* 5806 */
struct /*VFT*/ ReceiverTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5807 */
struct __cppobj ReceiverTypeData : CounterData
{
};

/* 5808 */
struct /*VFT*/ VirtualCallData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5809 */
struct __cppobj VirtualCallData : ReceiverTypeData
{
};

/* 5810 */
struct /*VFT*/ RetData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5811 */
struct __cppobj RetData : CounterData
{
};

/* 5812 */
struct /*VFT*/ BranchData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5813 */
struct __cppobj BranchData : JumpData
{
};

/* 5814 */
struct /*VFT*/ ArrayData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5815 */
struct __cppobj ArrayData : ProfileData
{
};

/* 5816 */
struct /*VFT*/ MultiBranchData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5817 */
struct __cppobj MultiBranchData : ArrayData
{
};

/* 5818 */
struct /*VFT*/ ArgInfoData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5819 */
struct __cppobj ArgInfoData : ArrayData
{
};

/* 5820 */
struct __cppobj ReturnTypeEntry : TypeEntries
{
};

/* 5821 */
struct /*VFT*/ CallTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5822 */
struct __cppobj CallTypeData : CounterData
{
  TypeStackSlotEntries _args;
  ReturnTypeEntry _ret;
};

/* 5823 */
struct /*VFT*/ VirtualCallTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5824 */
struct __cppobj VirtualCallTypeData : VirtualCallData
{
  TypeStackSlotEntries _args;
  ReturnTypeEntry _ret;
};

/* 5825 */
struct /*VFT*/ ParametersTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5826 */
struct __cppobj ParametersTypeData : ArrayData
{
  TypeStackSlotEntries _parameters;
};

/* 5827 */
struct /*VFT*/ SpeculativeTrapData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 5828 */
struct __cppobj SpeculativeTrapData : ProfileData
{
};

/* 5829 */
struct tagCABSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 5830 */
struct __cppobj VM_ThreadStop : VM_Operation
{
  oopDesc *_thread;
  oopDesc *_throwable;
};

/* 5831 */
struct /*VFT*/ VM_ThreadStop_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5832 */
struct __cppobj InterpreterRuntime : AllStatic
{
};

/* 5833 */
struct __cppobj ConstantPoolCacheEntry : _ValueObj
{
  volatile int _indices;
  volatile Metadata *_f1;
  volatile int _f2;
  volatile int _flags;
};

/* 5834 */
struct __cppobj SignatureIterator : ResourceObj
{
  SignatureIterator_vtbl *__vftable /*VFT*/;
  Symbol *_signature;
  int _index;
  int _parameter_index;
  BasicType _return_type;
};

/* 5835 */
struct /*VFT*/ SignatureIterator_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
};

/* 5836 */
struct __cppobj NativeSignatureIterator : SignatureIterator
{
  methodHandle _method;
  int _offset;
  int _prepended;
  int _jni_offset;
};

/* 5837 */
struct /*VFT*/ NativeSignatureIterator_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *pass_int)(NativeSignatureIterator *this);
  void (__thiscall *pass_long)(NativeSignatureIterator *this);
  void (__thiscall *pass_object)(NativeSignatureIterator *this);
  void (__thiscall *pass_float)(NativeSignatureIterator *this);
  void (__thiscall *pass_double)(NativeSignatureIterator *this);
};

/* 5838 */
struct /*VFT*/ InterpreterRuntime::SignatureHandlerGenerator_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *pass_int)(NativeSignatureIterator *this);
  void (__thiscall *pass_long)(NativeSignatureIterator *this);
  void (__thiscall *pass_object)(NativeSignatureIterator *this);
  void (__thiscall *pass_float)(NativeSignatureIterator *this);
  void (__thiscall *pass_double)(NativeSignatureIterator *this);
};

/* 5839 */
struct __cppobj InterpreterRuntime::SignatureHandlerGenerator : NativeSignatureIterator
{
  MacroAssembler *_masm;
};

/* 5840 */
struct /*VFT*/ CompactibleFreeListSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 5841 */
struct __cppobj CompactibleFreeListSpacePool : CollectedMemoryPool
{
  CompactibleFreeListSpace *_space;
};

/* 5842 */
struct __cppobj NativeMovRegMem : NativeInstruction
{
};

/* 5843 */
struct __cppobj NativeLoadAddress : NativeMovRegMem
{
};

/* 5844 */
struct __cppobj std::nothrow_t
{
};

/* 5845 */
struct __cppobj java_lang_invoke_LambdaForm : AllStatic
{
};

/* 5846 */
struct __cppobj Threads : AllStatic
{
};

/* 5847 */
struct __cppobj GrowableArray<JavaThread *> : GenericGrowableArray
{
  JavaThread **_data;
};

/* 5848 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_16
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
  _BYTE gap10;
};

/* 5849 */
struct __declspec(align(4)) HeapBlock::Header
{
  unsigned int _length;
  bool _used;
};

/* 5850 */
union $AC3B00C257C370F265DF48D8E08510E8
{
  HeapBlock::Header _header;
  __int64 _padding[1];
};

/* 5851 */
struct __cppobj HeapBlock : _ValueObj
{
  $AC3B00C257C370F265DF48D8E08510E8 ___u1;
};

/* 5852 */
struct __cppobj __declspec(align(8)) FreeBlock : HeapBlock
{
  FreeBlock *_link;
};

/* 5853 */
struct __cppobj CodeHeap : CHeapObj<4>
{
  VirtualSpace _memory;
  VirtualSpace _segmap;
  unsigned int _number_of_committed_segments;
  unsigned int _number_of_reserved_segments;
  unsigned int _segment_size;
  int _log2_segment_size;
  unsigned int _next_segment;
  FreeBlock *_freelist;
  unsigned int _freelist_segments;
};

/* 5854 */
struct /*VFT*/ CodeHeapPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 5855 */
struct __cppobj CodeHeapPool : MemoryPool
{
  CodeHeap *_codeHeap;
};

/* 5856 */
struct __cppobj GrowableArray<Handle> : GenericGrowableArray
{
  Handle *_data;
};

/* 5857 */
struct __cppobj __declspec(align(4)) ClassFileStream : ResourceObj
{
  unsigned __int8 *_buffer_start;
  unsigned __int8 *_buffer_end;
  unsigned __int8 *_current;
  const char *_source;
  bool _need_verify;
};

/* 5858 */
struct __cppobj ClassFileParser : _ValueObj
{
  bool _need_verify;
  bool _relax_verify;
  unsigned __int16 _major_version;
  unsigned __int16 _minor_version;
  unsigned __int16 _this_class_index;
  Symbol *_class_name;
  ClassLoaderData *_loader_data;
  KlassHandle _host_klass;
  GrowableArray<Handle> *_cp_patches;
  bool _has_finalizer;
  bool _has_empty_finalizer;
  bool _has_vanilla_constructor;
  int _max_bootstrap_specifier_index;
  bool _synthetic_flag;
  int _sde_length;
  char *_sde_buffer;
  unsigned __int16 _sourcefile_index;
  unsigned __int16 _generic_signature_index;
  instanceKlassHandle _super_klass;
  ConstantPool *_cp;
  Array<unsigned short> *_fields;
  Array<Method *> *_methods;
  Array<unsigned short> *_inner_classes;
  Array<Klass *> *_local_interfaces;
  Array<Klass *> *_transitive_interfaces;
  Annotations *_combined_annotations;
  Array<unsigned char> *_annotations;
  Array<unsigned char> *_type_annotations;
  Array<Array<unsigned char> *> *_fields_annotations;
  Array<Array<unsigned char> *> *_fields_type_annotations;
  InstanceKlass *_klass;
  unsigned __int8 linenumbertable_buffer[128];
  ClassFileStream *_stream;
};

/* 5859 */
struct __cppobj __declspec(align(4)) ClassFileParser::AnnotationCollector
{
  const ClassFileParser::AnnotationCollector::Location _location;
  int _annotations_present;
  unsigned __int16 _contended_group;
};

/* 5860 */
struct __cppobj ClassFileParser::FieldAnnotationCollector : ClassFileParser::AnnotationCollector
{
  ClassLoaderData *_loader_data;
  Array<unsigned char> *_field_annotations;
  Array<unsigned char> *_field_type_annotations;
};

/* 5861 */
struct __cppobj ClassFileParser::MethodAnnotationCollector : ClassFileParser::AnnotationCollector
{
};

/* 5862 */
struct __cppobj ClassFileParser::ClassAnnotationCollector : ClassFileParser::AnnotationCollector
{
};

/* 5863 */
struct __cppobj FieldAllocationCount : ResourceObj
{
  unsigned __int16 count[10];
};

/* 5864 */
struct __cppobj CompressedLineNumberWriteStream : CompressedWriteStream
{
  int _bci;
  int _line;
};

/* 5865 */
struct __cppobj __declspec(align(4)) FieldLayoutInfo : StackObj
{
  int *nonstatic_oop_offsets;
  unsigned int *nonstatic_oop_counts;
  unsigned int nonstatic_oop_map_count;
  unsigned int total_oop_map_count;
  int instance_size;
  int nonstatic_field_size;
  int static_field_size;
  bool has_nonstatic_fields;
};

/* 5866 */
struct __cppobj TempNewSymbol : StackObj
{
  Symbol *_temp;
};

/* 5867 */
struct _s__RTTICompleteObjectLocator
{
  unsigned int signature;
  unsigned int offset;
  unsigned int cdOffset;
  _TypeDescriptor *pTypeDescriptor;
  const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 5868 */
struct tagCACLSID
{
  unsigned int cElems;
  _GUID *pElems;
};

/* 5869 */
struct tagCADBL
{
  unsigned int cElems;
  long double *pElems;
};

/* 5870 */
struct $_TypeDescriptor$_extraBytes_28
{
  const void *pVFTable;
  void *spare;
  char name[28];
};

/* 5871 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_45
{
  const void *pVFTable;
  void *spare;
  char name[45];
};

/* 5872 */
struct sockaddr
{
  unsigned __int16 sa_family;
  char sa_data[14];
};

/* 5873 */
struct __cppobj SystemDictionary : AllStatic
{
};

/* 5874 */
struct __cppobj BasicHashtableEntry<1> : CHeapObj<1>
{
  unsigned int _hash;
  BasicHashtableEntry<1> *_next;
};

/* 5875 */
struct __cppobj HashtableBucket<1> : CHeapObj<1>
{
  BasicHashtableEntry<1> *_entry;
};

/* 5876 */
struct __cppobj BasicHashtable<1> : CHeapObj<1>
{
  int _table_size;
  HashtableBucket<1> *_buckets;
  BasicHashtableEntry<1> *volatile _free_list;
  char *_first_free_entry;
  char *_end_block;
  int _entry_size;
  volatile int _number_of_entries;
};

/* 5877 */
struct __cppobj Hashtable<Klass *,1> : BasicHashtable<1>
{
};

/* 5878 */
struct __cppobj TwoOopHashtable<Klass *,1> : Hashtable<Klass *,1>
{
};

/* 5879 */
struct __cppobj Hashtable<oopDesc *,1> : BasicHashtable<1>
{
};

/* 5880 */
struct __cppobj ProtectionDomainCacheTable : Hashtable<oopDesc *,1>
{
};

/* 5881 */
struct __cppobj Dictionary : TwoOopHashtable<Klass *,1>
{
  ProtectionDomainCacheTable *_pd_cache_table;
};

/* 5882 */
struct __cppobj Hashtable<Symbol *,1> : BasicHashtable<1>
{
};

/* 5883 */
struct __cppobj TwoOopHashtable<Symbol *,1> : Hashtable<Symbol *,1>
{
};

/* 5884 */
struct __cppobj PlaceholderTable : TwoOopHashtable<Symbol *,1>
{
};

/* 5885 */
struct __cppobj LoaderConstraintTable : Hashtable<Klass *,1>
{
};

/* 5886 */
struct __cppobj Hashtable<ConstantPool *,1> : BasicHashtable<1>
{
};

/* 5887 */
struct __cppobj ResolutionErrorTable : Hashtable<ConstantPool *,1>
{
};

/* 5888 */
struct __cppobj SymbolPropertyTable : Hashtable<Symbol *,9>
{
};

/* 5889 */
struct __cppobj HashtableEntry<Symbol *,9> : BasicHashtableEntry<9>
{
  Symbol *_literal;
};

/* 5890 */
struct tagLC_ID
{
  unsigned __int16 wLanguage;
  unsigned __int16 wCountry;
  unsigned __int16 wCodePage;
};

/* 5891 */
struct $BC236CFBD570C18489EB46681F52D83D
{
  char *locale;
  unsigned __int16 *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 5892 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned int lc_handle[6];
  tagLC_ID lc_id[6];
  $BC236CFBD570C18489EB46681F52D83D lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  const unsigned __int8 *pclmap;
  const unsigned __int8 *pcumap;
  struct __lc_time_data *lc_time_curr;
};

/* 5893 */
struct localeinfo_struct
{
  threadlocaleinfostruct *locinfo;
  threadmbcinfostruct *mbcinfo;
};

/* 5894 */
struct __cppobj Abstract_VM_Version : AllStatic
{
};

/* 5895 */
struct __cppobj VM_Version : Abstract_VM_Version
{
  VM_Version::<unnamed_type_cpuFeatureFlags> cpuFeatureFlags;
  VM_Version::<unnamed_type_cpuExtendedFamily> cpuExtendedFamily;
};

/* 5896 */
struct __cppobj OopMapValue : StackObj
{
  __int16 _value;
  __int16 _content_reg;
};

/* 5897 */
struct __cppobj NMTUtil : AllStatic
{
};

/* 5898 */
struct __cppobj VMOperationQueue : CHeapObj<7>
{
  int _queue_length[2];
  int _queue_counter;
  VM_Operation *_queue[2];
  VM_Operation *_drain_list;
};

/* 5899 */
struct __cppobj StubRoutines::x86
{
};

/* 5900 */
struct __cppobj StubRoutines : AllStatic
{
};

/* 5901 */
struct __cppobj CPSlot : _ValueObj
{
  int _ptr;
};

/* 5902 */
struct PerfDataPrologue
{
  int magic;
  char byte_order;
  char major_version;
  char minor_version;
  char accessible;
  int used;
  int overflow;
  __int64 mod_time_stamp;
  int entry_offset;
  int num_entries;
};

/* 5903 */
struct _CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Ebx;
  unsigned int Edx;
  unsigned int Ecx;
  unsigned int Eax;
  unsigned int Ebp;
  unsigned int Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int Esp;
  unsigned int SegSs;
  unsigned __int8 ExtendedRegisters[512];
};

/* 5904 */
struct tagCAUB
{
  unsigned int cElems;
  unsigned __int8 *pElems;
};

/* 5905 */
struct __cppobj WorkData : StackObj
{
  bool _terminate;
  AbstractGangTask *_task;
  int _sequence_number;
};

/* 5906 */
struct __cppobj SymbolClosure : StackObj
{
  SymbolClosure_vtbl *__vftable /*VFT*/;
};

/* 5907 */
struct /*VFT*/ SymbolClosure_vtbl
{
  void (__thiscall *do_symbol)(SymbolClosure *this, Symbol **);
};

/* 5908 */
struct _SECURITY_ATTRIBUTES
{
  unsigned int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};

/* 5909 */
struct __cppobj InnerClassesIterator : StackObj
{
  Array<unsigned short> *_inner_classes;
  int _length;
  int _idx;
};

/* 5910 */
struct __cppobj StubCodeDesc : CHeapObj<4>
{
  StubCodeDesc *_next;
  const char *_group;
  const char *_name;
  int _index;
  unsigned __int8 *_begin;
  unsigned __int8 *_end;
};

/* 5911 */
struct __cppobj __declspec(align(4)) StubCodeGenerator : StackObj
{
  StubCodeGenerator_vtbl *__vftable /*VFT*/;
  MacroAssembler *_masm;
  StubCodeDesc *_first_stub;
  StubCodeDesc *_last_stub;
  bool _print_code;
};

/* 5912 */
struct /*VFT*/ StubCodeGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 5913 */
struct /*VFT*/ ICacheStubGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 5914 */
struct __cppobj ICacheStubGenerator : StubCodeGenerator
{
};

/* 5915 */
struct __cppobj MallocMemorySummary : AllStatic
{
};

/* 5916 */
struct __cppobj MallocMemory : _ValueObj
{
  MemoryCounter _malloc;
  MemoryCounter _arena;
};

/* 5917 */
struct __cppobj MallocMemorySnapshot : ResourceObj
{
  MallocMemory _malloc[16];
  MemoryCounter _tracking_header;
};

/* 5918 */
struct __cppobj __declspec(align(4)) std::exception
{
  std::exception_vtbl *__vftable /*VFT*/;
  const char *_Mywhat;
  bool _Mydofree;
};

/* 5919 */
struct /*VFT*/ std::exception_vtbl
{
  void (__thiscall *~exception)(std::exception *this);
  const char *(__thiscall *what)(std::exception *this);
};

/* 5920 */
struct __cppobj std::bad_exception : std::exception
{
};

/* 5921 */
struct /*VFT*/ std::bad_exception_vtbl
{
  void (__thiscall *~exception)(std::exception *this);
  const char *(__thiscall *what)(std::exception *this);
};

/* 5922 */
struct __cppobj std::_Exception_ptr
{
  void *_Data1;
  void *_Data2;
};

/* 5923 */
struct __cppobj std::bad_alloc : std::exception
{
};

/* 5924 */
struct /*VFT*/ std::bad_alloc_vtbl
{
  void (__thiscall *~exception)(std::exception *this);
  const char *(__thiscall *what)(std::exception *this);
};

/* 5925 */
struct __cppobj std::bad_array_new_length : std::bad_alloc
{
};

/* 5926 */
struct /*VFT*/ std::bad_array_new_length_vtbl
{
  void (__thiscall *~exception)(std::exception *this);
  const char *(__thiscall *what)(std::exception *this);
};

/* 5927 */
struct __cppobj std::_Mutex
{
  void *_Mtx;
};

/* 5928 */
struct tagCACY
{
  unsigned int cElems;
  tagCY *pElems;
};

/* 5929 */
union FloatIntConv
{
  float f;
  int i;
};

/* 5930 */
struct __cppobj TenuredSpace : OffsetTableContigSpace
{
};

/* 5931 */
struct __cppobj GCCause : AllStatic
{
};

/* 5932 */
struct __cppobj __declspec(align(4)) VM_PrintThreads : VM_Operation
{
  outputStream *_out;
  bool _print_concurrent_locks;
};

/* 5933 */
struct /*VFT*/ VM_PrintThreads_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5934 */
struct __cppobj Template : _ValueObj
{
  int _flags;
  TosState _tos_in;
  TosState _tos_out;
  void (__cdecl *_gen)(int);
  int _arg;
};

/* 5935 */
struct __cppobj TemplateTable : AllStatic
{
};

/* 5936 */
struct /*VFT*/ InterpreterMacroAssembler_vtbl
{
  RegisterOrConstant *(__thiscall *delayed_value_impl)(AbstractAssembler *this, RegisterOrConstant *result, int *, RegisterImpl *, int);
  void (__thiscall *bang_stack_with_offset)(AbstractAssembler *this, int);
  void (__thiscall *call_VM_leaf_base)(MacroAssembler *this, unsigned __int8 *, int);
  void (__thiscall *call_VM_base)(MacroAssembler *this, RegisterImpl *, RegisterImpl *, RegisterImpl *, unsigned __int8 *, int, bool);
  void (__thiscall *check_and_handle_popframe)(MacroAssembler *this, RegisterImpl *);
  void (__thiscall *check_and_handle_earlyret)(MacroAssembler *this, RegisterImpl *);
};

/* 5937 */
struct __cppobj InterpreterMacroAssembler : MacroAssembler
{
  RegisterImpl *_locals_register;
  RegisterImpl *_bcp_register;
};

/* 5938 */
struct __cppobj InterpreterCodelet : Stub
{
  int _size;
  const char *_description;
  Bytecodes::Code _bytecode;
};

/* 5939 */
struct __cppobj CodeletMark : ResourceMark
{
  InterpreterCodelet *_clet;
  InterpreterMacroAssembler **_masm;
  CodeBuffer _cb;
};

/* 5940 */
struct __cppobj BasicHashtable<9>::BucketUnlinkContext
{
  int _num_processed;
  int _num_removed;
  BasicHashtableEntry<9> *_removed_head;
  BasicHashtableEntry<9> *_removed_tail;
};

/* 5941 */
struct __cppobj HashtableEntry<oopDesc *,9> : BasicHashtableEntry<9>
{
  oopDesc *_literal;
};

/* 5942 */
struct __cppobj ttyLocker : StackObj
{
  int _holder;
};

/* 5943 */
struct __cppobj java_lang_invoke_DirectMethodHandle : AllStatic
{
};

/* 5944 */
struct __cppobj TreeChunk<FreeChunk,AdaptiveFreeList<FreeChunk> > : FreeChunk
{
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *_list;
  TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > _embedded_list;
};

/* 5945 */
struct __cppobj VM_ForceAsyncSafepoint : VM_Operation
{
};

/* 5946 */
struct /*VFT*/ VM_ForceAsyncSafepoint_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 5947 */
struct /*VFT*/ ContiguousSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 5948 */
struct __cppobj ContiguousSpacePool : CollectedMemoryPool
{
  ContiguousSpace *_space;
};

/* 5949 */
struct $_TypeDescriptor$_extraBytes_36
{
  const void *pVFTable;
  void *spare;
  char name[36];
};

/* 5950 */
struct /*VFT*/ MethodHandlesAdapterBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 5951 */
struct __cppobj MethodHandlesAdapterBlob : BufferBlob
{
};

/* 5952 */
struct __cppobj EntryPoint : _ValueObj
{
  unsigned __int8 *_entry[10];
};

/* 5953 */
struct __cppobj DispatchTable : _ValueObj
{
  unsigned __int8 *_table[10][256];
};

/* 5954 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21
{
  const void *pVFTable;
  void *spare;
  char name[21];
};

/* 5955 */
struct /*VFT*/ TypeArrayKlass_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
  GrowableArray<Klass *> *(__thiscall *compute_secondary_supers)(Klass *this, int);
  Klass *(__thiscall *java_super)(Klass *this);
  bool (__thiscall *can_be_primary_super_slow)(Klass *this);
  klassVtable *(__thiscall *vtable)(Klass *this);
  int (__thiscall *vtable_length)(Klass *this);
  void (__thiscall *check_valid_for_instantiation)(Klass *this, bool, Thread *);
  void (__thiscall *copy_array)(Klass *this, arrayOopDesc *, int, arrayOopDesc *, int, int, Thread *);
  bool (__thiscall *should_be_initialized)(Klass *this);
  void (__thiscall *initialize)(Klass *this, Thread *);
  Klass *(__thiscall *find_field)(Klass *this, Symbol *, Symbol *, fieldDescriptor *);
  Method *(__thiscall *uncached_lookup_method)(Klass *this, Symbol *, Symbol *, Klass::OverpassLookupMode);
  oopDesc *(__thiscall *protection_domain)(Klass *this);
  oopDesc *(__thiscall *klass_holder)(Klass *this);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, Thread *);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, int, Thread *);
  void (__thiscall *remove_unshareable_info)(Klass *this);
  void (__thiscall *restore_unshareable_info)(Klass *this, ClassLoaderData *, Handle, Thread *);
  bool (__thiscall *compute_is_subtype_of)(Klass *this, Klass *);
  bool (__thiscall *is_leaf_class)(Klass *this);
  int (__thiscall *oop_size)(Klass *this, oopDesc *);
  int (__thiscall *size)(Klass *this);
  void (__thiscall *collect_statistics)(Klass *this, KlassSizeStats *);
  const char *(__thiscall *signature_name)(Klass *this);
  void (__thiscall *oop_follow_contents)(Klass *this, ParCompactionManager *, oopDesc *);
  void (__thiscall *oop_follow_contents)(Klass *this, oopDesc *);
  int (__thiscall *oop_adjust_pointers)(Klass *this, oopDesc *);
  void (__thiscall *oop_push_contents)(Klass *this, PSPromotionManager *, oopDesc *);
  int (__thiscall *oop_update_pointers)(Klass *this, ParCompactionManager *, oopDesc *);
  bool (__thiscall *oop_is_instance_slow)(Klass *this);
  bool (__thiscall *oop_is_array_slow)(Klass *this);
  bool (__thiscall *oop_is_objArray_slow)(Klass *this);
  bool (__thiscall *oop_is_typeArray_slow)(Klass *this);
  bool (__thiscall *oop_is_instanceClassLoader)(Klass *this);
  bool (__thiscall *oop_is_instanceMirror)(Klass *this);
  bool (__thiscall *oop_is_instanceRef)(Klass *this);
  void (__thiscall *oops_do)(Klass *this, OopClosure *);
  int (__thiscall *oop_oop_iterate)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_v_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1TriggerClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1Mux2Closure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1RootRegionScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1CMOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterOutOfRegionClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterIntoCSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSKeepAliveClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilteringClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FastScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  void (__thiscall *array_klasses_do)(Klass *this, void (__cdecl *)(Klass *));
  int (__thiscall *compute_modifier_flags)(Klass *this, Thread *);
  int (__thiscall *jvmti_class_status)(Klass *this);
  void (__thiscall *oop_print_value_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *oop_print_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *verify_on)(Klass *this, outputStream *);
  void (__thiscall *oop_verify_on)(Klass *this, oopDesc *, outputStream *);
  oopDesc *(__thiscall *multi_allocate)(ArrayKlass *this, int, int *, Thread *);
};

/* 5956 */
struct __cppobj __declspec(align(8)) TypeArrayKlass : ArrayKlass
{
  int _max_length;
};

/* 5957 */
struct __cppobj JDK_Version : _ValueObj
{
  unsigned __int8 _major;
  unsigned __int8 _minor;
  unsigned __int8 _micro;
  unsigned __int16 _update;
  unsigned __int8 _special;
  unsigned __int8 _build;
  bool _partially_initialized;
  bool _thread_park_blocker;
  bool _pending_list_uses_discovered_field;
  bool _post_vm_init_hook_enabled;
};

/* 5958 */
struct __cppobj CommandLineFlags
{
};

/* 5959 */
struct __cppobj GenCollectedHeap::GenClosure : StackObj
{
  GenCollectedHeap::GenClosure_vtbl *__vftable /*VFT*/;
};

/* 5960 */
struct /*VFT*/ GenCollectedHeap::GenClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 5961 */
struct __cppobj streamIndentor : StackObj
{
  outputStream *_str;
  int _amount;
};

/* 5962 */
struct /*VFT*/ VtableBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 5963 */
struct __cppobj VtableBlob : BufferBlob
{
};

/* 5964 */
struct __cppobj VirtualMemoryRegion : _ValueObj
{
  unsigned __int8 *_base_address;
  unsigned int _size;
};

/* 5965 */
struct __cppobj CommittedMemoryRegion : VirtualMemoryRegion
{
  NativeCallStack _stack;
};

/* 5966 */
struct __cppobj LinkedListNode<CommittedMemoryRegion> : ResourceObj
{
  CommittedMemoryRegion _data;
  LinkedListNode<CommittedMemoryRegion> *_next;
};

/* 5967 */
struct __cppobj __declspec(align(4)) LinkedListIterator<CommittedMemoryRegion> : StackObj
{
  LinkedListNode<CommittedMemoryRegion> *_p;
  bool _is_empty;
};

/* 5968 */
struct /*VFT*/ ContiguousSpaceUsedHelper_vtbl
{
  __int64 (__thiscall *take_sample)(PerfLongSampleHelper *this);
};

/* 5969 */
struct __cppobj ContiguousSpaceUsedHelper : PerfLongSampleHelper
{
  ContiguousSpace *_space;
};

/* 5970 */
struct __cppobj VirtualMemorySummary : AllStatic
{
};

/* 5971 */
struct __cppobj VirtualMemory : _ValueObj
{
  unsigned int _reserved;
  unsigned int _committed;
};

/* 5972 */
struct __cppobj VirtualMemorySnapshot : ResourceObj
{
  VirtualMemory _virtual_memory[16];
};

/* 5973 */
struct __cppobj NativeJump : NativeInstruction
{
};

/* 5974 */
struct __cppobj GCNameHelper
{
};

/* 5975 */
struct __cppobj AbstractInterpreter : AllStatic
{
};

/* 5976 */
struct $_TypeDescriptor$_extraBytes_112
{
  const void *pVFTable;
  void *spare;
  char name[112];
};

/* 5977 */
struct __cppobj FilteredField : CHeapObj<7>
{
  Klass *_klass;
  int _field_offset;
};

/* 5978 */
struct __cppobj InstanceRefKlass : InstanceKlass
{
};

/* 5979 */
struct tagCAUL
{
  unsigned int cElems;
  unsigned int *pElems;
};

/* 5980 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_39
{
  const void *pVFTable;
  void *spare;
  char name[39];
};

/* 5981 */
struct tagBSTRBLOB
{
  unsigned int cbSize;
  unsigned __int8 *pData;
};

/* 5982 */
struct __cppobj itableMethodEntry : _ValueObj
{
  Method *_method;
};

/* 5983 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 5984 */
union _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 5985 */
struct tagCAH
{
  unsigned int cElems;
  _LARGE_INTEGER *pElems;
};

/* 5986 */
struct __cppobj InterfaceSupport : AllStatic
{
};

/* 5987 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_24
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[6];
  _BYTE gap18;
};

/* 5988 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27
{
  const void *pVFTable;
  void *spare;
  char name[27];
};

/* 5989 */
struct __cppobj GCPauseTimer : StackObj
{
  elapsedTimer *_timer;
};

/* 5990 */
struct __cppobj InlineTableSizes : StackObj
{
  int _localvariable_table_length;
  int _compressed_linenumber_size;
  int _exception_table_length;
  int _checked_exceptions_length;
  int _method_parameters_length;
  int _generic_signature_index;
  int _method_annotations_length;
  int _parameter_annotations_length;
  int _type_annotations_length;
  int _default_annotations_length;
  int _end;
};

/* 5991 */
struct __cppobj ExceptionTableElement : _ValueObj
{
  unsigned __int16 start_pc;
  unsigned __int16 end_pc;
  unsigned __int16 handler_pc;
  unsigned __int16 catch_type_index;
};

/* 5992 */
struct __cppobj MethodParametersElement : _ValueObj
{
  unsigned __int16 name_cp_index;
  unsigned __int16 flags;
};

/* 5993 */
struct __cppobj CheckedExceptionElement : _ValueObj
{
  unsigned __int16 class_cp_index;
};

/* 5994 */
struct __cppobj LocalVariableTableElement : _ValueObj
{
  unsigned __int16 start_bci;
  unsigned __int16 length;
  unsigned __int16 name_cp_index;
  unsigned __int16 descriptor_cp_index;
  unsigned __int16 signature_cp_index;
  unsigned __int16 slot;
};

/* 5995 */
struct __cppobj OopMapBlock : _ValueObj
{
  int _offset;
  unsigned int _count;
};

/* 5996 */
struct __cppobj java_lang_invoke_MemberName : AllStatic
{
};

/* 5997 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15
{
  const void *pVFTable;
  void *spare;
  char name[15];
};

/* 5998 */
struct __cppobj LatestMethodCache : CHeapObj<1>
{
  Klass *_klass;
  int _method_idnum;
};

/* 5999 */
struct __cppobj Universe : AllStatic
{
};

/* 6000 */
struct __cppobj __declspec(align(4)) SerializeClosure : Closure
{
  SerializeClosure_vtbl *__vftable /*VFT*/;
};

/* 6001 */
struct /*VFT*/ SerializeClosure_vtbl
{
  bool (__thiscall *reading)(SerializeClosure *this);
  void (__thiscall *do_ptr)(SerializeClosure *this, void **);
  void (__thiscall *do_region)(SerializeClosure *this, unsigned __int8 *, unsigned int);
  void (__thiscall *do_tag)(SerializeClosure *this, int);
};

/* 6002 */
struct __cppobj __declspec(align(8)) DoubleFlagSetting
{
  long double val;
  long double *flag;
};

/* 6003 */
struct tagCAUI
{
  unsigned int cElems;
  unsigned __int16 *pElems;
};

/* 6004 */
struct dirent
{
  char d_name[260];
};

/* 6005 */
struct DIR
{
  dirent dirent;
  char *path;
  void *handle;
  _WIN32_FIND_DATAA find_data;
};

/* 6006 */
struct __cppobj MemTracker : AllStatic
{
};

/* 6007 */
struct __cppobj __declspec(align(4)) Tracker : StackObj
{
  Tracker::TrackerType _type;
  ThreadCritical _tc;
};

/* 6008 */
struct __cppobj LinkedList<MallocSite> : ResourceObj
{
  LinkedList<MallocSite>_vtbl *__vftable /*VFT*/;
  LinkedListNode<MallocSite> *_head;
};

/* 6009 */
struct __cppobj AllocationSite<MemoryCounter> : _ValueObj
{
  NativeCallStack _call_stack;
  MemoryCounter e;
  MemoryType _flag;
};

/* 6010 */
struct __cppobj MallocSite : AllocationSite<MemoryCounter>
{
};

/* 6011 */
struct __cppobj LinkedListNode<MallocSite> : ResourceObj
{
  MallocSite _data;
  LinkedListNode<MallocSite> *_next;
};

/* 6012 */
struct /*VFT*/ LinkedList<MallocSite>_vtbl
{
  void (__thiscall *move)(LinkedList<MallocSite> *this, LinkedList<MallocSite> *);
  bool (__thiscall *add)(LinkedList<MallocSite> *this, const LinkedList<MallocSite> *);
  void (__thiscall *add)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *add)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *find_node)(LinkedList<MallocSite> *this, const MallocSite *);
  MallocSite *(__thiscall *find)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *insert_before)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *insert_after)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, const MallocSite *);
  bool (__thiscall *remove_before)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove_after)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
};

/* 6013 */
struct __cppobj LinkedListImpl<MallocSite,2,10,1> : LinkedList<MallocSite>
{
  Arena *_arena;
};

/* 6014 */
struct /*VFT*/ LinkedListImpl<MallocSite,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<MallocSite> *this, LinkedList<MallocSite> *);
  bool (__thiscall *add)(LinkedList<MallocSite> *this, const LinkedList<MallocSite> *);
  void (__thiscall *add)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *add)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *find_node)(LinkedList<MallocSite> *this, const MallocSite *);
  MallocSite *(__thiscall *find)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *insert_before)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *insert_after)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, const MallocSite *);
  bool (__thiscall *remove_before)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove_after)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  void (__thiscall *~LinkedListImpl<MallocSite,2,10,1>)(LinkedListImpl<MallocSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<MallocSite,2,10,1> *this);
};

/* 6015 */
struct __cppobj LinkedList<ReservedMemoryRegion> : ResourceObj
{
  LinkedList<ReservedMemoryRegion>_vtbl *__vftable /*VFT*/;
  LinkedListNode<ReservedMemoryRegion> *_head;
};

/* 6016 */
struct __cppobj LinkedList<CommittedMemoryRegion> : ResourceObj
{
  LinkedList<CommittedMemoryRegion>_vtbl *__vftable /*VFT*/;
  LinkedListNode<CommittedMemoryRegion> *_head;
};

/* 6017 */
struct /*VFT*/ LinkedList<CommittedMemoryRegion>_vtbl
{
  void (__thiscall *move)(LinkedList<CommittedMemoryRegion> *this, LinkedList<CommittedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const LinkedList<CommittedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *find_node)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  CommittedMemoryRegion *(__thiscall *find)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_before)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_after)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
};

/* 6018 */
struct __cppobj LinkedListImpl<CommittedMemoryRegion,2,10,1> : LinkedList<CommittedMemoryRegion>
{
  Arena *_arena;
};

/* 6019 */
struct /*VFT*/ LinkedListImpl<CommittedMemoryRegion,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<CommittedMemoryRegion> *this, LinkedList<CommittedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const LinkedList<CommittedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *find_node)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  CommittedMemoryRegion *(__thiscall *find)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_before)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_after)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  void (__thiscall *~LinkedListImpl<CommittedMemoryRegion,2,10,1>)(LinkedListImpl<CommittedMemoryRegion,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<CommittedMemoryRegion,2,10,1> *this);
};

/* 6020 */
struct __cppobj SortedLinkedList<CommittedMemoryRegion,&compare_committed_region,2,10,1> : LinkedListImpl<CommittedMemoryRegion,2,10,1>
{
};

/* 6021 */
struct /*VFT*/ SortedLinkedList<CommittedMemoryRegion,&compare_committed_region,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<CommittedMemoryRegion> *this, LinkedList<CommittedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const LinkedList<CommittedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *add)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *find_node)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  CommittedMemoryRegion *(__thiscall *find)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_before)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  LinkedListNode<CommittedMemoryRegion> *(__thiscall *insert_after)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<CommittedMemoryRegion> *this, const CommittedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<CommittedMemoryRegion> *this, LinkedListNode<CommittedMemoryRegion> *);
  void (__thiscall *~LinkedListImpl<CommittedMemoryRegion,2,10,1>)(LinkedListImpl<CommittedMemoryRegion,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<CommittedMemoryRegion,2,10,1> *this);
};

/* 6022 */
struct __cppobj __declspec(align(4)) ReservedMemoryRegion : VirtualMemoryRegion
{
  SortedLinkedList<CommittedMemoryRegion,&compare_committed_region,2,10,1> _committed_regions;
  NativeCallStack _stack;
  MemoryType _flag;
  bool _all_committed;
};

/* 6023 */
struct __cppobj LinkedListNode<ReservedMemoryRegion> : ResourceObj
{
  ReservedMemoryRegion _data;
  LinkedListNode<ReservedMemoryRegion> *_next;
};

/* 6024 */
struct /*VFT*/ LinkedList<ReservedMemoryRegion>_vtbl
{
  void (__thiscall *move)(LinkedList<ReservedMemoryRegion> *this, LinkedList<ReservedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const LinkedList<ReservedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *find_node)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  ReservedMemoryRegion *(__thiscall *find)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_before)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_after)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
};

/* 6025 */
struct __cppobj LinkedListImpl<ReservedMemoryRegion,2,10,1> : LinkedList<ReservedMemoryRegion>
{
  Arena *_arena;
};

/* 6026 */
struct /*VFT*/ LinkedListImpl<ReservedMemoryRegion,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<ReservedMemoryRegion> *this, LinkedList<ReservedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const LinkedList<ReservedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *find_node)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  ReservedMemoryRegion *(__thiscall *find)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_before)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_after)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  void (__thiscall *~LinkedListImpl<ReservedMemoryRegion,2,10,1>)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
};

/* 6027 */
struct __cppobj LinkedList<VirtualMemoryAllocationSite> : ResourceObj
{
  LinkedList<VirtualMemoryAllocationSite>_vtbl *__vftable /*VFT*/;
  LinkedListNode<VirtualMemoryAllocationSite> *_head;
};

/* 6028 */
struct __cppobj AllocationSite<VirtualMemory> : _ValueObj
{
  NativeCallStack _call_stack;
  VirtualMemory e;
  MemoryType _flag;
};

/* 6029 */
struct __cppobj VirtualMemoryAllocationSite : AllocationSite<VirtualMemory>
{
};

/* 6030 */
struct __cppobj LinkedListNode<VirtualMemoryAllocationSite> : ResourceObj
{
  VirtualMemoryAllocationSite _data;
  LinkedListNode<VirtualMemoryAllocationSite> *_next;
};

/* 6031 */
struct /*VFT*/ LinkedList<VirtualMemoryAllocationSite>_vtbl
{
  void (__thiscall *move)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedList<VirtualMemoryAllocationSite> *);
  bool (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const LinkedList<VirtualMemoryAllocationSite> *);
  void (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *find_node)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  VirtualMemoryAllocationSite *(__thiscall *find)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_before)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_after)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  bool (__thiscall *remove_before)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove_after)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
};

/* 6032 */
struct __cppobj LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> : LinkedList<VirtualMemoryAllocationSite>
{
  Arena *_arena;
};

/* 6033 */
struct /*VFT*/ LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedList<VirtualMemoryAllocationSite> *);
  bool (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const LinkedList<VirtualMemoryAllocationSite> *);
  void (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *find_node)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  VirtualMemoryAllocationSite *(__thiscall *find)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_before)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_after)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  bool (__thiscall *remove_before)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove_after)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  void (__thiscall *~LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
};

/* 6034 */
struct __cppobj MemBaseline : _ValueObj
{
  MallocMemorySnapshot _malloc_memory_snapshot;
  VirtualMemorySnapshot _virtual_memory_snapshot;
  unsigned int _class_count;
  LinkedListImpl<MallocSite,2,10,1> _malloc_sites;
  LinkedListImpl<ReservedMemoryRegion,2,10,1> _virtual_memory_allocations;
  LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> _virtual_memory_sites;
  MemBaseline::SortingOrder _malloc_sites_order;
  MemBaseline::SortingOrder _virtual_memory_sites_order;
  MemBaseline::BaselineType _baseline_type;
};

/* 6035 */
struct __cppobj JRT_Leaf_Verifier : No_Safepoint_Verifier
{
};

/* 6036 */
struct __cppobj VM_DeoptimizeFrame : VM_Operation
{
  JavaThread *_thread;
  int *_id;
};

/* 6037 */
struct /*VFT*/ VM_DeoptimizeFrame_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6038 */
struct tagCAFILETIME
{
  unsigned int cElems;
  _FILETIME *pElems;
};

/* 6039 */
struct __cppobj Copy : AllStatic
{
};

/* 6040 */
struct __cppobj NativeGeneralJump : NativeInstruction
{
};

/* 6041 */
struct $_TypeDescriptor$_extraBytes_24
{
  const void *pVFTable;
  void *spare;
  char name[24];
};

/* 6042 */
struct tagDISPPARAMS
{
  tagVARIANT *rgvarg;
  int *rgdispidNamedArgs;
  unsigned int cArgs;
  unsigned int cNamedArgs;
};

/* 6043 */
struct __cppobj ClassPathEntry : CHeapObj<1>
{
  ClassPathEntry_vtbl *__vftable /*VFT*/;
  ClassPathEntry *_next;
};

/* 6044 */
struct /*VFT*/ ClassPathEntry_vtbl
{
  bool (__thiscall *is_jar_file)(ClassPathEntry *this);
  const char *(__thiscall *name)(ClassPathEntry *this);
  bool (__thiscall *is_lazy)(ClassPathEntry *this);
  ClassFileStream *(__thiscall *open_stream)(ClassPathEntry *this, const char *, Thread *);
};

/* 6045 */
struct __cppobj PackageHashtable : BasicHashtable<1>
{
};

/* 6046 */
struct __cppobj __declspec(align(4)) SharedPathsMiscInfo : CHeapObj<1>
{
  SharedPathsMiscInfo_vtbl *__vftable /*VFT*/;
  char *_buf_start;
  char *_cur_ptr;
  char *_end_ptr;
  int _buf_size;
  bool _allocated;
};

/* 6047 */
struct /*VFT*/ SharedPathsMiscInfo_vtbl
{
  bool (__thiscall *check)(SharedPathsMiscInfo *this, int, const char *);
  const char *(__thiscall *type_name)(SharedPathsMiscInfo *this, int);
  void (__thiscall *print_path)(SharedPathsMiscInfo *this, outputStream *, int, const char *);
};

/* 6048 */
struct __cppobj ClassLoader : AllStatic
{
};

/* 6049 */
struct __cppobj PackageInfo : BasicHashtableEntry<1>
{
  const char *_pkgname;
  int _classpath_index;
};

/* 6050 */
struct stat
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 6051 */
struct /*VFT*/ ClassPathZipEntry_vtbl
{
  bool (__thiscall *is_jar_file)(ClassPathEntry *this);
  const char *(__thiscall *name)(ClassPathEntry *this);
  bool (__thiscall *is_lazy)(ClassPathEntry *this);
  ClassFileStream *(__thiscall *open_stream)(ClassPathEntry *this, const char *, Thread *);
};

/* 6052 */
struct __cppobj ClassPathZipEntry : ClassPathEntry
{
  void **_zip;
  const char *_zip_name;
};

/* 6053 */
struct /*VFT*/ MethodStream_vtbl
{
  int (__thiscall *length)(KlassStream *this);
  void (__thiscall *next)(KlassStream *this);
};

/* 6054 */
struct __cppobj MethodStream : KlassStream
{
};

/* 6055 */
struct __cppobj java_lang_ClassLoader : AllStatic
{
};

/* 6056 */
struct tagCLIPDATA
{
  unsigned int cbSize;
  int ulClipFmt;
  unsigned __int8 *pClipData;
};

/* 6057 */
struct tagBLOB
{
  unsigned int cbSize;
  unsigned __int8 *pBlobData;
};

/* 6058 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 6059 */
struct /*VFT*/ ISequentialStream_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
};

/* 6060 */
struct __cppobj IStream : ISequentialStream
{
};

/* 6061 */
struct /*VFT*/ IStream_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Seek)(IStream *this, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
  HRESULT (__stdcall *SetSize)(IStream *this, _ULARGE_INTEGER);
  HRESULT (__stdcall *CopyTo)(IStream *this, IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
  HRESULT (__stdcall *Commit)(IStream *this, unsigned int);
  HRESULT (__stdcall *Revert)(IStream *this);
  HRESULT (__stdcall *LockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__stdcall *UnlockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__stdcall *Stat)(IStream *this, tagSTATSTG *, unsigned int);
  HRESULT (__stdcall *Clone)(IStream *this, IStream **);
};

/* 6062 */
struct __cppobj IStorage : IUnknown
{
};

/* 6063 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 6064 */
struct /*VFT*/ IEnumSTATSTG_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumSTATSTG *this, unsigned int, tagSTATSTG *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumSTATSTG *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumSTATSTG *this);
  HRESULT (__stdcall *Clone)(IEnumSTATSTG *this, IEnumSTATSTG **);
};

/* 6065 */
struct /*VFT*/ IStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateStream)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStream **);
  HRESULT (__stdcall *OpenStream)(IStorage *this, const wchar_t *, void *, unsigned int, unsigned int, IStream **);
  HRESULT (__stdcall *CreateStorage)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStorage **);
  HRESULT (__stdcall *OpenStorage)(IStorage *this, const wchar_t *, IStorage *, unsigned int, wchar_t **, unsigned int, IStorage **);
  HRESULT (__stdcall *CopyTo)(IStorage *this, unsigned int, const _GUID *, wchar_t **, IStorage *);
  HRESULT (__stdcall *MoveElementTo)(IStorage *this, const wchar_t *, IStorage *, const wchar_t *, unsigned int);
  HRESULT (__stdcall *Commit)(IStorage *this, unsigned int);
  HRESULT (__stdcall *Revert)(IStorage *this);
  HRESULT (__stdcall *EnumElements)(IStorage *this, unsigned int, void *, unsigned int, IEnumSTATSTG **);
  HRESULT (__stdcall *DestroyElement)(IStorage *this, const wchar_t *);
  HRESULT (__stdcall *RenameElement)(IStorage *this, const wchar_t *, const wchar_t *);
  HRESULT (__stdcall *SetElementTimes)(IStorage *this, const wchar_t *, const _FILETIME *, const _FILETIME *, const _FILETIME *);
  HRESULT (__stdcall *SetClass)(IStorage *this, const _GUID *);
  HRESULT (__stdcall *SetStateBits)(IStorage *this, unsigned int, unsigned int);
  HRESULT (__stdcall *Stat)(IStorage *this, tagSTATSTG *, unsigned int);
};

/* 6066 */
struct tagVersionedStream
{
  _GUID guidVersion;
  IStream *pStream;
};

/* 6067 */
struct tagCAC
{
  unsigned int cElems;
  char *pElems;
};

/* 6068 */
struct tagCAI
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 6069 */
struct tagCAL
{
  unsigned int cElems;
  int *pElems;
};

/* 6070 */
struct tagCAUH
{
  unsigned int cElems;
  _ULARGE_INTEGER *pElems;
};

/* 6071 */
struct tagCAFLT
{
  unsigned int cElems;
  float *pElems;
};

/* 6072 */
struct tagCABOOL
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 6073 */
struct tagCASCODE
{
  unsigned int cElems;
  int *pElems;
};

/* 6074 */
struct tagCADATE
{
  unsigned int cElems;
  long double *pElems;
};

/* 6075 */
struct tagCACLIPDATA
{
  unsigned int cElems;
  tagCLIPDATA *pElems;
};

/* 6076 */
struct tagCABSTRBLOB
{
  unsigned int cElems;
  tagBSTRBLOB *pElems;
};

/* 6077 */
struct tagCALPSTR
{
  unsigned int cElems;
  char **pElems;
};

/* 6078 */
struct tagCALPWSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 6079 */
struct tagCAPROPVARIANT
{
  unsigned int cElems;
  tagPROPVARIANT *pElems;
};

/* 6081 */
struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  char cVal;
};

/* 6082 */
struct $6D336DA143C556260FF80C12817B08DB
{
  _BYTE gap0[8];
  int lVal;
};

/* 6083 */
struct $B53E0F727200175561A67551B414EF86
{
  _BYTE gap0[8];
  _LARGE_INTEGER hVal;
};

/* 6084 */
struct $C1221EFD1C2CF53778C43C733C6E945B
{
  _BYTE gap0[8];
  _ULARGE_INTEGER uhVal;
};

/* 6085 */
struct $062083FB8E759C8BDEAC33A07551AB1D
{
  _BYTE gap0[8];
  _FILETIME filetime;
};

/* 6086 */
struct $D6FE62C36386EDC6FA471B3DEC0EECDB
{
  _BYTE gap0[8];
  _GUID *puuid;
};

/* 6087 */
struct $EFF6934164ACF6E232AD1EF95804658B
{
  _BYTE gap0[8];
  tagCLIPDATA *pclipdata;
};

/* 6088 */
struct $8F9B70920CCC3131928BF067DDF13D05
{
  _BYTE gap0[8];
  tagBSTRBLOB bstrblobVal;
};

/* 6089 */
struct $400F211D1BD6252281D8E1C8AD23DF7C
{
  _BYTE gap0[8];
  tagBLOB blob;
};

/* 6090 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
  _BYTE gap0[8];
  char *pszVal;
};

/* 6091 */
struct $A123DDE5155BABE8656CED1ACF96B10E
{
  _BYTE gap0[8];
  wchar_t *pwszVal;
};

/* 6092 */
struct $6C85C647A033338B96DB52C540DDE5D6
{
  _BYTE gap0[8];
  IStream *pStream;
};

/* 6093 */
struct $81023FC6B5A5479EE8E7FBA6086D8557
{
  _BYTE gap0[8];
  IStorage *pStorage;
};

/* 6094 */
struct $5B46D8ECEBECB072021E43FB963E1033
{
  _BYTE gap0[8];
  tagVersionedStream *pVersionedStream;
};

/* 6095 */
struct $D85EAEE5F902B5B60953F4A35E27AEC3
{
  _BYTE gap0[8];
  tagCAC cac;
};

/* 6096 */
struct $F25B1851B73D4DC73BB03AE36212018A
{
  _BYTE gap0[8];
  tagCAUB caub;
};

/* 6097 */
struct $C576573A611626E11CAF1C97A75E6CCD
{
  _BYTE gap0[8];
  tagCAI cai;
};

/* 6098 */
struct $81670F4CF435E86CE1EFF997F955D121
{
  _BYTE gap0[8];
  tagCAUI caui;
};

/* 6099 */
struct $ECB7523C10162F9357EB65589EC2952E
{
  _BYTE gap0[8];
  tagCAL cal;
};

/* 6100 */
struct $19E4A8F743E169FD46579B30FF14EA2B
{
  _BYTE gap0[8];
  tagCAUL caul;
};

/* 6101 */
struct $D446360246FC7C92532B8B39689350D5
{
  _BYTE gap0[8];
  tagCAH cah;
};

/* 6102 */
struct $0E97A4A3EB8CE5386E6E43611E14CDC3
{
  _BYTE gap0[8];
  tagCAUH cauh;
};

/* 6103 */
struct $47A1279565B641D379AFEEF4493C8E89
{
  _BYTE gap0[8];
  tagCAFLT caflt;
};

/* 6104 */
struct $4C8F0118B9D2388D95E0854E19432933
{
  _BYTE gap0[8];
  tagCADBL cadbl;
};

/* 6105 */
struct $FEC163B4E9ED922902E5F88DBAFAB239
{
  _BYTE gap0[8];
  tagCABOOL cabool;
};

/* 6106 */
struct $32C7583188C875305E886958419CF250
{
  _BYTE gap0[8];
  tagCASCODE cascode;
};

/* 6107 */
struct $671476121DBAA4F9D442ED1912B34458
{
  _BYTE gap0[8];
  tagCACY cacy;
};

/* 6108 */
struct $72D0EAB441B0B9BD693C5C2B6D64A395
{
  _BYTE gap0[8];
  tagCADATE cadate;
};

/* 6109 */
struct $B84A45E5F5FB9E77A8CB463B956C5DAA
{
  _BYTE gap0[8];
  tagCAFILETIME cafiletime;
};

/* 6110 */
struct $DBB945C98AB843F420C15597A6B39236
{
  _BYTE gap0[8];
  tagCACLSID cauuid;
};

/* 6111 */
struct $3965C013D3FAC78BD90CBFE284E8ED59
{
  _BYTE gap0[8];
  tagCACLIPDATA caclipdata;
};

/* 6112 */
struct $461D806EEFE4871C05540D4DD62322F9
{
  _BYTE gap0[8];
  tagCABSTR cabstr;
};

/* 6113 */
struct $9FA93DCE272ABEA94386FB87FBDC2C9E
{
  _BYTE gap0[8];
  tagCABSTRBLOB cabstrblob;
};

/* 6114 */
struct $360076FF4230410689C3100B1907261C
{
  _BYTE gap0[8];
  tagCALPSTR calpstr;
};

/* 6115 */
struct $31B1BD6855DD3AC05D73C085E2D86FE6
{
  _BYTE gap0[8];
  tagCALPWSTR calpwstr;
};

/* 6116 */
struct $987B54630EFE5D6ABA7AA73811F8BB61
{
  _BYTE gap0[8];
  tagCAPROPVARIANT capropvar;
};

/* 6117 */
struct $C42613331459BA97AE544803D4597686
{
  _BYTE gap0[8];
  tagPROPVARIANT *pvarVal;
};

/* 6118 */
union $74E1C2813B04AF81018FDC2686EC6641
{
  $5DF3780F58367B9F2537DF425A8A812E __s0;
  tagDEC decVal;
  $20D69447C97B677619C52B2E27D3FF49 __s2;
  $31126B8528A05AF3606C6D495FD178E8 __s3;
  $48802A31D3D0701BC13CEF9CEA041E7B __s4;
  $6D336DA143C556260FF80C12817B08DB __s5;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
  $5CA90CF57237397281FB12BFD52C1905 __s7;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
  $B53E0F727200175561A67551B414EF86 __s9;
  $C1221EFD1C2CF53778C43C733C6E945B __s10;
  $50230A970D9734D4E9774CFC619DF0F6 __s11;
  $4C0EC2258454B893CE739DAE89D8DB7B __s12;
  $6DB36323059316E675433BB10D285009 __s13;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
  $3A04CD2956E8214F4EDF41A063DD12A0 __s15;
  $E94952165EEA9EEA990FEB33603E1B19 __s16;
  $062083FB8E759C8BDEAC33A07551AB1D __s17;
  $D6FE62C36386EDC6FA471B3DEC0EECDB __s18;
  $EFF6934164ACF6E232AD1EF95804658B __s19;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
  $8F9B70920CCC3131928BF067DDF13D05 __s21;
  $400F211D1BD6252281D8E1C8AD23DF7C __s22;
  $17BA733FE6B8BEB3CC80B954432F0727 __s23;
  $A123DDE5155BABE8656CED1ACF96B10E __s24;
  $250DDD72E86D0B643954900723D3D9BE __s25;
  $243018D6B30527D1B8D63C77FF15FE12 __s26;
  $6C85C647A033338B96DB52C540DDE5D6 __s27;
  $81023FC6B5A5479EE8E7FBA6086D8557 __s28;
  $5B46D8ECEBECB072021E43FB963E1033 __s29;
  $12A24554B0B656939A175EB5DF70E10C __s30;
  $D85EAEE5F902B5B60953F4A35E27AEC3 __s31;
  $F25B1851B73D4DC73BB03AE36212018A __s32;
  $C576573A611626E11CAF1C97A75E6CCD __s33;
  $81670F4CF435E86CE1EFF997F955D121 __s34;
  $ECB7523C10162F9357EB65589EC2952E __s35;
  $19E4A8F743E169FD46579B30FF14EA2B __s36;
  $D446360246FC7C92532B8B39689350D5 __s37;
  $0E97A4A3EB8CE5386E6E43611E14CDC3 __s38;
  $47A1279565B641D379AFEEF4493C8E89 __s39;
  $4C8F0118B9D2388D95E0854E19432933 __s40;
  $FEC163B4E9ED922902E5F88DBAFAB239 __s41;
  $32C7583188C875305E886958419CF250 __s42;
  $671476121DBAA4F9D442ED1912B34458 __s43;
  $72D0EAB441B0B9BD693C5C2B6D64A395 __s44;
  $B84A45E5F5FB9E77A8CB463B956C5DAA __s45;
  $DBB945C98AB843F420C15597A6B39236 __s46;
  $3965C013D3FAC78BD90CBFE284E8ED59 __s47;
  $461D806EEFE4871C05540D4DD62322F9 __s48;
  $9FA93DCE272ABEA94386FB87FBDC2C9E __s49;
  $360076FF4230410689C3100B1907261C __s50;
  $31B1BD6855DD3AC05D73C085E2D86FE6 __s51;
  $987B54630EFE5D6ABA7AA73811F8BB61 __s52;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
  $CEB26E30A72A699742605DB617405969 __s54;
  $76732A64405C0E287FCB302687644550 __s55;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
  $E5FC128E66C26C95254032BA69D36E74 __s57;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
  $2516E53E690D8CC5659AAB7EDC49E664 __s60;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
  $2CABE618CF1C2625A4479554E4967E0A __s62;
  $AAA92DA1D6E1B0E8462F69216B62027C __s63;
  $FDC3F1AC1BA9B01622E087090791D816 __s64;
  $F7167AE7A8ABA03C094C204FB1564A28 __s65;
  $DACB64E813C2CA89547468E3DD73B42F __s66;
  $6857AE69DB7C952EEFD665431A7B503A __s67;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
  $628A75E49229B044C36F1D75047E4923 __s69;
  $3D5ED13C4A823C642DABFFE4145E292E __s70;
  $B0D3223A9B2A61968D5ACBAD835CCDE4 __s71;
  $C42613331459BA97AE544803D4597686 __s72;
};

/* 6080 */
struct tagPROPVARIANT
{
  $74E1C2813B04AF81018FDC2686EC6641 ___u0;
};

/* 6119 */
struct __cppobj GrowableArray<PerfData *> : GenericGrowableArray
{
  PerfData **_data;
};

/* 6120 */
struct __cppobj FieldType : AllStatic
{
};

/* 6121 */
struct __cppobj FieldArrayInfo : StackObj
{
  int _dimension;
  Symbol *_object_key;
};

/* 6122 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_8
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
  _BYTE gap8;
};

/* 6123 */
struct /*VFT*/ PerfStringConstant_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 6124 */
struct __cppobj PerfStringConstant : PerfString
{
};

/* 6125 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_41
{
  const void *pVFTable;
  void *spare;
  char name[41];
};

/* 6126 */
struct __cppobj MetaspaceAux : AllStatic
{
};

/* 6127 */
struct __cppobj WatcherThread : Thread
{
};

/* 6128 */
struct /*VFT*/ WatcherThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 6129 */
struct _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 6130 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26
{
  const void *pVFTable;
  void *spare;
  char name[26];
};

/* 6131 */
struct __cppobj NativeMovConstRegPatching : NativeMovConstReg
{
};

/* 6132 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_14
{
  const void *pVFTable;
  void *spare;
  char name[14];
};

/* 6133 */
struct /*VFT*/ ContiguousSpaceDCTOC_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
  HeapWord *(__thiscall *get_actual_top)(DirtyCardToOopClosure *this, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region)(DirtyCardToOopClosure *this, MemRegion, HeapWord *, HeapWord *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, FilteringClosure *);
  void (__thiscall *walk_mem_region_with_cl)(Filtering_DCTOC *this, MemRegion, HeapWord *, HeapWord *, ExtendedOopClosure *);
};

/* 6134 */
struct __cppobj ContiguousSpaceDCTOC : Filtering_DCTOC
{
};

/* 6135 */
struct _lldiv_t
{
  __int64 quot;
  __int64 rem;
};

/* 6136 */
struct __cppobj vtableEntry : _ValueObj
{
  Method *_method;
};

/* 6137 */
struct /*VFT*/ ShenandoahMarkResolveRefsDedupClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
  bool (__thiscall *do_metadata)(ExtendedOopClosure *this);
  void (__thiscall *do_klass)(ExtendedOopClosure *this, Klass *);
  void (__thiscall *do_class_loader_data)(ExtendedOopClosure *this, ClassLoaderData *);
  bool (__thiscall *idempotent)(ExtendedOopClosure *this);
  bool (__thiscall *apply_to_weak_ref_discovered_field)(ExtendedOopClosure *this);
};

/* 6138 */
struct __cppobj ShenandoahMarkResolveRefsDedupClosure : ShenandoahMarkRefsSuperClosure
{
};

/* 6139 */
struct __cppobj ClassLoaderDataGraph : AllStatic
{
};

/* 6140 */
struct /*VFT*/ DefNewTracer_vtbl
{
  void (__thiscall *report_gc_end_impl)(GCTracer *this, const TimeInstant<CounterRepresentation,ElapsedCounterSource> *, TimePartitions *);
};

/* 6141 */
struct __cppobj DefNewTracer : YoungGCTracer
{
};

/* 6142 */
struct __cppobj CompilerCounters : CHeapObj<6>
{
  char _current_method[160];
  PerfStringVariable *_perf_current_method;
  int _compile_type;
  PerfLongVariable *_perf_compile_type;
  PerfLongCounter *_perf_time;
  PerfLongCounter *_perf_compiles;
};

/* 6143 */
struct __cppobj CompilerThread : JavaThread
{
  CompilerCounters *_counters;
  ciEnv *_env;
  CompileLog *_log;
  CompileTask *_task;
  CompileQueue *_queue;
  BufferBlob *_buffer_blob;
  nmethod *_scanned_nmethod;
  AbstractCompiler *_compiler;
};

/* 6144 */
struct __cppobj os : AllStatic
{
};

/* 6145 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 6146 */
struct os::page_info
{
  unsigned int size;
  int lgrp_id;
};

/* 6147 */
struct __cppobj ExtendedPC : _ValueObj
{
  unsigned __int8 *_pc;
};

/* 6148 */
struct __cppobj AgentLibrary : CHeapObj<7>
{
  char *_name;
  char *_options;
  void *_os_lib;
  bool _is_absolute_path;
  bool _is_static_lib;
  AgentLibrary::AgentState _state;
  AgentLibrary *_next;
};

/* 6149 */
struct hostent
{
  char *h_name;
  char **h_aliases;
  __int16 h_addrtype;
  __int16 h_length;
  char **h_addr_list;
};

/* 6150 */
struct __cppobj __declspec(align(4)) JavaCallArguments : StackObj
{
  int _value_buffer[9];
  unsigned __int8 _value_state_buffer[9];
  int *_value;
  unsigned __int8 *_value_state;
  int _size;
  int _max_size;
  bool _start_at_zero;
};

/* 6151 */
struct __cppobj os::CrashProtectionCallback : StackObj
{
  os::CrashProtectionCallback_vtbl *__vftable /*VFT*/;
};

/* 6152 */
struct /*VFT*/ os::CrashProtectionCallback_vtbl
{
  void (__thiscall *call)(os::CrashProtectionCallback *this);
};

/* 6153 */
struct __cppobj os::win32
{
};

/* 6154 */
struct __cppobj os::ThreadCrashProtection : StackObj
{
};

/* 6155 */
struct __cppobj os::WinSock2Dll : AllStatic
{
};

/* 6156 */
struct __cppobj os::Kernel32Dll : AllStatic
{
};

/* 6157 */
struct __cppobj os::Advapi32Dll : AllStatic
{
};

/* 6158 */
struct __cppobj os::PSApiDll : AllStatic
{
};

/* 6159 */
struct __cppobj os::SuspendedThreadTaskContext
{
  Thread *_thread;
  void *_ucontext;
};

/* 6160 */
struct __cppobj __declspec(align(4)) os::SuspendedThreadTask
{
  os::SuspendedThreadTask_vtbl *__vftable /*VFT*/;
  Thread *_thread;
  bool _done;
};

/* 6161 */
struct /*VFT*/ os::SuspendedThreadTask_vtbl
{
  void (__thiscall *~SuspendedThreadTask)(os::SuspendedThreadTask *this);
  void (__thiscall *do_task)(os::SuspendedThreadTask *this, const os::SuspendedThreadTaskContext *);
};

/* 6162 */
struct __cppobj ClassLoaderDataGraphMetaspaceIterator : StackObj
{
  ClassLoaderData *_data;
};

/* 6163 */
struct __cppobj MutexUnlocker : StackObj
{
  Monitor *_mutex;
};

/* 6164 */
struct __cppobj ResetNoHandleMark : StackObj
{
  int _no_handle_mark_nesting;
};

/* 6165 */
struct __cppobj FieldClosure : StackObj
{
  FieldClosure_vtbl *__vftable /*VFT*/;
};

/* 6166 */
struct /*VFT*/ FieldClosure_vtbl
{
  void (__thiscall *do_field)(FieldClosure *this, fieldDescriptor *);
};

/* 6167 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_4
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
  _BYTE gap4;
};

/* 6168 */
struct __cppobj Exceptions
{
};

/* 6169 */
struct __cppobj BytecodeCounter : AllStatic
{
};

/* 6170 */
struct __cppobj JvmtiExport : AllStatic
{
};

/* 6171 */
struct __cppobj __declspec(align(8)) bufferedStream : outputStream
{
  char *buffer;
  unsigned int buffer_pos;
  unsigned int buffer_max;
  unsigned int buffer_length;
  bool buffer_fixed;
};

/* 6172 */
struct /*VFT*/ bufferedStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6173 */
struct __cppobj AttachOperation : CHeapObj<7>
{
  AttachOperation_vtbl *__vftable /*VFT*/;
  char _name[17];
  char _arg[3][1025];
};

/* 6174 */
struct /*VFT*/ AttachOperation_vtbl
{
  void (__thiscall *complete)(AttachOperation *this, int, bufferedStream *);
};

/* 6175 */
struct _LARGE_INTEGER::<unnamed_type_u>
{
  unsigned int LowPart;
  int HighPart;
};

/* 6176 */
struct __cppobj FloatRegisterImpl : AbstractRegisterImpl
{
};

/* 6177 */
struct __cppobj ReferenceProcessorSpanMutator : StackObj
{
  ReferenceProcessor *_rp;
  MemRegion _saved_span;
};

/* 6178 */
struct _ULARGE_INTEGER::<unnamed_type_u>
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 6179 */
struct __cppobj java_lang_invoke_MethodType : AllStatic
{
};

/* 6180 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_43
{
  const void *pVFTable;
  void *spare;
  char name[43];
};

/* 6181 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_33
{
  const void *pVFTable;
  void *spare;
  char name[33];
};

/* 6182 */
struct __cppobj AdlcVMDeps : AllStatic
{
};

/* 6183 */
struct __cppobj MetaIndex : CHeapObj<1>
{
  char **_meta_package_names;
  int _num_meta_package_names;
};

/* 6184 */
struct __cppobj itableOffsetEntry : _ValueObj
{
  Klass *_interface;
  int _offset;
};

/* 6185 */
struct __cppobj GlobalTLABStats : CHeapObj<2>
{
  unsigned int _allocating_threads;
  unsigned int _total_refills;
  unsigned int _max_refills;
  unsigned int _total_allocation;
  unsigned int _total_gc_waste;
  unsigned int _max_gc_waste;
  unsigned int _total_slow_refill_waste;
  unsigned int _max_slow_refill_waste;
  unsigned int _total_fast_refill_waste;
  unsigned int _max_fast_refill_waste;
  unsigned int _total_slow_allocations;
  unsigned int _max_slow_allocations;
  PerfLongVariable *_perf_allocating_threads;
  PerfLongVariable *_perf_total_refills;
  PerfLongVariable *_perf_max_refills;
  PerfLongVariable *_perf_allocation;
  PerfLongVariable *_perf_gc_waste;
  PerfLongVariable *_perf_max_gc_waste;
  PerfLongVariable *_perf_slow_refill_waste;
  PerfLongVariable *_perf_max_slow_refill_waste;
  PerfLongVariable *_perf_fast_refill_waste;
  PerfLongVariable *_perf_max_fast_refill_waste;
  PerfLongVariable *_perf_slow_allocations;
  PerfLongVariable *_perf_max_slow_allocations;
  AdaptiveWeightedAverage _allocating_threads_avg;
};

/* 6186 */
struct __cppobj BiasedLocking : AllStatic
{
};

/* 6187 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_30
{
  const void *pVFTable;
  void *spare;
  char name[30];
};

/* 6188 */
struct __cppobj Atomic : AllStatic
{
};

/* 6189 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_28
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[7];
  _BYTE gap1C;
};

/* 6190 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19
{
  const void *pVFTable;
  void *spare;
  char name[19];
};

/* 6191 */
struct __cppobj GrowableArray<MemoryPool *> : GenericGrowableArray
{
  MemoryPool **_data;
};

/* 6192 */
struct __cppobj __declspec(align(4)) fdStream : outputStream
{
  int _fd;
  bool _need_close;
};

/* 6193 */
struct /*VFT*/ fdStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6194 */
struct __cppobj MonitorLockerEx : MutexLockerEx
{
  Monitor *_monitor;
};

/* 6195 */
struct __cppobj MetaspaceGC : AllStatic
{
};

/* 6196 */
struct __cppobj Prefetch : AllStatic
{
};

/* 6197 */
struct __cppobj UIntFlagSetting
{
  unsigned int val;
  unsigned int *flag;
};

/* 6198 */
struct __cppobj GrowableArray<MemoryManager *> : GenericGrowableArray
{
  MemoryManager **_data;
};

/* 6199 */
struct threadlocaleinfostruct::<unnamed_type_lc_category>
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 6200 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_20
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[5];
  _BYTE gap14;
};

/* 6201 */
struct __cppobj GrowableArray<Method *> : GenericGrowableArray
{
  Method **_data;
};

/* 6202 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22
{
  const void *pVFTable;
  void *spare;
  char name[22];
};

/* 6203 */
struct __cppobj SpecializationStats
{
};

/* 6204 */
struct __cppobj TypeEntriesAtCall
{
};

/* 6205 */
struct __cppobj __declspec(align(4)) AdaptiveSizePolicyOutput : StackObj
{
  AdaptiveSizePolicy *_size_policy;
  bool _do_print;
};

/* 6206 */
struct __cppobj GCWhen : AllStatic
{
};

/* 6207 */
struct __cppobj MallocHeader : _ValueObj
{
  unsigned __int32 _size : 32;
  unsigned __int32 _flags : 8;
  unsigned __int32 _pos_idx : 8;
  unsigned __int32 _bucket_idx : 16;
};

/* 6208 */
struct __cppobj Bytes : AllStatic
{
};

/* 6209 */
struct __cppobj VM_Exit : VM_Operation
{
  int _exit_code;
};

/* 6210 */
struct /*VFT*/ VM_Exit_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6211 */
struct __cppobj TemplateInterpreter : AbstractInterpreter
{
};

/* 6212 */
struct /*VFT*/ ClassPathDirEntry_vtbl
{
  bool (__thiscall *is_jar_file)(ClassPathEntry *this);
  const char *(__thiscall *name)(ClassPathEntry *this);
  bool (__thiscall *is_lazy)(ClassPathEntry *this);
  ClassFileStream *(__thiscall *open_stream)(ClassPathEntry *this, const char *, Thread *);
};

/* 6213 */
struct __cppobj ClassPathDirEntry : ClassPathEntry
{
  const char *_dir;
};

/* 6214 */
struct __cppobj arrayHandle : Handle
{
};

/* 6215 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_99
{
  const void *pVFTable;
  void *spare;
  char name[99];
};

/* 6216 */
struct __cppobj DerivedPointerEntry : CHeapObj<6>
{
  oopDesc **_location;
  int _offset;
};

/* 6217 */
struct __cppobj GrowableArray<DerivedPointerEntry *> : GenericGrowableArray
{
  DerivedPointerEntry **_data;
};

/* 6218 */
struct __cppobj Interpreter : TemplateInterpreter
{
};

/* 6219 */
struct __cppobj vmIntrinsics : AllStatic
{
};

/* 6220 */
struct _ldiv_t
{
  int quot;
  int rem;
};

/* 6221 */
struct __cppobj DeadlockCycle : CHeapObj<7>
{
  bool _is_deadlock;
  GrowableArray<JavaThread *> *_threads;
  DeadlockCycle *_next;
};

/* 6222 */
struct __cppobj VM_FindDeadlocks : VM_Operation
{
  bool _concurrent_locks;
  DeadlockCycle *_deadlocks;
  outputStream *_out;
};

/* 6223 */
struct /*VFT*/ VM_FindDeadlocks_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6224 */
struct __cppobj ThreadDumpResult : StackObj
{
  int _num_threads;
  int _num_snapshots;
  ThreadSnapshot *_snapshots;
  ThreadSnapshot *_last;
  ThreadDumpResult *_next;
};

/* 6225 */
struct __cppobj GrowableArray<instanceHandle> : GenericGrowableArray
{
  instanceHandle *_data;
};

/* 6226 */
struct __cppobj __declspec(align(4)) VM_ThreadDump : VM_Operation
{
  ThreadDumpResult *_result;
  int _num_threads;
  GrowableArray<instanceHandle> *_threads;
  int _max_depth;
  bool _with_locked_monitors;
  bool _with_locked_synchronizers;
};

/* 6227 */
struct /*VFT*/ VM_ThreadDump_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6228 */
struct __cppobj SharedRuntime : AllStatic
{
};

/* 6229 */
struct /*VFT*/ SafepointBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 6230 */
struct __cppobj SafepointBlob : SingletonBlob
{
};

/* 6231 */
struct __cppobj SignatureTypeNames : SignatureIterator
{
};

/* 6232 */
struct /*VFT*/ SignatureTypeNames_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *type_name)(SignatureTypeNames *this, const char *);
};

/* 6233 */
struct __cppobj ttyUnlocker : StackObj
{
  bool _was_locked;
};

/* 6234 */
struct __cppobj java_lang_String : AllStatic
{
};

/* 6235 */
struct __cppobj No_Alloc_Verifier : StackObj
{
  bool _activated;
};

/* 6236 */
struct __cppobj SignatureInfo : SignatureIterator
{
  bool _has_iterated;
  bool _has_iterated_return;
  int _size;
};

/* 6237 */
struct /*VFT*/ SignatureInfo_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6238 */
struct /*VFT*/ ResultTypeFinder_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6239 */
struct __cppobj ResultTypeFinder : SignatureInfo
{
};

/* 6240 */
struct __cppobj NativeMovRegMemPatching : NativeMovRegMem
{
};

/* 6241 */
struct /*VFT*/ ArgumentSizeComputer_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6242 */
struct __cppobj ArgumentSizeComputer : SignatureInfo
{
};

/* 6243 */
struct __cppobj java_lang_invoke_MethodHandle : AllStatic
{
};

/* 6244 */
struct __cppobj ThreadInVMfromNative : ThreadStateTransition
{
};

/* 6245 */
struct /*VFT*/ PerfLongConstant_vtbl
{
  void (__thiscall *sample)(PerfData *this);
  int (__thiscall *format)(PerfData *this, char *, int);
};

/* 6246 */
struct __cppobj PerfLongConstant : PerfLong
{
};

/* 6247 */
struct /*VFT*/ AlwaysFalseClosure_vtbl
{
  bool (__thiscall *do_object_b)(BoolObjectClosure *this, oopDesc *);
};

/* 6248 */
struct __cppobj AlwaysFalseClosure : BoolObjectClosure
{
};

/* 6249 */
struct __cppobj __declspec(align(4)) OopMapStream : StackObj
{
  CompressedReadStream *_stream;
  int _mask;
  int _size;
  int _position;
  bool _valid_omv;
  OopMapValue _omv;
};

/* 6250 */
struct /*VFT*/ ArgumentCount_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6251 */
struct __cppobj ArgumentCount : SignatureInfo
{
};

/* 6252 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_31
{
  const void *pVFTable;
  void *spare;
  char name[31];
};

/* 6253 */
struct __cppobj JNIHandles : AllStatic
{
};

/* 6254 */
struct /*VFT*/ AlwaysClearPolicy_vtbl
{
  bool (__thiscall *should_clear_reference)(ReferencePolicy *this, oopDesc *, __int64);
  void (__thiscall *setup)(ReferencePolicy *this);
};

/* 6255 */
struct __cppobj AlwaysClearPolicy : ReferencePolicy
{
};

/* 6256 */
struct __cppobj NoHandleMark : StackObj
{
};

/* 6257 */
struct __cppobj Events : AllStatic
{
};

/* 6258 */
struct __cppobj __declspec(align(8)) StackFrameStream : StackObj
{
  frame _fr;
  RegisterMap _reg_map;
  bool _is_done;
};

/* 6259 */
struct __cppobj OrderAccess : AllStatic
{
};

/* 6260 */
struct __cppobj Pause_No_GC_Verifier : StackObj
{
  No_GC_Verifier *_ngcv;
};

/* 6261 */
struct __cppobj Pause_No_Safepoint_Verifier : Pause_No_GC_Verifier
{
  No_Safepoint_Verifier *_nsv;
};

/* 6262 */
struct __declspec(align(4)) InjectedField
{
  const SystemDictionary::WKID klass_id;
  const vmSymbols::SID name_index;
  const vmSymbols::SID signature_index;
  const bool may_be_java;
};

/* 6263 */
struct __cppobj __declspec(align(4)) MutexUnlockerEx : StackObj
{
  Monitor *_mutex;
  bool _no_safepoint_check;
};

/* 6264 */
struct __cppobj GrowableArray<FilteredField *> : GenericGrowableArray
{
  FilteredField **_data;
};

/* 6265 */
struct __cppobj FilteredFieldsMap : AllStatic
{
};

/* 6266 */
struct __cppobj sun_reflect_UnsafeStaticFieldAccessorImpl
{
};

/* 6267 */
struct SafepointSynchronize::SafepointStats
{
  float _time_stamp;
  int _vmop_type;
  int _nof_total_threads;
  int _nof_initial_running_threads;
  int _nof_threads_wait_to_block;
  bool _page_armed;
  int _nof_threads_hit_page_trap;
  __int64 _time_to_spin;
  __int64 _time_to_wait_to_block;
  __int64 _time_to_do_cleanups;
  __int64 _time_to_sync;
  __int64 _time_to_exec_vmop;
};

/* 6268 */
struct __cppobj SafepointSynchronize : AllStatic
{
};

/* 6269 */
struct __cppobj GrowableArray<Symbol *> : GenericGrowableArray
{
  Symbol **_data;
};

/* 6270 */
struct __cppobj SignatureStream : StackObj
{
  Symbol *_signature;
  int _begin;
  int _end;
  BasicType _type;
  bool _at_return_type;
  GrowableArray<Symbol *> *_names;
};

/* 6271 */
struct __cppobj LinkResolver : AllStatic
{
};

/* 6272 */
struct /*VFT*/ Fingerprinter_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
};

/* 6273 */
struct __cppobj __declspec(align(8)) Fingerprinter : SignatureIterator
{
  unsigned __int64 _fingerprint;
  int _shift_count;
  methodHandle mh;
};

/* 6274 */
struct __cppobj java_lang_invoke_CallSite : AllStatic
{
};

/* 6275 */
struct __cppobj VM_Deoptimize : VM_Operation
{
};

/* 6276 */
struct /*VFT*/ VM_Deoptimize_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6277 */
struct __cppobj AbstractAssembler::InstructionMark : StackObj
{
  AbstractAssembler *_assm;
};

/* 6278 */
struct __cppobj AbstractAssembler::ShortBranchVerifier : StackObj
{
};

/* 6279 */
struct __cppobj __declspec(align(4)) fileStream : outputStream
{
  _iobuf *_file;
  bool _need_close;
};

/* 6280 */
struct /*VFT*/ fileStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6281 */
struct __cppobj VM_UnlinkSymbols : VM_Operation
{
};

/* 6282 */
struct /*VFT*/ VM_UnlinkSymbols_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6283 */
struct __cppobj java_lang_Throwable : AllStatic
{
};

/* 6284 */
struct /*VFT*/ GenerationPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6285 */
struct __cppobj GenerationPool : CollectedMemoryPool
{
  Generation *_gen;
};

/* 6286 */
struct __cppobj java_lang_Class : AllStatic
{
};

/* 6287 */
struct __cppobj BytecodeHistogram : AllStatic
{
};

/* 6288 */
struct __cppobj SkipGCALot : StackObj
{
  bool _saved;
  Thread *_t;
};

/* 6289 */
struct __cppobj __declspec(align(8)) staticBufferStream : outputStream
{
  char *_buffer;
  unsigned int _buflen;
  outputStream *_outer_stream;
};

/* 6290 */
struct /*VFT*/ staticBufferStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6291 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23
{
  const void *pVFTable;
  void *spare;
  char name[23];
};

/* 6292 */
struct __cppobj DepChange : StackObj
{
  DepChange_vtbl *__vftable /*VFT*/;
};

/* 6293 */
struct /*VFT*/ DepChange_vtbl
{
  bool (__thiscall *is_klass_change)(DepChange *this);
  bool (__thiscall *is_call_site_change)(DepChange *this);
};

/* 6294 */
struct __cppobj __declspec(align(4)) ExceptionTable : StackObj
{
  ExceptionTableElement *_table;
  unsigned __int16 _length;
};

/* 6295 */
struct __cppobj SignalHandlerMark : StackObj
{
  Thread *_thread;
};

/* 6296 */
struct __cppobj OSThreadWaitState : StackObj
{
  OSThread *_osthread;
  ThreadState _old_state;
};

/* 6297 */
struct __cppobj ThreadLocalStorage : AllStatic
{
};

/* 6298 */
struct __cppobj CompressedLineNumberReadStream : CompressedReadStream
{
  int _bci;
  int _line;
};

/* 6299 */
struct __cppobj NoJvmtiVMObjectAllocMark : StackObj
{
  JvmtiVMObjectAllocEventCollector *_collector;
};

/* 6300 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_51
{
  const void *pVFTable;
  void *spare;
  char name[51];
};

/* 6301 */
struct __cppobj LowMemoryDetector : AllStatic
{
};

/* 6302 */
struct __cppobj ThreadInVMfromUnknown
{
  JavaThread *_thread;
};

/* 6303 */
struct __cppobj GC_locker : AllStatic
{
};

/* 6304 */
struct __cppobj CodeCache : AllStatic
{
};

/* 6305 */
struct __cppobj __declspec(align(8)) GCStatInfo : ResourceObj
{
  unsigned int _index;
  __int64 _start_time;
  __int64 _end_time;
  MemoryUsage *_before_gc_usage_array;
  MemoryUsage *_after_gc_usage_array;
  int _usage_array_size;
};

/* 6306 */
struct /*VFT*/ GCMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6307 */
struct __cppobj __declspec(align(8)) GCMemoryManager : MemoryManager
{
  unsigned int _num_collections;
  elapsedTimer _accumulated_timer;
  elapsedTimer _gc_timer;
  GCStatInfo *_last_gc_stat;
  Mutex *_last_gc_lock;
  GCStatInfo *_current_gc_stat;
  int _num_gc_threads;
  volatile bool _notification_enabled;
  bool _pool_always_affected_by_gc[10];
};

/* 6308 */
struct __cppobj MemoryService : AllStatic
{
};

/* 6309 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_13
{
  const void *pVFTable;
  void *spare;
  char name[13];
};

/* 6310 */
struct __cppobj HashtableBucket<4> : CHeapObj<4>
{
  BasicHashtableEntry<4> *_entry;
};

/* 6311 */
struct __cppobj BasicHashtable<4> : CHeapObj<4>
{
  int _table_size;
  HashtableBucket<4> *_buckets;
  BasicHashtableEntry<4> *volatile _free_list;
  char *_first_free_entry;
  char *_end_block;
  int _entry_size;
  volatile int _number_of_entries;
};

/* 6312 */
struct __cppobj AdapterHandlerTable : BasicHashtable<4>
{
};

/* 6313 */
struct __cppobj AdapterHandlerLibrary : AllStatic
{
};

/* 6314 */
struct __cppobj DerivedPointerTable : AllStatic
{
};

/* 6315 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_18
{
  const void *pVFTable;
  void *spare;
  char name[18];
};

/* 6316 */
struct $_TypeDescriptor$_extraBytes_20
{
  const void *pVFTable;
  void *spare;
  char name[20];
};

/* 6317 */
struct __cppobj java_lang_boxing_object : AllStatic
{
};

/* 6318 */
struct __cppobj klassItable : ResourceObj
{
  instanceKlassHandle _klass;
  int _table_offset;
  int _size_offset_table;
  int _size_method_table;
};

/* 6319 */
struct __cppobj BytecodePairHistogram : AllStatic
{
};

/* 6320 */
struct Flag
{
  const char *_type;
  const char *_name;
  void *_addr;
  Flag::Flags _flags;
};

/* 6321 */
struct /*VFT*/ FilteredFieldStream_vtbl
{
  int (__thiscall *length)(KlassStream *this);
  void (__thiscall *next)(KlassStream *this);
};

/* 6322 */
struct __cppobj FilteredFieldStream : FieldStream
{
  int _filtered_fields_count;
};

/* 6323 */
union DoubleLongConv
{
  long double d;
  __int64 l;
  unsigned __int64 ul;
};

/* 6324 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_37
{
  const void *pVFTable;
  void *spare;
  char name[37];
};

/* 6325 */
struct __cppobj MallocTracker : AllStatic
{
};

/* 6326 */
struct __cppobj VirtualMemoryWalker : StackObj
{
  VirtualMemoryWalker_vtbl *__vftable /*VFT*/;
};

/* 6327 */
struct /*VFT*/ VirtualMemoryWalker_vtbl
{
  bool (__thiscall *do_allocation_site)(VirtualMemoryWalker *this, const ReservedMemoryRegion *);
};

/* 6328 */
struct __cppobj __declspec(align(4)) VM_Verify : VM_Operation
{
  bool _silent;
};

/* 6329 */
struct /*VFT*/ VM_Verify_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6330 */
struct __cppobj ObjectSynchronizer : AllStatic
{
};

/* 6331 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_12
{
  const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
  _BYTE gapC;
};

/* 6332 */
struct __cppobj gcLogFileStream : fileStream
{
  const char *_file_name;
  __int64 _bytes_written;
  unsigned int _cur_file_num;
  Mutex *_file_lock;
};

/* 6333 */
struct /*VFT*/ gcLogFileStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6334 */
struct __cppobj JvmtiHideSingleStepping : StackObj
{
  bool _single_step_hidden;
  JavaThread *_thread;
};

/* 6335 */
struct /*VFT*/ ObjArrayKlass_vtbl
{
  bool (__thiscall *is_metadata)(Metadata *this);
  bool (__thiscall *is_klass)(Metadata *this);
  bool (__thiscall *is_method)(Metadata *this);
  bool (__thiscall *is_methodData)(Metadata *this);
  bool (__thiscall *is_constantPool)(Metadata *this);
  const char *(__thiscall *internal_name)(Metadata *this);
  void (__thiscall *print_on)(Metadata *this, outputStream *);
  void (__thiscall *print_value_on)(Metadata *this, outputStream *);
  bool (__thiscall *on_stack)(Metadata *this);
  void (__thiscall *set_on_stack)(Metadata *this, const bool);
  GrowableArray<Klass *> *(__thiscall *compute_secondary_supers)(Klass *this, int);
  Klass *(__thiscall *java_super)(Klass *this);
  bool (__thiscall *can_be_primary_super_slow)(Klass *this);
  klassVtable *(__thiscall *vtable)(Klass *this);
  int (__thiscall *vtable_length)(Klass *this);
  void (__thiscall *check_valid_for_instantiation)(Klass *this, bool, Thread *);
  void (__thiscall *copy_array)(Klass *this, arrayOopDesc *, int, arrayOopDesc *, int, int, Thread *);
  bool (__thiscall *should_be_initialized)(Klass *this);
  void (__thiscall *initialize)(Klass *this, Thread *);
  Klass *(__thiscall *find_field)(Klass *this, Symbol *, Symbol *, fieldDescriptor *);
  Method *(__thiscall *uncached_lookup_method)(Klass *this, Symbol *, Symbol *, Klass::OverpassLookupMode);
  oopDesc *(__thiscall *protection_domain)(Klass *this);
  oopDesc *(__thiscall *klass_holder)(Klass *this);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, Thread *);
  Klass *(__thiscall *array_klass_impl)(Klass *this, bool, int, Thread *);
  void (__thiscall *remove_unshareable_info)(Klass *this);
  void (__thiscall *restore_unshareable_info)(Klass *this, ClassLoaderData *, Handle, Thread *);
  bool (__thiscall *compute_is_subtype_of)(Klass *this, Klass *);
  bool (__thiscall *is_leaf_class)(Klass *this);
  int (__thiscall *oop_size)(Klass *this, oopDesc *);
  int (__thiscall *size)(Klass *this);
  void (__thiscall *collect_statistics)(Klass *this, KlassSizeStats *);
  const char *(__thiscall *signature_name)(Klass *this);
  void (__thiscall *oop_follow_contents)(Klass *this, ParCompactionManager *, oopDesc *);
  void (__thiscall *oop_follow_contents)(Klass *this, oopDesc *);
  int (__thiscall *oop_adjust_pointers)(Klass *this, oopDesc *);
  void (__thiscall *oop_push_contents)(Klass *this, PSPromotionManager *, oopDesc *);
  int (__thiscall *oop_update_pointers)(Klass *this, ParCompactionManager *, oopDesc *);
  bool (__thiscall *oop_is_instance_slow)(Klass *this);
  bool (__thiscall *oop_is_array_slow)(Klass *this);
  bool (__thiscall *oop_is_objArray_slow)(Klass *this);
  bool (__thiscall *oop_is_typeArray_slow)(Klass *this);
  bool (__thiscall *oop_is_instanceClassLoader)(Klass *this);
  bool (__thiscall *oop_is_instanceMirror)(Klass *this);
  bool (__thiscall *oop_is_instanceRef)(Klass *this);
  void (__thiscall *oops_do)(Klass *this, OopClosure *);
  int (__thiscall *oop_oop_iterate)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_v)(Klass *this, oopDesc *, ExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_v_m)(Klass *this, oopDesc *, ExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1TriggerClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1Mux2Closure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1RootRegionScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1CMOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterOutOfRegionClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilterIntoCSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, G1ParScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, CMSKeepAliveClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushOrMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, PushAndMarkClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ParScanWithBarrierClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FilteringClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, FastScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, ScanClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_nv_m)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *, MemRegion);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsDedupClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahUpdateHeapRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsMetadataClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ShenandoahMarkUpdateRefsClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1UpdateRSOrPushRefOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1InvokeIfNotTriggeredClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1TriggerClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1Mux2Closure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1RootRegionScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1CMOopClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterOutOfRegionClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilterIntoCSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParPushHeapRSClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, G1ParScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSInnerParMarkAndPushClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, CMSKeepAliveClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushOrMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, PushAndMarkClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, Par_MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, MarkRefsIntoAndScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithoutBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ParScanWithBarrierClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FilteringClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, FastScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, ScanClosure *);
  int (__thiscall *oop_oop_iterate_backwards_nv)(Klass *this, oopDesc *, NoHeaderExtendedOopClosure *);
  void (__thiscall *array_klasses_do)(Klass *this, void (__cdecl *)(Klass *));
  int (__thiscall *compute_modifier_flags)(Klass *this, Thread *);
  int (__thiscall *jvmti_class_status)(Klass *this);
  void (__thiscall *oop_print_value_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *oop_print_on)(Klass *this, oopDesc *, outputStream *);
  void (__thiscall *verify_on)(Klass *this, outputStream *);
  void (__thiscall *oop_verify_on)(Klass *this, oopDesc *, outputStream *);
  oopDesc *(__thiscall *multi_allocate)(ArrayKlass *this, int, int *, Thread *);
};

/* 6336 */
struct __cppobj ObjArrayKlass : ArrayKlass
{
  Klass *_element_klass;
  Klass *_bottom_klass;
};

/* 6337 */
struct /*VFT*/ LazyClassPathEntry_vtbl
{
  bool (__thiscall *is_jar_file)(ClassPathEntry *this);
  const char *(__thiscall *name)(ClassPathEntry *this);
  bool (__thiscall *is_lazy)(ClassPathEntry *this);
  ClassFileStream *(__thiscall *open_stream)(ClassPathEntry *this, const char *, Thread *);
};

/* 6338 */
struct __cppobj __declspec(align(8)) LazyClassPathEntry : ClassPathEntry
{
  const char *_path;
  stat _st;
  MetaIndex *_meta_index;
  bool _has_error;
  bool _throw_exception;
  volatile ClassPathEntry *_resolved_entry;
};

/* 6339 */
struct __cppobj DeferredObjAllocEvent : CHeapObj<7>
{
  oopDesc *_oop;
  unsigned int _bytesize;
  int _arena_id;
};

/* 6340 */
struct __cppobj sun_reflect_ConstantPool
{
};

/* 6341 */
struct __cppobj boolStack : boolArray
{
  int _size;
};

/* 6342 */
struct __cppobj AllocTracer : AllStatic
{
};

/* 6343 */
struct __cppobj PerfDataList : CHeapObj<7>
{
  GrowableArray<PerfData *> *_set;
};

/* 6344 */
struct __cppobj PerfDataManager : AllStatic
{
};

/* 6345 */
struct __cppobj JNITypes : AllStatic
{
};

/* 6346 */
struct __cppobj VirtualSpaceList : CHeapObj<1>
{
  VirtualSpaceNode *_virtual_space_list;
  VirtualSpaceNode *_current_virtual_space;
  bool _is_class;
  unsigned int _reserved_words;
  unsigned int _committed_words;
  unsigned int _virtual_space_count;
};

/* 6347 */
struct __cppobj FreeList<Metachunk> : _ValueObj
{
  Metachunk *_head;
  Metachunk *_tail;
  unsigned int _size;
  int _count;
};

/* 6348 */
struct __cppobj FreeBlockDictionary<Metachunk> : CHeapObj<5>
{
  FreeBlockDictionary<Metachunk>_vtbl *__vftable /*VFT*/;
};

/* 6349 */
struct /*VFT*/ FreeBlockDictionary<Metachunk>_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  Metachunk *(__thiscall *get_chunk)(FreeBlockDictionary<Metachunk> *this, unsigned int, FreeBlockDictionary<Metachunk>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<Metachunk> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<Metachunk> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metachunk> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<Metachunk> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<Metachunk> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<Metachunk> *this, long double);
  Metachunk *(__thiscall *find_largest_dict)(FreeBlockDictionary<Metachunk> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<Metachunk> *this);
  Metachunk *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<Metachunk> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<Metachunk> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<Metachunk> *this);
};

/* 6350 */
struct __cppobj TreeList<Metachunk,FreeList<Metachunk> > : FreeList<Metachunk>
{
  TreeList<Metachunk,FreeList<Metachunk> > *_parent;
  TreeList<Metachunk,FreeList<Metachunk> > *_left;
  TreeList<Metachunk,FreeList<Metachunk> > *_right;
};

/* 6351 */
struct /*VFT*/ BinaryTreeDictionary<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *remove_chunk)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  Metachunk *(__thiscall *get_chunk)(FreeBlockDictionary<Metachunk> *this, unsigned int, FreeBlockDictionary<Metachunk>::Dither);
  void (__thiscall *return_chunk)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  unsigned int (__thiscall *total_chunk_size)(FreeBlockDictionary<Metachunk> *this);
  unsigned int (__thiscall *max_chunk_size)(FreeBlockDictionary<Metachunk> *this);
  unsigned int (__thiscall *min_size)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *reset)(FreeBlockDictionary<Metachunk> *this, HeapWord *, unsigned int);
  void (__thiscall *dict_census_update)(FreeBlockDictionary<Metachunk> *this, unsigned int, bool, bool);
  bool (__thiscall *coal_dict_over_populated)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *begin_sweep_dict_census)(FreeBlockDictionary<Metachunk> *this, long double, float, float, float);
  void (__thiscall *end_sweep_dict_census)(FreeBlockDictionary<Metachunk> *this, long double);
  Metachunk *(__thiscall *find_largest_dict)(FreeBlockDictionary<Metachunk> *this);
  bool (__thiscall *verify_chunk_in_free_list)(FreeBlockDictionary<Metachunk> *this, Metachunk *);
  long double (__thiscall *sum_of_squared_block_sizes)(FreeBlockDictionary<Metachunk> *this);
  Metachunk *(__thiscall *find_chunk_ends_at)(FreeBlockDictionary<Metachunk> *this, HeapWord *);
  void (__thiscall *inc_total_size)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *dec_total_size)(FreeBlockDictionary<Metachunk> *this, unsigned int);
  void (__thiscall *report_statistics)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *print_dict_census)(FreeBlockDictionary<Metachunk> *this);
  void (__thiscall *print_free_lists)(FreeBlockDictionary<Metachunk> *this, outputStream *);
  void (__thiscall *verify)(FreeBlockDictionary<Metachunk> *this);
};

/* 6352 */
struct __cppobj BinaryTreeDictionary<Metachunk,FreeList<Metachunk> > : FreeBlockDictionary<Metachunk>
{
  unsigned int _total_size;
  unsigned int _total_free_blocks;
  TreeList<Metachunk,FreeList<Metachunk> > *_root;
};

/* 6353 */
struct __cppobj ChunkManager : CHeapObj<7>
{
  FreeList<Metachunk> _free_chunks[3];
  BinaryTreeDictionary<Metachunk,FreeList<Metachunk> > _humongous_dictionary;
  unsigned int _free_chunks_total;
  unsigned int _free_chunks_count;
};

/* 6354 */
struct __cppobj CHeapObj<14>
{
};

/* 6355 */
struct __cppobj MetaspaceTracer : CHeapObj<14>
{
};

/* 6356 */
struct __cppobj Metaspace::AllocRecordClosure : StackObj
{
  Metaspace::AllocRecordClosure_vtbl *__vftable /*VFT*/;
};

/* 6357 */
struct /*VFT*/ Metaspace::AllocRecordClosure_vtbl
{
  void (__thiscall *doit)(Metaspace::AllocRecordClosure *this, unsigned __int8 *, MetaspaceObj::Type, int);
};

/* 6358 */
struct __cppobj ExternalAddress : AddressLiteral
{
};

/* 6359 */
struct __cppobj PerfMemory : AllStatic
{
};

/* 6360 */
struct __cppobj VM_ForceSafepoint : VM_Operation
{
};

/* 6361 */
struct /*VFT*/ VM_ForceSafepoint_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6362 */
struct /*VFT*/ DefNewGeneration::FastKeepAliveClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6363 */
struct __cppobj DefNewGeneration::FastKeepAliveClosure : DefNewGeneration::KeepAliveClosure
{
  HeapWord *_boundary;
};

/* 6364 */
struct /*VFT*/ DefNewGeneration::EvacuateFollowersClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 6365 */
struct __cppobj DefNewGeneration::EvacuateFollowersClosure : VoidClosure
{
  GenCollectedHeap *_gch;
  int _level;
  ScanClosure *_scan_cur_or_nonheap;
  ScanClosure *_scan_older;
};

/* 6366 */
struct /*VFT*/ DefNewGeneration::FastEvacuateFollowersClosure_vtbl
{
  void (__thiscall *do_void)(VoidClosure *this);
};

/* 6367 */
struct __cppobj DefNewGeneration::FastEvacuateFollowersClosure : VoidClosure
{
  GenCollectedHeap *_gch;
  int _level;
  DefNewGeneration *_gen;
  FastScanClosure *_scan_cur_or_nonheap;
  FastScanClosure *_scan_older;
};

/* 6368 */
struct __cppobj JavaClasses : AllStatic
{
};

/* 6369 */
struct __cppobj __declspec(align(4)) GCMutexLocker : StackObj
{
  Monitor *_mutex;
  bool _locked;
};

/* 6370 */
struct /*VFT*/ InterpreterCodeletInterface_vtbl
{
  void (__thiscall *initialize)(StubInterface *this, Stub *, int, CodeStrings *);
  void (__thiscall *finalize)(StubInterface *this, Stub *);
  int (__thiscall *size)(StubInterface *this, Stub *);
  int (__thiscall *code_size_to_size)(StubInterface *this, int);
  unsigned __int8 *(__thiscall *code_begin)(StubInterface *this, Stub *);
  unsigned __int8 *(__thiscall *code_end)(StubInterface *this, Stub *);
  void (__thiscall *verify)(StubInterface *this, Stub *);
  void (__thiscall *print)(StubInterface *this, Stub *);
};

/* 6371 */
struct __cppobj InterpreterCodeletInterface : StubInterface
{
};

/* 6372 */
struct __cppobj FlagSetting
{
  bool val;
  bool *flag;
};

/* 6373 */
struct __cppobj ThreadBlockInVM : ThreadStateTransition
{
};

/* 6374 */
struct /*VFT*/ NeverClearPolicy_vtbl
{
  bool (__thiscall *should_clear_reference)(ReferencePolicy *this, oopDesc *, __int64);
  void (__thiscall *setup)(ReferencePolicy *this);
};

/* 6375 */
struct __cppobj NeverClearPolicy : ReferencePolicy
{
};

/* 6376 */
struct __cppobj LowMemoryDetectorDisabler : StackObj
{
};

/* 6377 */
struct /*VFT*/ AdapterBlob_vtbl
{
  bool (__thiscall *is_buffer_blob)(CodeBlob *this);
  bool (__thiscall *is_nmethod)(CodeBlob *this);
  bool (__thiscall *is_runtime_stub)(CodeBlob *this);
  bool (__thiscall *is_deoptimization_stub)(CodeBlob *this);
  bool (__thiscall *is_uncommon_trap_stub)(CodeBlob *this);
  bool (__thiscall *is_exception_stub)(CodeBlob *this);
  bool (__thiscall *is_safepoint_stub)(CodeBlob *this);
  bool (__thiscall *is_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_vtable_blob)(CodeBlob *this);
  bool (__thiscall *is_method_handles_adapter_blob)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c2)(CodeBlob *this);
  bool (__thiscall *is_compiled_by_c1)(CodeBlob *this);
  bool (__thiscall *is_zombie)(CodeBlob *this);
  bool (__thiscall *is_locked_by_vm)(CodeBlob *this);
  bool (__thiscall *is_unloaded)(CodeBlob *this);
  bool (__thiscall *is_not_entrant)(CodeBlob *this);
  bool (__thiscall *is_alive)(CodeBlob *this);
  void (__thiscall *preserve_callee_argument_oops)(CodeBlob *this, frame, const RegisterMap *, OopClosure *);
  bool (__thiscall *caller_must_gc_arguments)(CodeBlob *this, JavaThread *);
  void (__thiscall *verify)(CodeBlob *this);
  void (__thiscall *print_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_value_on)(CodeBlob *this, outputStream *);
  void (__thiscall *print_block_comment)(CodeBlob *this, outputStream *, unsigned __int8 *);
};

/* 6378 */
struct __cppobj AdapterBlob : BufferBlob
{
};

/* 6379 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25
{
  const void *pVFTable;
  void *spare;
  char name[25];
};

/* 6380 */
struct __cppobj VM_PrintJNI : VM_Operation
{
  outputStream *_out;
};

/* 6381 */
struct /*VFT*/ VM_PrintJNI_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6382 */
struct __cppobj RuntimeAddress : AddressLiteral
{
};

/* 6383 */
struct __cppobj CounterSetting
{
  int *counter;
};

/* 6384 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_17
{
  const void *pVFTable;
  void *spare;
  char name[17];
};

/* 6385 */
struct _stat64i32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 6386 */
struct /*VFT*/ SurvivorContiguousSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6387 */
struct __cppobj SurvivorContiguousSpacePool : CollectedMemoryPool
{
  DefNewGeneration *_gen;
};

/* 6388 */
struct __cppobj vmSymbols : AllStatic
{
};

/* 6389 */
struct __cppobj OSThreadContendState : StackObj
{
  OSThread *_osthread;
  ThreadState _old_state;
};

/* 6390 */
struct __cppobj __declspec(align(4)) ObjectLocker : StackObj
{
  Thread *_thread;
  Handle _obj;
  BasicLock _lock;
  bool _dolock;
};

/* 6391 */
struct __cppobj java_lang_ref_Reference : AllStatic
{
};

/* 6392 */
struct __cppobj CleanExtraDataClosure : StackObj
{
  CleanExtraDataClosure_vtbl *__vftable /*VFT*/;
};

/* 6393 */
struct /*VFT*/ CleanExtraDataClosure_vtbl
{
  bool (__thiscall *is_live)(CleanExtraDataClosure *this, Method *);
};

/* 6394 */
struct __cppobj VirtualMemoryTracker : AllStatic
{
};

/* 6395 */
struct __cppobj SortedLinkedList<ReservedMemoryRegion,&compare_reserved_region_base,2,10,1> : LinkedListImpl<ReservedMemoryRegion,2,10,1>
{
};

/* 6396 */
struct /*VFT*/ SortedLinkedList<ReservedMemoryRegion,&compare_reserved_region_base,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<ReservedMemoryRegion> *this, LinkedList<ReservedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const LinkedList<ReservedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *find_node)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  ReservedMemoryRegion *(__thiscall *find)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_before)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_after)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  void (__thiscall *~LinkedListImpl<ReservedMemoryRegion,2,10,1>)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
};

/* 6397 */
struct __cppobj VM_RotateGCLog : VM_Operation
{
  outputStream *_out;
};

/* 6398 */
struct /*VFT*/ VM_RotateGCLog_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6399 */
struct _tagADDRESS64
{
  unsigned __int64 Offset;
  unsigned __int16 Segment;
  ADDRESS_MODE Mode;
};

/* 6400 */
struct __declspec(align(4)) _IMAGEHLP_SYMBOL64
{
  unsigned int SizeOfStruct;
  unsigned __int64 Address;
  unsigned int Size;
  unsigned int Flags;
  unsigned int MaxNameLength;
  char Name[1];
};

/* 6401 */
struct __cppobj AbstractDecoder : CHeapObj<7>
{
  AbstractDecoder_vtbl *__vftable /*VFT*/;
  AbstractDecoder::decoder_status _decoder_status;
};

/* 6402 */
struct /*VFT*/ AbstractDecoder_vtbl
{
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const void *);
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const char *);
  bool (__thiscall *demangle)(AbstractDecoder *this, const char *, char *, int);
  bool (__thiscall *can_decode_C_frame_in_vm)(AbstractDecoder *this);
  AbstractDecoder::decoder_status (__thiscall *status)(AbstractDecoder *this);
  bool (__thiscall *has_error)(AbstractDecoder *this);
};

/* 6403 */
struct _KDHELP
{
  unsigned int Thread;
  unsigned int ThCallbackStack;
  unsigned int NextCallback;
  unsigned int FramePointer;
  unsigned int KiCallUserMode;
  unsigned int KeUserCallbackDispatcher;
  unsigned int SystemRangeStart;
  unsigned int ThCallbackBStore;
  unsigned int KiUserExceptionDispatcher;
  unsigned int StackBase;
  unsigned int StackLimit;
  unsigned int Reserved[5];
};

/* 6404 */
struct __cppobj AgentLibraryList : _ValueObj
{
  AgentLibrary *_first;
  AgentLibrary *_last;
};

/* 6405 */
struct __cppobj DecoderLocker : MutexLockerEx
{
  AbstractDecoder *_decoder;
};

/* 6406 */
struct /*VFT*/ WindowsDecoder_vtbl
{
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const void *);
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const char *);
  bool (__thiscall *demangle)(AbstractDecoder *this, const char *, char *, int);
  bool (__thiscall *can_decode_C_frame_in_vm)(AbstractDecoder *this);
  AbstractDecoder::decoder_status (__thiscall *status)(AbstractDecoder *this);
  bool (__thiscall *has_error)(AbstractDecoder *this);
};

/* 6407 */
struct __cppobj WindowsDecoder : AbstractDecoder
{
  HINSTANCE__ *_dbghelp_handle;
  bool _can_decode_in_vm;
  int (__stdcall *_pfnSymGetSymFromAddr64)(void *, unsigned __int64, unsigned __int64 *, _IMAGEHLP_SYMBOL64 *);
  unsigned int (__stdcall *_pfnUndecorateSymbolName)(const char *, char *, unsigned int, unsigned int);
};

/* 6408 */
struct _KDHELP64
{
  unsigned __int64 Thread;
  unsigned int ThCallbackStack;
  unsigned int ThCallbackBStore;
  unsigned int NextCallback;
  unsigned int FramePointer;
  unsigned __int64 KiCallUserMode;
  unsigned __int64 KeUserCallbackDispatcher;
  unsigned __int64 SystemRangeStart;
  unsigned __int64 KiUserExceptionDispatcher;
  unsigned __int64 StackBase;
  unsigned __int64 StackLimit;
  unsigned __int64 Reserved[5];
};

/* 6409 */
struct _tagADDRESS
{
  unsigned int Offset;
  unsigned __int16 Segment;
  ADDRESS_MODE Mode;
};

/* 6410 */
struct __cppobj __declspec(align(4)) SystemProperty : CHeapObj<7>
{
  char *_key;
  char *_value;
  SystemProperty *_next;
  bool _writeable;
};

/* 6411 */
struct /*VFT*/ NullDecoder_vtbl
{
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const void *);
  bool (__thiscall *decode)(AbstractDecoder *this, unsigned __int8 *, char *, int, int *, const char *);
  bool (__thiscall *demangle)(AbstractDecoder *this, const char *, char *, int);
  bool (__thiscall *can_decode_C_frame_in_vm)(AbstractDecoder *this);
  AbstractDecoder::decoder_status (__thiscall *status)(AbstractDecoder *this);
  bool (__thiscall *has_error)(AbstractDecoder *this);
};

/* 6412 */
struct __cppobj NullDecoder : AbstractDecoder
{
};

/* 6413 */
struct __cppobj Arguments : AllStatic
{
};

/* 6414 */
struct __cppobj SysClassPath : StackObj
{
  const char *_items[4];
};

/* 6415 */
struct __cppobj FormatBuffer<80> : FormatBufferBase
{
  char _buffer[80];
};

/* 6416 */
struct /*VFT*/ VM_Version_StubGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 6417 */
struct __cppobj VM_Version_StubGenerator : StubCodeGenerator
{
};

/* 6418 */
struct __cppobj StubCodeMark : StackObj
{
  StubCodeGenerator *_cgen;
  StubCodeDesc *_cdesc;
};

/* 6419 */
struct __cppobj VM_Version_Ext : VM_Version
{
};

/* 6420 */
struct /*VFT*/ VM_Version_Ext_StubGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 6421 */
struct __cppobj VM_Version_Ext_StubGenerator : StubCodeGenerator
{
};

/* 6422 */
struct __cppobj SkipIfEqual
{
  MacroAssembler *_masm;
  Label _label;
};

/* 6423 */
struct __cppobj AbstractInterpreterGenerator : StackObj
{
  InterpreterMacroAssembler *_masm;
};

/* 6424 */
struct __cppobj TemplateInterpreterGenerator : AbstractInterpreterGenerator
{
  unsigned __int8 *_unimplemented_bytecode;
  unsigned __int8 *_illegal_bytecode_sequence;
};

/* 6425 */
struct __cppobj InterpreterGenerator : TemplateInterpreterGenerator
{
};

/* 6426 */
struct /*VFT*/ StubGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 6427 */
struct __cppobj StubGenerator : StubCodeGenerator
{
};

/* 6428 */
struct __cppobj RegisterSaver
{
};

/* 6429 */
struct __cppobj Deoptimization : AllStatic
{
};

/* 6430 */
struct /*VFT*/ RTMLockingCalculationTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 6431 */
struct __cppobj RTMLockingCalculationTask : PeriodicTask
{
};

/* 6432 */
struct __cppobj Rdtsc : AllStatic
{
};

/* 6433 */
struct __cppobj MethodHandles : AllStatic
{
};

/* 6434 */
struct __cppobj MetaspaceShared : AllStatic
{
};

/* 6435 */
struct __cppobj FileMapInfo::FileMapHeaderBase : CHeapObj<1>
{
  FileMapInfo::FileMapHeaderBase_vtbl *__vftable /*VFT*/;
};

/* 6436 */
struct __cppobj FileMapInfo : CHeapObj<7>
{
  bool _file_open;
  int _fd;
  unsigned int _file_offset;
  FileMapInfo::FileMapHeader *_header;
  const char *_full_path;
  char *_paths_misc_info;
};

/* 6437 */
struct /*VFT*/ FileMapInfo::FileMapHeaderBase_vtbl
{
  bool (__thiscall *validate)(FileMapInfo::FileMapHeaderBase *this);
  void (__thiscall *populate)(FileMapInfo::FileMapHeaderBase *this, FileMapInfo *, unsigned int);
};

/* 6438 */
struct __declspec(align(4)) FileMapInfo::FileMapHeader::space_info
{
  int _crc;
  unsigned int _file_offset;
  char *_base;
  unsigned int _capacity;
  unsigned int _used;
  bool _read_only;
  bool _allow_exec;
};

/* 6439 */
struct __cppobj __declspec(align(8)) SharedClassPathEntry : _ValueObj
{
  const char *_name;
  __int64 _timestamp;
  int _filesize;
};

/* 6440 */
struct /*VFT*/ FileMapInfo::FileMapHeader_vtbl
{
  bool (__thiscall *validate)(FileMapInfo::FileMapHeaderBase *this);
  void (__thiscall *populate)(FileMapInfo::FileMapHeaderBase *this, FileMapInfo *, unsigned int);
};

/* 6441 */
struct __cppobj FileMapInfo::FileMapHeader : FileMapInfo::FileMapHeaderBase
{
  int _magic;
  int _crc;
  int _version;
  unsigned int _alignment;
  int _obj_alignment;
  FileMapInfo::FileMapHeader::space_info _space[4];
  char _jvm_ident[256];
  int _paths_misc_info_size;
  int _classpath_entry_table_size;
  unsigned int _classpath_entry_size;
  SharedClassPathEntry *_classpath_entry_table;
};

/* 6442 */
struct ControlWord
{
  int _value;
};

/* 6443 */
struct StatusWord
{
  int _value;
};

/* 6444 */
struct TagWord
{
  int _value;
};

/* 6445 */
struct __declspec(align(4)) FPU_Register
{
  int _m0;
  int _m1;
  __int16 _ex;
};

/* 6446 */
struct FPU_State
{
  ControlWord _control_word;
  StatusWord _status_word;
  TagWord _tag_word;
  int _error_offset;
  int _error_selector;
  int _data_offset;
  int _data_selector;
  char _register[80];
};

/* 6447 */
struct Flag_Register
{
  int _value;
};

/* 6448 */
struct IU_Register
{
  int _value;
};

/* 6449 */
struct IU_State
{
  Flag_Register _eflags;
  IU_Register _rdi;
  IU_Register _rsi;
  IU_Register _rbp;
  IU_Register _rsp;
  IU_Register _rbx;
  IU_Register _rdx;
  IU_Register _rcx;
  IU_Register _rax;
};

/* 6450 */
struct CPU_State
{
  FPU_State _fpu_state;
  IU_State _iu_state;
};

/* 6451 */
struct __cppobj JNI_FastGetField : AllStatic
{
};

/* 6452 */
struct __cppobj GrowableArray<unsigned __int64> : GenericGrowableArray
{
  unsigned __int64 *_data;
};

/* 6453 */
struct __cppobj GrowableArray<unsigned char *> : GenericGrowableArray
{
  unsigned __int8 **_data;
};

/* 6454 */
struct __cppobj SignatureHandlerLibrary : AllStatic
{
};

/* 6455 */
struct /*VFT*/ SlowSignatureHandler_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *pass_int)(NativeSignatureIterator *this);
  void (__thiscall *pass_long)(NativeSignatureIterator *this);
  void (__thiscall *pass_object)(NativeSignatureIterator *this);
  void (__thiscall *pass_float)(NativeSignatureIterator *this);
  void (__thiscall *pass_double)(NativeSignatureIterator *this);
};

/* 6456 */
struct __cppobj SlowSignatureHandler : NativeSignatureIterator
{
  unsigned __int8 *_from;
  int *_to;
};

/* 6457 */
struct __cppobj StubFrame : StackObj
{
  StubAssembler *_sasm;
};

/* 6458 */
struct __cppobj WindowsSemaphore : CHeapObj<7>
{
  void *_semaphore;
};

/* 6459 */
struct ace_data
{
  void *pSid;
  unsigned int mask;
};

/* 6460 */
struct _ACL
{
  unsigned __int8 AclRevision;
  unsigned __int8 Sbz1;
  unsigned __int16 AclSize;
  unsigned __int16 AceCount;
  unsigned __int16 Sbz2;
};

/* 6461 */
struct _ACL_SIZE_INFORMATION
{
  unsigned int AceCount;
  unsigned int AclBytesInUse;
  unsigned int AclBytesFree;
};

/* 6462 */
struct _SID_IDENTIFIER_AUTHORITY
{
  unsigned __int8 Value[6];
};

/* 6463 */
union $C62B871DDAD264A78966C031EB6F6050
{
  int longValue;
  long double doubleValue;
  __int64 largeValue;
  const char *AnsiStringValue;
  const wchar_t *WideStringValue;
};

/* 6464 */
struct _PDH_FMT_COUNTERVALUE
{
  unsigned int CStatus;
  $C62B871DDAD264A78966C031EB6F6050 ___u1;
};

/* 6465 */
struct _PDH_COUNTER_PATH_ELEMENTS_A
{
  char *szMachineName;
  char *szObjectName;
  char *szInstanceName;
  char *szParentInstance;
  unsigned int dwInstanceIndex;
  char *szCounterName;
};

/* 6466 */
struct __cppobj PdhDll : AllStatic
{
};

/* 6467 */
struct $FA12F09740F1EA6BC1469885CE7F69DB
{
  char *name;
  unsigned int number;
};

/* 6468 */
const struct $3AD80097D3C52B53FBCD24880FDDA579
{
  char *name;
  unsigned int number;
};

/* 6469 */
struct _MINIDUMP_EXCEPTION_INFORMATION
{
  unsigned int ThreadId;
  _EXCEPTION_POINTERS *ExceptionPointers;
  int ClientPointers;
};

/* 6470 */
struct _MINIDUMP_USER_STREAM
{
  unsigned int Type;
  unsigned int BufferSize;
  void *Buffer;
};

/* 6471 */
struct _MINIDUMP_USER_STREAM_INFORMATION
{
  unsigned int UserStreamCount;
  _MINIDUMP_USER_STREAM *UserStreamArray;
};

/* 6472 */
struct _MINIDUMP_THREAD_CALLBACK
{
  unsigned int ThreadId;
  void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  unsigned __int64 StackBase;
  unsigned __int64 StackEnd;
};

/* 6473 */
struct _MINIDUMP_THREAD_EX_CALLBACK
{
  unsigned int ThreadId;
  void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  unsigned __int64 StackBase;
  unsigned __int64 StackEnd;
  unsigned __int64 BackingStoreBase;
  unsigned __int64 BackingStoreEnd;
};

/* 6474 */
struct tagVS_FIXEDFILEINFO
{
  unsigned int dwSignature;
  unsigned int dwStrucVersion;
  unsigned int dwFileVersionMS;
  unsigned int dwFileVersionLS;
  unsigned int dwProductVersionMS;
  unsigned int dwProductVersionLS;
  unsigned int dwFileFlagsMask;
  unsigned int dwFileFlags;
  unsigned int dwFileOS;
  unsigned int dwFileType;
  unsigned int dwFileSubtype;
  unsigned int dwFileDateMS;
  unsigned int dwFileDateLS;
};

/* 6475 */
struct __unaligned __declspec(align(4)) _MINIDUMP_MODULE_CALLBACK
{
  wchar_t *FullPath;
  unsigned __int64 BaseOfImage;
  unsigned int SizeOfImage;
  unsigned int CheckSum;
  unsigned int TimeDateStamp;
  tagVS_FIXEDFILEINFO VersionInfo;
  void *CvRecord;
  unsigned int SizeOfCvRecord;
  void *MiscRecord;
  unsigned int SizeOfMiscRecord;
};

/* 6476 */
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
  unsigned int ThreadId;
};

/* 6477 */
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
  unsigned __int64 BaseOfImage;
};

/* 6478 */
struct __unaligned __declspec(align(4)) _MINIDUMP_IO_CALLBACK
{
  void *Handle;
  unsigned __int64 Offset;
  void *Buffer;
  unsigned int BufferBytes;
};

/* 6479 */
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
  unsigned __int64 Offset;
  unsigned int Bytes;
  HRESULT FailureStatus;
};

/* 6480 */
union $70B078650CC9965560346EADD00471FD
{
  HRESULT Status;
  _MINIDUMP_THREAD_CALLBACK Thread;
  _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
  _MINIDUMP_MODULE_CALLBACK Module;
  _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
  _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
  _MINIDUMP_IO_CALLBACK Io;
  _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
  unsigned int SecondaryFlags;
};

/* 6481 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_INPUT
{
  unsigned int ProcessId;
  void *ProcessHandle;
  unsigned int CallbackType;
  $70B078650CC9965560346EADD00471FD ___u3;
};

/* 6482 */
struct _MINIDUMP_MEMORY_INFO
{
  unsigned __int64 BaseAddress;
  unsigned __int64 AllocationBase;
  unsigned int AllocationProtect;
  unsigned int __alignment1;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
  unsigned int __alignment2;
};

/* 6483 */
struct $C3E071958E7BDFB53859BF79F284BD3C
{
  unsigned int ModuleWriteFlags;
  int Cancel;
  unsigned int MemorySize;
};

/* 6484 */
union $C6A47CF0ECD05564130FEBFEB75376C4
{
  $C3E071958E7BDFB53859BF79F284BD3C __s0;
  unsigned int ThreadWriteFlags;
  unsigned int SecondaryFlags;
  unsigned __int64 MemoryBase;
  int CheckCancel;
  void *Handle;
  _MINIDUMP_MEMORY_INFO VmRegion;
  HRESULT Status;
};

/* 6485 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_OUTPUT
{
  $C6A47CF0ECD05564130FEBFEB75376C4 ___u0;
  int Continue;
};

/* 6486 */
struct _MINIDUMP_CALLBACK_INFORMATION
{
  int (__stdcall *CallbackRoutine)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);
  void *CallbackParam;
};

/* 6487 */
struct __cppobj NUMANodeListHolder
{
  int *_numa_used_node_list;
  int _numa_used_node_count;
};

/* 6488 */
struct _PROCESS_HEAP_ENTRY::<unnamed_tag>::<unnamed_type_Block>
{
  void *hMem;
  unsigned int dwReserved[3];
};

/* 6489 */
struct _PROCESS_HEAP_ENTRY::<unnamed_tag>::<unnamed_type_Region>
{
  unsigned int dwCommittedSize;
  unsigned int dwUnCommittedSize;
  void *lpFirstBlock;
  void *lpLastBlock;
};

/* 6490 */
union $09E50B07237BF48CB5AB9A2EF8BD3DB0
{
  _PROCESS_HEAP_ENTRY::<unnamed_tag>::<unnamed_type_Block> Block;
  _PROCESS_HEAP_ENTRY::<unnamed_tag>::<unnamed_type_Region> Region;
};

/* 6491 */
struct _PROCESS_HEAP_ENTRY
{
  void *lpData;
  unsigned int cbData;
  unsigned __int8 cbOverhead;
  unsigned __int8 iRegionIndex;
  unsigned __int16 wFlags;
  $09E50B07237BF48CB5AB9A2EF8BD3DB0 ___u5;
};

/* 6492 */
struct __cppobj ciCallSite : ciInstance
{
};

/* 6493 */
struct /*VFT*/ KlassDepChange_vtbl
{
  bool (__thiscall *is_klass_change)(DepChange *this);
  bool (__thiscall *is_call_site_change)(DepChange *this);
};

/* 6494 */
struct __cppobj KlassDepChange : DepChange
{
  KlassHandle _new_type;
};

/* 6495 */
struct /*VFT*/ CallSiteDepChange_vtbl
{
  bool (__thiscall *is_klass_change)(DepChange *this);
  bool (__thiscall *is_call_site_change)(DepChange *this);
};

/* 6496 */
struct __cppobj CallSiteDepChange : DepChange
{
  Handle _call_site;
  Handle _method_handle;
};

/* 6497 */
struct __cppobj Dependencies::DepArgument : ResourceObj
{
  bool _is_oop;
  bool _valid;
  void *_value;
};

/* 6498 */
struct __cppobj GrowableArray<Dependencies::DepArgument> : GenericGrowableArray
{
  Dependencies::DepArgument *_data;
};

/* 6499 */
struct __cppobj Dependencies::DepStream
{
  nmethod *_code;
  Dependencies *_deps;
  CompressedReadStream _bytes;
  Dependencies::DepType _type;
  int _xi[4];
};

/* 6500 */
struct tagUSEROBJECTFLAGS
{
  int fInherit;
  int fReserved;
  unsigned int dwFlags;
};

/* 6501 */
struct _tagpropertykey
{
  _GUID fmtid;
  unsigned int pid;
};

/* 6502 */
struct HWINSTA__
{
  int unused;
};

/* 6503 */
struct fd_set
{
  unsigned int fd_count;
  unsigned int fd_array[64];
};

/* 6504 */
struct __cppobj Disassembler
{
};

/* 6505 */
struct __cppobj CompileBroker : AllStatic
{
};

/* 6506 */
struct __cppobj GrowableArray<CompilerThread *> : GenericGrowableArray
{
  CompilerThread **_data;
};

/* 6507 */
struct _MEMORY_BASIC_INFORMATION
{
  void *BaseAddress;
  void *AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 6508 */
struct __cppobj GrowableArrayIterator<ciBaseObject *> : StackObj
{
  const GrowableArray<ciBaseObject *> *_array;
  int _position;
};

/* 6509 */
struct _OSVERSIONINFOEXA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  unsigned __int8 wProductType;
  unsigned __int8 wReserved;
};

/* 6510 */
struct _STARTUPINFOA
{
  unsigned int cb;
  char *lpReserved;
  char *lpDesktop;
  char *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  unsigned __int8 *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 6511 */
struct _stat64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 6512 */
struct _FOCUS_EVENT_RECORD
{
  int bSetFocus;
};

/* 6513 */
struct __cppobj DepChange::ContextStream : StackObj
{
  DepChange *_changes;
  DepChange::ChangeType _change_type;
  Klass *_klass;
  Array<Klass *> *_ti_base;
  int _ti_index;
  int _ti_limit;
};

/* 6514 */
struct _MEMORYSTATUSEX
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned __int64 ullTotalPhys;
  unsigned __int64 ullAvailPhys;
  unsigned __int64 ullTotalPageFile;
  unsigned __int64 ullAvailPageFile;
  unsigned __int64 ullTotalVirtual;
  unsigned __int64 ullAvailVirtual;
  unsigned __int64 ullAvailExtendedVirtual;
};

/* 6515 */
struct __unaligned __declspec(align(1)) _SHITEMID
{
  unsigned __int16 cb;
  unsigned __int8 abID[1];
};

/* 6516 */
struct _ITEMIDLIST
{
  _SHITEMID mkid;
};

/* 6517 */
struct _COORD
{
  __int16 X;
  __int16 Y;
};

/* 6518 */
struct _MOUSE_EVENT_RECORD
{
  _COORD dwMousePosition;
  unsigned int dwButtonState;
  unsigned int dwControlKeyState;
  unsigned int dwEventFlags;
};

/* 6519 */
struct _OSVERSIONINFOA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
};

/* 6520 */
struct _SYSTEMTIME
{
  unsigned __int16 wYear;
  unsigned __int16 wMonth;
  unsigned __int16 wDayOfWeek;
  unsigned __int16 wDay;
  unsigned __int16 wHour;
  unsigned __int16 wMinute;
  unsigned __int16 wSecond;
  unsigned __int16 wMilliseconds;
};

/* 6521 */
struct HWND__
{
  int unused;
};

/* 6522 */
struct __cppobj HighResolutionInterval : CHeapObj<2>
{
  __int64 resolution;
};

/* 6523 */
struct /*VFT*/ ciNullObject_vtbl
{
  const char *(__thiscall *type_string)(ciBaseObject *this);
  bool (__thiscall *is_symbol)(ciBaseObject *this);
  bool (__thiscall *is_object)(ciBaseObject *this);
  bool (__thiscall *is_metadata)(ciBaseObject *this);
  void (__thiscall *print_impl)(ciObject *this, outputStream *);
  bool (__thiscall *is_null_object)(ciObject *this);
  bool (__thiscall *is_call_site)(ciObject *this);
  bool (__thiscall *is_cpcache)(ciObject *this);
  bool (__thiscall *is_instance)(ciObject *this);
  bool (__thiscall *is_member_name)(ciObject *this);
  bool (__thiscall *is_method_handle)(ciObject *this);
  bool (__thiscall *is_method_type)(ciObject *this);
  bool (__thiscall *is_array)(ciObject *this);
  bool (__thiscall *is_obj_array)(ciObject *this);
  bool (__thiscall *is_type_array)(ciObject *this);
  bool (__thiscall *is_classless)(ciObject *this);
  void (__thiscall *dump_replay_data)(ciObject *this, outputStream *);
};

/* 6524 */
struct __cppobj ciNullObject : ciObject
{
};

/* 6525 */
union _KEY_EVENT_RECORD::<unnamed_type_uChar>
{
  wchar_t UnicodeChar;
  char AsciiChar;
};

/* 6526 */
struct _KEY_EVENT_RECORD
{
  int bKeyDown;
  unsigned __int16 wRepeatCount;
  unsigned __int16 wVirtualKeyCode;
  unsigned __int16 wVirtualScanCode;
  _KEY_EVENT_RECORD::<unnamed_type_uChar> uChar;
  unsigned int dwControlKeyState;
};

/* 6527 */
struct __declspec(align(4)) __timeb64
{
  __int64 time;
  unsigned __int16 millitm;
  __int16 timezone;
  __int16 dstflag;
};

/* 6528 */
struct __cppobj CommandLineFlagsEx : CommandLineFlags
{
};

/* 6529 */
struct _PROCESS_INFORMATION
{
  void *hProcess;
  void *hThread;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
};

/* 6530 */
struct AttachOperationFunctionInfo
{
  const char *name;
  int (__cdecl *func)(AttachOperation *, outputStream *);
};

/* 6531 */
struct /*VFT*/ ConstantDoubleValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 6532 */
struct __cppobj ConstantDoubleValue : ScopeValue
{
  long double _value;
};

/* 6533 */
struct /*VFT*/ StatSamplerTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 6534 */
struct __cppobj StatSamplerTask : PeriodicTask
{
};

/* 6535 */
struct __cppobj StatSampler : AllStatic
{
};

/* 6536 */
struct _modinfo
{
  unsigned __int8 *addr;
  char *full_path;
  int buflen;
  unsigned __int8 *base_addr;
};

/* 6537 */
struct /*VFT*/ ConstantLongValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 6538 */
struct __cppobj ConstantLongValue : ScopeValue
{
  __int64 _value;
};

/* 6539 */
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
};

/* 6540 */
struct /*VFT*/ MethodHandlesAdapterGenerator_vtbl
{
  void (__thiscall *stub_prolog)(StubCodeGenerator *this, StubCodeDesc *);
  void (__thiscall *stub_epilog)(StubCodeGenerator *this, StubCodeDesc *);
};

/* 6541 */
struct __cppobj MethodHandlesAdapterGenerator : StubCodeGenerator
{
};

/* 6542 */
struct __declspec(align(4)) timeb
{
  __int64 time;
  unsigned __int16 millitm;
  __int16 timezone;
  __int16 dstflag;
};

/* 6543 */
struct _WINDOW_BUFFER_SIZE_RECORD
{
  _COORD dwSize;
};

/* 6544 */
struct _MENU_EVENT_RECORD
{
  unsigned int dwCommandId;
};

/* 6545 */
union _INPUT_RECORD::<unnamed_type_Event>
{
  _KEY_EVENT_RECORD KeyEvent;
  _MOUSE_EVENT_RECORD MouseEvent;
  _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  _MENU_EVENT_RECORD MenuEvent;
  _FOCUS_EVENT_RECORD FocusEvent;
};

/* 6546 */
struct _INPUT_RECORD
{
  unsigned __int16 EventType;
  _INPUT_RECORD::<unnamed_type_Event> Event;
};

/* 6547 */
struct /*VFT*/ ConstantOopReadValue_vtbl
{
  bool (__thiscall *is_location)(ScopeValue *this);
  bool (__thiscall *is_object)(ScopeValue *this);
  bool (__thiscall *is_constant_int)(ScopeValue *this);
  bool (__thiscall *is_constant_double)(ScopeValue *this);
  bool (__thiscall *is_constant_long)(ScopeValue *this);
  bool (__thiscall *is_constant_oop)(ScopeValue *this);
  bool (__thiscall *equals)(ScopeValue *this, ScopeValue *);
  void (__thiscall *write_on)(ScopeValue *this, DebugInfoWriteStream *);
};

/* 6548 */
struct __cppobj ConstantOopReadValue : ScopeValue
{
  Handle _value;
};

/* 6549 */
union $A5A483E05FC9B52B872A8DCFA58CFF52
{
  unsigned int Offset;
  void *Pointer;
};

/* 6550 */
struct _OVERLAPPED
{
  unsigned int Internal;
  unsigned int InternalHigh;
  $A5A483E05FC9B52B872A8DCFA58CFF52 ___u2;
  unsigned int OffsetHigh;
  void *hEvent;
};

/* 6551 */
struct __cppobj defaultStream : xmlTextStream
{
  bool _inited;
  fileStream *_log_file;
  int _writer;
  int _last_writer;
};

/* 6552 */
struct /*VFT*/ defaultStream_vtbl
{
  void (__thiscall *flush)(outputStream *this);
  void (__thiscall *_write)(outputStream *this, const char *, unsigned int);
  void (__thiscall *rotate_log)(outputStream *this, bool, outputStream *);
  void (__thiscall *~outputStream)(outputStream *this);
};

/* 6553 */
struct timeval
{
  int tv_sec;
  int tv_usec;
};

/* 6554 */
struct __cppobj AttachListener : AllStatic
{
};

/* 6555 */
struct __cppobj Decoder : AllStatic
{
};

/* 6556 */
struct os::set_native_thread_name::__l2::<unnamed_type_info>
{
  unsigned int dwType;
  const char *szName;
  unsigned int dwThreadID;
  unsigned int dwFlags;
};

/* 6557 */
struct os::dll_load::__l14::arch_t
{
  unsigned __int16 arch_code;
  char *arch_name;
};

/* 6558 */
struct UpdateQueryS
{
  void *query;
  __int64 lastUpdate;
};

/* 6559 */
struct __declspec(align(8)) MultiCounterQueryS
{
  UpdateQueryS query;
  void **counters;
  int noOfCounters;
  bool initialized;
};

/* 6560 */
struct __declspec(align(4)) MultiCounterQuerySetS
{
  MultiCounterQueryS *queries;
  int size;
  bool initialized;
};

/* 6561 */
struct ProcessQueryS
{
  MultiCounterQuerySetS set;
  int process_index;
};

/* 6562 */
struct tagPROCESSENTRY32
{
  unsigned int dwSize;
  unsigned int cntUsage;
  unsigned int th32ProcessID;
  unsigned int th32DefaultHeapID;
  unsigned int th32ModuleID;
  unsigned int cntThreads;
  unsigned int th32ParentProcessID;
  int pcPriClassBase;
  unsigned int dwFlags;
  char szExeFile[260];
};

/* 6563 */
struct _NET_LUID_LH::<unnamed_type_Info>
{
  unsigned __int64 Reserved : 24;
  unsigned __int64 NetLuidIndex : 24;
  unsigned __int64 IfType : 16;
};

/* 6564 */
union _NET_LUID_LH
{
  unsigned __int64 Value;
  _NET_LUID_LH::<unnamed_type_Info> Info;
};

/* 6565 */
struct _MIB_IF_ROW2::<unnamed_type_InterfaceAndOperStatusFlags>
{
  unsigned __int8 HardwareInterface : 1;
  unsigned __int8 FilterInterface : 1;
  unsigned __int8 ConnectorPresent : 1;
  unsigned __int8 NotAuthenticated : 1;
  unsigned __int8 NotMediaConnected : 1;
  unsigned __int8 Paused : 1;
  unsigned __int8 LowPower : 1;
  unsigned __int8 EndPointInterface : 1;
};

/* 6566 */
struct _MIB_IF_ROW2
{
  _NET_LUID_LH InterfaceLuid;
  unsigned int InterfaceIndex;
  _GUID InterfaceGuid;
  wchar_t Alias[257];
  wchar_t Description[257];
  unsigned int PhysicalAddressLength;
  unsigned __int8 PhysicalAddress[32];
  unsigned __int8 PermanentPhysicalAddress[32];
  unsigned int Mtu;
  unsigned int Type;
  TUNNEL_TYPE TunnelType;
  _NDIS_MEDIUM MediaType;
  _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  _NET_IF_ACCESS_TYPE AccessType;
  _NET_IF_DIRECTION_TYPE DirectionType;
  _MIB_IF_ROW2::<unnamed_type_InterfaceAndOperStatusFlags> InterfaceAndOperStatusFlags;
  IF_OPER_STATUS OperStatus;
  _NET_IF_ADMIN_STATUS AdminStatus;
  _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  _GUID NetworkGuid;
  _NET_IF_CONNECTION_TYPE ConnectionType;
  unsigned __int64 TransmitLinkSpeed;
  unsigned __int64 ReceiveLinkSpeed;
  unsigned __int64 InOctets;
  unsigned __int64 InUcastPkts;
  unsigned __int64 InNUcastPkts;
  unsigned __int64 InDiscards;
  unsigned __int64 InErrors;
  unsigned __int64 InUnknownProtos;
  unsigned __int64 InUcastOctets;
  unsigned __int64 InMulticastOctets;
  unsigned __int64 InBroadcastOctets;
  unsigned __int64 OutOctets;
  unsigned __int64 OutUcastPkts;
  unsigned __int64 OutNUcastPkts;
  unsigned __int64 OutDiscards;
  unsigned __int64 OutErrors;
  unsigned __int64 OutUcastOctets;
  unsigned __int64 OutMulticastOctets;
  unsigned __int64 OutBroadcastOctets;
  unsigned __int64 OutQLen;
};

/* 6567 */
struct _MIB_IF_TABLE2
{
  unsigned int NumEntries;
  _MIB_IF_ROW2 Table[1];
};

/* 6568 */
union in6_addr::<unnamed_type_u>
{
  unsigned __int8 Byte[16];
  unsigned __int16 Word[8];
};

/* 6569 */
struct in6_addr
{
  in6_addr::<unnamed_type_u> u;
};

/* 6570 */
struct $013671E5920392F7B68C675C97F9F7D8
{
  unsigned __int32 Zone : 28;
  unsigned __int32 Level : 4;
};

/* 6571 */
union $640CB20EBB1603CFF58586D5B48C3408
{
  $013671E5920392F7B68C675C97F9F7D8 __s0;
  unsigned int Value;
};

/* 6572 */
struct SCOPE_ID
{
  $640CB20EBB1603CFF58586D5B48C3408 ___u0;
};

/* 6573 */
union $7181F82270268D0F24CAD8488C705AFE
{
  unsigned int sin6_scope_id;
  SCOPE_ID sin6_scope_struct;
};

/* 6574 */
struct sockaddr_in6
{
  unsigned __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  $7181F82270268D0F24CAD8488C705AFE ___u4;
};

/* 6575 */
struct __declspec(align(4)) CounterQueryS
{
  UpdateQueryS query;
  void *counter;
  bool initialized;
};

/* 6576 */
struct __cppobj SystemProcessInterface::SystemProcesses::ProcessIterator : CHeapObj<7>
{
  void *_hProcessSnap;
  tagPROCESSENTRY32 _pe32;
  int _valid;
  char _exePath[260];
};

/* 6577 */
struct __cppobj SystemProcessInterface::SystemProcesses : CHeapObj<7>
{
  SystemProcessInterface::SystemProcesses::ProcessIterator *_iterator;
};

/* 6578 */
struct __cppobj SystemProcessInterface : CHeapObj<7>
{
  SystemProcessInterface::SystemProcesses *_impl;
};

/* 6579 */
struct __cppobj SystemProcess : CHeapObj<7>
{
  SystemProcess_vtbl *__vftable /*VFT*/;
  int _pid;
  char *_name;
  char *_path;
  char *_command_line;
  SystemProcess *_next;
};

/* 6580 */
struct /*VFT*/ SystemProcess_vtbl
{
  void (__thiscall *~SystemProcess)(SystemProcess *this);
};

/* 6581 */
struct _TP_CALLBACK_ENVIRON_V3::<unnamed_type_u>::<unnamed_type_s>
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 6582 */
union _TP_CALLBACK_ENVIRON_V3::<unnamed_type_u>
{
  unsigned int Flags;
  _TP_CALLBACK_ENVIRON_V3::<unnamed_type_u>::<unnamed_type_s> s;
};

/* 6583 */
struct _TP_CALLBACK_ENVIRON_V3
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  _TP_CALLBACK_ENVIRON_V3::<unnamed_type_u> u;
  _TP_CALLBACK_PRIORITY CallbackPriority;
  unsigned int Size;
};

/* 6584 */
struct __cppobj IphlpDll : AllStatic
{
};

/* 6585 */
struct __cppobj CPUInformation : CHeapObj<7>
{
  int _no_of_sockets;
  int _no_of_cores;
  int _no_of_hw_threads;
  const char *_description;
  const char *_name;
};

/* 6586 */
struct __cppobj CPUInformationInterface : CHeapObj<7>
{
  CPUInformation *_cpu_info;
};

/* 6587 */
struct __cppobj NetworkPerformanceInterface::NetworkPerformance : CHeapObj<7>
{
  bool _iphlp_attached;
};

/* 6588 */
struct __cppobj NetworkPerformanceInterface : CHeapObj<7>
{
  NetworkPerformanceInterface::NetworkPerformance *_impl;
};

/* 6589 */
struct __cppobj __declspec(align(8)) NetworkInterface : ResourceObj
{
  char *_name;
  unsigned __int64 _bytes_in;
  unsigned __int64 _bytes_out;
  NetworkInterface *_next;
};

/* 6590 */
struct __cppobj CPUPerformanceInterface::CPUPerformance : CHeapObj<7>
{
  CounterQueryS *_context_switches;
  ProcessQueryS *_process_cpu_load;
  MultiCounterQueryS *_machine_cpu_load;
};

/* 6591 */
struct __cppobj CPUPerformanceInterface : CHeapObj<7>
{
  CPUPerformanceInterface::CPUPerformance *_impl;
};

/* 6592 */
struct siglabel
{
  char *name;
  int number;
};

/* 6593 */
struct __cppobj RegisteredProbes : CHeapObj<7>
{
  nmethod **_nmethods;
  unsigned int _count;
  int _helper_handle;
};

/* 6594 */
struct __cppobj DTraceJSDT : AllStatic
{
};

/* 6595 */
struct JVM_DTraceProbe
{
  struct _jmethodID *method;
  _jstring *function;
  _jstring *name;
  void *reserved[4];
};

/* 6596 */
struct JVM_DTraceInterfaceAttributes
{
  int nameStability;
  int dataStability;
  int dependencyClass;
};

/* 6597 */
struct JVM_DTraceProvider
{
  _jstring *name;
  JVM_DTraceProbe *probes;
  int probe_count;
  JVM_DTraceInterfaceAttributes providerAttributes;
  JVM_DTraceInterfaceAttributes moduleAttributes;
  JVM_DTraceInterfaceAttributes functionAttributes;
  JVM_DTraceInterfaceAttributes nameAttributes;
  JVM_DTraceInterfaceAttributes argsAttributes;
  void *reserved[4];
};

/* 6598 */
struct __cppobj Win32AttachOperation : AttachOperation
{
  char _pipe[257];
  Win32AttachOperation *_next;
};

/* 6599 */
struct /*VFT*/ Win32AttachOperation_vtbl
{
  void (__thiscall *complete)(AttachOperation *this, int, bufferedStream *);
};

/* 6600 */
struct __cppobj Win32AttachListener : AllStatic
{
};

/* 6601 */
struct /*VFT*/ MutableSpaceUsedHelper_vtbl
{
  __int64 (__thiscall *take_sample)(PerfLongSampleHelper *this);
};

/* 6602 */
struct __cppobj MutableSpaceUsedHelper : PerfLongSampleHelper
{
  MutableSpace *_m;
};

/* 6603 */
struct __cppobj ObjectCountEventSender : AllStatic
{
};

/* 6604 */
struct /*VFT*/ GenerationUsedHelper_vtbl
{
  __int64 (__thiscall *take_sample)(PerfLongSampleHelper *this);
};

/* 6605 */
struct __cppobj GenerationUsedHelper : PerfLongSampleHelper
{
  Generation *_gen;
};

/* 6606 */
struct /*VFT*/ GCHeapSummaryEventSender_vtbl
{
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const G1HeapSummary *);
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const PSHeapSummary *);
  void (__thiscall *visit)(GCHeapSummaryVisitor *this, const GCHeapSummary *);
};

/* 6607 */
struct __cppobj GCHeapSummaryEventSender : GCHeapSummaryVisitor
{
  GCId _gc_id;
  GCWhen::Type _when;
};

/* 6608 */
struct /*VFT*/ PhaseSender_vtbl
{
  void (__thiscall *visit)(PhaseVisitor *this, ConcurrentPhase *);
  void (__thiscall *visit)(PhaseVisitor *this, PausePhase *);
  void (__thiscall *visit)(PhaseVisitor *this, GCPhase *);
};

/* 6609 */
struct __cppobj PhaseSender : PhaseVisitor
{
  GCId _gc_id;
};

/* 6610 */
struct __cppobj G1MMUTracer : AllStatic
{
};

/* 6611 */
struct /*VFT*/ ObjectCountEventSenderClosure_vtbl
{
  void (__thiscall *do_cinfo)(KlassInfoClosure *this, KlassInfoEntry *);
};

/* 6612 */
struct __cppobj ObjectCountEventSenderClosure : KlassInfoClosure
{
  const GCId _gc_id;
  const long double _size_threshold_percentage;
  const unsigned int _total_size_in_words;
  const TimeInstant<CounterRepresentation,ElapsedCounterSource> _timestamp;
};

/* 6613 */
struct __cppobj GCConfiguration
{
};

/* 6614 */
struct __cppobj GCTLABConfiguration
{
};

/* 6615 */
struct __cppobj GCSurvivorConfiguration
{
};

/* 6616 */
struct __cppobj GCHeapConfiguration
{
};

/* 6617 */
struct __cppobj GCYoungGenerationConfiguration
{
};

/* 6618 */
struct __cppobj AgeTableTracer : AllStatic
{
};

/* 6619 */
struct __cppobj YieldingFlexibleGangWorker : GangWorker
{
};

/* 6620 */
struct __cppobj ErrorReporter : StackObj
{
};

/* 6621 */
struct __cppobj VM_ReportJavaOutOfMemory : VM_Operation
{
  VMError *_err;
};

/* 6622 */
struct /*VFT*/ VM_ReportJavaOutOfMemory_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6623 */
struct __cppobj UTF8 : AllStatic
{
};

/* 6624 */
struct __cppobj UNICODE : AllStatic
{
};

/* 6625 */
struct __cppobj PairRep<__int64,__int64>
{
  __int64 val1;
  __int64 val2;
};

/* 6626 */
struct __cppobj ElapsedCounterSource
{
};

/* 6627 */
struct __cppobj StringUtils : AllStatic
{
};

/* 6628 */
struct __cppobj PreserveExceptionMark
{
  Thread *_thread;
  Handle _preserved_exception_oop;
  int _preserved_exception_line;
  const char *_preserved_exception_file;
};

/* 6629 */
struct __cppobj HashtableEntry<ConstantPool *,1> : BasicHashtableEntry<1>
{
  ConstantPool *_literal;
};

/* 6630 */
struct __cppobj BasicHashtable<1>::BucketUnlinkContext
{
  int _num_processed;
  int _num_removed;
  BasicHashtableEntry<1> *_removed_head;
  BasicHashtableEntry<1> *_removed_tail;
};

/* 6631 */
struct __cppobj HashtableEntry<Klass *,1> : BasicHashtableEntry<1>
{
  Klass *_literal;
};

/* 6632 */
struct __cppobj HashtableEntry<oopDesc *,1> : BasicHashtableEntry<1>
{
  oopDesc *_literal;
};

/* 6633 */
struct __cppobj HashtableEntry<Symbol *,1> : BasicHashtableEntry<1>
{
  Symbol *_literal;
};

/* 6634 */
struct __cppobj BasicHashtable<4>::BucketUnlinkContext
{
  int _num_processed;
  int _num_removed;
  BasicHashtableEntry<4> *_removed_head;
  BasicHashtableEntry<4> *_removed_tail;
};

/* 6635 */
struct __cppobj BasicHashtableEntry<7> : CHeapObj<7>
{
  unsigned int _hash;
  BasicHashtableEntry<7> *_next;
};

/* 6636 */
struct __cppobj HashtableBucket<7> : CHeapObj<7>
{
  BasicHashtableEntry<7> *_entry;
};

/* 6637 */
struct __cppobj BasicHashtable<7> : CHeapObj<7>
{
  int _table_size;
  HashtableBucket<7> *_buckets;
  BasicHashtableEntry<7> *volatile _free_list;
  char *_first_free_entry;
  char *_end_block;
  int _entry_size;
  volatile int _number_of_entries;
};

/* 6638 */
struct __cppobj BasicHashtable<7>::BucketUnlinkContext
{
  int _num_processed;
  int _num_removed;
  BasicHashtableEntry<7> *_removed_head;
  BasicHashtableEntry<7> *_removed_tail;
};

/* 6639 */
struct __cppobj HeapDumper : StackObj
{
  char *_error;
  bool _print_to_tty;
  bool _gc_before_heap_dump;
  bool _oome;
  elapsedTimer _t;
};

/* 6640 */
struct __cppobj __declspec(align(4)) Command : StackObj
{
  ResourceMark rm;
  ResetNoHandleMark rnhm;
  HandleMark hm;
  bool debug_save;
};

/* 6641 */
struct __cppobj FormatBufferResource : FormatBufferBase
{
};

/* 6642 */
struct __cppobj CopySwap : AllStatic
{
};

/* 6643 */
struct __cppobj ServiceUtil : AllStatic
{
};

/* 6644 */
struct __cppobj ThreadService : AllStatic
{
};

/* 6645 */
struct __cppobj __declspec(align(4)) ConcurrentLocksDump : StackObj
{
  ThreadConcurrentLocks *_map;
  ThreadConcurrentLocks *_last;
  bool _retain_map_on_free;
};

/* 6646 */
struct __cppobj ThreadsListEnumerator : StackObj
{
  GrowableArray<instanceHandle> *_threads_array;
};

/* 6647 */
struct __cppobj __declspec(align(4)) JavaThreadStatusChanger : StackObj
{
  java_lang_Thread::ThreadStatus _old_state;
  JavaThread *_java_thread;
  bool _is_alive;
};

/* 6648 */
struct __cppobj __declspec(align(4)) JavaThreadInObjectWaitState : JavaThreadStatusChanger
{
  ThreadStatistics *_stat64i32;
  bool _active;
};

/* 6649 */
struct __cppobj __declspec(align(4)) JavaThreadParkedState : JavaThreadStatusChanger
{
  ThreadStatistics *_stat64i32;
  bool _active;
};

/* 6650 */
struct __cppobj __declspec(align(4)) JavaThreadBlockedOnMonitorEnterState : JavaThreadStatusChanger
{
  ThreadStatistics *_stat64i32;
  bool _active;
};

/* 6651 */
struct __cppobj __declspec(align(4)) JavaThreadSleepState : JavaThreadStatusChanger
{
  ThreadStatistics *_stat64i32;
  bool _active;
};

/* 6652 */
struct /*VFT*/ InflatedMonitorsClosure_vtbl
{
  void (__thiscall *do_monitor)(MonitorClosure *this, ObjectMonitor *);
};

/* 6653 */
struct __cppobj InflatedMonitorsClosure : MonitorClosure
{
  ThreadStackTrace *_stack_trace;
  Thread *_thread;
};

/* 6654 */
struct /*VFT*/ ShenandoahMemoryPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6655 */
struct __cppobj ShenandoahMemoryPool : CollectedMemoryPool
{
  ShenandoahHeap *_heap;
};

/* 6656 */
struct /*VFT*/ CodeCacheMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6657 */
struct __cppobj CodeCacheMemoryManager : MemoryManager
{
};

/* 6658 */
struct /*VFT*/ MetaspaceMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6659 */
struct __cppobj MetaspaceMemoryManager : MemoryManager
{
};

/* 6660 */
struct /*VFT*/ CopyMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6661 */
struct __cppobj CopyMemoryManager : GCMemoryManager
{
};

/* 6662 */
struct /*VFT*/ MSCMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6663 */
struct __cppobj MSCMemoryManager : GCMemoryManager
{
};

/* 6664 */
struct /*VFT*/ ParNewMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6665 */
struct __cppobj ParNewMemoryManager : GCMemoryManager
{
};

/* 6666 */
struct /*VFT*/ CMSMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6667 */
struct __cppobj CMSMemoryManager : GCMemoryManager
{
};

/* 6668 */
struct /*VFT*/ PSScavengeMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6669 */
struct __cppobj PSScavengeMemoryManager : GCMemoryManager
{
};

/* 6670 */
struct /*VFT*/ PSMarkSweepMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6671 */
struct __cppobj PSMarkSweepMemoryManager : GCMemoryManager
{
};

/* 6672 */
struct /*VFT*/ G1YoungGenMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6673 */
struct __cppobj G1YoungGenMemoryManager : GCMemoryManager
{
};

/* 6674 */
struct /*VFT*/ G1OldGenMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6675 */
struct __cppobj G1OldGenMemoryManager : GCMemoryManager
{
};

/* 6676 */
struct /*VFT*/ ShenandoahCyclesMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6677 */
struct __cppobj ShenandoahCyclesMemoryManager : GCMemoryManager
{
};

/* 6678 */
struct /*VFT*/ ShenandoahPausesMemoryManager_vtbl
{
  instanceOopDesc *(__thiscall *get_memory_manager_instance)(MemoryManager *this, Thread *);
  MemoryManager::Name (__thiscall *kind)(MemoryManager *this);
  bool (__thiscall *is_gc_memory_manager)(MemoryManager *this);
  const char *(__thiscall *name)(MemoryManager *this);
};

/* 6679 */
struct __cppobj ShenandoahPausesMemoryManager : GCMemoryManager
{
};

/* 6680 */
struct /*VFT*/ PSGenerationPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6681 */
struct __cppobj PSGenerationPool : CollectedMemoryPool
{
  PSOldGen *_gen;
};

/* 6682 */
struct /*VFT*/ EdenMutableSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6683 */
struct __cppobj EdenMutableSpacePool : CollectedMemoryPool
{
  PSYoungGen *_gen;
  MutableSpace *_space;
};

/* 6684 */
struct /*VFT*/ SurvivorMutableSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6685 */
struct __cppobj SurvivorMutableSpacePool : CollectedMemoryPool
{
  PSYoungGen *_gen;
};

/* 6686 */
struct __cppobj __declspec(align(4)) LinkedListIterator<MallocSite> : StackObj
{
  LinkedListNode<MallocSite> *_p;
  bool _is_empty;
};

/* 6687 */
struct __cppobj __declspec(align(4)) LinkedListIterator<VirtualMemoryAllocationSite> : StackObj
{
  LinkedListNode<VirtualMemoryAllocationSite> *_p;
  bool _is_empty;
};

/* 6688 */
struct __cppobj __declspec(align(4)) LinkedListIterator<ReservedMemoryRegion> : StackObj
{
  LinkedListNode<ReservedMemoryRegion> *_p;
  bool _is_empty;
};

/* 6689 */
struct /*VFT*/ NMTDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6690 */
struct __cppobj NMTDCmd : DCmdWithParser
{
  DCmdArgument<bool> _summary;
  DCmdArgument<bool> _detail;
  DCmdArgument<bool> _baseline;
  DCmdArgument<bool> _summary_diff;
  DCmdArgument<bool> _detail_diff;
  DCmdArgument<bool> _shutdown;
  DCmdArgument<bool> _statistics;
  DCmdArgument<char *> _scale;
};

/* 6691 */
struct __cppobj MemReporterBase : StackObj
{
  unsigned int _scale;
  outputStream *_output;
};

/* 6692 */
struct __cppobj MemSummaryReporter : MemReporterBase
{
  MemSummaryReporter_vtbl *__vftable /*VFT*/;
  MallocMemorySnapshot *_malloc_snapshot;
  VirtualMemorySnapshot *_vm_snapshot;
  unsigned int _class_count;
};

/* 6693 */
struct /*VFT*/ MemSummaryReporter_vtbl
{
  void (__thiscall *report)(MemSummaryReporter *this);
};

/* 6694 */
struct /*VFT*/ MemDetailReporter_vtbl
{
  void (__thiscall *report)(MemSummaryReporter *this);
};

/* 6695 */
struct __cppobj MemDetailReporter : MemSummaryReporter
{
  MemBaseline *_baseline;
};

/* 6696 */
struct __cppobj MemSummaryDiffReporter : MemReporterBase
{
  MemSummaryDiffReporter_vtbl *__vftable /*VFT*/;
  MemBaseline *_early_baseline;
  MemBaseline *_current_baseline;
};

/* 6697 */
struct /*VFT*/ MemSummaryDiffReporter_vtbl
{
  void (__thiscall *report_diff)(MemSummaryDiffReporter *this);
};

/* 6698 */
struct /*VFT*/ MemDetailDiffReporter_vtbl
{
  void (__thiscall *report_diff)(MemSummaryDiffReporter *this);
};

/* 6699 */
struct __cppobj MemDetailDiffReporter : MemSummaryDiffReporter
{
};

/* 6700 */
struct __cppobj MallocSiteWalker : StackObj
{
  MallocSiteWalker_vtbl *__vftable /*VFT*/;
};

/* 6701 */
struct /*VFT*/ MallocSiteWalker_vtbl
{
  bool (__thiscall *do_malloc_site)(MallocSiteWalker *this, const MallocSite *);
};

/* 6702 */
struct __cppobj StatisticsWalker : MallocSiteWalker
{
  int _empty_entries;
  int _total_entries;
  int _stack_depth_distribution[4];
  int _hash_distribution[20];
  int _bucket_over_threshold;
  int _current_hash_bucket;
  int _current_bucket_length;
  int _used_buckets;
  int _longest_bucket_length;
};

/* 6703 */
struct /*VFT*/ StatisticsWalker_vtbl
{
  bool (__thiscall *do_malloc_site)(MallocSiteWalker *this, const MallocSite *);
  bool (__thiscall *at)(StatisticsWalker *this, const MallocSite *);
};

/* 6704 */
struct __cppobj ClassLoadingService : AllStatic
{
};

/* 6705 */
struct __cppobj LoadedClassesEnumerator : StackObj
{
  GrowableArray<KlassHandle> *_klass_handle_array;
};

/* 6706 */
struct /*VFT*/ G1MemoryPoolSuper_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6707 */
struct __cppobj G1MemoryPoolSuper : CollectedMemoryPool
{
  G1MonitoringSupport *_g1mm;
};

/* 6708 */
struct /*VFT*/ G1EdenPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6709 */
struct __cppobj G1EdenPool : G1MemoryPoolSuper
{
};

/* 6710 */
struct /*VFT*/ G1SurvivorPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6711 */
struct __cppobj G1SurvivorPool : G1MemoryPoolSuper
{
};

/* 6712 */
struct /*VFT*/ G1OldGenPool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6713 */
struct __cppobj G1OldGenPool : G1MemoryPoolSuper
{
};

/* 6714 */
struct /*VFT*/ GcThreadCountClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 6715 */
struct __cppobj GcThreadCountClosure : ThreadClosure
{
  int _count;
};

/* 6716 */
struct /*VFT*/ MetaspacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6717 */
struct __cppobj MetaspacePool : MemoryPool
{
};

/* 6718 */
struct /*VFT*/ CompressedKlassSpacePool_vtbl
{
  unsigned int (__thiscall *max_size)(MemoryPool *this);
  instanceOopDesc *(__thiscall *get_memory_pool_instance)(MemoryPool *this, Thread *);
  MemoryUsage *(__thiscall *get_memory_usage)(MemoryPool *this, MemoryUsage *result);
  unsigned int (__thiscall *used_in_bytes)(MemoryPool *this);
  bool (__thiscall *is_collected_pool)(MemoryPool *this);
  MemoryUsage *(__thiscall *get_last_collection_usage)(MemoryPool *this, MemoryUsage *result);
};

/* 6719 */
struct __cppobj CompressedKlassSpacePool : MemoryPool
{
};

/* 6720 */
struct __cppobj GCNotificationRequest : CHeapObj<7>
{
  GCNotificationRequest *next;
  __int64 timestamp;
  GCMemoryManager *gcManager;
  const char *gcAction;
  const char *gcCause;
  GCStatInfo *gcStatInfo;
};

/* 6721 */
struct __cppobj GCNotifier : AllStatic
{
};

/* 6722 */
struct __cppobj SortedLinkedList<MallocSite,&compare_malloc_size,2,10,1> : LinkedListImpl<MallocSite,2,10,1>
{
};

/* 6723 */
struct /*VFT*/ SortedLinkedList<MallocSite,&compare_malloc_size,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<MallocSite> *this, LinkedList<MallocSite> *);
  bool (__thiscall *add)(LinkedList<MallocSite> *this, const LinkedList<MallocSite> *);
  void (__thiscall *add)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *add)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *find_node)(LinkedList<MallocSite> *this, const MallocSite *);
  MallocSite *(__thiscall *find)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *insert_before)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *insert_after)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, const MallocSite *);
  bool (__thiscall *remove_before)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove_after)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  void (__thiscall *~LinkedListImpl<MallocSite,2,10,1>)(LinkedListImpl<MallocSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<MallocSite,2,10,1> *this);
};

/* 6724 */
struct /*VFT*/ MallocAllocationSiteWalker_vtbl
{
  bool (__thiscall *do_malloc_site)(MallocSiteWalker *this, const MallocSite *);
};

/* 6725 */
struct __cppobj MallocAllocationSiteWalker : MallocSiteWalker
{
  SortedLinkedList<MallocSite,&compare_malloc_size,2,10,1> _malloc_sites;
  unsigned int _count;
};

/* 6726 */
struct __cppobj SortedLinkedList<ReservedMemoryRegion,&compare_virtual_memory_base,2,10,1> : LinkedListImpl<ReservedMemoryRegion,2,10,1>
{
};

/* 6727 */
struct /*VFT*/ SortedLinkedList<ReservedMemoryRegion,&compare_virtual_memory_base,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<ReservedMemoryRegion> *this, LinkedList<ReservedMemoryRegion> *);
  bool (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const LinkedList<ReservedMemoryRegion> *);
  void (__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *add)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *find_node)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  ReservedMemoryRegion *(__thiscall *find)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_before)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  LinkedListNode<ReservedMemoryRegion> *(__thiscall *insert_after)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove)(LinkedList<ReservedMemoryRegion> *this, const ReservedMemoryRegion *);
  bool (__thiscall *remove_before)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  bool (__thiscall *remove_after)(LinkedList<ReservedMemoryRegion> *this, LinkedListNode<ReservedMemoryRegion> *);
  void (__thiscall *~LinkedListImpl<ReservedMemoryRegion,2,10,1>)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<ReservedMemoryRegion,2,10,1> *this);
};

/* 6728 */
struct /*VFT*/ VirtualMemoryAllocationWalker_vtbl
{
  bool (__thiscall *do_allocation_site)(VirtualMemoryWalker *this, const ReservedMemoryRegion *);
};

/* 6729 */
struct __cppobj VirtualMemoryAllocationWalker : VirtualMemoryWalker
{
  SortedLinkedList<ReservedMemoryRegion,&compare_virtual_memory_base,2,10,1> _virtual_memory_regions;
  unsigned int _count;
};

/* 6730 */
struct __cppobj SortedLinkedList<VirtualMemoryAllocationSite,&compare_allocation_site,2,10,1> : LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>
{
};

/* 6731 */
struct /*VFT*/ SortedLinkedList<VirtualMemoryAllocationSite,&compare_allocation_site,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedList<VirtualMemoryAllocationSite> *);
  bool (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const LinkedList<VirtualMemoryAllocationSite> *);
  void (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *find_node)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  VirtualMemoryAllocationSite *(__thiscall *find)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_before)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_after)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  bool (__thiscall *remove_before)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove_after)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  void (__thiscall *~LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
};

/* 6732 */
struct __cppobj SortedLinkedList<MallocSite,&compare_malloc_site,2,10,1> : LinkedListImpl<MallocSite,2,10,1>
{
};

/* 6733 */
struct /*VFT*/ SortedLinkedList<MallocSite,&compare_malloc_site,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<MallocSite> *this, LinkedList<MallocSite> *);
  bool (__thiscall *add)(LinkedList<MallocSite> *this, const LinkedList<MallocSite> *);
  void (__thiscall *add)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *add)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *find_node)(LinkedList<MallocSite> *this, const MallocSite *);
  MallocSite *(__thiscall *find)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *insert_before)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *insert_after)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, const MallocSite *);
  bool (__thiscall *remove_before)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove_after)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  void (__thiscall *~LinkedListImpl<MallocSite,2,10,1>)(LinkedListImpl<MallocSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<MallocSite,2,10,1> *this);
};

/* 6734 */
struct __cppobj SortedLinkedList<MallocSite,&compare_malloc_site_and_type,2,10,1> : LinkedListImpl<MallocSite,2,10,1>
{
};

/* 6735 */
struct /*VFT*/ SortedLinkedList<MallocSite,&compare_malloc_site_and_type,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<MallocSite> *this, LinkedList<MallocSite> *);
  bool (__thiscall *add)(LinkedList<MallocSite> *this, const LinkedList<MallocSite> *);
  void (__thiscall *add)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *add)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *find_node)(LinkedList<MallocSite> *this, const MallocSite *);
  MallocSite *(__thiscall *find)(LinkedList<MallocSite> *this, const MallocSite *);
  LinkedListNode<MallocSite> *(__thiscall *insert_before)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  LinkedListNode<MallocSite> *(__thiscall *insert_after)(LinkedList<MallocSite> *this, const MallocSite *, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove)(LinkedList<MallocSite> *this, const MallocSite *);
  bool (__thiscall *remove_before)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  bool (__thiscall *remove_after)(LinkedList<MallocSite> *this, LinkedListNode<MallocSite> *);
  void (__thiscall *~LinkedListImpl<MallocSite,2,10,1>)(LinkedListImpl<MallocSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<MallocSite,2,10,1> *this);
};

/* 6736 */
struct __cppobj SortedLinkedList<VirtualMemoryAllocationSite,&compare_virtual_memory_size,2,10,1> : LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>
{
};

/* 6737 */
struct /*VFT*/ SortedLinkedList<VirtualMemoryAllocationSite,&compare_virtual_memory_size,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedList<VirtualMemoryAllocationSite> *);
  bool (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const LinkedList<VirtualMemoryAllocationSite> *);
  void (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *find_node)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  VirtualMemoryAllocationSite *(__thiscall *find)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_before)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_after)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  bool (__thiscall *remove_before)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove_after)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  void (__thiscall *~LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
};

/* 6738 */
struct __cppobj SortedLinkedList<VirtualMemoryAllocationSite,&compare_virtual_memory_site,2,10,1> : LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>
{
};

/* 6739 */
struct /*VFT*/ SortedLinkedList<VirtualMemoryAllocationSite,&compare_virtual_memory_site,2,10,1>_vtbl
{
  void (__thiscall *move)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedList<VirtualMemoryAllocationSite> *);
  bool (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const LinkedList<VirtualMemoryAllocationSite> *);
  void (__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *add)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *find_node)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  VirtualMemoryAllocationSite *(__thiscall *find)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_before)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  LinkedListNode<VirtualMemoryAllocationSite> *(__thiscall *insert_after)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove)(LinkedList<VirtualMemoryAllocationSite> *this, const VirtualMemoryAllocationSite *);
  bool (__thiscall *remove_before)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  bool (__thiscall *remove_after)(LinkedList<VirtualMemoryAllocationSite> *this, LinkedListNode<VirtualMemoryAllocationSite> *);
  void (__thiscall *~LinkedListImpl<VirtualMemoryAllocationSite,2,10,1>)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
  void (__thiscall *clear)(LinkedListImpl<VirtualMemoryAllocationSite,2,10,1> *this);
};

/* 6740 */
struct __declspec(align(8)) jmmVMGlobal
{
  _jstring *name;
  jvalue value;
  jmmVMGlobalType type;
  jmmVMGlobalOrigin origin;
  unsigned __int32 writeable : 1;
  unsigned __int32 external : 1;
  unsigned __int32 reserved : 30;
  void *reserved1;
  void *reserved2;
};

/* 6741 */
struct jmmExtAttributeInfo
{
  const char *name;
  char type;
  const char *description;
};

/* 6742 */
struct __declspec(align(8)) jmmGCStat
{
  __int64 gc_index;
  __int64 start_time;
  __int64 end_time;
  _jobjectArray *usage_before_gc;
  _jobjectArray *usage_after_gc;
  int gc_ext_attribute_values_size;
  jvalue *gc_ext_attribute_values;
  int num_gc_ext_attributes;
};

/* 6743 */
struct __declspec(align(4)) dcmdInfo
{
  const char *name;
  const char *description;
  const char *impact;
  const char *permission_class;
  const char *permission_name;
  const char *permission_action;
  int num_arguments;
  unsigned __int8 enabled;
};

/* 6744 */
struct dcmdArgInfo
{
  const char *name;
  const char *description;
  const char *type;
  const char *default_string;
  unsigned __int8 mandatory;
  unsigned __int8 option;
  unsigned __int8 multiple;
  int position;
};

/* 6745 */
struct jmmInterface_1_
{
  void *reserved1;
  void *reserved2;
  int (__stdcall *GetVersion)(JNIEnv_ *);
  int (__stdcall *GetOptionalSupport)(JNIEnv_ *, jmmOptionalSupport *);
  _jobject *(__stdcall *GetInputArguments)(JNIEnv_ *);
  int (__stdcall *GetThreadInfo)(JNIEnv_ *, _jlongArray *, int, _jobjectArray *);
  _jobjectArray *(__stdcall *GetInputArgumentArray)(JNIEnv_ *);
  _jobjectArray *(__stdcall *GetMemoryPools)(JNIEnv_ *, _jobject *);
  _jobjectArray *(__stdcall *GetMemoryManagers)(JNIEnv_ *, _jobject *);
  _jobject *(__stdcall *GetMemoryPoolUsage)(JNIEnv_ *, _jobject *);
  _jobject *(__stdcall *GetPeakMemoryPoolUsage)(JNIEnv_ *, _jobject *);
  void (__stdcall *GetThreadAllocatedMemory)(JNIEnv_ *, _jlongArray *, _jlongArray *);
  _jobject *(__stdcall *GetMemoryUsage)(JNIEnv_ *, unsigned __int8);
  __int64 (__stdcall *GetLongAttribute)(JNIEnv_ *, _jobject *, jmmLongAttribute);
  unsigned __int8 (__stdcall *GetBoolAttribute)(JNIEnv_ *, jmmBoolAttribute);
  unsigned __int8 (__stdcall *SetBoolAttribute)(JNIEnv_ *, jmmBoolAttribute, unsigned __int8);
  int (__stdcall *GetLongAttributes)(JNIEnv_ *, _jobject *, jmmLongAttribute *, int, __int64 *);
  _jobjectArray *(__stdcall *FindCircularBlockedThreads)(JNIEnv_ *);
  __int64 (__stdcall *GetThreadCpuTime)(JNIEnv_ *, __int64);
  _jobjectArray *(__stdcall *GetVMGlobalNames)(JNIEnv_ *);
  int (__stdcall *GetVMGlobals)(JNIEnv_ *, _jobjectArray *, jmmVMGlobal *, int);
  int (__stdcall *GetInternalThreadTimes)(JNIEnv_ *, _jobjectArray *, _jlongArray *);
  unsigned __int8 (__stdcall *ResetStatistic)(JNIEnv_ *, jvalue, jmmStatisticType);
  void (__stdcall *SetPoolSensor)(JNIEnv_ *, _jobject *, jmmThresholdType, _jobject *);
  __int64 (__stdcall *SetPoolThreshold)(JNIEnv_ *, _jobject *, jmmThresholdType, __int64);
  _jobject *(__stdcall *GetPoolCollectionUsage)(JNIEnv_ *, _jobject *);
  int (__stdcall *GetGCExtAttributeInfo)(JNIEnv_ *, _jobject *, jmmExtAttributeInfo *, int);
  void (__stdcall *GetLastGCStat)(JNIEnv_ *, _jobject *, jmmGCStat *);
  __int64 (__stdcall *GetThreadCpuTimeWithKind)(JNIEnv_ *, __int64, unsigned __int8);
  void (__stdcall *GetThreadCpuTimesWithKind)(JNIEnv_ *, _jlongArray *, _jlongArray *, unsigned __int8);
  int (__stdcall *DumpHeap0)(JNIEnv_ *, _jstring *, unsigned __int8);
  _jobjectArray *(__stdcall *FindDeadlocks)(JNIEnv_ *, unsigned __int8);
  void (__stdcall *SetVMGlobal)(JNIEnv_ *, _jstring *, jvalue);
  void *reserved6;
  _jobjectArray *(__stdcall *DumpThreads)(JNIEnv_ *, _jlongArray *, unsigned __int8, unsigned __int8);
  void (__stdcall *SetGCNotificationEnabled)(JNIEnv_ *, _jobject *, unsigned __int8);
  _jobjectArray *(__stdcall *GetDiagnosticCommands)(JNIEnv_ *);
  void (__stdcall *GetDiagnosticCommandInfo)(JNIEnv_ *, _jobjectArray *, dcmdInfo *);
  void (__stdcall *GetDiagnosticCommandArgumentsInfo)(JNIEnv_ *, _jstring *, dcmdArgInfo *);
  _jstring *(__stdcall *ExecuteDiagnosticCommand)(JNIEnv_ *, _jstring *);
  void (__stdcall *SetDiagnosticFrameworkNotificationEnabled)(JNIEnv_ *, unsigned __int8);
};

/* 6746 */
struct __cppobj ServiceThread : JavaThread
{
};

/* 6747 */
struct /*VFT*/ HelpDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6748 */
struct __cppobj HelpDCmd : DCmdWithParser
{
  DCmdArgument<bool> _all;
  DCmdArgument<char *> _cmd;
};

/* 6749 */
struct /*VFT*/ VersionDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6750 */
struct __cppobj VersionDCmd : DCmd
{
};

/* 6751 */
struct /*VFT*/ CommandLineDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6752 */
struct __cppobj CommandLineDCmd : DCmd
{
};

/* 6753 */
struct /*VFT*/ PrintSystemPropertiesDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6754 */
struct __cppobj PrintSystemPropertiesDCmd : DCmd
{
};

/* 6755 */
struct /*VFT*/ PrintVMFlagsDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6756 */
struct __cppobj PrintVMFlagsDCmd : DCmdWithParser
{
  DCmdArgument<bool> _all;
};

/* 6757 */
struct /*VFT*/ VMDynamicLibrariesDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6758 */
struct __cppobj VMDynamicLibrariesDCmd : DCmd
{
};

/* 6759 */
struct /*VFT*/ VMUptimeDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6760 */
struct __cppobj VMUptimeDCmd : DCmdWithParser
{
  DCmdArgument<bool> _date;
};

/* 6761 */
struct /*VFT*/ SystemGCDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6762 */
struct __cppobj SystemGCDCmd : DCmd
{
};

/* 6763 */
struct /*VFT*/ RunFinalizationDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6764 */
struct __cppobj RunFinalizationDCmd : DCmd
{
};

/* 6765 */
struct /*VFT*/ HeapInfoDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6766 */
struct __cppobj HeapInfoDCmd : DCmd
{
};

/* 6767 */
struct /*VFT*/ FinalizerInfoDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6768 */
struct __cppobj FinalizerInfoDCmd : DCmd
{
};

/* 6769 */
struct /*VFT*/ HeapDumpDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6770 */
struct __cppobj HeapDumpDCmd : DCmdWithParser
{
  DCmdArgument<char *> _filename;
  DCmdArgument<bool> _all;
};

/* 6771 */
struct /*VFT*/ ClassHistogramDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6772 */
struct __cppobj ClassHistogramDCmd : DCmdWithParser
{
  DCmdArgument<bool> _all;
};

/* 6773 */
struct /*VFT*/ ClassStatsDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6774 */
struct __cppobj ClassStatsDCmd : DCmdWithParser
{
  DCmdArgument<bool> _all;
  DCmdArgument<bool> _csv;
  DCmdArgument<bool> _help;
  DCmdArgument<char *> _columns;
};

/* 6775 */
struct /*VFT*/ ThreadDumpDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6776 */
struct __cppobj ThreadDumpDCmd : DCmdWithParser
{
  DCmdArgument<bool> _locks;
};

/* 6777 */
struct /*VFT*/ JMXStartRemoteDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6778 */
struct __cppobj JMXStartRemoteDCmd : DCmdWithParser
{
  DCmdArgument<char *> _config_file;
  DCmdArgument<char *> _jmxremote_host;
  DCmdArgument<char *> _jmxremote_port;
  DCmdArgument<char *> _jmxremote_rmi_port;
  DCmdArgument<char *> _jmxremote_ssl;
  DCmdArgument<char *> _jmxremote_registry_ssl;
  DCmdArgument<char *> _jmxremote_authenticate;
  DCmdArgument<char *> _jmxremote_password_file;
  DCmdArgument<char *> _jmxremote_access_file;
  DCmdArgument<char *> _jmxremote_login_config;
  DCmdArgument<char *> _jmxremote_ssl_enabled_cipher_suites;
  DCmdArgument<char *> _jmxremote_ssl_enabled_protocols;
  DCmdArgument<char *> _jmxremote_ssl_need_client_auth;
  DCmdArgument<char *> _jmxremote_ssl_config_file;
  DCmdArgument<char *> _jmxremote_autodiscovery;
  DCmdArgument<__int64> _jdp_port;
  DCmdArgument<char *> _jdp_address;
  DCmdArgument<char *> _jdp_source_addr;
  DCmdArgument<__int64> _jdp_ttl;
  DCmdArgument<__int64> _jdp_pause;
  DCmdArgument<char *> _jdp_name;
};

/* 6779 */
struct /*VFT*/ JMXStartLocalDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6780 */
struct __cppobj JMXStartLocalDCmd : DCmd
{
};

/* 6781 */
struct /*VFT*/ JMXStopRemoteDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6782 */
struct __cppobj JMXStopRemoteDCmd : DCmd
{
};

/* 6783 */
struct /*VFT*/ RotateGCLogDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6784 */
struct __cppobj RotateGCLogDCmd : DCmd
{
};

/* 6785 */
struct __cppobj DCmdRegistrant : AllStatic
{
};

/* 6786 */
struct /*VFT*/ DCmdFactoryImpl<NMTDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6787 */
struct __cppobj DCmdFactoryImpl<NMTDCmd> : DCmdFactory
{
};

/* 6788 */
struct /*VFT*/ VmThreadCountClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 6789 */
struct __cppobj VmThreadCountClosure : ThreadClosure
{
  int _count;
};

/* 6790 */
struct /*VFT*/ ThreadTimesClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 6791 */
struct __cppobj ThreadTimesClosure : ThreadClosure
{
  objArrayHandle _names_strings;
  char **_names_chars;
  typeArrayHandle _times;
  int _names_len;
  int _times_len;
  int _count;
};

/* 6792 */
struct __cppobj MallocSiteTable : AllStatic
{
};

/* 6793 */
struct __cppobj MallocSiteTable::AccessLock : StackObj
{
  MallocSiteTable::AccessLock::LockState _lock_state;
  volatile int *_lock;
};

/* 6794 */
struct __cppobj CHeapObj<10>
{
};

/* 6795 */
struct __cppobj MallocSiteHashtableEntry : CHeapObj<10>
{
  MallocSite _malloc_site;
  MallocSiteHashtableEntry *_next;
};

/* 6796 */
struct __cppobj __declspec(align(8)) DumpWriter : StackObj
{
  int _fd;
  unsigned __int64 _bytes_written;
  char *_buffer;
  unsigned int _size;
  unsigned int _pos;
  __int64 _dump_start;
  char *_error;
};

/* 6797 */
struct __cppobj VM_HeapDumper : VM_GC_Operation
{
  DumpWriter *_local_writer;
  JavaThread *_oome_thread;
  Method *_oome_constructor;
  bool _gc_before_heap_dump;
  GrowableArray<Klass *> *_klass_map;
  ThreadStackTrace **_stack_traces;
  int _num_threads;
};

/* 6798 */
struct /*VFT*/ VM_HeapDumper_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
  bool (__thiscall *skip_operation)(VM_GC_Operation *this);
};

/* 6799 */
struct __cppobj DumperSupport : AllStatic
{
};

/* 6800 */
struct /*VFT*/ SymbolTableDumper_vtbl
{
  void (__thiscall *do_symbol)(SymbolClosure *this, Symbol **);
};

/* 6801 */
struct __cppobj SymbolTableDumper : SymbolClosure
{
  DumpWriter *_writer;
};

/* 6802 */
struct /*VFT*/ JNILocalsDumper_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6803 */
struct __cppobj JNILocalsDumper : OopClosure
{
  DumpWriter *_writer;
  unsigned int _thread_serial_num;
  int _frame_num;
};

/* 6804 */
struct /*VFT*/ JNIGlobalsDumper_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6805 */
struct __cppobj JNIGlobalsDumper : OopClosure
{
  DumpWriter *_writer;
};

/* 6806 */
struct /*VFT*/ MonitorUsedDumper_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6807 */
struct __cppobj MonitorUsedDumper : OopClosure
{
  DumpWriter *_writer;
};

/* 6808 */
struct /*VFT*/ StickyClassDumper_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 6809 */
struct __cppobj StickyClassDumper : KlassClosure
{
  DumpWriter *_writer;
};

/* 6810 */
struct /*VFT*/ HeapObjectDumper_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 6811 */
struct __cppobj HeapObjectDumper : ObjectClosure
{
  VM_HeapDumper *_dumper;
  DumpWriter *_writer;
};

/* 6812 */
union DumperSupport::dump_float::__l7::<unnamed_type_u>
{
  int i;
  float f;
};

/* 6813 */
union DumperSupport::dump_double::__l2::<unnamed_type_u>
{
  __int64 l;
  long double d;
};

/* 6814 */
struct __cppobj NotificationMark : StackObj
{
  GCNotificationRequest *_request;
};

/* 6815 */
struct /*VFT*/ ClassLoaderStatsDCmd_vtbl
{
  void (__thiscall *print_help)(DCmd *this, const char *);
  void (__thiscall *parse)(DCmd *this, CmdLine *, char, Thread *);
  void (__thiscall *execute)(DCmd *this, DCmdSource, Thread *);
  void (__thiscall *reset)(DCmd *this, Thread *);
  void (__thiscall *cleanup)(DCmd *this);
  GrowableArray<char const *> *(__thiscall *argument_name_array)(DCmd *this);
  GrowableArray<DCmdArgumentInfo *> *(__thiscall *argument_info_array)(DCmd *this);
};

/* 6816 */
struct __cppobj ClassLoaderStatsDCmd : DCmd
{
};

/* 6817 */
struct __cppobj ClassLoaderStats : ResourceObj
{
  ClassLoaderData *_cld;
  oopDesc *_class_loader;
  oopDesc *_parent;
  unsigned int _chunk_sz;
  unsigned int _block_sz;
  unsigned int _classes_count;
  unsigned int _anon_chunk_sz;
  unsigned int _anon_block_sz;
  unsigned int _anon_classes_count;
};

/* 6818 */
struct __cppobj ResourceHashtable<oopDesc *,ClassLoaderStats *,&ClassLoaderStatsClosure::oop_hash,&ClassLoaderStatsClosure::oop_equals,256,1,7>::Node : ResourceObj
{
  unsigned int _hash;
  oopDesc *_key;
  ClassLoaderStats *_value;
  ResourceHashtable<oopDesc *,ClassLoaderStats *,&ClassLoaderStatsClosure::oop_hash,&ClassLoaderStatsClosure::oop_equals,256,1,7>::Node *_next;
};

/* 6819 */
struct __cppobj ResourceHashtable<oopDesc *,ClassLoaderStats *,&ClassLoaderStatsClosure::oop_hash,&ClassLoaderStatsClosure::oop_equals,256,1,7> : ResourceObj
{
  ResourceHashtable<oopDesc *,ClassLoaderStats *,&ClassLoaderStatsClosure::oop_hash,&ClassLoaderStatsClosure::oop_equals,256,1,7>::Node *_table[256];
};

/* 6820 */
struct __cppobj ClassLoaderStatsClosure : CLDClosure
{
  outputStream *_out;
  ResourceHashtable<oopDesc *,ClassLoaderStats *,&ClassLoaderStatsClosure::oop_hash,&ClassLoaderStatsClosure::oop_equals,256,1,7> *_stats;
  unsigned int _total_loaders;
  unsigned int _total_classes;
  unsigned int _total_chunk_sz;
  unsigned int _total_block_sz;
};

/* 6821 */
struct /*VFT*/ ClassLoaderStatsClosure_vtbl
{
  void (__thiscall *do_cld)(CLDClosure *this, ClassLoaderData *);
  bool (__thiscall *do_entry)(ClassLoaderStatsClosure *this, oopDesc *const *, ClassLoaderStats *const *);
};

/* 6822 */
struct __cppobj ClassLoaderStatsVMOperation : VM_Operation
{
  outputStream *_out;
};

/* 6823 */
struct /*VFT*/ ClassLoaderStatsVMOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6824 */
struct /*VFT*/ DCmdFactoryImpl<HelpDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6825 */
struct __cppobj DCmdFactoryImpl<HelpDCmd> : DCmdFactory
{
};

/* 6826 */
struct /*VFT*/ DCmdFactoryImpl<VersionDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6827 */
struct __cppobj DCmdFactoryImpl<VersionDCmd> : DCmdFactory
{
};

/* 6828 */
struct /*VFT*/ DCmdFactoryImpl<CommandLineDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6829 */
struct __cppobj DCmdFactoryImpl<CommandLineDCmd> : DCmdFactory
{
};

/* 6830 */
struct /*VFT*/ DCmdFactoryImpl<PrintSystemPropertiesDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6831 */
struct __cppobj DCmdFactoryImpl<PrintSystemPropertiesDCmd> : DCmdFactory
{
};

/* 6832 */
struct /*VFT*/ DCmdFactoryImpl<PrintVMFlagsDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6833 */
struct __cppobj DCmdFactoryImpl<PrintVMFlagsDCmd> : DCmdFactory
{
};

/* 6834 */
struct /*VFT*/ DCmdFactoryImpl<VMDynamicLibrariesDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6835 */
struct __cppobj DCmdFactoryImpl<VMDynamicLibrariesDCmd> : DCmdFactory
{
};

/* 6836 */
struct /*VFT*/ DCmdFactoryImpl<VMUptimeDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6837 */
struct __cppobj DCmdFactoryImpl<VMUptimeDCmd> : DCmdFactory
{
};

/* 6838 */
struct /*VFT*/ DCmdFactoryImpl<SystemGCDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6839 */
struct __cppobj DCmdFactoryImpl<SystemGCDCmd> : DCmdFactory
{
};

/* 6840 */
struct /*VFT*/ DCmdFactoryImpl<RunFinalizationDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6841 */
struct __cppobj DCmdFactoryImpl<RunFinalizationDCmd> : DCmdFactory
{
};

/* 6842 */
struct /*VFT*/ DCmdFactoryImpl<HeapInfoDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6843 */
struct __cppobj DCmdFactoryImpl<HeapInfoDCmd> : DCmdFactory
{
};

/* 6844 */
struct /*VFT*/ DCmdFactoryImpl<FinalizerInfoDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6845 */
struct __cppobj DCmdFactoryImpl<FinalizerInfoDCmd> : DCmdFactory
{
};

/* 6846 */
struct /*VFT*/ DCmdFactoryImpl<HeapDumpDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6847 */
struct __cppobj DCmdFactoryImpl<HeapDumpDCmd> : DCmdFactory
{
};

/* 6848 */
struct /*VFT*/ DCmdFactoryImpl<ClassHistogramDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6849 */
struct __cppobj DCmdFactoryImpl<ClassHistogramDCmd> : DCmdFactory
{
};

/* 6850 */
struct /*VFT*/ DCmdFactoryImpl<ClassStatsDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6851 */
struct __cppobj DCmdFactoryImpl<ClassStatsDCmd> : DCmdFactory
{
};

/* 6852 */
struct /*VFT*/ DCmdFactoryImpl<ThreadDumpDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6853 */
struct __cppobj DCmdFactoryImpl<ThreadDumpDCmd> : DCmdFactory
{
};

/* 6854 */
struct /*VFT*/ DCmdFactoryImpl<RotateGCLogDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6855 */
struct __cppobj DCmdFactoryImpl<RotateGCLogDCmd> : DCmdFactory
{
};

/* 6856 */
struct /*VFT*/ DCmdFactoryImpl<ClassLoaderStatsDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6857 */
struct __cppobj DCmdFactoryImpl<ClassLoaderStatsDCmd> : DCmdFactory
{
};

/* 6858 */
struct /*VFT*/ DCmdFactoryImpl<JMXStartRemoteDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6859 */
struct __cppobj DCmdFactoryImpl<JMXStartRemoteDCmd> : DCmdFactory
{
};

/* 6860 */
struct /*VFT*/ DCmdFactoryImpl<JMXStartLocalDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6861 */
struct __cppobj DCmdFactoryImpl<JMXStartLocalDCmd> : DCmdFactory
{
};

/* 6862 */
struct /*VFT*/ DCmdFactoryImpl<JMXStopRemoteDCmd>_vtbl
{
  DCmd *(__thiscall *create_Cheap_instance)(DCmdFactory *this, outputStream *);
  DCmd *(__thiscall *create_resource_instance)(DCmdFactory *this, outputStream *);
  const char *(__thiscall *name)(DCmdFactory *this);
  const char *(__thiscall *description)(DCmdFactory *this);
  const char *(__thiscall *impact)(DCmdFactory *this);
  const JavaPermission *(__thiscall *permission)(DCmdFactory *this, const JavaPermission *result);
  const char *(__thiscall *disabled_message)(DCmdFactory *this);
};

/* 6863 */
struct __cppobj DCmdFactoryImpl<JMXStopRemoteDCmd> : DCmdFactory
{
};

/* 6864 */
struct __cppobj NMethodSweeper : AllStatic
{
};

/* 6865 */
struct /*VFT*/ VerifyOopClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6866 */
struct __cppobj VerifyOopClosure : OopClosure
{
};

/* 6867 */
struct __cppobj VM_Dummy : VM_Operation
{
};

/* 6868 */
struct /*VFT*/ VM_Dummy_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 6869 */
struct __declspec(align(8)) VMStructEntry
{
  const char *typeName;
  const char *fieldName;
  const char *typeString;
  int isStatic;
  unsigned __int64 offset;
  void *address;
};

/* 6870 */
struct VMTypeEntry
{
  const char *typeName;
  const char *superclassName;
  int isOopType;
  int isIntegerType;
  int isUnsigned;
  unsigned __int64 size;
};

/* 6871 */
struct VMIntConstantEntry
{
  const char *name;
  int value;
};

/* 6872 */
struct VMLongConstantEntry
{
  const char *name;
  unsigned __int64 value;
};

/* 6873 */
struct __cppobj ProtectionDomainEntry : CHeapObj<1>
{
  ProtectionDomainEntry *_next;
  ProtectionDomainCacheEntry *_pd_cache;
};

/* 6874 */
struct __cppobj __declspec(align(4)) ProtectionDomainCacheEntry : HashtableEntry<oopDesc *,1>
{
  bool _strongly_reachable;
};

/* 6875 */
struct __cppobj DictionaryEntry : HashtableEntry<Klass *,1>
{
  ProtectionDomainEntry *_pd_set;
  ClassLoaderData *_loader_data;
};

/* 6876 */
struct __cppobj SymbolPropertyEntry : HashtableEntry<Symbol *,9>
{
  int _symbol_mode;
  Method *_method;
  oopDesc *_method_type;
};

/* 6877 */
struct __cppobj SeenThread : CHeapObj<7>
{
  Thread *_thread;
  SeenThread *_stnext;
  SeenThread *_stprev;
};

/* 6878 */
struct __cppobj PlaceholderEntry : HashtableEntry<Symbol *,1>
{
  ClassLoaderData *_loader_data;
  bool _havesupername;
  Symbol *_supername;
  Thread *_definer;
  Klass *_instanceKlass;
  SeenThread *_superThreadQ;
  SeenThread *_loadInstanceThreadQ;
  SeenThread *_defineThreadQ;
};

/* 6879 */
struct __cppobj LoaderConstraintEntry : HashtableEntry<Klass *,1>
{
  Symbol *_name;
  int _num_loaders;
  int _max_loaders;
  ClassLoaderData **_loaders;
};

/* 6880 */
struct __cppobj InstanceClassLoaderKlass : InstanceKlass
{
};

/* 6881 */
struct __cppobj __declspec(align(8)) JvmtiAgentThread : JavaThread
{
  void (__stdcall *_start_fn)(_jvmtiEnv *, JNIEnv_ *, void *);
  JvmtiEnv *_env;
  const void *_start_arg;
};

/* 6882 */
struct __cppobj HashtableEntry<int,7> : BasicHashtableEntry<7>
{
  int _literal;
};

/* 6883 */
struct __cppobj Hashtable<int,7> : BasicHashtable<7>
{
};

/* 6884 */
struct __cppobj VMStructs
{
};

/* 6885 */
struct __cppobj ReservedHeapSpace : ReservedSpace
{
};

/* 6886 */
struct __cppobj ReservedCodeSpace : ReservedSpace
{
};

/* 6887 */
struct __cppobj OffsetClosure
{
  OffsetClosure_vtbl *__vftable /*VFT*/;
};

/* 6888 */
struct /*VFT*/ OffsetClosure_vtbl
{
  void (__thiscall *offset_do)(OffsetClosure *this, int);
};

/* 6889 */
struct /*VFT*/ interpretedVFrame_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
  Method *(__thiscall *method)(javaVFrame *this);
  int (__thiscall *bci)(javaVFrame *this);
  StackValueCollection *(__thiscall *locals)(javaVFrame *this);
  StackValueCollection *(__thiscall *expressions)(javaVFrame *this);
  GrowableArray<MonitorInfo *> *(__thiscall *monitors)(javaVFrame *this);
  void (__thiscall *set_locals)(javaVFrame *this, StackValueCollection *);
};

/* 6890 */
struct __cppobj interpretedVFrame : javaVFrame
{
};

/* 6891 */
struct /*VFT*/ externalVFrame_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
};

/* 6892 */
struct __cppobj externalVFrame : vframe
{
};

/* 6893 */
struct /*VFT*/ entryVFrame_vtbl
{
  vframe *(__thiscall *sender)(vframe *this);
  bool (__thiscall *is_top)(vframe *this);
  vframe *(__thiscall *top)(vframe *this);
  bool (__thiscall *is_entry_frame)(vframe *this);
  bool (__thiscall *is_java_frame)(vframe *this);
  bool (__thiscall *is_interpreted_frame)(vframe *this);
  bool (__thiscall *is_compiled_frame)(vframe *this);
};

/* 6894 */
struct __cppobj entryVFrame : externalVFrame
{
};

/* 6895 */
struct /*VFT*/ JniPeriodicCheckerTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 6896 */
struct __cppobj JniPeriodicCheckerTask : PeriodicTask
{
};

/* 6897 */
struct __cppobj JniPeriodicChecker : AllStatic
{
};

/* 6898 */
struct __cppobj MemProfiler : AllStatic
{
};

/* 6899 */
struct __cppobj TraceSuspendDebugBits : StackObj
{
  JavaThread *jt;
  bool is_wait;
  bool called_by_wait;
  unsigned int *bits;
};

/* 6900 */
struct __cppobj RememberProcessedThread : StackObj
{
  NamedThread *_cur_thr;
};

/* 6901 */
struct SharedGlobals
{
  long double padPrefix[8];
  volatile int stwRandom;
  volatile int stwCycle;
  long double padSuffix[16];
  volatile int hcSequence;
  long double padFinal[8];
};

/* 6902 */
struct /*VFT*/ ReleaseJavaMonitorsClosure_vtbl
{
  void (__thiscall *do_monitor)(MonitorClosure *this, ObjectMonitor *);
};

/* 6903 */
struct __cppobj ReleaseJavaMonitorsClosure : MonitorClosure
{
  Thread *__the_thread__;
};

/* 6904 */
struct /*VFT*/ MarkActivationClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 6905 */
struct __cppobj MarkActivationClosure : CodeBlobClosure
{
};

/* 6906 */
struct /*VFT*/ SetHotnessClosure_vtbl
{
  void (__thiscall *do_code_blob)(CodeBlobClosure *this, CodeBlob *);
};

/* 6907 */
struct __cppobj SetHotnessClosure : CodeBlobClosure
{
};

/* 6908 */
struct __cppobj NMethodMarker : StackObj
{
  CompilerThread *_thread;
};

/* 6909 */
struct __cppobj Forte : AllStatic
{
};

/* 6910 */
struct PropertyCounters
{
  const char **property_list;
  CounterNS name_space;
};

/* 6911 */
struct /*VFT*/ HighResTimeSampler_vtbl
{
  __int64 (__thiscall *take_sample)(PerfLongSampleHelper *this);
};

/* 6912 */
struct __cppobj HighResTimeSampler : PerfLongSampleHelper
{
};

/* 6913 */
union StackValueCollection::long_at::__l2::<unnamed_type_value>
{
  __int64 jl;
  int array[2];
};

/* 6914 */
union StackValueCollection::double_at::__l2::<unnamed_type_value>
{
  long double jd;
  int array[2];
};

/* 6915 */
union StackValueCollection::set_long_at::__l2::<unnamed_type_x>
{
  __int64 jl;
  int array[2];
};

/* 6916 */
union StackValueCollection::set_double_at::__l2::<unnamed_type_x>
{
  long double jd;
  int array[2];
};

/* 6917 */
union StackValue::create_stack_value::__l8::<unnamed_type_value>
{
  int p;
  float jf;
};

/* 6918 */
union StackValue::create_stack_value::__l9::<unnamed_type_value>
{
  int p;
  int ji;
};

/* 6919 */
union StackValue::create_stack_value::__l17::<unnamed_type_value>
{
  int p;
  int ji;
};

/* 6920 */
union StackValue::create_stack_value::__l23::<unnamed_type_value>
{
  int p;
  int ji;
};

/* 6921 */
struct __cppobj SimpleThresholdPolicy : CompilationPolicy
{
  int _c1_count;
  int _c2_count;
};

/* 6922 */
struct /*VFT*/ SimpleThresholdPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
  void (__thiscall *print_specific)(SimpleThresholdPolicy *this, SimpleThresholdPolicy::EventType, methodHandle, methodHandle, int, CompLevel);
  void (__thiscall *submit_compile)(SimpleThresholdPolicy *this, methodHandle, int, CompLevel, JavaThread *);
  void (__thiscall *method_invocation_event)(SimpleThresholdPolicy *this, methodHandle, methodHandle, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *method_back_branch_event)(SimpleThresholdPolicy *this, methodHandle, methodHandle, int, CompLevel, nmethod *, JavaThread *);
};

/* 6923 */
struct __cppobj SignatureVerifier : StackObj
{
};

/* 6924 */
struct DoubleIntConv::<unnamed_type_split>
{
  int lo;
  int hi;
};

/* 6925 */
union DoubleIntConv
{
  long double d;
  DoubleIntConv::<unnamed_type_split> split;
};

/* 6926 */
struct __cppobj AdapterHandlerTableIterator : StackObj
{
  AdapterHandlerTable *_table;
  int _index;
  AdapterHandlerEntry *_current;
};

/* 6927 */
struct __cppobj AllocationContextService : AllStatic
{
};

/* 6928 */
struct __cppobj RFrame : ResourceObj
{
  RFrame_vtbl *__vftable /*VFT*/;
  const frame _fr;
  JavaThread *const _thread;
  RFrame *_caller;
  RFrame *const _callee;
  const int _num;
  int _invocations;
  int _distance;
};

/* 6929 */
struct /*VFT*/ RFrame_vtbl
{
  void (__thiscall *init)(RFrame *this);
  void (__thiscall *print)(RFrame *this);
  bool (__thiscall *is_interpreted)(RFrame *this);
  bool (__thiscall *is_compiled)(RFrame *this);
  int (__thiscall *cost)(RFrame *this);
  methodHandle *(__thiscall *top_method)(RFrame *this, methodHandle *result);
  javaVFrame *(__thiscall *top_vframe)(RFrame *this);
  nmethod *(__thiscall *nm)(RFrame *this);
};

/* 6930 */
struct /*VFT*/ CompiledRFrame_vtbl
{
  void (__thiscall *init)(RFrame *this);
  void (__thiscall *print)(RFrame *this);
  bool (__thiscall *is_interpreted)(RFrame *this);
  bool (__thiscall *is_compiled)(RFrame *this);
  int (__thiscall *cost)(RFrame *this);
  methodHandle *(__thiscall *top_method)(RFrame *this, methodHandle *result);
  javaVFrame *(__thiscall *top_vframe)(RFrame *this);
  nmethod *(__thiscall *nm)(RFrame *this);
};

/* 6931 */
struct __cppobj CompiledRFrame : RFrame
{
  nmethod *_nm;
  javaVFrame *_vf;
  methodHandle _method;
};

/* 6932 */
struct /*VFT*/ InterpretedRFrame_vtbl
{
  void (__thiscall *init)(RFrame *this);
  void (__thiscall *print)(RFrame *this);
  bool (__thiscall *is_interpreted)(RFrame *this);
  bool (__thiscall *is_compiled)(RFrame *this);
  int (__thiscall *cost)(RFrame *this);
  methodHandle *(__thiscall *top_method)(RFrame *this, methodHandle *result);
  javaVFrame *(__thiscall *top_vframe)(RFrame *this);
  nmethod *(__thiscall *nm)(RFrame *this);
};

/* 6933 */
struct __cppobj InterpretedRFrame : RFrame
{
  javaVFrame *_vf;
  methodHandle _method;
};

/* 6934 */
struct /*VFT*/ DeoptimizedRFrame_vtbl
{
  void (__thiscall *init)(RFrame *this);
  void (__thiscall *print)(RFrame *this);
  bool (__thiscall *is_interpreted)(RFrame *this);
  bool (__thiscall *is_compiled)(RFrame *this);
  int (__thiscall *cost)(RFrame *this);
  methodHandle *(__thiscall *top_method)(RFrame *this, methodHandle *result);
  javaVFrame *(__thiscall *top_vframe)(RFrame *this);
  nmethod *(__thiscall *nm)(RFrame *this);
};

/* 6935 */
struct __cppobj DeoptimizedRFrame : InterpretedRFrame
{
};

/* 6936 */
union VerificationType::<unnamed_type__u>
{
  Symbol *_sym;
  unsigned int _data;
};

/* 6937 */
struct __cppobj VerificationType : _ValueObj
{
  VerificationType::<unnamed_type__u> _u;
};

/* 6940 */
struct __cppobj TypeOrigin : _ValueObj
{
  TypeOrigin::Origin _origin;
  unsigned __int16 _index;
  StackMapFrame *_frame;
  VerificationType _type;
};

/* 6941 */
struct __cppobj ErrorContext : _ValueObj
{
  int _bci;
  ErrorContext::FaultType _fault;
  TypeOrigin _type;
  TypeOrigin _expected;
};

/* 6938 */
struct __cppobj ClassVerifier : StackObj
{
  Thread *_thread;
  GrowableArray<Symbol *> *_symbols;
  Symbol *_exception_type;
  char *_message;
  ErrorContext _error_context;
  instanceKlassHandle _klass;
  methodHandle _method;
  VerificationType _this_type;
};

/* 6939 */
struct __cppobj StackMapFrame : ResourceObj
{
  int _offset;
  int _locals_size;
  int _stack_size;
  int _stack_mark;
  int _max_locals;
  int _max_stack;
  unsigned __int8 _flags;
  VerificationType *_locals;
  VerificationType *_stack;
  ClassVerifier *_verifier;
};

/* 6942 */
struct __cppobj verification_type_info
{
};

/* 6943 */
struct __cppobj stack_map_frame
{
};

/* 6944 */
struct __cppobj same_frame : stack_map_frame
{
};

/* 6945 */
struct __cppobj same_frame_extended : stack_map_frame
{
};

/* 6946 */
struct __cppobj same_locals_1_stack_item_frame : stack_map_frame
{
};

/* 6947 */
struct __cppobj same_locals_1_stack_item_extended : stack_map_frame
{
};

/* 6948 */
struct __cppobj chop_frame : stack_map_frame
{
};

/* 6949 */
struct __cppobj append_frame : stack_map_frame
{
};

/* 6950 */
struct __cppobj full_frame : stack_map_frame
{
};

/* 6951 */
struct __cppobj stack_map_table
{
};

/* 6952 */
struct __cppobj stack_map_table_attribute
{
};

/* 6953 */
struct __cppobj RelocatorListener : StackObj
{
  RelocatorListener_vtbl *__vftable /*VFT*/;
};

/* 6954 */
struct /*VFT*/ RelocatorListener_vtbl
{
  void (__thiscall *relocated)(RelocatorListener *this, int, int, int);
};

/* 6955 */
struct __cppobj Relocator : ResourceObj
{
  unsigned __int8 *_code_array;
  int _code_array_length;
  int _code_length;
  unsigned __int8 *_compressed_line_number_table;
  int _compressed_line_number_table_size;
  methodHandle _method;
  unsigned __int8 _overwrite[3];
  GrowableArray<ChangeItem *> *_changes;
  RelocatorListener *_listener;
};

/* 6956 */
struct __cppobj ChangeItem : ResourceObj
{
  ChangeItem_vtbl *__vftable /*VFT*/;
  int _bci;
};

/* 6957 */
struct /*VFT*/ ChangeItem_vtbl
{
  bool (__thiscall *handle_code_change)(ChangeItem *this, Relocator *);
  bool (__thiscall *is_widen)(ChangeItem *this);
  bool (__thiscall *is_jump_widen)(ChangeItem *this);
  bool (__thiscall *is_switch_pad)(ChangeItem *this);
  bool (__thiscall *adjust)(ChangeItem *this, int, int);
  void (__thiscall *print)(ChangeItem *this);
};

/* 6958 */
struct __cppobj GrowableArray<ChangeItem *> : GenericGrowableArray
{
  ChangeItem **_data;
};

/* 6959 */
struct /*VFT*/ ChangeWiden_vtbl
{
  bool (__thiscall *handle_code_change)(ChangeItem *this, Relocator *);
  bool (__thiscall *is_widen)(ChangeItem *this);
  bool (__thiscall *is_jump_widen)(ChangeItem *this);
  bool (__thiscall *is_switch_pad)(ChangeItem *this);
  bool (__thiscall *adjust)(ChangeItem *this, int, int);
  void (__thiscall *print)(ChangeItem *this);
};

/* 6960 */
struct __cppobj ChangeWiden : ChangeItem
{
  int _new_ilen;
  unsigned __int8 *_inst_buffer;
};

/* 6961 */
struct /*VFT*/ ChangeJumpWiden_vtbl
{
  bool (__thiscall *handle_code_change)(ChangeItem *this, Relocator *);
  bool (__thiscall *is_widen)(ChangeItem *this);
  bool (__thiscall *is_jump_widen)(ChangeItem *this);
  bool (__thiscall *is_switch_pad)(ChangeItem *this);
  bool (__thiscall *adjust)(ChangeItem *this, int, int);
  void (__thiscall *print)(ChangeItem *this);
};

/* 6962 */
struct __cppobj ChangeJumpWiden : ChangeItem
{
  int _delta;
};

/* 6963 */
struct /*VFT*/ ChangeSwitchPad_vtbl
{
  bool (__thiscall *handle_code_change)(ChangeItem *this, Relocator *);
  bool (__thiscall *is_widen)(ChangeItem *this);
  bool (__thiscall *is_jump_widen)(ChangeItem *this);
  bool (__thiscall *is_switch_pad)(ChangeItem *this);
  bool (__thiscall *adjust)(ChangeItem *this, int, int);
  void (__thiscall *print)(ChangeItem *this);
};

/* 6964 */
struct __cppobj __declspec(align(4)) ChangeSwitchPad : ChangeItem
{
  int _padding;
  bool _is_lookup_switch;
};

/* 6965 */
struct __cppobj MetadataFactory : AllStatic
{
};

/* 6966 */
struct __cppobj StackMapTable : StackObj
{
  int _code_length;
  int _frame_count;
  StackMapFrame **_frame_array;
};

/* 6967 */
struct __cppobj Verifier : AllStatic
{
};

/* 6968 */
struct __cppobj Reflection : AllStatic
{
};

/* 6969 */
struct /*VFT*/ CountHandleClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6970 */
struct __cppobj CountHandleClosure : OopClosure
{
  int _count;
};

/* 6971 */
struct /*VFT*/ VerifyHandleClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 6972 */
struct __cppobj VerifyHandleClosure : OopClosure
{
};

/* 6973 */
struct /*VFT*/ SignatureChekker_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
};

/* 6974 */
struct __cppobj __declspec(align(4)) SignatureChekker : SignatureIterator
{
  int _pos;
  BasicType _return_type;
  unsigned __int8 *_value_state;
  int *_value;
  bool _is_return;
};

/* 6975 */
struct __cppobj JavaCalls : AllStatic
{
};

/* 6976 */
struct __cppobj ExitProc : CHeapObj<7>
{
  void (__cdecl *_proc)();
  ExitProc *_next;
};

/* 6977 */
struct __declspec(align(8)) jdk_version_info
{
  unsigned int jdk_version;
  unsigned __int32 update_version : 16;
  unsigned __int32 special_update_version : 8;
  unsigned __int32 reserved1 : 8;
  unsigned int reserved2;
  unsigned __int32 thread_park_blocker : 1;
  unsigned __int32 post_vm_init_hook_enabled : 1;
  unsigned __int32 pending_list_uses_discovered_field : 1;
  _BYTE gap10[8];
};

/* 6978 */
struct __cppobj AbstractICache : AllStatic
{
};

/* 6979 */
struct Flag::print_kind::__l2::Data
{
  int flag;
  const char *name;
};

/* 6980 */
struct /*VFT*/ InterpreterFrameClosure_vtbl
{
  void (__thiscall *offset_do)(OffsetClosure *this, int);
};

/* 6981 */
struct __cppobj InterpreterFrameClosure : OffsetClosure
{
  frame *_fr;
  OopClosure *_f;
  int _max_locals;
  int _max_stack;
};

/* 6982 */
struct /*VFT*/ InterpretedArgumentOopFinder_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6983 */
struct __cppobj InterpretedArgumentOopFinder : SignatureInfo
{
  OopClosure *_f;
  int _offset;
  bool _has_receiver;
  frame *_fr;
};

/* 6984 */
struct /*VFT*/ EntryFrameOopFinder_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 6985 */
struct __cppobj EntryFrameOopFinder : SignatureInfo
{
  bool _is_static;
  int _offset;
  frame *_fr;
  OopClosure *_f;
};

/* 6986 */
struct __cppobj CompiledArgumentOopFinder : SignatureInfo
{
  OopClosure *_f;
  int _offset;
  bool _has_receiver;
  bool _has_appendix;
  frame _fr;
  RegisterMap *_reg_map;
  int _arg_size;
  VMRegPair *_regs;
};

/* 6987 */
struct /*VFT*/ CompiledArgumentOopFinder_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
  void (__thiscall *handle_oop_offset)(CompiledArgumentOopFinder *this);
};

/* 6988 */
struct __cppobj ThreadProfilerMark : StackObj
{
  ThreadProfiler *_pp;
  ThreadProfilerMark::Region _r;
};

/* 6989 */
struct __cppobj PCRecorder : AllStatic
{
};

/* 6990 */
struct __cppobj GrowableArray<CodeBlob *> : GenericGrowableArray
{
  CodeBlob **_data;
};

/* 6991 */
struct __cppobj interpretedNode : ProfilerNode
{
  Method *_method;
  oopDesc *_class_loader;
};

/* 6992 */
struct /*VFT*/ interpretedNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 6993 */
struct __cppobj compiledNode : ProfilerNode
{
  Method *_method;
  oopDesc *_class_loader;
};

/* 6994 */
struct /*VFT*/ compiledNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 6995 */
struct __cppobj stubNode : ProfilerNode
{
  Method *_method;
  oopDesc *_class_loader;
  const char *_symbol;
};

/* 6996 */
struct /*VFT*/ stubNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 6997 */
struct __cppobj adapterNode : ProfilerNode
{
};

/* 6998 */
struct /*VFT*/ adapterNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 6999 */
struct __cppobj runtimeStubNode : ProfilerNode
{
  const CodeBlob *_stub;
  const char *_symbol;
};

/* 7000 */
struct /*VFT*/ runtimeStubNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 7001 */
struct __cppobj unknown_compiledNode : ProfilerNode
{
  const char *_name;
};

/* 7002 */
struct /*VFT*/ unknown_compiledNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 7003 */
struct __cppobj vmNode : ProfilerNode
{
  const char *_name;
};

/* 7004 */
struct /*VFT*/ vmNode_vtbl
{
  void (__thiscall *~ProfilerNode)(ProfilerNode *this);
  bool (__thiscall *is_interpreted)(ProfilerNode *this);
  bool (__thiscall *is_compiled)(ProfilerNode *this);
  bool (__thiscall *is_stub)(ProfilerNode *this);
  bool (__thiscall *is_runtime_stub)(ProfilerNode *this);
  void (__thiscall *oops_do)(ProfilerNode *this, OopClosure *);
  bool (__thiscall *interpreted_match)(ProfilerNode *this, Method *);
  bool (__thiscall *compiled_match)(ProfilerNode *this, Method *);
  bool (__thiscall *stub_match)(ProfilerNode *this, Method *, const char *);
  bool (__thiscall *adapter_match)(ProfilerNode *this);
  bool (__thiscall *runtimeStub_match)(ProfilerNode *this, const CodeBlob *, const char *);
  bool (__thiscall *unknown_compiled_match)(ProfilerNode *this, const CodeBlob *);
  Method *(__thiscall *method)(ProfilerNode *this);
  void (__thiscall *print_method_on)(ProfilerNode *this, outputStream *);
  void (__thiscall *print)(ProfilerNode *this, outputStream *, int);
};

/* 7005 */
struct __cppobj GrowableArray<ProfilerNode *> : GenericGrowableArray
{
  ProfilerNode **_data;
};

/* 7006 */
struct __cppobj FieldStreamBase : StackObj
{
  Array<unsigned short> *_fields;
  constantPoolHandle _constants;
  int _index;
  int _limit;
  int _generic_signature_slot;
  fieldDescriptor _fd_buf;
};

/* 7007 */
struct __cppobj JavaFieldStream : FieldStreamBase
{
};

/* 7008 */
struct __cppobj InternalFieldStream : FieldStreamBase
{
};

/* 7009 */
struct __cppobj AllFieldStream : FieldStreamBase
{
};

/* 7010 */
struct /*VFT*/ FieldReassigner_vtbl
{
  void (__thiscall *do_field)(FieldClosure *this, fieldDescriptor *);
};

/* 7011 */
struct __cppobj FieldReassigner : FieldClosure
{
  frame *_fr;
  RegisterMap *_reg_map;
  ObjectValue *_sv;
  InstanceKlass *_ik;
  oopDesc *_obj;
  int _i;
};

/* 7012 */
struct /*VFT*/ AdvancedThresholdPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
  void (__thiscall *print_specific)(SimpleThresholdPolicy *this, SimpleThresholdPolicy::EventType, methodHandle, methodHandle, int, CompLevel);
  void (__thiscall *submit_compile)(SimpleThresholdPolicy *this, methodHandle, int, CompLevel, JavaThread *);
  void (__thiscall *method_invocation_event)(SimpleThresholdPolicy *this, methodHandle, methodHandle, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *method_back_branch_event)(SimpleThresholdPolicy *this, methodHandle, methodHandle, int, CompLevel, nmethod *, JavaThread *);
};

/* 7013 */
struct __cppobj AdvancedThresholdPolicy : SimpleThresholdPolicy
{
  __int64 _start_time;
  long double _increase_threshold_at_ratio;
};

/* 7014 */
struct /*VFT*/ SimpleCompPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
  void (__thiscall *method_invocation_event)(NonTieredCompPolicy *this, methodHandle, JavaThread *);
  void (__thiscall *method_back_branch_event)(NonTieredCompPolicy *this, methodHandle, int, JavaThread *);
};

/* 7015 */
struct __cppobj SimpleCompPolicy : NonTieredCompPolicy
{
};

/* 7016 */
struct /*VFT*/ StackWalkCompPolicy_vtbl
{
  CompLevel (__thiscall *initial_compile_level)(CompilationPolicy *this);
  int (__thiscall *compiler_count)(CompilationPolicy *this, CompLevel);
  nmethod *(__thiscall *event)(CompilationPolicy *this, methodHandle, methodHandle, int, int, CompLevel, nmethod *, JavaThread *);
  void (__thiscall *do_safepoint_work)(CompilationPolicy *this);
  void (__thiscall *reprofile)(CompilationPolicy *this, ScopeDesc *, bool);
  void (__thiscall *delay_compilation)(CompilationPolicy *this, Method *);
  void (__thiscall *disable_compilation)(CompilationPolicy *this, Method *);
  CompileTask *(__thiscall *select_task)(CompilationPolicy *this, CompileQueue *);
  bool (__thiscall *is_mature)(CompilationPolicy *this, Method *);
  void (__thiscall *initialize)(CompilationPolicy *this);
  bool (__thiscall *should_not_inline)(CompilationPolicy *this, ciEnv *, ciMethod *);
  void (__thiscall *method_invocation_event)(NonTieredCompPolicy *this, methodHandle, JavaThread *);
  void (__thiscall *method_back_branch_event)(NonTieredCompPolicy *this, methodHandle, int, JavaThread *);
};

/* 7017 */
struct __cppobj StackWalkCompPolicy : NonTieredCompPolicy
{
};

/* 7018 */
struct __cppobj GrowableArray<RFrame *> : GenericGrowableArray
{
  RFrame **_data;
};

/* 7019 */
struct __cppobj CounterDecay : AllStatic
{
};

/* 7020 */
struct __cppobj GrowableArray<markOopDesc *> : GenericGrowableArray
{
  markOopDesc **_data;
};

/* 7021 */
struct __cppobj __declspec(align(4)) VM_EnableBiasedLocking : VM_Operation
{
  bool _is_cheap_allocated;
};

/* 7022 */
struct /*VFT*/ VM_EnableBiasedLocking_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7023 */
struct /*VFT*/ EnableBiasedLockingTask_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 7024 */
struct __cppobj EnableBiasedLockingTask : PeriodicTask
{
};

/* 7025 */
struct __cppobj VM_RevokeBias : VM_Operation
{
  Handle *_obj;
  GrowableArray<Handle> *_objs;
  JavaThread *_requesting_thread;
  BiasedLocking::Condition _status_code;
  unsigned __int64 _biased_locker_id;
};

/* 7026 */
struct /*VFT*/ VM_RevokeBias_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7027 */
struct __cppobj __declspec(align(8)) VM_BulkRevokeBias : VM_RevokeBias
{
  bool _bulk_rebias;
  bool _attempt_rebias_of_object;
};

/* 7028 */
struct /*VFT*/ VM_BulkRevokeBias_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7029 */
struct __cppobj ObsoleteFlag
{
  const char *name;
  JDK_Version obsoleted_in;
  JDK_Version accept_until;
};

/* 7030 */
struct __cppobj JavaAssertions : AllStatic
{
};

/* 7031 */
struct __cppobj __declspec(align(4)) JavaAssertions::OptionList : CHeapObj<1>
{
  const char *_name;
  JavaAssertions::OptionList *_next;
  bool _enabled;
};

/* 7032 */
struct __cppobj ArgumentsExt : AllStatic
{
};

/* 7033 */
struct /*VFT*/ WBIsKlassAliveClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7034 */
struct __cppobj __declspec(align(4)) WBIsKlassAliveClosure : KlassClosure
{
  Symbol *_name;
  bool _found;
};

/* 7035 */
struct __cppobj VM_WhiteBoxOperation : VM_Operation
{
};

/* 7036 */
struct /*VFT*/ VM_WhiteBoxOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7037 */
struct __cppobj VM_WhiteBoxCleanMethodData : VM_WhiteBoxOperation
{
  MethodData *_mdo;
};

/* 7038 */
struct /*VFT*/ VM_WhiteBoxCleanMethodData_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7039 */
struct __cppobj CodeBlobStub
{
  const char *const name;
  const int size;
  const int blob_type;
  const __int64 address;
};

/* 7040 */
struct __cppobj NativeLookup : AllStatic
{
};

/* 7041 */
struct __cppobj BciMap
{
  int *_old_bci;
  int *_new_st_bci;
  int *_new_end_bci;
  int _cur_size;
  int _cur_pos;
  int _pos;
};

/* 7042 */
struct __cppobj MethodComparator
{
};

/* 7043 */
struct __cppobj JvmtiEnvThreadStateIterator : StackObj
{
  JvmtiThreadState *state;
};

/* 7044 */
struct __cppobj GrowableArray<InstanceKlass *> : GenericGrowableArray
{
  InstanceKlass **_data;
};

/* 7045 */
struct __cppobj HeapWalkContext : _ValueObj
{
  bool _valid;
};

/* 7046 */
struct __cppobj BasicHeapWalkContext : HeapWalkContext
{
  jvmtiIterationControl (__stdcall *_heap_root_callback)(jvmtiHeapRootKind, __int64, __int64, __int64 *, void *);
  jvmtiIterationControl (__stdcall *_stack_ref_callback)(jvmtiHeapRootKind, __int64, __int64, __int64 *, __int64, int, struct _jmethodID *, int, void *);
  jvmtiIterationControl (__stdcall *_object_ref_callback)(jvmtiObjectReferenceKind, __int64, __int64, __int64 *, __int64, int, void *);
  oopDesc *_last_referrer;
  __int64 _last_referrer_tag;
};

/* 7047 */
struct __cppobj AdvancedHeapWalkContext : HeapWalkContext
{
  int _heap_filter;
  KlassHandle _klass_filter;
  const _jvmtiHeapCallbacks *_heap_callbacks;
};

/* 7048 */
struct __cppobj JvmtiTagHashmapEntryClosure
{
  JvmtiTagHashmapEntryClosure_vtbl *__vftable /*VFT*/;
};

/* 7049 */
struct /*VFT*/ JvmtiTagHashmapEntryClosure_vtbl
{
  void (__thiscall *do_entry)(JvmtiTagHashmapEntryClosure *this, JvmtiTagHashmapEntry *);
};

/* 7050 */
struct __cppobj CallbackWrapper : StackObj
{
  JvmtiTagMap *_tag_map;
  JvmtiTagHashmap *_hashmap;
  JvmtiTagHashmapEntry *_entry;
  oopDesc *_o;
  __int64 _obj_size;
  __int64 _obj_tag;
  __int64 _klass_tag;
};

/* 7051 */
struct __cppobj __declspec(align(8)) TwoOopCallbackWrapper : CallbackWrapper
{
  bool _is_reference_to_self;
  JvmtiTagHashmap *_referrer_hashmap;
  JvmtiTagHashmapEntry *_referrer_entry;
  oopDesc *_referrer;
  __int64 _referrer_obj_tag;
  __int64 _referrer_klass_tag;
  __int64 *_referrer_tag_p;
};

/* 7052 */
struct __cppobj ClassFieldMapCacheMark : StackObj
{
};

/* 7053 */
struct __cppobj VM_HeapIterateOperation : VM_Operation
{
  ObjectClosure *_blk;
};

/* 7054 */
struct /*VFT*/ VM_HeapIterateOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7055 */
struct /*VFT*/ IterateOverHeapObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7056 */
struct __cppobj __declspec(align(4)) IterateOverHeapObjectClosure : ObjectClosure
{
  JvmtiTagMap *_tag_map;
  KlassHandle _klass;
  jvmtiHeapObjectFilter _object_filter;
  jvmtiIterationControl (__stdcall *_heap_object_callback)(__int64, __int64, __int64 *, void *);
  const void *_user_data;
  bool _iteration_aborted;
};

/* 7057 */
struct /*VFT*/ IterateThroughHeapObjectClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7058 */
struct __cppobj __declspec(align(4)) IterateThroughHeapObjectClosure : ObjectClosure
{
  JvmtiTagMap *_tag_map;
  KlassHandle _klass;
  int _heap_filter;
  const _jvmtiHeapCallbacks *_callbacks;
  const void *_user_data;
  bool _iteration_aborted;
};

/* 7059 */
struct /*VFT*/ TagObjectCollector_vtbl
{
  void (__thiscall *do_entry)(JvmtiTagHashmapEntryClosure *this, JvmtiTagHashmapEntry *);
};

/* 7060 */
struct __cppobj TagObjectCollector : JvmtiTagHashmapEntryClosure
{
  JvmtiEnv *_env;
  __int64 *_tags;
  int _tag_count;
  GrowableArray<_jobject *> *_object_results;
  GrowableArray<unsigned __int64> *_tag_results;
};

/* 7061 */
struct /*VFT*/ RestoreMarksClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7062 */
struct __cppobj RestoreMarksClosure : ObjectClosure
{
};

/* 7063 */
struct __cppobj ObjectMarker : AllStatic
{
};

/* 7064 */
struct __cppobj ObjectMarkerController : StackObj
{
};

/* 7065 */
struct __cppobj CallbackInvoker : AllStatic
{
};

/* 7066 */
struct /*VFT*/ SimpleRootsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7067 */
struct __cppobj __declspec(align(4)) SimpleRootsClosure : OopClosure
{
  jvmtiHeapReferenceKind _kind;
  bool _continue;
};

/* 7068 */
struct /*VFT*/ JNILocalRootsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7069 */
struct __cppobj __declspec(align(8)) JNILocalRootsClosure : OopClosure
{
  __int64 _thread_tag;
  __int64 _tid;
  int _depth;
  struct _jmethodID *_method;
  bool _continue;
};

/* 7070 */
struct __cppobj __declspec(align(4)) VM_HeapWalkOperation : VM_Operation
{
  bool _is_advanced_heap_walk;
  JvmtiTagMap *_tag_map;
  Handle _initial_object;
  GrowableArray<oopDesc *> *_visit_stack;
  bool _collecting_heap_roots;
  bool _following_object_refs;
  bool _reporting_primitive_fields;
  bool _reporting_primitive_array_values;
  bool _reporting_string_values;
};

/* 7071 */
struct /*VFT*/ VM_HeapWalkOperation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7072 */
struct __cppobj Rewriter : StackObj
{
  instanceKlassHandle _klass;
  constantPoolHandle _pool;
  Array<Method *> *_methods;
  intArray _cp_map;
  intStack _cp_cache_map;
  intArray _reference_map;
  intStack _resolved_references_map;
  intStack _invokedynamic_references_map;
  intArray _method_handle_invokers;
  int _resolved_reference_limit;
  intStack _invokedynamic_cp_cache_map;
  GrowableArray<unsigned char *> *_patch_invokedynamic_bcps;
  GrowableArray<int> *_patch_invokedynamic_refs;
  int _first_iteration_cp_cache_limit;
};

/* 7073 */
struct __cppobj VM_RedefineClasses : VM_Operation
{
  int _class_count;
  const _jvmtiClassDefinition *_class_defs;
  JvmtiClassLoadKind _class_load_kind;
  int _index_map_count;
  intArray *_index_map_p;
  int _operands_cur_length;
  int _operands_index_map_count;
  intArray *_operands_index_map_p;
  Klass **_scratch_classes;
  jvmtiError _res;
  elapsedTimer _timer_rsc_phase1;
  elapsedTimer _timer_rsc_phase2;
  elapsedTimer _timer_vm_op_prologue;
};

/* 7074 */
struct /*VFT*/ VM_RedefineClasses_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7075 */
struct /*VFT*/ VM_RedefineClasses::CheckClass_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7076 */
struct __cppobj VM_RedefineClasses::CheckClass : KlassClosure
{
  Thread *_thread;
};

/* 7077 */
struct /*VFT*/ VM_RedefineClasses::AdjustCpoolCacheAndVtable_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7078 */
struct __cppobj VM_RedefineClasses::AdjustCpoolCacheAndVtable : KlassClosure
{
  Thread *_thread;
};

/* 7079 */
struct __cppobj MergeCPCleaner
{
  ClassLoaderData *_loader_data;
  ConstantPool *_cp;
  ConstantPool *_scratch_cp;
};

/* 7080 */
struct __cppobj TransferNativeFunctionRegistration
{
  instanceKlassHandle the_class;
  int prefix_count;
  char **prefixes;
};

/* 7081 */
struct __cppobj JvmtiManageCapabilities : AllStatic
{
};

/* 7082 */
struct __cppobj JvmtiSuspendControl : AllStatic
{
};

/* 7083 */
struct __cppobj Stack<_jclass *,7> : StackBase<7>
{
  Stack<_jclass *,7>_vtbl *__vftable /*VFT*/;
  _jclass **_cur_seg;
  _jclass **_cache;
};

/* 7084 */
struct /*VFT*/ Stack<_jclass *,7>_vtbl
{
  _jclass **(__thiscall *alloc)(Stack<_jclass *,7> *this, unsigned int);
  void (__thiscall *free)(Stack<_jclass *,7> *this, _jclass **, unsigned int);
};

/* 7085 */
struct /*VFT*/ LoadedClassesClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7086 */
struct __cppobj LoadedClassesClosure : KlassClosure
{
  Stack<_jclass *,7> _classStack;
  JvmtiEnv *_env;
};

/* 7087 */
struct __cppobj JvmtiGetLoadedClasses : AllStatic
{
};

/* 7088 */
struct __cppobj GrowableArray<_jvmtiExtensionFunctionInfo *> : GenericGrowableArray
{
  _jvmtiExtensionFunctionInfo **_data;
};

/* 7089 */
struct __cppobj GrowableArray<_jvmtiExtensionEventInfo *> : GenericGrowableArray
{
  _jvmtiExtensionEventInfo **_data;
};

/* 7090 */
struct __cppobj JvmtiExtensions : AllStatic
{
};

/* 7091 */
struct __cppobj __declspec(align(4)) ResourceTracker : StackObj
{
  JvmtiEnv *_env;
  GrowableArray<unsigned char *> *_allocations;
  bool _failed;
};

/* 7092 */
struct __cppobj JvmtiJavaThreadEventTransition : StackObj
{
  ResourceMark _rm;
  ThreadToNativeFromVM _transition;
  HandleMark _hm;
};

/* 7093 */
struct __cppobj JvmtiThreadEventTransition : StackObj
{
  ResourceMark _rm;
  HandleMark _hm;
  JavaThreadState _saved_state;
  JavaThread *_jthread;
};

/* 7094 */
struct __cppobj __declspec(align(4)) JvmtiEventMark : StackObj
{
  JavaThread *_thread;
  JNIEnv_ *_jni_env;
  bool _exception_detected;
  bool _exception_caught;
};

/* 7095 */
struct __cppobj JvmtiThreadEventMark : JvmtiEventMark
{
  _jobject *_jt;
};

/* 7096 */
struct __cppobj JvmtiClassEventMark : JvmtiThreadEventMark
{
  _jclass *_jc;
};

/* 7097 */
struct __cppobj JvmtiMethodEventMark : JvmtiThreadEventMark
{
  struct _jmethodID *_mid;
};

/* 7098 */
struct __cppobj JvmtiLocationEventMark : JvmtiMethodEventMark
{
  __int64 _loc;
};

/* 7099 */
struct __cppobj __declspec(align(8)) JvmtiExceptionEventMark : JvmtiLocationEventMark
{
  _jobject *_exc;
};

/* 7100 */
struct __cppobj JvmtiClassFileLoadEventMark : JvmtiThreadEventMark
{
  const char *_class_name;
  _jobject *_jloader;
  _jobject *_protection_domain;
  _jclass *_class_being_redefined;
};

/* 7101 */
struct __cppobj JvmtiClassFileLoadHookPoster : StackObj
{
  Symbol *_h_name;
  Handle _class_loader;
  Handle _h_protection_domain;
  unsigned __int8 **_data_ptr;
  unsigned __int8 **_end_ptr;
  JavaThread *_thread;
  int _curr_len;
  unsigned __int8 *_curr_data;
  JvmtiEnv *_curr_env;
  JvmtiCachedClassFileData **_cached_class_file_ptr;
  JvmtiThreadState *_state;
  KlassHandle *_h_class_being_redefined;
  JvmtiClassLoadKind _load_kind;
};

/* 7102 */
struct __cppobj JvmtiVMObjectAllocEventMark : JvmtiClassEventMark
{
  _jobject *_jobj;
  __int64 _size;
};

/* 7103 */
struct __cppobj JvmtiCompiledMethodLoadEventMark : JvmtiMethodEventMark
{
  int _code_size;
  const void *_code_data;
  int _map_length;
  _jvmtiAddrLocationMap *_map;
  const void *_compile_info;
};

/* 7104 */
struct __cppobj JvmtiCodeBlobEvents : AllStatic
{
};

/* 7105 */
struct __cppobj JvmtiMonitorEventMark : JvmtiThreadEventMark
{
  _jobject *_jobj;
};

/* 7106 */
struct _jvmtiCompiledMethodLoadRecordHeader
{
  jvmtiCMLRKind kind;
  int majorinfoversion;
  int minorinfoversion;
  _jvmtiCompiledMethodLoadRecordHeader *next;
};

/* 7107 */
struct _PCStackInfo
{
  void *pc;
  int numstackframes;
  struct _jmethodID **methods;
  int *bcis;
};

/* 7108 */
struct _jvmtiCompiledMethodLoadInlineRecord
{
  _jvmtiCompiledMethodLoadRecordHeader header;
  int numpcs;
  _PCStackInfo *pcinfo;
};

/* 7109 */
struct __cppobj VM_EnterInterpOnlyMode : VM_Operation
{
  JvmtiThreadState *_state;
};

/* 7110 */
struct /*VFT*/ VM_EnterInterpOnlyMode_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7111 */
struct __cppobj __declspec(align(4)) VM_ChangeSingleStep : VM_Operation
{
  bool _on;
};

/* 7112 */
struct /*VFT*/ VM_ChangeSingleStep_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7113 */
struct __cppobj JvmtiEventControllerPrivate : AllStatic
{
};

/* 7114 */
struct __cppobj VM_GetCurrentLocation : VM_Operation
{
  JavaThread *_thread;
  struct _jmethodID *_method_id;
  int _bci;
};

/* 7115 */
struct /*VFT*/ VM_GetCurrentLocation_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7116 */
struct __cppobj jfieldIDWorkaround : AllStatic
{
};

/* 7117 */
struct /*VFT*/ JvmtiEnvBase::check_for_periodic_clean_up::__l2::ThreadInsideIterationClosure_vtbl
{
  void (__thiscall *do_thread)(ThreadClosure *this, Thread *);
};

/* 7118 */
struct __cppobj __declspec(align(4)) JvmtiEnvBase::check_for_periodic_clean_up::__l2::ThreadInsideIterationClosure : ThreadClosure
{
  bool _inside;
};

/* 7119 */
struct __cppobj ClassLoaderExt::Context
{
  const char *_file_name;
};

/* 7120 */
struct __cppobj ClassLoaderExt : ClassLoader
{
};

/* 7121 */
struct __cppobj JvmtiConstantPoolReconstituter : StackObj
{
  int _cpool_size;
  SymbolHashMap *_symmap;
  SymbolHashMap *_classmap;
  constantPoolHandle _cpool;
  instanceKlassHandle _ikh;
  jvmtiError _err;
};

/* 7122 */
struct __cppobj JvmtiClassFileReconstituter : JvmtiConstantPoolReconstituter
{
  unsigned int _buffer_size;
  unsigned __int8 *_buffer;
  unsigned __int8 *_buffer_ptr;
  Thread *_thread;
};

/* 7123 */
struct __cppobj VM_JNIFunctionTableCopier : VM_Operation
{
  const JNINativeInterface_ *_function_table;
};

/* 7124 */
struct /*VFT*/ VM_JNIFunctionTableCopier_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7125 */
struct __cppobj CodeBlobCollector : StackObj
{
  GrowableArray<JvmtiCodeBlobDesc *> *_code_blobs;
  int _pos;
};

/* 7126 */
struct __cppobj SharedClassUtil : AllStatic
{
};

/* 7127 */
struct __cppobj SystemDictionaryShared : SystemDictionary
{
};

/* 7128 */
struct __cppobj RegisterArrayForGC
{
  JavaThread *_thread;
};

/* 7129 */
struct __declspec(align(8)) jvm_version_info
{
  unsigned int jvm_version;
  unsigned __int32 update_version : 8;
  unsigned __int32 special_update_version : 8;
  unsigned __int32 reserved1 : 16;
  unsigned int reserved2;
  unsigned __int32 is_attachable : 1;
  _BYTE gap10[8];
};

/* 7130 */
struct JVM_ExceptionTableEntryType
{
  int start_pc;
  int end_pc;
  int handler_pc;
  int catchType;
};

/* 7131 */
struct GuardedMemory::Guard
{
  unsigned __int8 _guard[16];
};

/* 7132 */
union $C948C0A0CC3F81C6FB916E68BDDF915F
{
  unsigned int __unused_full_word1;
  unsigned int _user_size;
};

/* 7133 */
struct __cppobj GuardedMemory::GuardHeader : GuardedMemory::Guard
{
  $C948C0A0CC3F81C6FB916E68BDDF915F ___u1;
  void *_tag;
};

/* 7134 */
struct __cppobj GuardedMemory : StackObj
{
  GuardedMemory_vtbl *__vftable /*VFT*/;
  unsigned __int8 *_base_addr;
};

/* 7135 */
struct /*VFT*/ GuardedMemory_vtbl
{
  void (__thiscall *print_on)(GuardedMemory *this, outputStream *);
};

/* 7136 */
struct __cppobj jniCheck : AllStatic
{
};

/* 7137 */
struct __cppobj JniExportedInterface
{
};

/* 7138 */
struct __cppobj JNI_ArgumentPusher : SignatureIterator
{
  JavaCallArguments *_arguments;
};

/* 7139 */
struct /*VFT*/ JNI_ArgumentPusher_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *get_bool)(JNI_ArgumentPusher *this);
  void (__thiscall *get_char)(JNI_ArgumentPusher *this);
  void (__thiscall *get_short)(JNI_ArgumentPusher *this);
  void (__thiscall *get_byte)(JNI_ArgumentPusher *this);
  void (__thiscall *get_int)(JNI_ArgumentPusher *this);
  void (__thiscall *get_long)(JNI_ArgumentPusher *this);
  void (__thiscall *get_float)(JNI_ArgumentPusher *this);
  void (__thiscall *get_double)(JNI_ArgumentPusher *this);
  void (__thiscall *get_object)(JNI_ArgumentPusher *this);
  void (__thiscall *iterate)(JNI_ArgumentPusher *this, unsigned __int64);
};

/* 7140 */
struct /*VFT*/ JNI_ArgumentPusherVaArg_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *get_bool)(JNI_ArgumentPusher *this);
  void (__thiscall *get_char)(JNI_ArgumentPusher *this);
  void (__thiscall *get_short)(JNI_ArgumentPusher *this);
  void (__thiscall *get_byte)(JNI_ArgumentPusher *this);
  void (__thiscall *get_int)(JNI_ArgumentPusher *this);
  void (__thiscall *get_long)(JNI_ArgumentPusher *this);
  void (__thiscall *get_float)(JNI_ArgumentPusher *this);
  void (__thiscall *get_double)(JNI_ArgumentPusher *this);
  void (__thiscall *get_object)(JNI_ArgumentPusher *this);
  void (__thiscall *iterate)(JNI_ArgumentPusher *this, unsigned __int64);
};

/* 7141 */
struct __cppobj JNI_ArgumentPusherVaArg : JNI_ArgumentPusher
{
  char *_ap;
};

/* 7142 */
struct /*VFT*/ JNI_ArgumentPusherArray_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *get_bool)(JNI_ArgumentPusher *this);
  void (__thiscall *get_char)(JNI_ArgumentPusher *this);
  void (__thiscall *get_short)(JNI_ArgumentPusher *this);
  void (__thiscall *get_byte)(JNI_ArgumentPusher *this);
  void (__thiscall *get_int)(JNI_ArgumentPusher *this);
  void (__thiscall *get_long)(JNI_ArgumentPusher *this);
  void (__thiscall *get_float)(JNI_ArgumentPusher *this);
  void (__thiscall *get_double)(JNI_ArgumentPusher *this);
  void (__thiscall *get_object)(JNI_ArgumentPusher *this);
  void (__thiscall *iterate)(JNI_ArgumentPusher *this, unsigned __int64);
};

/* 7143 */
struct __cppobj JNI_ArgumentPusherArray : JNI_ArgumentPusher
{
  const jvalue *_ap;
};

/* 7144 */
struct JavaVMAttachArgs
{
  int version;
  char *name;
  _jobject *group;
};

/* 7145 */
struct ASGCT_CallFrame
{
  int lineno;
  struct _jmethodID *method_id;
};

/* 7146 */
struct ASGCT_CallTrace
{
  JNIEnv_ *env_id;
  int num_frames;
  ASGCT_CallFrame *frames;
};

/* 7147 */
struct __cppobj vframeStreamForte : vframeStreamCommon
{
};

/* 7148 */
struct /*VFT*/ ArgumentOffsetComputer_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *set)(SignatureInfo *this, int, BasicType);
};

/* 7149 */
struct __cppobj ArgumentOffsetComputer : SignatureInfo
{
  int _max;
  GrowableArray<int> _offsets;
};

/* 7150 */
struct /*VFT*/ CleanExtraDataKlassClosure_vtbl
{
  bool (__thiscall *is_live)(CleanExtraDataClosure *this, Method *);
};

/* 7151 */
struct __cppobj CleanExtraDataKlassClosure : CleanExtraDataClosure
{
  BoolObjectClosure *_is_alive;
};

/* 7152 */
struct /*VFT*/ CleanExtraDataMethodClosure_vtbl
{
  bool (__thiscall *is_live)(CleanExtraDataClosure *this, Method *);
};

/* 7153 */
struct __cppobj CleanExtraDataMethodClosure : CleanExtraDataClosure
{
};

/* 7154 */
struct /*VFT*/ SignatureTypePrinter_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *type_name)(SignatureTypeNames *this, const char *);
};

/* 7155 */
struct __cppobj __declspec(align(4)) SignatureTypePrinter : SignatureTypeNames
{
  outputStream *_st;
  bool _use_separator;
};

/* 7156 */
struct __cppobj InterfaceVisiterClosure : StackObj
{
  InterfaceVisiterClosure_vtbl *__vftable /*VFT*/;
};

/* 7157 */
struct /*VFT*/ InterfaceVisiterClosure_vtbl
{
  void (__thiscall *doit)(InterfaceVisiterClosure *this, Klass *, int);
};

/* 7158 */
struct /*VFT*/ CountInterfacesClosure_vtbl
{
  void (__thiscall *doit)(InterfaceVisiterClosure *this, Klass *, int);
};

/* 7159 */
struct __cppobj CountInterfacesClosure : InterfaceVisiterClosure
{
  int _nof_methods;
  int _nof_interfaces;
};

/* 7160 */
struct /*VFT*/ SetupItableClosure_vtbl
{
  void (__thiscall *doit)(InterfaceVisiterClosure *this, Klass *, int);
};

/* 7161 */
struct __cppobj SetupItableClosure : InterfaceVisiterClosure
{
  itableOffsetEntry *_offset_entry;
  itableMethodEntry *_method_entry;
  unsigned __int8 *_klass_begin;
};

/* 7162 */
struct __cppobj Stack<Klass *,5> : StackBase<5>
{
  Stack<Klass *,5>_vtbl *__vftable /*VFT*/;
  Klass **_cur_seg;
  Klass **_cache;
};

/* 7163 */
struct /*VFT*/ Stack<Klass *,5>_vtbl
{
  Klass **(__thiscall *alloc)(Stack<Klass *,5> *this, unsigned int);
  void (__thiscall *free)(Stack<Klass *,5> *this, Klass **, unsigned int);
};

/* 7164 */
struct /*VFT*/ VerifyFieldClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7165 */
struct __cppobj VerifyFieldClosure : OopClosure
{
};

/* 7166 */
struct /*VFT*/ ComputeCallStack_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
};

/* 7167 */
struct __cppobj ComputeCallStack : SignatureIterator
{
  CellTypeState *_effect;
  int _idx;
};

/* 7168 */
struct /*VFT*/ ComputeEntryStack_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
};

/* 7169 */
struct __cppobj ComputeEntryStack : SignatureIterator
{
  CellTypeState *_effect;
  int _idx;
};

/* 7170 */
struct /*VFT*/ RelocCallback_vtbl
{
  void (__thiscall *relocated)(RelocatorListener *this, int, int, int);
};

/* 7171 */
struct __cppobj RelocCallback : RelocatorListener
{
  GenerateOopMap *_gom;
};

/* 7172 */
struct __cppobj G1CollectorPolicyExt : G1CollectorPolicy
{
};

/* 7173 */
struct /*VFT*/ RefProcEnqueueTask_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::EnqueueTask *this, unsigned int);
};

/* 7174 */
struct __cppobj RefProcEnqueueTask : AbstractRefProcTaskExecutor::EnqueueTask
{
};

/* 7175 */
struct /*VFT*/ RefProcPhase1Task_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::ProcessTask *this, unsigned int, BoolObjectClosure *, OopClosure *, VoidClosure *);
};

/* 7176 */
struct __cppobj RefProcPhase1Task : AbstractRefProcTaskExecutor::ProcessTask
{
  ReferencePolicy *_policy;
};

/* 7177 */
struct /*VFT*/ RefProcPhase2Task_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::ProcessTask *this, unsigned int, BoolObjectClosure *, OopClosure *, VoidClosure *);
};

/* 7178 */
struct __cppobj RefProcPhase2Task : AbstractRefProcTaskExecutor::ProcessTask
{
};

/* 7179 */
struct /*VFT*/ RefProcPhase3Task_vtbl
{
  void (__thiscall *work)(AbstractRefProcTaskExecutor::ProcessTask *this, unsigned int, BoolObjectClosure *, OopClosure *, VoidClosure *);
};

/* 7180 */
struct __cppobj __declspec(align(4)) RefProcPhase3Task : AbstractRefProcTaskExecutor::ProcessTask
{
  bool _clear_referent;
};

/* 7181 */
struct /*VFT*/ LRUCurrentHeapPolicy_vtbl
{
  bool (__thiscall *should_clear_reference)(ReferencePolicy *this, oopDesc *, __int64);
  void (__thiscall *setup)(ReferencePolicy *this);
};

/* 7182 */
struct __cppobj LRUCurrentHeapPolicy : ReferencePolicy
{
  __int64 _max_interval;
};

/* 7183 */
struct /*VFT*/ LRUMaxHeapPolicy_vtbl
{
  bool (__thiscall *should_clear_reference)(ReferencePolicy *this, oopDesc *, __int64);
  void (__thiscall *setup)(ReferencePolicy *this);
};

/* 7184 */
struct __cppobj LRUMaxHeapPolicy : ReferencePolicy
{
  __int64 _max_interval;
};

/* 7185 */
struct __cppobj oopFactory : AllStatic
{
};

/* 7186 */
struct __cppobj MetaspaceGCThresholdUpdater : AllStatic
{
};

/* 7187 */
struct /*VFT*/ WriteClosure_vtbl
{
  bool (__thiscall *reading)(SerializeClosure *this);
  void (__thiscall *do_ptr)(SerializeClosure *this, void **);
  void (__thiscall *do_region)(SerializeClosure *this, unsigned __int8 *, unsigned int);
  void (__thiscall *do_tag)(SerializeClosure *this, int);
};

/* 7188 */
struct __cppobj WriteClosure : SerializeClosure
{
  int *top;
  char *end;
};

/* 7189 */
struct /*VFT*/ DumpAllocClosure_vtbl
{
  void (__thiscall *doit)(Metaspace::AllocRecordClosure *this, unsigned __int8 *, MetaspaceObj::Type, int);
};

/* 7190 */
struct __cppobj DumpAllocClosure : Metaspace::AllocRecordClosure
{
  int _counts[2][19];
  int _bytes[2][19];
  int _which;
};

/* 7191 */
struct __cppobj VM_PopulateDumpSharedSpace : VM_Operation
{
  ClassLoaderData *_loader_data;
  GrowableArray<Klass *> *_class_promote_order;
  VirtualSpace _md_vs;
  VirtualSpace _mc_vs;
};

/* 7192 */
struct /*VFT*/ VM_PopulateDumpSharedSpace_vtbl
{
  void (__thiscall *~VM_Operation)(VM_Operation *this);
  void (__thiscall *doit)(VM_Operation *this);
  bool (__thiscall *doit_prologue)(VM_Operation *this);
  void (__thiscall *doit_epilogue)(VM_Operation *this);
  bool (__thiscall *is_methodCompiler)(VM_Operation *this);
  VM_Operation::VMOp_Type (__thiscall *type)(VM_Operation *this);
  VM_Operation::Mode (__thiscall *evaluation_mode)(VM_Operation *this);
  bool (__thiscall *allow_nested_vm_operations)(VM_Operation *this);
  bool (__thiscall *is_cheap_allocated)(VM_Operation *this);
  void (__thiscall *oops_do)(VM_Operation *this, OopClosure *);
  bool (__thiscall *evaluate_at_safepoint)(VM_Operation *this);
  bool (__thiscall *evaluate_concurrently)(VM_Operation *this);
  void (__thiscall *print_on_error)(VM_Operation *this, outputStream *);
};

/* 7193 */
struct /*VFT*/ ReadClosure_vtbl
{
  bool (__thiscall *reading)(SerializeClosure *this);
  void (__thiscall *do_ptr)(SerializeClosure *this, void **);
  void (__thiscall *do_region)(SerializeClosure *this, unsigned __int8 *, unsigned int);
  void (__thiscall *do_tag)(SerializeClosure *this, int);
};

/* 7194 */
struct __cppobj ReadClosure : SerializeClosure
{
  int **_ptr_array;
};

/* 7195 */
struct __cppobj MetaspacePerfCounters : CHeapObj<7>
{
  PerfLongVariable *_capacity;
  PerfLongVariable *_used;
  PerfLongVariable *_max_capacity;
};

/* 7196 */
struct __cppobj MetaspaceCounters : AllStatic
{
};

/* 7197 */
struct __cppobj CompressedClassSpaceCounters : AllStatic
{
};

/* 7198 */
struct __cppobj TreeChunk<Metablock,FreeList<Metablock> > : Metablock
{
  TreeList<Metablock,FreeList<Metablock> > *_list;
  TreeList<Metablock,FreeList<Metablock> > _embedded_list;
};

/* 7199 */
struct __cppobj TreeChunk<Metachunk,FreeList<Metachunk> > : Metachunk
{
  TreeList<Metachunk,FreeList<Metachunk> > *_list;
  TreeList<Metachunk,FreeList<Metachunk> > _embedded_list;
};

/* 7200 */
struct __cppobj VirtualSpaceList::VirtualSpaceListIterator : StackObj
{
  VirtualSpaceNode *_virtual_spaces;
};

/* 7201 */
struct __cppobj Metadebug : AllStatic
{
};

/* 7202 */
struct /*VFT*/ HistoClosure_vtbl
{
  void (__thiscall *do_cinfo)(KlassInfoClosure *this, KlassInfoEntry *);
};

/* 7203 */
struct __cppobj HistoClosure : KlassInfoClosure
{
  KlassInfoHisto *_cih;
};

/* 7204 */
struct /*VFT*/ RecordInstanceClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7205 */
struct __cppobj RecordInstanceClosure : ObjectClosure
{
  KlassInfoTable *_cit;
  unsigned int _missed_count;
  BoolObjectClosure *_filter;
};

/* 7206 */
struct /*VFT*/ FindInstanceClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7207 */
struct __cppobj FindInstanceClosure : ObjectClosure
{
  Klass *_klass;
  GrowableArray<oopDesc *> *_result;
};

/* 7208 */
struct /*VFT*/ HasAccumulatedModifiedOopsClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7209 */
struct __cppobj __declspec(align(4)) HasAccumulatedModifiedOopsClosure : KlassClosure
{
  bool _found;
};

/* 7210 */
struct /*VFT*/ ClearKlassModUnionClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7211 */
struct __cppobj ClearKlassModUnionClosure : KlassClosure
{
};

/* 7212 */
struct /*VFT*/ GenAdjustPointersClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7213 */
struct __cppobj GenAdjustPointersClosure : GenCollectedHeap::GenClosure
{
};

/* 7214 */
struct /*VFT*/ GenCompactClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7215 */
struct __cppobj GenCompactClosure : GenCollectedHeap::GenClosure
{
};

/* 7216 */
struct /*VFT*/ GenerationIsInReservedClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7217 */
struct __cppobj GenerationIsInReservedClosure : SpaceClosure
{
  const void *_p;
  Space *sp;
};

/* 7218 */
struct /*VFT*/ GenerationIsInClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7219 */
struct __cppobj GenerationIsInClosure : SpaceClosure
{
  const void *_p;
  Space *sp;
};

/* 7220 */
struct /*VFT*/ GenerationBlockStartClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7221 */
struct __cppobj GenerationBlockStartClosure : SpaceClosure
{
  const void *_p;
  HeapWord *_start;
};

/* 7222 */
struct /*VFT*/ GenerationBlockSizeClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7223 */
struct __cppobj GenerationBlockSizeClosure : SpaceClosure
{
  const HeapWord *_p;
  unsigned int size;
};

/* 7224 */
struct /*VFT*/ GenerationBlockIsObjClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7225 */
struct __cppobj __declspec(align(4)) GenerationBlockIsObjClosure : SpaceClosure
{
  const HeapWord *_p;
  bool is_obj;
};

/* 7226 */
struct /*VFT*/ GenerationOopIterateClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7227 */
struct __cppobj GenerationOopIterateClosure : SpaceClosure
{
  ExtendedOopClosure *_cl;
};

/* 7228 */
struct /*VFT*/ GenerationObjIterateClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7229 */
struct __cppobj GenerationObjIterateClosure : SpaceClosure
{
  ObjectClosure *_cl;
};

/* 7230 */
struct /*VFT*/ GenerationSafeObjIterateClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7231 */
struct __cppobj GenerationSafeObjIterateClosure : SpaceClosure
{
  ObjectClosure *_cl;
};

/* 7232 */
struct /*VFT*/ AdjustPointersClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7233 */
struct __cppobj AdjustPointersClosure : SpaceClosure
{
};

/* 7234 */
struct /*VFT*/ GenPrepareForVerifyClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7235 */
struct __cppobj GenPrepareForVerifyClosure : GenCollectedHeap::GenClosure
{
};

/* 7236 */
struct /*VFT*/ GenGCPrologueClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7237 */
struct __cppobj __declspec(align(4)) GenGCPrologueClosure : GenCollectedHeap::GenClosure
{
  bool _full;
};

/* 7238 */
struct /*VFT*/ GenGCEpilogueClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7239 */
struct __cppobj __declspec(align(4)) GenGCEpilogueClosure : GenCollectedHeap::GenClosure
{
  bool _full;
};

/* 7240 */
struct /*VFT*/ GenEnsureParsabilityClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7241 */
struct __cppobj GenEnsureParsabilityClosure : GenCollectedHeap::GenClosure
{
};

/* 7242 */
struct /*VFT*/ GenTimeOfLastGCClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7243 */
struct __cppobj GenTimeOfLastGCClosure : GenCollectedHeap::GenClosure
{
  __int64 _time;
  __int64 _now;
};

/* 7244 */
struct __cppobj Array<unsigned __int64> : MetaspaceObj
{
  int _length;
  unsigned __int64 _data[1];
};

/* 7245 */
struct /*VFT*/ RemoveForwardPointerClosure_vtbl
{
  void (__thiscall *do_object)(ObjectClosure *this, oopDesc *);
};

/* 7246 */
struct __cppobj RemoveForwardPointerClosure : ObjectClosure
{
};

/* 7247 */
struct /*VFT*/ VerifyCleanCardClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7248 */
struct __cppobj VerifyCleanCardClosure : OopClosure
{
  HeapWord *_boundary;
  HeapWord *_begin;
  HeapWord *_end;
};

/* 7249 */
struct /*VFT*/ VerifyCTSpaceClosure_vtbl
{
  void (__thiscall *do_space)(SpaceClosure *this, Space *);
};

/* 7250 */
struct __cppobj VerifyCTSpaceClosure : SpaceClosure
{
  CardTableRS *_ct;
  HeapWord *_boundary;
};

/* 7251 */
struct /*VFT*/ VerifyCTGenClosure_vtbl
{
  void (__thiscall *do_generation)(GenCollectedHeap::GenClosure *this, Generation *);
};

/* 7252 */
struct __cppobj VerifyCTGenClosure : GenCollectedHeap::GenClosure
{
  CardTableRS *_ct;
};

/* 7253 */
struct __cppobj TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : StackObj
{
  TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl *__vftable /*VFT*/;
};

/* 7254 */
struct /*VFT*/ TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7255 */
struct /*VFT*/ AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7256 */
struct __cppobj AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
};

/* 7257 */
struct /*VFT*/ PrintTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7258 */
struct __cppobj PrintTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  int _print_line;
  unsigned int _total_free;
  AdaptiveFreeList<FreeChunk> _total;
};

/* 7259 */
struct __cppobj TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : StackObj
{
  TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl *__vftable /*VFT*/;
};

/* 7260 */
struct /*VFT*/ TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7261 */
struct /*VFT*/ DescendTreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7262 */
struct __cppobj DescendTreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
};

/* 7263 */
struct /*VFT*/ EndTreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7264 */
struct __cppobj EndTreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : DescendTreeSearchClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  HeapWord *_target;
  FreeChunk *_found;
};

/* 7265 */
struct /*VFT*/ BeginSweepClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7266 */
struct __cppobj __declspec(align(8)) BeginSweepClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  long double _percentage;
  float _inter_sweep_current;
  float _inter_sweep_estimate;
  float _intra_sweep_estimate;
};

/* 7267 */
struct /*VFT*/ setTreeSurplusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7268 */
struct __cppobj setTreeSurplusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  long double percentage;
};

/* 7269 */
struct /*VFT*/ DescendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7270 */
struct __cppobj DescendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
};

/* 7271 */
struct /*VFT*/ setTreeHintsClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7272 */
struct __cppobj setTreeHintsClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : DescendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  unsigned int hint;
};

/* 7273 */
struct /*VFT*/ clearTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7274 */
struct __cppobj clearTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
};

/* 7275 */
struct /*VFT*/ PrintFreeListsClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, AdaptiveFreeList<FreeChunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > *this, TreeList<FreeChunk,AdaptiveFreeList<FreeChunk> > *);
};

/* 7276 */
struct __cppobj PrintFreeListsClosure<FreeChunk,AdaptiveFreeList<FreeChunk> > : AscendTreeCensusClosure<FreeChunk,AdaptiveFreeList<FreeChunk> >
{
  outputStream *_st;
  int _print_line;
};

/* 7277 */
struct __cppobj TreeSearchClosure<Metablock,FreeList<Metablock> > : StackObj
{
  TreeSearchClosure<Metablock,FreeList<Metablock> >_vtbl *__vftable /*VFT*/;
};

/* 7278 */
struct /*VFT*/ TreeSearchClosure<Metablock,FreeList<Metablock> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7279 */
struct /*VFT*/ DescendTreeSearchClosure<Metablock,FreeList<Metablock> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7280 */
struct __cppobj DescendTreeSearchClosure<Metablock,FreeList<Metablock> > : TreeSearchClosure<Metablock,FreeList<Metablock> >
{
};

/* 7281 */
struct /*VFT*/ EndTreeSearchClosure<Metablock,FreeList<Metablock> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7282 */
struct __cppobj EndTreeSearchClosure<Metablock,FreeList<Metablock> > : DescendTreeSearchClosure<Metablock,FreeList<Metablock> >
{
  HeapWord *_target;
  Metablock *_found;
};

/* 7283 */
struct __cppobj TreeCensusClosure<Metablock,FreeList<Metablock> > : StackObj
{
  TreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl *__vftable /*VFT*/;
};

/* 7284 */
struct /*VFT*/ TreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7285 */
struct /*VFT*/ AscendTreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7286 */
struct __cppobj AscendTreeCensusClosure<Metablock,FreeList<Metablock> > : TreeCensusClosure<Metablock,FreeList<Metablock> >
{
};

/* 7287 */
struct /*VFT*/ BeginSweepClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7288 */
struct __cppobj __declspec(align(8)) BeginSweepClosure<Metablock,FreeList<Metablock> > : AscendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
  long double _percentage;
  float _inter_sweep_current;
  float _inter_sweep_estimate;
  float _intra_sweep_estimate;
};

/* 7289 */
struct /*VFT*/ setTreeSurplusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7290 */
struct __cppobj setTreeSurplusClosure<Metablock,FreeList<Metablock> > : AscendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
  long double percentage;
};

/* 7291 */
struct /*VFT*/ DescendTreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7292 */
struct __cppobj DescendTreeCensusClosure<Metablock,FreeList<Metablock> > : TreeCensusClosure<Metablock,FreeList<Metablock> >
{
};

/* 7293 */
struct /*VFT*/ setTreeHintsClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7294 */
struct __cppobj setTreeHintsClosure<Metablock,FreeList<Metablock> > : DescendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
  unsigned int hint;
};

/* 7295 */
struct /*VFT*/ clearTreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7296 */
struct __cppobj clearTreeCensusClosure<Metablock,FreeList<Metablock> > : AscendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
};

/* 7297 */
struct /*VFT*/ PrintTreeCensusClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7298 */
struct __cppobj PrintTreeCensusClosure<Metablock,FreeList<Metablock> > : AscendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
  int _print_line;
  unsigned int _total_free;
  FreeList<Metablock> _total;
};

/* 7299 */
struct /*VFT*/ PrintFreeListsClosure<Metablock,FreeList<Metablock> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, FreeList<Metablock> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metablock,FreeList<Metablock> > *this, TreeList<Metablock,FreeList<Metablock> > *);
};

/* 7300 */
struct __cppobj PrintFreeListsClosure<Metablock,FreeList<Metablock> > : AscendTreeCensusClosure<Metablock,FreeList<Metablock> >
{
  outputStream *_st;
  int _print_line;
};

/* 7301 */
struct __cppobj TreeSearchClosure<Metachunk,FreeList<Metachunk> > : StackObj
{
  TreeSearchClosure<Metachunk,FreeList<Metachunk> >_vtbl *__vftable /*VFT*/;
};

/* 7302 */
struct /*VFT*/ TreeSearchClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7303 */
struct /*VFT*/ DescendTreeSearchClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7304 */
struct __cppobj DescendTreeSearchClosure<Metachunk,FreeList<Metachunk> > : TreeSearchClosure<Metachunk,FreeList<Metachunk> >
{
};

/* 7305 */
struct /*VFT*/ EndTreeSearchClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  bool (__thiscall *do_list)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  bool (__thiscall *do_tree)(TreeSearchClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7306 */
struct __cppobj EndTreeSearchClosure<Metachunk,FreeList<Metachunk> > : DescendTreeSearchClosure<Metachunk,FreeList<Metachunk> >
{
  HeapWord *_target;
  Metachunk *_found;
};

/* 7307 */
struct __cppobj TreeCensusClosure<Metachunk,FreeList<Metachunk> > : StackObj
{
  TreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl *__vftable /*VFT*/;
};

/* 7308 */
struct /*VFT*/ TreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7309 */
struct /*VFT*/ AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7310 */
struct __cppobj AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> > : TreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
};

/* 7311 */
struct /*VFT*/ BeginSweepClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7312 */
struct __cppobj __declspec(align(8)) BeginSweepClosure<Metachunk,FreeList<Metachunk> > : AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
  long double _percentage;
  float _inter_sweep_current;
  float _inter_sweep_estimate;
  float _intra_sweep_estimate;
};

/* 7313 */
struct /*VFT*/ setTreeSurplusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7314 */
struct __cppobj setTreeSurplusClosure<Metachunk,FreeList<Metachunk> > : AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
  long double percentage;
};

/* 7315 */
struct /*VFT*/ DescendTreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7316 */
struct __cppobj DescendTreeCensusClosure<Metachunk,FreeList<Metachunk> > : TreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
};

/* 7317 */
struct /*VFT*/ setTreeHintsClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7318 */
struct __cppobj setTreeHintsClosure<Metachunk,FreeList<Metachunk> > : DescendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
  unsigned int hint;
};

/* 7319 */
struct /*VFT*/ clearTreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7320 */
struct __cppobj clearTreeCensusClosure<Metachunk,FreeList<Metachunk> > : AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
};

/* 7321 */
struct /*VFT*/ PrintTreeCensusClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7322 */
struct __cppobj PrintTreeCensusClosure<Metachunk,FreeList<Metachunk> > : AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
  int _print_line;
  unsigned int _total_free;
  FreeList<Metachunk> _total;
};

/* 7323 */
struct /*VFT*/ PrintFreeListsClosure<Metachunk,FreeList<Metachunk> >_vtbl
{
  void (__thiscall *do_list)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, FreeList<Metachunk> *);
  void (__thiscall *do_tree)(TreeCensusClosure<Metachunk,FreeList<Metachunk> > *this, TreeList<Metachunk,FreeList<Metachunk> > *);
};

/* 7324 */
struct __cppobj PrintFreeListsClosure<Metachunk,FreeList<Metachunk> > : AscendTreeCensusClosure<Metachunk,FreeList<Metachunk> >
{
  outputStream *_st;
  int _print_line;
};

/* 7325 */
struct __cppobj ChunkPool : CHeapObj<7>
{
  Chunk *_first;
  unsigned int _num_chunks;
  unsigned int _num_used;
  const unsigned int _size;
};

/* 7326 */
struct /*VFT*/ ChunkPoolCleaner_vtbl
{
  void (__thiscall *task)(PeriodicTask *this);
};

/* 7327 */
struct __cppobj ChunkPoolCleaner : PeriodicTask
{
};

/* 7328 */
struct /*VFT*/ OopMapForCacheEntry_vtbl
{
  bool (__thiscall *allow_rewrites)(GenerateOopMap *this);
  bool (__thiscall *report_results)(GenerateOopMap *this);
  bool (__thiscall *report_init_vars)(GenerateOopMap *this);
  bool (__thiscall *possible_gc_point)(GenerateOopMap *this, BytecodeStream *);
  void (__thiscall *fill_stackmap_prolog)(GenerateOopMap *this, int);
  void (__thiscall *fill_stackmap_epilog)(GenerateOopMap *this);
  void (__thiscall *fill_stackmap_for_opcodes)(GenerateOopMap *this, BytecodeStream *, CellTypeState *, CellTypeState *, int);
  void (__thiscall *fill_init_vars)(GenerateOopMap *this, GrowableArray<int> *);
};

/* 7329 */
struct __cppobj OopMapForCacheEntry : GenerateOopMap
{
  OopMapCacheEntry *_entry;
  int _bci;
  int _stack_top;
};

/* 7330 */
struct /*VFT*/ VerifyClosure_vtbl
{
  void (__thiscall *offset_do)(OffsetClosure *this, int);
};

/* 7331 */
struct __cppobj __declspec(align(4)) VerifyClosure : OffsetClosure
{
  OopMapCacheEntry *_entry;
  bool _failed;
};

/* 7332 */
struct /*VFT*/ MaskFillerForNative_vtbl
{
  void (__thiscall *do_bool)(SignatureIterator *this);
  void (__thiscall *do_char)(SignatureIterator *this);
  void (__thiscall *do_float)(SignatureIterator *this);
  void (__thiscall *do_double)(SignatureIterator *this);
  void (__thiscall *do_byte)(SignatureIterator *this);
  void (__thiscall *do_short)(SignatureIterator *this);
  void (__thiscall *do_int)(SignatureIterator *this);
  void (__thiscall *do_long)(SignatureIterator *this);
  void (__thiscall *do_void)(SignatureIterator *this);
  void (__thiscall *do_object)(SignatureIterator *this, int, int);
  void (__thiscall *do_array)(SignatureIterator *this, int, int);
  void (__thiscall *pass_int)(NativeSignatureIterator *this);
  void (__thiscall *pass_long)(NativeSignatureIterator *this);
  void (__thiscall *pass_object)(NativeSignatureIterator *this);
  void (__thiscall *pass_float)(NativeSignatureIterator *this);
  void (__thiscall *pass_double)(NativeSignatureIterator *this);
};

/* 7333 */
struct __cppobj MaskFillerForNative : NativeSignatureIterator
{
  unsigned int *_mask;
  int _size;
};

/* 7334 */
struct __cppobj __declspec(align(4)) UnlockFlagSaver
{
  JavaThread *_thread;
  bool _do_not_unlock;
};

/* 7335 */
struct __cppobj decode_env
{
  nmethod *_nm;
  CodeBlob *_code;
  CodeStrings _strings;
  outputStream *_output;
  unsigned __int8 *_start;
  unsigned __int8 *_end;
  char _option_buf[512];
  char _print_raw;
  bool _print_pc;
  bool _print_bytes;
  unsigned __int8 *_cur_insn;
  int _total_ticks;
  int _bytes_per_line;
};

/* 7336 */
struct __cppobj MethodMatcher : CHeapObj<6>
{
  MethodMatcher_vtbl *__vftable /*VFT*/;
  Symbol *_class_name;
  Symbol *_method_name;
  Symbol *_signature;
  MethodMatcher::Mode _class_mode;
  MethodMatcher::Mode _method_mode;
  MethodMatcher *_next;
};

/* 7337 */
struct /*VFT*/ MethodMatcher_vtbl
{
  void (__thiscall *print)(MethodMatcher *this);
};

/* 7338 */
struct /*VFT*/ TypedMethodOptionMatcher<int>_vtbl
{
  void (__thiscall *print)(MethodMatcher *this);
};

/* 7339 */
struct __cppobj TypedMethodOptionMatcher<int> : MethodMatcher
{
  const char *_option;
  OptionType _type;
  const int _value;
};

/* 7340 */
struct /*VFT*/ TypedMethodOptionMatcher<unsigned int>_vtbl
{
  void (__thiscall *print)(MethodMatcher *this);
};

/* 7341 */
struct __cppobj TypedMethodOptionMatcher<unsigned int> : MethodMatcher
{
  const char *_option;
  OptionType _type;
  const unsigned int _value;
};

/* 7342 */
struct /*VFT*/ TypedMethodOptionMatcher<bool>_vtbl
{
  void (__thiscall *print)(MethodMatcher *this);
};

/* 7343 */
struct __cppobj __declspec(align(4)) TypedMethodOptionMatcher<bool> : MethodMatcher
{
  const char *_option;
  OptionType _type;
  const bool _value;
};

/* 7344 */
struct /*VFT*/ TypedMethodOptionMatcher<char const *>_vtbl
{
  void (__thiscall *print)(MethodMatcher *this);
};

/* 7345 */
struct __cppobj TypedMethodOptionMatcher<char const *> : MethodMatcher
{
  const char *_option;
  OptionType _type;
  const char *const _value;
};

/* 7346 */
struct __cppobj CompilerOracle : AllStatic
{
};

/* 7347 */
struct /*VFT*/ CompilationLog_vtbl
{
  void (__thiscall *print_log_on)(EventLog *this, outputStream *);
};

/* 7348 */
struct __cppobj CompilationLog : StringEventLog
{
};

/* 7349 */
struct RelocIndexEntry
{
  int addr_offset;
  int reloc_offset;
};

/* 7350 */
struct /*VFT*/ DetectScavengeRoot_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7351 */
struct __cppobj __declspec(align(4)) DetectScavengeRoot : OopClosure
{
  bool _detected_scavenge_root;
};

/* 7352 */
struct /*VFT*/ VerifyOopsClosure_vtbl
{
  void (__thiscall *do_oop)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop)(OopClosure *this, oopDesc **);
  void (__thiscall *do_oop_v)(OopClosure *this, unsigned int *);
  void (__thiscall *do_oop_v)(OopClosure *this, oopDesc **);
};

/* 7353 */
struct __cppobj __declspec(align(4)) VerifyOopsClosure : OopClosure
{
  nmethod *_nm;
  bool _ok;
};

/* 7354 */
struct /*VFT*/ ICStubInterface_vtbl
{
  void (__thiscall *initialize)(StubInterface *this, Stub *, int, CodeStrings *);
  void (__thiscall *finalize)(StubInterface *this, Stub *);
  int (__thiscall *size)(StubInterface *this, Stub *);
  int (__thiscall *code_size_to_size)(StubInterface *this, int);
  unsigned __int8 *(__thiscall *code_begin)(StubInterface *this, Stub *);
  unsigned __int8 *(__thiscall *code_end)(StubInterface *this, Stub *);
  void (__thiscall *verify)(StubInterface *this, Stub *);
  void (__thiscall *print)(StubInterface *this, Stub *);
};

/* 7355 */
struct __cppobj ICStubInterface : StubInterface
{
};

/* 7356 */
struct __cppobj GrowableArrayIterator<Dependencies::DepArgument> : StackObj
{
  const GrowableArray<Dependencies::DepArgument> *_array;
  int _position;
};

/* 7357 */
struct __cppobj ClassHierarchyWalker
{
  Symbol *_name;
  Symbol *_signature;
  Klass *_participants[4];
  int _num_participants;
  Method *_found_methods[4];
  int _record_witnesses;
};

/* 7358 */
struct __cppobj CodeBlob_sizes
{
  int count;
  int total_size;
  int header_size;
  int code_size;
  int stub_size;
  int relocation_size;
  int scopes_oop_size;
  int scopes_metadata_size;
  int scopes_data_size;
  int scopes_pcs_size;
};

/* 7359 */
struct __cppobj StackMapStream : StackObj
{
  Array<unsigned char> *_data;
  int _index;
};

/* 7360 */
struct __cppobj StackMapReader : StackObj
{
  constantPoolHandle _cp;
  ClassVerifier *_verifier;
  StackMapStream *_stream;
  char *_code_data;
  int _code_length;
  int _frame_count;
};

/* 7361 */
struct __cppobj ResolutionErrorEntry : HashtableEntry<ConstantPool *,1>
{
  int _cp_index;
  Symbol *_error;
};

/* 7362 */
struct __cppobj BacktraceBuilder : StackObj
{
  Handle _backtrace;
  objArrayOopDesc *_head;
  typeArrayOopDesc *_methods;
  typeArrayOopDesc *_bcis;
  objArrayOopDesc *_mirrors;
  typeArrayOopDesc *_cprefs;
  int _index;
  No_Safepoint_Verifier _nsv;
};

/* 7363 */
struct __cppobj java_lang_reflect_AccessibleObject : AllStatic
{
};

/* 7364 */
struct __cppobj java_lang_reflect_Method : java_lang_reflect_AccessibleObject
{
};

/* 7365 */
struct __cppobj java_lang_reflect_Constructor : java_lang_reflect_AccessibleObject
{
};

/* 7366 */
struct __cppobj java_lang_reflect_Field : java_lang_reflect_AccessibleObject
{
};

/* 7367 */
struct __cppobj java_lang_System : AllStatic
{
};

/* 7368 */
struct __cppobj java_nio_Buffer : AllStatic
{
};

/* 7369 */
struct __cppobj java_lang_Thread : AllStatic
{
};

/* 7370 */
struct __cppobj java_lang_ThreadGroup : AllStatic
{
};

/* 7371 */
struct __cppobj java_lang_reflect_Parameter
{
};

/* 7372 */
struct __cppobj java_lang_ref_SoftReference : java_lang_ref_Reference
{
};

/* 7373 */
struct __cppobj java_security_AccessControlContext : AllStatic
{
};

/* 7374 */
struct __cppobj java_lang_AssertionStatusDirectives : AllStatic
{
};

/* 7375 */
struct __cppobj java_lang_ref_ReferenceQueue : AllStatic
{
};

/* 7376 */
struct __cppobj java_util_concurrent_locks_AbstractOwnableSynchronizer : AllStatic
{
};

/* 7377 */
struct __cppobj java_lang_StackTraceElement : AllStatic
{
};

/* 7378 */
struct __cppobj GrowableArray<unsigned char> : GenericGrowableArray
{
  unsigned __int8 *_data;
};

/* 7379 */
struct __cppobj BytecodeBuffer : GrowableArray<unsigned char>
{
};

/* 7380 */
struct BytecodeCPEntry::<unnamed_type__u>::<unnamed_type_name_and_type>
{
  unsigned __int16 name_index;
  unsigned __int16 type_index;
};

/* 7381 */
struct BytecodeCPEntry::<unnamed_type__u>::<unnamed_type_methodref>
{
  unsigned __int16 class_index;
  unsigned __int16 name_and_type_index;
};

/* 7382 */
union BytecodeCPEntry::<unnamed_type__u>
{
  Symbol *utf8;
  unsigned __int16 klass;
  unsigned __int16 string;
  BytecodeCPEntry::<unnamed_type__u>::<unnamed_type_name_and_type> name_and_type;
  BytecodeCPEntry::<unnamed_type__u>::<unnamed_type_methodref> methodref;
  unsigned int hash;
};

/* 7383 */
struct __cppobj BytecodeCPEntry : _ValueObj
{
  unsigned __int8 _tag;
  BytecodeCPEntry::<unnamed_type__u> _u;
};

/* 7384 */
struct __cppobj ResourceHashtable<BytecodeCPEntry,unsigned short,&BytecodeCPEntry::hash,&BytecodeCPEntry::equals,256,1,7>::Node : ResourceObj
{
  unsigned int _hash;
  BytecodeCPEntry _key;
  unsigned __int16 _value;
  ResourceHashtable<BytecodeCPEntry,unsigned short,&BytecodeCPEntry::hash,&BytecodeCPEntry::equals,256,1,7>::Node *_next;
};

/* 7385 */
struct __cppobj ResourceHashtable<BytecodeCPEntry,unsigned short,&BytecodeCPEntry::hash,&BytecodeCPEntry::equals,256,1,7> : ResourceObj
{
  ResourceHashtable<BytecodeCPEntry,unsigned short,&BytecodeCPEntry::hash,&BytecodeCPEntry::equals,256,1,7>::Node *_table[256];
};

/* 7386 */
struct __cppobj GrowableArray<BytecodeCPEntry> : GenericGrowableArray
{
  BytecodeCPEntry *_data;
};

/* 7387 */
struct __cppobj BytecodeConstantPool : ResourceObj
{
  ConstantPool *_orig;
  GrowableArray<BytecodeCPEntry> _entries;
  ResourceHashtable<BytecodeCPEntry,unsigned short,&BytecodeCPEntry::hash,&BytecodeCPEntry::equals,256,1,7> _indices;
};

/* 7388 */
struct __cppobj BytecodeAssembler : StackObj
{
  BytecodeBuffer *_code;
  BytecodeConstantPool *_cp;
};

/* 7389 */
struct __cppobj PseudoScopeMark : ResourceObj
{
  PseudoScopeMark_vtbl *__vftable /*VFT*/;
};

/* 7390 */
struct /*VFT*/ PseudoScopeMark_vtbl
{
  void (__thiscall *destroy)(PseudoScopeMark *this);
};

/* 7391 */
struct __cppobj GrowableArray<PseudoScopeMark *> : GenericGrowableArray
{
  PseudoScopeMark **_data;
};

/* 7392 */
struct __cppobj PseudoScope : ResourceObj
{
  GrowableArray<PseudoScopeMark *> _marks;
};

/* 7393 */
struct __cppobj GrowableArray<ConstantPool *> : GenericGrowableArray
{
  ConstantPool **_data;
};

/* 7394 */
struct __cppobj KeepAliveRegistrar : StackObj
{
  Thread *_thread;
  GrowableArray<ConstantPool *> _keep_alive;
};

/* 7395 */
struct __cppobj HierarchyVisitor<KeepAliveVisitor>::Node : ResourceObj
{
  InstanceKlass *_class;
  bool _super_was_visited;
  int _interface_index;
  void *_algorithm_data;
};

/* 7396 */
struct __cppobj GrowableArray<HierarchyVisitor<KeepAliveVisitor>::Node *> : GenericGrowableArray
{
  HierarchyVisitor<KeepAliveVisitor>::Node **_data;
};

/* 7397 */
struct __cppobj HierarchyVisitor<KeepAliveVisitor> : StackObj
{
  bool _cancelled;
  GrowableArray<HierarchyVisitor<KeepAliveVisitor>::Node *> _path;
};

/* 7398 */
struct __cppobj KeepAliveVisitor : HierarchyVisitor<KeepAliveVisitor>
{
  KeepAliveRegistrar *_registrar;
};

/* 7399 */
struct __cppobj Pair<Method *,enum QualifiedState,ResourceObj> : ResourceObj
{
  Method *first;
  QualifiedState second;
};

/* 7400 */
struct __cppobj GrowableArray<Pair<Method *,enum QualifiedState,ResourceObj> > : GenericGrowableArray
{
  Pair<Method *,enum QualifiedState,ResourceObj> *_data;
};

/* 7401 */
struct __cppobj ResourceHashtable<Method *,int,&primitive_hash<Method *>,&primitive_equals<Method *>,256,1,7>::Node : ResourceObj
{
  unsigned int _hash;
  Method *_key;
  int _value;
  ResourceHashtable<Method *,int,&primitive_hash<Method *>,&primitive_equals<Method *>,256,1,7>::Node *_next;
};

/* 7402 */
struct __cppobj ResourceHashtable<Method *,int,&primitive_hash<Method *>,&primitive_equals<Method *>,256,1,7> : ResourceObj
{
  ResourceHashtable<Method *,int,&primitive_hash<Method *>,&primitive_equals<Method *>,256,1,7>::Node *_table[256];
};

/* 7403 */
struct __cppobj MethodFamily : ResourceObj
{
  GrowableArray<Pair<Method *,enum QualifiedState,ResourceObj> > _members;
  ResourceHashtable<Method *,int,&primitive_hash<Method *>,&primitive_equals<Method *>,256,1,7> _member_index;
  Method *_selected_target;
  Symbol *_exception_message;
  Symbol *_exception_name;
};

/* 7404 */
struct __cppobj StatefulMethodFamily : ResourceObj
{
  QualifiedState _qualification_state;
  MethodFamily *_method_family;
};

/* 7405 */
struct /*VFT*/ StateRestorer_vtbl
{
  void (__thiscall *destroy)(PseudoScopeMark *this);
};

/* 7406 */
struct __cppobj StateRestorer : PseudoScopeMark
{
  StatefulMethodFamily *_method;
  QualifiedState _state_to_restore;
};

/* 7407 */
struct __cppobj EmptyVtableSlot : ResourceObj
{
  Symbol *_name;
  Symbol *_signature;
  int _size_of_parameters;
  MethodFamily *_binding;
};

/* 7408 */
struct __cppobj GrowableArray<EmptyVtableSlot *> : GenericGrowableArray
{
  EmptyVtableSlot **_data;
};

/* 7409 */
struct __cppobj HierarchyVisitor<FindMethodsByErasedSig>::Node : ResourceObj
{
  InstanceKlass *_class;
  bool _super_was_visited;
  int _interface_index;
  void *_algorithm_data;
};

/* 7410 */
struct __cppobj GrowableArray<HierarchyVisitor<FindMethodsByErasedSig>::Node *> : GenericGrowableArray
{
  HierarchyVisitor<FindMethodsByErasedSig>::Node **_data;
};

/* 7411 */
struct __cppobj HierarchyVisitor<FindMethodsByErasedSig> : StackObj
{
  bool _cancelled;
  GrowableArray<HierarchyVisitor<FindMethodsByErasedSig>::Node *> _path;
};

/* 7412 */
struct __cppobj FindMethodsByErasedSig : HierarchyVisitor<FindMethodsByErasedSig>
{
  Symbol *_method_name;
  Symbol *_method_signature;
  StatefulMethodFamily *_family;
};

/* 7413 */
struct __cppobj DefaultMethods : AllStatic
{
};

/* 7414 */
struct /*VFT*/ ClassStatsClosure_vtbl
{
  void (__thiscall *do_klass)(KlassClosure *this, Klass *);
};

/* 7415 */
struct __cppobj ClassStatsClosure : KlassClosure
{
  int _num_classes;
};

/* 7416 */
struct jzentry
{
  char *name;
  __int64 time;
  __int64 size;
  __int64 csize;
  int crc;
  char *comment;
  char *extra;
  __int64 pos;
};

/* 7417 */
struct __cppobj NameSigHash : ResourceObj
{
  Symbol *_name;
  Symbol *_sig;
  NameSigHash *_next;
};

/* 7418 */
struct __cppobj LVT_Hash : CHeapObj<1>
{
  LocalVariableTableElement *_elem;
  LVT_Hash *_next;
};

/* 7419 */
struct __cppobj Classfile_LVT_Element : _ValueObj
{
  unsigned __int16 start_bci;
  unsigned __int16 length;
  unsigned __int16 name_cp_index;
  unsigned __int16 descriptor_cp_index;
  unsigned __int16 slot;
};

/* 7420 */
struct /*VFT*/ ciArgInfoData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7421 */
struct __cppobj ciArgInfoData : ArgInfoData
{
};

/* 7422 */
struct /*VFT*/ ciCallTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7423 */
struct __cppobj ciCallTypeData : CallTypeData
{
};

/* 7424 */
struct /*VFT*/ ciVirtualCallTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7425 */
struct __cppobj ciVirtualCallTypeData : VirtualCallTypeData
{
};

/* 7426 */
struct /*VFT*/ ciSpeculativeTrapData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7427 */
struct __cppobj ciSpeculativeTrapData : SpeculativeTrapData
{
};

/* 7428 */
struct /*VFT*/ ciReceiverTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7429 */
struct __cppobj ciReceiverTypeData : ReceiverTypeData
{
};

/* 7430 */
struct /*VFT*/ ciVirtualCallData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7431 */
struct __cppobj ciVirtualCallData : VirtualCallData
{
};

/* 7432 */
struct /*VFT*/ ciParametersTypeData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 7433 */
struct __cppobj ciParametersTypeData : ParametersTypeData
{
};

/* 7434 */
struct /*VFT*/ NonStaticFieldFiller_vtbl
{
  void (__thiscall *do_field)(FieldClosure *this, fieldDescriptor *);
};

/* 7435 */
struct __cppobj NonStaticFieldFiller : FieldClosure
{
  GrowableArray<ciField *> *_arr;
  ciEnv *_curEnv;
};

/* 7436 */
struct /*VFT*/ StaticFinalFieldPrinter_vtbl
{
  void (__thiscall *do_field)(FieldClosure *this, fieldDescriptor *);
};

/* 7437 */
struct __cppobj StaticFinalFieldPrinter : FieldClosure
{
  outputStream *_out;
  const char *_holder;
};

/* 7438 */
struct DelayedConstant
{
  BasicType type;
  int value;
  void (__cdecl *value_fn)();
};

/* 7439 */
struct tagEMR
{
  unsigned int iType;
  unsigned int nSize;
};

/* 7440 */
struct _RECTL
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 7441 */
struct _POINTL
{
  int x;
  int y;
};

/* 7442 */
struct tagEMRPOLYLINE
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cptl;
  _POINTL aptl[1];
};

/* 7443 */
struct tagXFORM
{
  float eM11;
  float eM12;
  float eM21;
  float eM22;
  float eDx;
  float eDy;
};

/* 7444 */
struct tagEMRTRANSPARENTBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 7445 */
struct tagMIDIINCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7446 */
struct _CLASS_MEDIA_CHANGE_CONTEXT
{
  unsigned int MediaChangeCount;
  unsigned int NewState;
};

/* 7447 */
struct _SERVICE_PRESHUTDOWN_INFO
{
  unsigned int dwPreshutdownTimeout;
};

/* 7448 */
struct _ENUM_PAGE_FILE_INFORMATION
{
  unsigned int cb;
  unsigned int Reserved;
  unsigned int TotalSize;
  unsigned int TotalInUse;
  unsigned int PeakUsage;
};

/* 7449 */
struct _TAPE_SET_DRIVE_PARAMETERS
{
  unsigned __int8 ECC;
  unsigned __int8 Compression;
  unsigned __int8 DataPadding;
  unsigned __int8 ReportSetmarks;
  unsigned int EOTWarningZoneSize;
};

/* 7450 */
struct tagCBTACTIVATESTRUCT
{
  int fMouse;
  HWND__ *hWndActive;
};

/* 7451 */
struct _NETRESOURCEW
{
  unsigned int dwScope;
  unsigned int dwType;
  unsigned int dwDisplayType;
  unsigned int dwUsage;
  wchar_t *lpLocalName;
  wchar_t *lpRemoteName;
  wchar_t *lpComment;
  wchar_t *lpProvider;
};

/* 7452 */
struct midiproptempo_tag
{
  unsigned int cbStruct;
  unsigned int dwTempo;
};

/* 7453 */
struct _CRYPTOAPI_BLOB
{
  unsigned int cbData;
  unsigned __int8 *pbData;
};

/* 7454 */
struct _CRYPT_ALGORITHM_IDENTIFIER
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Parameters;
};

/* 7455 */
struct _CRYPT_BIT_BLOB
{
  unsigned int cbData;
  unsigned __int8 *pbData;
  unsigned int cUnusedBits;
};

/* 7456 */
struct _CERT_PUBLIC_KEY_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPT_BIT_BLOB PublicKey;
};

/* 7457 */
struct _CERT_EXTENSION
{
  char *pszObjId;
  int fCritical;
  _CRYPTOAPI_BLOB Value;
};

/* 7458 */
struct _CERT_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPTOAPI_BLOB Issuer;
  _FILETIME NotBefore;
  _FILETIME NotAfter;
  _CRYPTOAPI_BLOB Subject;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  _CRYPT_BIT_BLOB IssuerUniqueId;
  _CRYPT_BIT_BLOB SubjectUniqueId;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 7459 */
struct _CMSG_ENVELOPED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned int hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int cRecipients;
  _CERT_INFO **rgpRecipients;
};

/* 7460 */
struct __declspec(align(4)) tagRemHGLOBAL
{
  int fNullHGlobal;
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 7461 */
struct _DWORD_BLOB
{
  unsigned int clSize;
  unsigned int alData[1];
};

/* 7462 */
struct _QUERY_SERVICE_CONFIGA
{
  unsigned int dwServiceType;
  unsigned int dwStartType;
  unsigned int dwErrorControl;
  char *lpBinaryPathName;
  char *lpLoadOrderGroup;
  unsigned int dwTagId;
  char *lpDependencies;
  char *lpServiceStartName;
  char *lpDisplayName;
};

/* 7463 */
struct _TOKEN_PRIMARY_GROUP
{
  void *PrimaryGroup;
};

/* 7464 */
struct PPM_IDLE_STATE_ACCOUNTING
{
  unsigned int IdleTransitions;
  unsigned int FailedTransitions;
  unsigned int InvalidBucketIndex;
  unsigned __int64 TotalTime;
  unsigned int IdleTimeBuckets[6];
};

/* 7465 */
struct tagEMREOF
{
  tagEMR emr;
  unsigned int nPalEntries;
  unsigned int offPalEntries;
  unsigned int nSizeLast;
};

/* 7466 */
struct _CERT_ISSUER_SERIAL_NUMBER
{
  _CRYPTOAPI_BLOB Issuer;
  _CRYPTOAPI_BLOB SerialNumber;
};

/* 7467 */
union $ADCD1BD7D97E2BE65D827C2EADBA8658
{
  _CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
  _CRYPTOAPI_BLOB KeyId;
  _CRYPTOAPI_BLOB HashId;
};

/* 7468 */
struct _CERT_ID
{
  unsigned int dwIdChoice;
  $ADCD1BD7D97E2BE65D827C2EADBA8658 ___u1;
};

/* 7469 */
struct _CRYPT_ATTRIBUTE_TYPE_VALUE
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 7470 */
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_BIT_BLOB RecipientPublicKey;
  _CERT_ID RecipientId;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 7471 */
union $837C512B7BE17FD9DA9D53336C51965C
{
  _CRYPT_ALGORITHM_IDENTIFIER *pEphemeralAlgorithm;
  _CERT_ID *pSenderId;
};

/* 7472 */
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  _CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
  void *pvKeyWrapAuxInfo;
  unsigned int hCryptProv;
  unsigned int dwKeySpec;
  unsigned int dwKeyChoice;
  $837C512B7BE17FD9DA9D53336C51965C ___u8;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  unsigned int cRecipientEncryptedKeys;
  _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO **rgpRecipientEncryptedKeys;
};

/* 7473 */
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
{
  _CERT_ID RecipientId;
  _CRYPTOAPI_BLOB EncryptedKey;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 7474 */
struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{
  unsigned __int64 GptAttributes;
};

/* 7475 */
struct __cppobj IErrorLog : IUnknown
{
};

/* 7476 */
struct /*VFT*/ IErrorLog_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *AddError)(IErrorLog *this, const wchar_t *, tagEXCEPINFO *);
};

/* 7477 */
struct __cppobj IPropertyBag : IUnknown
{
};

/* 7478 */
struct /*VFT*/ IPropertyBag_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Read)(IPropertyBag *this, const wchar_t *, tagVARIANT *, IErrorLog *);
  HRESULT (__stdcall *Write)(IPropertyBag *this, const wchar_t *, tagVARIANT *);
};

/* 7479 */
struct __declspec(align(4)) tagPARAMDATA
{
  wchar_t *szName;
  unsigned __int16 vt;
};

/* 7480 */
struct tagMETHODDATA
{
  wchar_t *szName;
  tagPARAMDATA *ppdata;
  int dispid;
  unsigned int iMeth;
  tagCALLCONV cc;
  unsigned int cArgs;
  unsigned __int16 wFlags;
  unsigned __int16 vtReturn;
};

/* 7481 */
struct _SID_AND_ATTRIBUTES
{
  void *Sid;
  unsigned int Attributes;
};

/* 7482 */
struct _MEMORY_BASIC_INFORMATION64
{
  unsigned __int64 BaseAddress;
  unsigned __int64 AllocationBase;
  unsigned int AllocationProtect;
  unsigned int __alignment1;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
  unsigned int __alignment2;
};

/* 7483 */
struct tagMCI_SAVE_PARMSA
{
  unsigned int dwCallback;
  const char *lpfilename;
};

/* 7484 */
struct __cppobj JfrEvent<EventGCPhaseConcurrent>
{
};

/* 7485 */
struct _finddata64i32_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  unsigned int size;
  char name[260];
};

/* 7486 */
struct __declspec(align(4)) tagRemHMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 7487 */
struct _FAT_STATISTICS
{
  unsigned int CreateHits;
  unsigned int SuccessfulCreates;
  unsigned int FailedCreates;
  unsigned int NonCachedReads;
  unsigned int NonCachedReadBytes;
  unsigned int NonCachedWrites;
  unsigned int NonCachedWriteBytes;
  unsigned int NonCachedDiskReads;
  unsigned int NonCachedDiskWrites;
};

/* 7488 */
struct __cppobj SpaceDecorator : AllStatic
{
};

/* 7489 */
struct _ACCESS_REASONS
{
  unsigned int Data[32];
};

/* 7490 */
struct _PRIVILEGE_SET
{
  unsigned int PrivilegeCount;
  unsigned int Control;
  _LUID_AND_ATTRIBUTES Privilege[1];
};

/* 7491 */
struct _SE_ACCESS_REPLY
{
  unsigned int Size;
  unsigned int ResultListCount;
  unsigned int *GrantedAccess;
  unsigned int *AccessStatus;
  _ACCESS_REASONS *AccessReason;
  _PRIVILEGE_SET **Privileges;
};

/* 7492 */
struct PPM_PERFSTATE_EVENT
{
  unsigned int State;
  unsigned int Status;
  unsigned int Latency;
  unsigned int Speed;
  unsigned int Processor;
};

/* 7493 */
struct _PROCESSOR_POWER_POLICY_INFO
{
  unsigned int TimeCheck;
  unsigned int DemoteLimit;
  unsigned int PromoteLimit;
  unsigned __int8 DemotePercent;
  unsigned __int8 PromotePercent;
  unsigned __int8 Spare[2];
  unsigned __int32 AllowDemotion : 1;
  unsigned __int32 AllowPromotion : 1;
  unsigned __int32 Reserved : 30;
};

/* 7494 */
struct _PROCESSOR_POWER_POLICY
{
  unsigned int Revision;
  unsigned __int8 DynamicThrottle;
  unsigned __int8 Spare[3];
  unsigned __int32 DisableCStates : 1;
  unsigned __int32 Reserved : 31;
  unsigned int PolicyCount;
  _PROCESSOR_POWER_POLICY_INFO Policy[3];
};

/* 7495 */
struct _RTL_SRWLOCK
{
  void *Ptr;
};

/* 7496 */
struct tagTOGGLEKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 7497 */
struct HDRVR__
{
  int unused;
};

/* 7498 */
struct tagMCI_SEEK_PARMS
{
  unsigned int dwCallback;
  unsigned int dwTo;
};

/* 7499 */
struct _FULL_PTR_XLAT_TABLES
{
  void *RefIdToPointer;
  void *PointerToRefId;
  unsigned int NextRefId;
  XLAT_SIDE XlatSide;
};

/* 7500 */
struct _DOC_INFO_1W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
};

/* 7501 */
struct _DOC_INFO_2W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
  unsigned int dwMode;
  unsigned int JobId;
};

/* 7502 */
struct tagNMHDR
{
  HWND__ *hwndFrom;
  unsigned int idFrom;
  unsigned int code;
};

/* 7503 */
struct tagOFNA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpstrFilter;
  char *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  char *lpstrFile;
  unsigned int nMaxFile;
  char *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const char *lpstrInitialDir;
  const char *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const char *lpstrDefExt;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpTemplateName;
  void *pvReserved;
  unsigned int dwReserved;
  unsigned int FlagsEx;
};

/* 7504 */
struct _OFNOTIFYEXA
{
  tagNMHDR hdr;
  tagOFNA *lpOFN;
  void *psf;
  void *pidl;
};

/* 7505 */
struct HDC__
{
  int unused;
};

/* 7506 */
struct tagPRINTPAGERANGE
{
  unsigned int nFromPage;
  unsigned int nToPage;
};

/* 7507 */
struct tagPDEXA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned int Flags2;
  unsigned int ExclusionFlags;
  unsigned int nPageRanges;
  unsigned int nMaxPageRanges;
  tagPRINTPAGERANGE *lpPageRanges;
  unsigned int nMinPage;
  unsigned int nMaxPage;
  unsigned int nCopies;
  HINSTANCE__ *hInstance;
  const char *lpPrintTemplateName;
  IUnknown *lpCallback;
  unsigned int nPropertyPages;
  _PSP **lphPropertyPages;
  unsigned int nStartPage;
  unsigned int dwResultAction;
};

/* 7508 */
struct __unaligned __declspec(align(2)) tagBITMAPFILEHEADER
{
  unsigned __int16 bfType;
  unsigned int bfSize;
  unsigned __int16 bfReserved1;
  unsigned __int16 bfReserved2;
  unsigned int bfOffBits;
};

/* 7510 */
struct _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_APC>
{
  void (__stdcall *NotificationRoutine)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);
  void *hThread;
};

/* 7511 */
struct _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_IOC>
{
  void *hIOPort;
  unsigned int dwNumberOfBytesTransferred;
  unsigned int dwCompletionKey;
  _OVERLAPPED *lpOverlapped;
};

/* 7512 */
struct _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_HWND>
{
  HWND__ *hWnd;
  unsigned int Msg;
};

/* 7513 */
union _RPC_ASYNC_NOTIFICATION_INFO
{
  _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_APC> APC;
  _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_IOC> IOC;
  _RPC_ASYNC_NOTIFICATION_INFO::<unnamed_type_HWND> HWND;
  void *hEvent;
  void (__stdcall *NotificationRoutine)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);
};

/* 7509 */
struct _RPC_ASYNC_STATE
{
  unsigned int Size;
  unsigned int Signature;
  int Lock;
  unsigned int Flags;
  void *StubInfo;
  void *UserInfo;
  void *RuntimeInfo;
  _RPC_ASYNC_EVENT Event;
  _RPC_NOTIFICATION_TYPES NotificationType;
  _RPC_ASYNC_NOTIFICATION_INFO u;
  int Reserved[4];
};

/* 7514 */
struct __unaligned __declspec(align(2)) DLGTEMPLATE
{
  unsigned int style;
  unsigned int dwExtendedStyle;
  unsigned __int16 cdit;
  __int16 x;
  __int16 y;
  __int16 cx;
  __int16 cy;
};

/* 7515 */
struct HICON__
{
  int unused;
};

/* 7517 */
union $EBE87E7C02BA0FA6B43ABECE118F3C84
{
  const char *pszTemplate;
  const DLGTEMPLATE *pResource;
};

/* 7518 */
union $196C3329479FA964FD47E623CF5615B3
{
  HICON__ *hIcon;
  const char *pszIcon;
};

/* 7516 */
struct _PROPSHEETPAGEA
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $EBE87E7C02BA0FA6B43ABECE118F3C84 ___u3;
  $196C3329479FA964FD47E623CF5615B3 ___u4;
  const char *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
  const char *pszHeaderTitle;
  const char *pszHeaderSubTitle;
  void *hActCtx;
};

/* 7519 */
struct _PRINTER_INFO_5A
{
  char *pPrinterName;
  char *pPortName;
  unsigned int Attributes;
  unsigned int DeviceNotSelectedTimeout;
  unsigned int TransmissionRetryTimeout;
};

/* 7520 */
struct __cppobj EventGCPhaseConcurrent : JfrEvent<EventGCPhaseConcurrent>
{
};

/* 7521 */
struct tagEMRARC
{
  tagEMR emr;
  _RECTL rclBox;
  _POINTL ptlStart;
  _POINTL ptlEnd;
};

/* 7522 */
struct tagLOGFONTW
{
  int lfHeight;
  int lfWidth;
  int lfEscapement;
  int lfOrientation;
  int lfWeight;
  unsigned __int8 lfItalic;
  unsigned __int8 lfUnderline;
  unsigned __int8 lfStrikeOut;
  unsigned __int8 lfCharSet;
  unsigned __int8 lfOutPrecision;
  unsigned __int8 lfClipPrecision;
  unsigned __int8 lfQuality;
  unsigned __int8 lfPitchAndFamily;
  wchar_t lfFaceName[32];
};

/* 7523 */
struct tagICONMETRICSW
{
  unsigned int cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  tagLOGFONTW lfFont;
};

/* 7524 */
struct _currencyfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  char *lpCurrencySymbol;
};

/* 7525 */
struct val_context
{
  int valuelen;
  void *value_context;
  void *val_buff_ptr;
};

/* 7526 */
struct _CERT_CONTEXT
{
  unsigned int dwCertEncodingType;
  unsigned __int8 *pbCertEncoded;
  unsigned int cbCertEncoded;
  _CERT_INFO *pCertInfo;
  void *hCertStore;
};

/* 7527 */
struct _CERT_TRUST_STATUS
{
  unsigned int dwErrorStatus;
  unsigned int dwInfoStatus;
};

/* 7528 */
struct _CRL_ENTRY
{
  _CRYPTOAPI_BLOB SerialNumber;
  _FILETIME RevocationDate;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 7529 */
struct _CRL_INFO
{
  unsigned int dwVersion;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPTOAPI_BLOB Issuer;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  unsigned int cCRLEntry;
  _CRL_ENTRY *rgCRLEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 7530 */
const struct _CRL_CONTEXT
{
  unsigned int dwCertEncodingType;
  unsigned __int8 *pbCrlEncoded;
  unsigned int cbCrlEncoded;
  _CRL_INFO *pCrlInfo;
  void *hCertStore;
};

/* 7531 */
struct _CERT_REVOCATION_CRL_INFO
{
  unsigned int cbSize;
  const _CRL_CONTEXT *pBaseCrlContext;
  const _CRL_CONTEXT *pDeltaCrlContext;
  _CRL_ENTRY *pCrlEntry;
  int fDeltaCrlEntry;
};

/* 7532 */
struct _CERT_REVOCATION_INFO
{
  unsigned int cbSize;
  unsigned int dwRevocationResult;
  const char *pszRevocationOid;
  void *pvOidSpecificInfo;
  int fHasFreshnessTime;
  unsigned int dwFreshnessTime;
  _CERT_REVOCATION_CRL_INFO *pCrlInfo;
};

/* 7533 */
struct _CTL_USAGE
{
  unsigned int cUsageIdentifier;
  char **rgpszUsageIdentifier;
};

/* 7534 */
struct _CERT_CHAIN_ELEMENT
{
  unsigned int cbSize;
  const _CERT_CONTEXT *pCertContext;
  _CERT_TRUST_STATUS TrustStatus;
  _CERT_REVOCATION_INFO *pRevocationInfo;
  _CTL_USAGE *pIssuanceUsage;
  _CTL_USAGE *pApplicationUsage;
  const wchar_t *pwszExtendedErrorInfo;
};

/* 7535 */
struct _PRINTER_NOTIFY_INFO_DATA::<unnamed_type_NotifyData>::<unnamed_type_Data>
{
  unsigned int cbBuf;
  void *pBuf;
};

/* 7536 */
union _PRINTER_NOTIFY_INFO_DATA::<unnamed_type_NotifyData>
{
  unsigned int adwData[2];
  _PRINTER_NOTIFY_INFO_DATA::<unnamed_type_NotifyData>::<unnamed_type_Data> Data;
};

/* 7537 */
struct _PRINTER_NOTIFY_INFO_DATA
{
  unsigned __int16 Type;
  unsigned __int16 Field;
  unsigned int Reserved;
  unsigned int Id;
  _PRINTER_NOTIFY_INFO_DATA::<unnamed_type_NotifyData> NotifyData;
};

/* 7538 */
struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
  unsigned int ulAssemblyIndex;
  unsigned int ulFileIndexInAssembly;
};

/* 7539 */
struct tagJOYCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  char szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  char szRegKey[32];
  char szOEMVxD[260];
};

/* 7540 */
struct _STARTUPINFOW
{
  unsigned int cb;
  wchar_t *lpReserved;
  wchar_t *lpDesktop;
  wchar_t *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  unsigned __int8 *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 7541 */
struct _SHCREATEPROCESSINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const wchar_t *pszFile;
  const wchar_t *pszParameters;
  const wchar_t *pszCurrentDirectory;
  void *hUserToken;
  _SECURITY_ATTRIBUTES *lpProcessAttributes;
  _SECURITY_ATTRIBUTES *lpThreadAttributes;
  int bInheritHandles;
  unsigned int dwCreationFlags;
  _STARTUPINFOW *lpStartupInfo;
  _PROCESS_INFORMATION *lpProcessInformation;
};

/* 7542 */
struct _CRYPT_INTERFACE_REG
{
  unsigned int dwInterface;
  unsigned int dwFlags;
  unsigned int cFunctions;
  wchar_t **rgpszFunctions;
};

/* 7543 */
struct _CRYPT_IMAGE_REG
{
  wchar_t *pszImage;
  unsigned int cInterfaces;
  _CRYPT_INTERFACE_REG **rgpInterfaces;
};

/* 7544 */
struct _CRYPT_PROVIDER_REG
{
  unsigned int cAliases;
  wchar_t **rgpszAliases;
  _CRYPT_IMAGE_REG *pUM;
  _CRYPT_IMAGE_REG *pKM;
};

/* 7545 */
struct _CERT_ECC_SIGNATURE
{
  _CRYPTOAPI_BLOB r;
  _CRYPTOAPI_BLOB s;
};

/* 7546 */
struct _CRYPT_ATTRIBUTE
{
  char *pszObjId;
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 7547 */
struct _CRYPT_ATTRIBUTES
{
  unsigned int cAttr;
  _CRYPT_ATTRIBUTE *rgAttr;
};

/* 7548 */
struct __declspec(align(4)) _FLAGGED_BYTE_BLOB
{
  unsigned int fFlags;
  unsigned int clSize;
  unsigned __int8 abData[1];
};

/* 7549 */
union _userHGLOBAL::__MIDL_IWinTypes_0003
{
  int hInproc;
  _FLAGGED_BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 7550 */
struct _userHGLOBAL
{
  int fContext;
  _userHGLOBAL::__MIDL_IWinTypes_0003 u;
};

/* 7551 */
struct HBITMAP__
{
  int unused;
};

/* 7552 */
struct HPALETTE__
{
  int unused;
};

/* 7553 */
union $E3CAD8411F77256CCB020CE77D197F57
{
  unsigned int nStartPage;
  const char *pStartPage;
};

/* 7554 */
union $6C52E29C553C65BD73B5502998E7AB46
{
  const _PROPSHEETPAGEA *ppsp;
  _PSP **phpage;
};

/* 7555 */
union $269096378A4893E7EB3A6AA08C318446
{
  HBITMAP__ *hbmWatermark;
  const char *pszbmWatermark;
};

/* 7556 */
union $69027D51405872AD0325DF20EBDE1194
{
  HBITMAP__ *hbmHeader;
  const char *pszbmHeader;
};

/* 7557 */
struct _PROPSHEETHEADERA_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $196C3329479FA964FD47E623CF5615B3 ___u4;
  const char *pszCaption;
  unsigned int nPages;
  $E3CAD8411F77256CCB020CE77D197F57 ___u7;
  $6C52E29C553C65BD73B5502998E7AB46 ___u8;
  int (__stdcall *pfnCallback)(HWND__ *, unsigned int, int);
  $269096378A4893E7EB3A6AA08C318446 ___u10;
  HPALETTE__ *hplWatermark;
  $69027D51405872AD0325DF20EBDE1194 ___u12;
};

/* 7558 */
struct __cppobj IInternetProtocolSink : IUnknown
{
};

/* 7559 */
struct /*VFT*/ IInternetProtocolSink_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  Switch *Switch;
  HRESULT (__stdcall *ReportProgress)(IInternetProtocolSink *this, unsigned int, const wchar_t *);
  HRESULT (__stdcall *ReportData)(IInternetProtocolSink *this, unsigned int, unsigned int, unsigned int);
  HRESULT (__stdcall *ReportResult)(IInternetProtocolSink *this, HRESULT, unsigned int, const wchar_t *);
};

/* 7560 */
struct __cppobj IInternetProtocolSinkStackable : IUnknown
{
};

/* 7561 */
struct /*VFT*/ IInternetProtocolSinkStackable_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SwitchSink)(IInternetProtocolSinkStackable *this, IInternetProtocolSink *);
  HRESULT (__stdcall *CommitSwitch)(IInternetProtocolSinkStackable *this);
  HRESULT (__stdcall *RollbackSwitch)(IInternetProtocolSinkStackable *this);
};

/* 7562 */
struct tagOFNW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpstrFilter;
  wchar_t *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  wchar_t *lpstrFile;
  unsigned int nMaxFile;
  wchar_t *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const wchar_t *lpstrInitialDir;
  const wchar_t *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const wchar_t *lpstrDefExt;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpTemplateName;
  void *pvReserved;
  unsigned int dwReserved;
  unsigned int FlagsEx;
};

/* 7563 */
struct __declspec(align(4)) tagRAWHID
{
  unsigned int dwSizeHid;
  unsigned int dwCount;
  unsigned __int8 bRawData[1];
};

/* 7564 */
struct tagMIDIOUTCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
};

/* 7565 */
union $30417D6DC3305618FB171BBBD15A8541
{
  unsigned int uTimeout;
  unsigned int uVersion;
};

/* 7566 */
struct _NOTIFYICONDATAA
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  unsigned int uFlags;
  unsigned int uCallbackMessage;
  HICON__ *hIcon;
  char szTip[128];
  unsigned int dwState;
  unsigned int dwStateMask;
  char szInfo[256];
  $30417D6DC3305618FB171BBBD15A8541 ___u10;
  char szInfoTitle[64];
  unsigned int dwInfoFlags;
  _GUID guidItem;
};

/* 7567 */
struct _CMC_ADD_EXTENSIONS_INFO
{
  unsigned int dwCmcDataReference;
  unsigned int cCertReference;
  unsigned int *rgdwCertReference;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 7568 */
struct _CRYPT_URL_ARRAY
{
  unsigned int cUrl;
  wchar_t **rgwszUrl;
};

/* 7569 */
struct _CHANGER_ELEMENT
{
  _ELEMENT_TYPE ElementType;
  unsigned int ElementAddress;
};

/* 7570 */
struct _PRINTER_NOTIFY_OPTIONS_TYPE
{
  unsigned __int16 Type;
  unsigned __int16 Reserved0;
  unsigned int Reserved1;
  unsigned int Reserved2;
  unsigned int Count;
  unsigned __int16 *pFields;
};

/* 7571 */
struct _PRINTER_NOTIFY_OPTIONS
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _PRINTER_NOTIFY_OPTIONS_TYPE *pTypes;
};

/* 7572 */
struct __declspec(align(4)) tagDVTARGETDEVICE
{
  unsigned int tdSize;
  unsigned __int16 tdDriverNameOffset;
  unsigned __int16 tdDeviceNameOffset;
  unsigned __int16 tdPortNameOffset;
  unsigned __int16 tdExtDevmodeOffset;
  unsigned __int8 tdData[1];
};

/* 7573 */
struct tagFORMATETC
{
  unsigned __int16 cfFormat;
  tagDVTARGETDEVICE *ptd;
  unsigned int dwAspect;
  int lindex;
  unsigned int tymed;
};

/* 7574 */
struct HENHMETAFILE__
{
  int unused;
};

/* 7575 */
union $C19808153CB3DD25C966105A7D47FCF7
{
  HBITMAP__ *hBitmap;
  void *hMetaFilePict;
  HENHMETAFILE__ *hEnhMetaFile;
  void *hGlobal;
  wchar_t *lpszFileName;
  IStream *pstm;
  IStorage *pstg;
};

/* 7576 */
struct tagSTGMEDIUM
{
  unsigned int tymed;
  $C19808153CB3DD25C966105A7D47FCF7 ___u1;
  IUnknown *pUnkForRelease;
};

/* 7577 */
struct __cppobj IDataObject : IUnknown
{
};

/* 7578 */
struct __cppobj IEnumFORMATETC : IUnknown
{
};

/* 7579 */
struct /*VFT*/ IEnumFORMATETC_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumFORMATETC *this, unsigned int, tagFORMATETC *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumFORMATETC *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumFORMATETC *this);
  HRESULT (__stdcall *Clone)(IEnumFORMATETC *this, IEnumFORMATETC **);
};

/* 7580 */
struct __cppobj IAdviseSink : IUnknown
{
};

/* 7581 */
struct __cppobj IPersist : IUnknown
{
};

/* 7582 */
struct /*VFT*/ IPersist_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersist *this, _GUID *);
};

/* 7583 */
struct __cppobj IPersistStream : IPersist
{
};

/* 7584 */
struct /*VFT*/ IPersistStream_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersist *this, _GUID *);
  HRESULT (__stdcall *IsDirty)(IPersistStream *this);
  HRESULT (__stdcall *Load)(IPersistStream *this, IStream *);
  HRESULT (__stdcall *Save)(IPersistStream *this, IStream *, int);
  HRESULT (__stdcall *GetSizeMax)(IPersistStream *this, _ULARGE_INTEGER *);
};

/* 7585 */
struct __cppobj IBindCtx : IUnknown
{
};

/* 7586 */
struct tagBIND_OPTS
{
  unsigned int cbStruct;
  unsigned int grfFlags;
  unsigned int grfMode;
  unsigned int dwTickCountDeadline;
};

/* 7587 */
struct __cppobj IMoniker : IPersistStream
{
};

/* 7588 */
struct __cppobj IRunningObjectTable : IUnknown
{
};

/* 7589 */
struct __cppobj IEnumMoniker : IUnknown
{
};

/* 7590 */
struct /*VFT*/ IEnumMoniker_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumMoniker *this, unsigned int, IMoniker **, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumMoniker *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumMoniker *this);
  HRESULT (__stdcall *Clone)(IEnumMoniker *this, IEnumMoniker **);
};

/* 7591 */
struct /*VFT*/ IRunningObjectTable_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Register)(IRunningObjectTable *this, unsigned int, IUnknown *, IMoniker *, unsigned int *);
  HRESULT (__stdcall *Revoke)(IRunningObjectTable *this, unsigned int);
  HRESULT (__stdcall *IsRunning)(IRunningObjectTable *this, IMoniker *);
  HRESULT (__stdcall *GetObjectA)(IRunningObjectTable *this, IMoniker *, IUnknown **);
  HRESULT (__stdcall *NoteChangeTime)(IRunningObjectTable *this, unsigned int, _FILETIME *);
  HRESULT (__stdcall *GetTimeOfLastChange)(IRunningObjectTable *this, IMoniker *, _FILETIME *);
  HRESULT (__stdcall *EnumRunning)(IRunningObjectTable *this, IEnumMoniker **);
};

/* 7592 */
struct __cppobj IEnumString : IUnknown
{
};

/* 7593 */
struct /*VFT*/ IEnumString_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumString *this, unsigned int, wchar_t **, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumString *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumString *this);
  HRESULT (__stdcall *Clone)(IEnumString *this, IEnumString **);
};

/* 7594 */
struct /*VFT*/ IBindCtx_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *RegisterObjectBound)(IBindCtx *this, IUnknown *);
  HRESULT (__stdcall *RevokeObjectBound)(IBindCtx *this, IUnknown *);
  HRESULT (__stdcall *ReleaseBoundObjects)(IBindCtx *this);
  HRESULT (__stdcall *SetBindOptions)(IBindCtx *this, tagBIND_OPTS *);
  HRESULT (__stdcall *GetBindOptions)(IBindCtx *this, tagBIND_OPTS *);
  HRESULT (__stdcall *GetRunningObjectTable)(IBindCtx *this, IRunningObjectTable **);
  HRESULT (__stdcall *RegisterObjectParam)(IBindCtx *this, wchar_t *, IUnknown *);
  HRESULT (__stdcall *GetObjectParam)(IBindCtx *this, wchar_t *, IUnknown **);
  HRESULT (__stdcall *EnumObjectParam)(IBindCtx *this, IEnumString **);
  HRESULT (__stdcall *RevokeObjectParam)(IBindCtx *this, wchar_t *);
};

/* 7595 */
struct /*VFT*/ IMoniker_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersist *this, _GUID *);
  HRESULT (__stdcall *IsDirty)(IPersistStream *this);
  HRESULT (__stdcall *Load)(IPersistStream *this, IStream *);
  HRESULT (__stdcall *Save)(IPersistStream *this, IStream *, int);
  HRESULT (__stdcall *GetSizeMax)(IPersistStream *this, _ULARGE_INTEGER *);
  HRESULT (__stdcall *BindToObject)(IMoniker *this, IBindCtx *, IMoniker *, const _GUID *, void **);
  HRESULT (__stdcall *BindToStorage)(IMoniker *this, IBindCtx *, IMoniker *, const _GUID *, void **);
  HRESULT (__stdcall *Reduce)(IMoniker *this, IBindCtx *, unsigned int, IMoniker **, IMoniker **);
  HRESULT (__stdcall *ComposeWith)(IMoniker *this, IMoniker *, int, IMoniker **);
  HRESULT (__stdcall *Enum)(IMoniker *this, int, IEnumMoniker **);
  HRESULT (__stdcall *IsEqual)(IMoniker *this, IMoniker *);
  HRESULT (__stdcall *Hash)(IMoniker *this, unsigned int *);
  HRESULT (__stdcall *IsRunning)(IMoniker *this, IBindCtx *, IMoniker *, IMoniker *);
  HRESULT (__stdcall *GetTimeOfLastChange)(IMoniker *this, IBindCtx *, IMoniker *, _FILETIME *);
  HRESULT (__stdcall *Inverse)(IMoniker *this, IMoniker **);
  HRESULT (__stdcall *CommonPrefixWith)(IMoniker *this, IMoniker *, IMoniker **);
  HRESULT (__stdcall *RelativePathTo)(IMoniker *this, IMoniker *, IMoniker **);
  HRESULT (__stdcall *GetDisplayName)(IMoniker *this, IBindCtx *, IMoniker *, wchar_t **);
  HRESULT (__stdcall *ParseDisplayName)(IMoniker *this, IBindCtx *, IMoniker *, wchar_t *, unsigned int *, IMoniker **);
  HRESULT (__stdcall *IsSystemMoniker)(IMoniker *this, unsigned int *);
};

/* 7596 */
struct /*VFT*/ IAdviseSink_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void (__stdcall *OnDataChange)(IAdviseSink *this, tagFORMATETC *, tagSTGMEDIUM *);
  void (__stdcall *OnViewChange)(IAdviseSink *this, unsigned int, int);
  void (__stdcall *OnRename)(IAdviseSink *this, IMoniker *);
  void (__stdcall *OnSave)(IAdviseSink *this);
  void (__stdcall *OnClose)(IAdviseSink *this);
};

/* 7597 */
struct tagSTATDATA
{
  tagFORMATETC formatetc;
  unsigned int advf;
  IAdviseSink *pAdvSink;
  unsigned int dwConnection;
};

/* 7598 */
struct __cppobj IEnumSTATDATA : IUnknown
{
};

/* 7599 */
struct /*VFT*/ IEnumSTATDATA_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumSTATDATA *this, unsigned int, tagSTATDATA *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumSTATDATA *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumSTATDATA *this);
  HRESULT (__stdcall *Clone)(IEnumSTATDATA *this, IEnumSTATDATA **);
};

/* 7600 */
struct /*VFT*/ IDataObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetData)(IDataObject *this, tagFORMATETC *, tagSTGMEDIUM *);
  HRESULT (__stdcall *GetDataHere)(IDataObject *this, tagFORMATETC *, tagSTGMEDIUM *);
  HRESULT (__stdcall *QueryGetData)(IDataObject *this, tagFORMATETC *);
  HRESULT (__stdcall *GetCanonicalFormatEtc)(IDataObject *this, tagFORMATETC *, tagFORMATETC *);
  HRESULT (__stdcall *SetData)(IDataObject *this, tagFORMATETC *, tagSTGMEDIUM *, int);
  HRESULT (__stdcall *EnumFormatEtc)(IDataObject *this, unsigned int, IEnumFORMATETC **);
  HRESULT (__stdcall *DAdvise)(IDataObject *this, tagFORMATETC *, unsigned int, IAdviseSink *, unsigned int *);
  HRESULT (__stdcall *DUnadvise)(IDataObject *this, unsigned int);
  HRESULT (__stdcall *EnumDAdvise)(IDataObject *this, IEnumSTATDATA **);
};

/* 7601 */
struct __cppobj IOleCacheControl : IUnknown
{
};

/* 7602 */
struct /*VFT*/ IOleCacheControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *OnRun)(IOleCacheControl *this, IDataObject *);
  HRESULT (__stdcall *OnStop)(IOleCacheControl *this);
};

/* 7603 */
struct _OSVERSIONINFOEXW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  wchar_t szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  unsigned __int8 wProductType;
  unsigned __int8 wReserved;
};

/* 7604 */
struct _DCB
{
  unsigned int DCBlength;
  unsigned int BaudRate;
  unsigned __int32 fBinary : 1;
  unsigned __int32 fParity : 1;
  unsigned __int32 fOutxCtsFlow : 1;
  unsigned __int32 fOutxDsrFlow : 1;
  unsigned __int32 fDtrControl : 2;
  unsigned __int32 fDsrSensitivity : 1;
  unsigned __int32 fTXContinueOnXoff : 1;
  unsigned __int32 fOutX : 1;
  unsigned __int32 fInX : 1;
  unsigned __int32 fErrorChar : 1;
  unsigned __int32 fNull : 1;
  unsigned __int32 fRtsControl : 2;
  unsigned __int32 fAbortOnError : 1;
  unsigned __int32 fDummy2 : 17;
  unsigned __int16 wReserved;
  unsigned __int16 XonLim;
  unsigned __int16 XoffLim;
  unsigned __int8 ByteSize;
  unsigned __int8 Parity;
  unsigned __int8 StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  unsigned __int16 wReserved1;
};

/* 7605 */
struct __declspec(align(4)) _COMMCONFIG
{
  unsigned int dwSize;
  unsigned __int16 wVersion;
  unsigned __int16 wReserved;
  _DCB dcb;
  unsigned int dwProviderSubType;
  unsigned int dwProviderOffset;
  unsigned int dwProviderSize;
  wchar_t wcProviderData[1];
};

/* 7606 */
struct tagPALETTEENTRY
{
  unsigned __int8 peRed;
  unsigned __int8 peGreen;
  unsigned __int8 peBlue;
  unsigned __int8 peFlags;
};

/* 7607 */
struct tagPANOSE
{
  unsigned __int8 bFamilyType;
  unsigned __int8 bSerifStyle;
  unsigned __int8 bWeight;
  unsigned __int8 bProportion;
  unsigned __int8 bContrast;
  unsigned __int8 bStrokeVariation;
  unsigned __int8 bArmStyle;
  unsigned __int8 bLetterform;
  unsigned __int8 bMidline;
  unsigned __int8 bXHeight;
};

/* 7608 */
struct __declspec(align(4)) tagEXTLOGFONTW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
  unsigned int elfVersion;
  unsigned int elfStyleSize;
  unsigned int elfMatch;
  unsigned int elfReserved;
  unsigned __int8 elfVendorId[4];
  unsigned int elfCulture;
  tagPANOSE elfPanose;
};

/* 7609 */
struct tagEMREXTCREATEFONTINDIRECTW
{
  tagEMR emr;
  unsigned int ihFont;
  tagEXTLOGFONTW elfw;
};

/* 7610 */
struct tagRPC_CALL_ATTRIBUTES_V1_A
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  unsigned __int8 *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  unsigned __int8 *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
};

/* 7611 */
struct _CERT_QC_STATEMENT
{
  char *pszStatementId;
  _CRYPTOAPI_BLOB StatementInfo;
};

/* 7612 */
struct _CRYPT_KEY_PROV_PARAM
{
  unsigned int dwParam;
  unsigned __int8 *pbData;
  unsigned int cbData;
  unsigned int dwFlags;
};

/* 7613 */
struct _CRYPT_KEY_PROV_INFO
{
  wchar_t *pwszContainerName;
  wchar_t *pwszProvName;
  unsigned int dwProvType;
  unsigned int dwFlags;
  unsigned int cProvParam;
  _CRYPT_KEY_PROV_PARAM *rgProvParam;
  unsigned int dwKeySpec;
};

/* 7614 */
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 NumberOfModuleForwarderRefs;
};

/* 7615 */
struct tagEMROFFSETCLIPRGN
{
  tagEMR emr;
  _POINTL ptlOffset;
};

/* 7616 */
struct tagSCROLLINFO
{
  unsigned int cbSize;
  unsigned int fMask;
  int nMin;
  int nMax;
  unsigned int nPage;
  int nPos;
  int nTrackPos;
};

/* 7617 */
struct _BCRYPT_KEY_BLOB
{
  unsigned int Magic;
};

/* 7618 */
union $444B8AF3F414656C8F88F98B3D40B8AE
{
  unsigned int hKeyEncryptionKey;
  void *pvKeyEncryptionKey;
};

/* 7619 */
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  unsigned int hCryptProv;
  unsigned int dwKeyChoice;
  $444B8AF3F414656C8F88F98B3D40B8AE ___u5;
  _CRYPTOAPI_BLOB KeyId;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 7620 */
struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
{
  unsigned int cbSize;
  unsigned __int8 *pbEncodedOcspResponse;
  unsigned int cbEncodedOcspResponse;
};

/* 7621 */
struct _PORT_INFO_1A
{
  char *pName;
};

/* 7622 */
struct _MONITOR_INFO_2A
{
  char *pName;
  char *pEnvironment;
  char *pDLLName;
};

/* 7623 */
struct __cppobj IGlobalOptions : IUnknown
{
};

/* 7624 */
struct /*VFT*/ IGlobalOptions_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  Set *Set;
  HRESULT (__stdcall *Query)(IGlobalOptions *this, tagGLOBALOPT_PROPERTIES, unsigned int *);
};

/* 7625 */
struct __cppobj ISynchronize : IUnknown
{
};

/* 7626 */
struct /*VFT*/ ISynchronize_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Wait)(ISynchronize *this, unsigned int, unsigned int);
  HRESULT (__stdcall *Signal)(ISynchronize *this);
  HRESULT (__stdcall *Reset)(ISynchronize *this);
};

/* 7627 */
struct tagFINDREPLACEA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  unsigned int Flags;
  char *lpstrFindWhat;
  char *lpstrReplaceWith;
  unsigned __int16 wFindWhatLen;
  unsigned __int16 wReplaceWithLen;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpTemplateName;
};

/* 7628 */
struct tagREGISTERWORDW
{
  wchar_t *lpReading;
  wchar_t *lpWord;
};

/* 7629 */
struct _KCRM_MARSHAL_HEADER
{
  unsigned int VersionMajor;
  unsigned int VersionMinor;
  unsigned int NumProtocols;
  unsigned int Unused;
};

/* 7630 */
struct tagRECT
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 7631 */
struct tagPOLYTEXTA
{
  int x;
  int y;
  unsigned int n;
  const char *lpstr;
  unsigned int uiFlags;
  tagRECT rcl;
  int *pdx;
};

/* 7632 */
struct tagEMRSELECTOBJECT
{
  tagEMR emr;
  unsigned int ihObject;
};

/* 7633 */
struct __declspec(align(4)) tagEMRPOLYDRAW
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cptl;
  _POINTL aptl[1];
  unsigned __int8 abTypes[1];
};

/* 7634 */
struct tagMIXERCONTROLDETAILS_LISTTEXTA
{
  unsigned int dwParam1;
  unsigned int dwParam2;
  char szName[64];
};

/* 7635 */
struct _DISK_GEOMETRY
{
  _LARGE_INTEGER Cylinders;
  _MEDIA_TYPE MediaType;
  unsigned int TracksPerCylinder;
  unsigned int SectorsPerTrack;
  unsigned int BytesPerSector;
};

/* 7636 */
struct tagCOPYDATASTRUCT
{
  unsigned int dwData;
  unsigned int cbData;
  void *lpData;
};

/* 7637 */
struct tagREGISTERWORDA
{
  char *lpReading;
  char *lpWord;
};

/* 7638 */
struct _IMAGE_BOUND_FORWARDER_REF
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 Reserved;
};

/* 7639 */
struct tagPOINT
{
  int x;
  int y;
};

/* 7640 */
struct tagMINMAXINFO
{
  tagPOINT ptReserved;
  tagPOINT ptMaxSize;
  tagPOINT ptMaxPosition;
  tagPOINT ptMinTrackSize;
  tagPOINT ptMaxTrackSize;
};

/* 7641 */
struct tagWAVEOUTCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7642 */
struct tagMCI_ANIM_WINDOW_PARMSA
{
  unsigned int dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const char *lpstrText;
};

/* 7643 */
struct _PORT_INFO_2A
{
  char *pPortName;
  char *pMonitorName;
  char *pDescription;
  unsigned int fPortType;
  unsigned int Reserved;
};

/* 7644 */
struct _SERVICE_TABLE_ENTRYW
{
  wchar_t *lpServiceName;
  void (__stdcall *lpServiceProc)(unsigned int, wchar_t **);
};

/* 7645 */
struct __cppobj JfrEvent<EventObjectCount>
{
};

/* 7646 */
struct __cppobj EventObjectCount : JfrEvent<EventObjectCount>
{
};

/* 7647 */
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
  unsigned int EndOfJobTimeAction;
};

/* 7648 */
struct tagDEBUGHOOKINFO
{
  unsigned int idThread;
  unsigned int idThreadInstaller;
  int lParam;
  unsigned int wParam;
  int code;
};

/* 7649 */
struct HRAWINPUT__
{
  int unused;
};

/* 7650 */
struct _CRYPT_SIGN_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  const _CERT_CONTEXT *pSigningCert;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  unsigned int cMsgCert;
  const _CERT_CONTEXT **rgpMsgCert;
  unsigned int cMsgCrl;
  const _CRL_CONTEXT **rgpMsgCrl;
  unsigned int cAuthAttr;
  _CRYPT_ATTRIBUTE *rgAuthAttr;
  unsigned int cUnauthAttr;
  _CRYPT_ATTRIBUTE *rgUnauthAttr;
  unsigned int dwFlags;
  unsigned int dwInnerContentType;
};

/* 7651 */
struct _ENCRYPTED_DATA_INFO
{
  unsigned __int64 StartingFileOffset;
  unsigned int OutputBufferOffset;
  unsigned int BytesWithinFileSize;
  unsigned int BytesWithinValidDataLength;
  unsigned __int16 CompressionFormat;
  unsigned __int8 DataUnitShift;
  unsigned __int8 ChunkShift;
  unsigned __int8 ClusterShift;
  unsigned __int8 EncryptionFormat;
  unsigned __int16 NumberOfDataBlocks;
  unsigned int DataBlockSize[1];
};

/* 7652 */
struct _DRIVER_INFO_5A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  unsigned int dwDriverAttributes;
  unsigned int dwConfigVersion;
  unsigned int dwDriverVersion;
};

/* 7653 */
struct __cppobj IDropTarget : IUnknown
{
};

/* 7654 */
struct /*VFT*/ IDropTarget_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *DragEnter)(IDropTarget *this, IDataObject *, unsigned int, _POINTL, unsigned int *);
  HRESULT (__stdcall *DragOver)(IDropTarget *this, unsigned int, _POINTL, unsigned int *);
  HRESULT (__stdcall *DragLeave)(IDropTarget *this);
  HRESULT (__stdcall *Drop)(IDropTarget *this, IDataObject *, unsigned int, _POINTL, unsigned int *);
};

/* 7655 */
struct tagWINDOWINFO
{
  unsigned int cbSize;
  tagRECT rcWindow;
  tagRECT rcClient;
  unsigned int dwStyle;
  unsigned int dwExStyle;
  unsigned int dwWindowStatus;
  unsigned int cxWindowBorders;
  unsigned int cyWindowBorders;
  unsigned __int16 atomWindowType;
  unsigned __int16 wCreatorVersion;
};

/* 7656 */
struct _CMSG_KEY_TRANS_RECIPIENT_INFO
{
  unsigned int dwVersion;
  _CERT_ID RecipientId;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
};

/* 7657 */
union $289431123AC80C928951A7C6F1C88E2D
{
  _CERT_ID OriginatorCertId;
  _CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
};

/* 7658 */
struct _CMSG_KEY_AGREE_RECIPIENT_INFO
{
  unsigned int dwVersion;
  unsigned int dwOriginatorChoice;
  $289431123AC80C928951A7C6F1C88E2D ___u2;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  unsigned int cRecipientEncryptedKeys;
  _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO **rgpRecipientEncryptedKeys;
};

/* 7659 */
struct _CMSG_MAIL_LIST_RECIPIENT_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB KeyId;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 7660 */
union $34B2F4AC01D1C2AD7E0693CED89EC569
{
  _CMSG_KEY_TRANS_RECIPIENT_INFO *pKeyTrans;
  _CMSG_KEY_AGREE_RECIPIENT_INFO *pKeyAgree;
  _CMSG_MAIL_LIST_RECIPIENT_INFO *pMailList;
};

/* 7661 */
struct _CMSG_CMS_RECIPIENT_INFO
{
  unsigned int dwRecipientChoice;
  $34B2F4AC01D1C2AD7E0693CED89EC569 ___u1;
};

/* 7662 */
struct _EXFAT_STATISTICS
{
  unsigned int CreateHits;
  unsigned int SuccessfulCreates;
  unsigned int FailedCreates;
  unsigned int NonCachedReads;
  unsigned int NonCachedReadBytes;
  unsigned int NonCachedWrites;
  unsigned int NonCachedWriteBytes;
  unsigned int NonCachedDiskReads;
  unsigned int NonCachedDiskWrites;
};

/* 7663 */
struct __cppobj IWinInetInfo : IUnknown
{
};

/* 7664 */
struct /*VFT*/ IWinInetInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryOption)(IWinInetInfo *this, unsigned int, void *, unsigned int *);
};

/* 7665 */
struct __cppobj IWinInetHttpInfo : IWinInetInfo
{
};

/* 7666 */
struct /*VFT*/ IWinInetHttpInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryOption)(IWinInetInfo *this, unsigned int, void *, unsigned int *);
  HRESULT (__stdcall *QueryInfo)(IWinInetHttpInfo *this, unsigned int, void *, unsigned int *, unsigned int *, unsigned int *);
};

/* 7667 */
struct __cppobj JfrEvent<EventShutdown>
{
};

/* 7668 */
struct tagRGBTRIPLE
{
  unsigned __int8 rgbtBlue;
  unsigned __int8 rgbtGreen;
  unsigned __int8 rgbtRed;
};

/* 7669 */
struct tagEMRSELECTCLIPPATH
{
  tagEMR emr;
  unsigned int iMode;
};

/* 7670 */
struct tagWAVEOUTCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7671 */
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA
{
  unsigned int cbSize;
  const char *pszUsageIdentifier;
  unsigned int dwKeySpec;
  unsigned int dwAcquirePrivateKeyFlags;
  unsigned int cIssuer;
  _CRYPTOAPI_BLOB *rgIssuer;
  int (__stdcall *pfnFindCallback)(const _CERT_CONTEXT *, void *);
  void *pvFindArg;
};

/* 7672 */
struct _MONITOR_INFO_1W
{
  wchar_t *pName;
};

/* 7673 */
struct _COMSTAT
{
  unsigned __int32 fCtsHold : 1;
  unsigned __int32 fDsrHold : 1;
  unsigned __int32 fRlsdHold : 1;
  unsigned __int32 fXoffHold : 1;
  unsigned __int32 fXoffSent : 1;
  unsigned __int32 fEof : 1;
  unsigned __int32 fTxim : 1;
  unsigned __int32 fReserved : 25;
  unsigned int cbInQue;
  unsigned int cbOutQue;
};

/* 7674 */
struct __unaligned __declspec(align(2)) DLGITEMTEMPLATE
{
  unsigned int style;
  unsigned int dwExtendedStyle;
  __int16 x;
  __int16 y;
  __int16 cx;
  __int16 cy;
  unsigned __int16 id;
};

/* 7675 */
struct _HMAC_Info
{
  unsigned int HashAlgid;
  unsigned __int8 *pbInnerString;
  unsigned int cbInnerString;
  unsigned __int8 *pbOuterString;
  unsigned int cbOuterString;
};

/* 7676 */
struct _TOKEN_SOURCE
{
  char SourceName[8];
  _LUID SourceIdentifier;
};

/* 7677 */
struct _TOKEN_CONTROL
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LUID ModifiedId;
  _TOKEN_SOURCE TokenSource;
};

/* 7678 */
struct _DISPLAY_DEVICEW
{
  unsigned int cb;
  wchar_t DeviceName[32];
  wchar_t DeviceString[128];
  unsigned int StateFlags;
  wchar_t DeviceID[128];
  wchar_t DeviceKey[128];
};

/* 7679 */
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
  unsigned int Size;
  unsigned int Action;
  unsigned int Flags;
  unsigned int ParameterBlockOffset;
  unsigned int ParameterBlockLength;
  unsigned int DataSetRangesOffset;
  unsigned int DataSetRangesLength;
};

/* 7680 */
struct _DOC_INFO_3A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
  unsigned int dwFlags;
};

/* 7681 */
struct tagABORTPATH
{
  tagEMR emr;
};

/* 7682 */
struct _SMALL_RECT
{
  __int16 Left;
  __int16 Top;
  __int16 Right;
  __int16 Bottom;
};

/* 7683 */
struct _CONSOLE_SCREEN_BUFFER_INFO
{
  _COORD dwSize;
  _COORD dwCursorPosition;
  unsigned __int16 wAttributes;
  _SMALL_RECT srWindow;
  _COORD dwMaximumWindowSize;
};

/* 7684 */
struct _CRYPT_OID_FUNC_ENTRY
{
  const char *pszOID;
  void *pvFuncAddr;
};

/* 7685 */
struct tagCOLORCORRECTPALETTE
{
  tagEMR emr;
  unsigned int ihPalette;
  unsigned int nFirstEntry;
  unsigned int nPalEntries;
  unsigned int nReserved;
};

/* 7686 */
struct HMENU__
{
  int unused;
};

/* 7687 */
struct tagCREATESTRUCTA
{
  void *lpCreateParams;
  HINSTANCE__ *hInstance;
  HMENU__ *hMenu;
  HWND__ *hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  int style;
  const char *lpszName;
  const char *lpszClass;
  unsigned int dwExStyle;
};

/* 7688 */
struct tagMINIMIZEDMETRICS
{
  unsigned int cbSize;
  int iWidth;
  int iHorzGap;
  int iVertGap;
  int iArrange;
};

/* 7689 */
struct HMIDIIN__
{
  int unused;
};

/* 7690 */
struct _CRYPT_DECRYPT_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned int cCertStore;
  void **rghCertStore;
};

/* 7691 */
struct _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 7692 */
struct _s__CatchableTypeArray
{
  int nCatchableTypes;
  const _s__CatchableType *arrayOfCatchableTypes[];
};

/* 7693 */
struct tagJOYCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  wchar_t szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  wchar_t szRegKey[32];
  wchar_t szOEMVxD[260];
};

/* 7694 */
struct tagCIEXYZ
{
  int ciexyzX;
  int ciexyzY;
  int ciexyzZ;
};

/* 7695 */
struct tagICEXYZTRIPLE
{
  tagCIEXYZ ciexyzRed;
  tagCIEXYZ ciexyzGreen;
  tagCIEXYZ ciexyzBlue;
};

/* 7696 */
struct tagLOGCOLORSPACEW
{
  unsigned int lcsSignature;
  unsigned int lcsVersion;
  unsigned int lcsSize;
  int lcsCSType;
  int lcsIntent;
  tagICEXYZTRIPLE lcsEndpoints;
  unsigned int lcsGammaRed;
  unsigned int lcsGammaGreen;
  unsigned int lcsGammaBlue;
  wchar_t lcsFilename[260];
};

/* 7697 */
struct __declspec(align(4)) tagEMRCREATECOLORSPACEW
{
  tagEMR emr;
  unsigned int ihCS;
  tagLOGCOLORSPACEW lcs;
  unsigned int dwFlags;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 7698 */
struct tagMCI_SYSINFO_PARMSA
{
  unsigned int dwCallback;
  char *lpstrReturn;
  unsigned int dwRetSize;
  unsigned int dwNumber;
  unsigned int wDeviceType;
};

/* 7699 */
struct _CTL_ENTRY
{
  _CRYPTOAPI_BLOB SubjectIdentifier;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 7700 */
struct _CTL_INFO
{
  unsigned int dwVersion;
  _CTL_USAGE SubjectUsage;
  _CRYPTOAPI_BLOB ListIdentifier;
  _CRYPTOAPI_BLOB SequenceNumber;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  unsigned int cCTLEntry;
  _CTL_ENTRY *rgCTLEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 7701 */
struct _CTL_CONTEXT
{
  unsigned int dwMsgAndCertEncodingType;
  unsigned __int8 *pbCtlEncoded;
  unsigned int cbCtlEncoded;
  _CTL_INFO *pCtlInfo;
  void *hCertStore;
  void *hCryptMsg;
  unsigned __int8 *pbCtlContent;
  unsigned int cbCtlContent;
};

/* 7702 */
struct _CTL_VERIFY_USAGE_STATUS
{
  unsigned int cbSize;
  unsigned int dwError;
  unsigned int dwFlags;
  const _CTL_CONTEXT **ppCtl;
  unsigned int dwCtlEntryIndex;
  const _CERT_CONTEXT **ppSigner;
  unsigned int dwSignerIndex;
};

/* 7703 */
struct _CRYPT_BLOB_ARRAY
{
  unsigned int cBlob;
  _CRYPTOAPI_BLOB *rgBlob;
};

/* 7704 */
struct _CERT_TRUST_LIST_INFO
{
  unsigned int cbSize;
  _CTL_ENTRY *pCtlEntry;
  const _CTL_CONTEXT *pCtlContext;
};

/* 7705 */
struct _CERT_SIMPLE_CHAIN
{
  unsigned int cbSize;
  _CERT_TRUST_STATUS TrustStatus;
  unsigned int cElement;
  _CERT_CHAIN_ELEMENT **rgpElement;
  _CERT_TRUST_LIST_INFO *pTrustListInfo;
  int fHasRevocationFreshnessTime;
  unsigned int dwRevocationFreshnessTime;
};

/* 7706 */
struct _CERT_CHAIN_CONTEXT
{
  unsigned int cbSize;
  _CERT_TRUST_STATUS TrustStatus;
  unsigned int cChain;
  _CERT_SIMPLE_CHAIN **rgpChain;
  unsigned int cLowerQualityChainContext;
  const _CERT_CHAIN_CONTEXT **rgpLowerQualityChainContext;
  int fHasRevocationFreshnessTime;
  unsigned int dwRevocationFreshnessTime;
  unsigned int dwCreateFlags;
  _GUID ChainId;
};

/* 7707 */
struct _PRINTPROCESSOR_INFO_1A
{
  char *pName;
};

/* 7708 */
struct __cppobj IInternetThreadSwitch : IUnknown
{
};

/* 7709 */
struct /*VFT*/ IInternetThreadSwitch_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Prepare)(IInternetThreadSwitch *this);
  HRESULT (__stdcall *Continue)(IInternetThreadSwitch *this);
};

/* 7710 */
struct __declspec(align(4)) tagEMRFILLRGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  unsigned int ihBrush;
  unsigned __int8 RgnData[1];
};

/* 7711 */
struct tagMULTIKEYHELPW
{
  unsigned int mkSize;
  wchar_t mkKeylist;
  wchar_t szKeyphrase[1];
};

/* 7712 */
struct __declspec(align(4)) tagHELPWININFOA
{
  int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  char rgchMember[2];
};

/* 7713 */
struct tagMIXERLINEW::<unnamed_type_Target>
{
  unsigned int dwType;
  unsigned int dwDeviceID;
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
};

/* 7714 */
struct tagMIXERLINEW
{
  unsigned int cbStruct;
  unsigned int dwDestination;
  unsigned int dwSource;
  unsigned int dwLineID;
  unsigned int fdwLine;
  unsigned int dwUser;
  unsigned int dwComponentType;
  unsigned int cChannels;
  unsigned int cConnections;
  unsigned int cControls;
  wchar_t szShortName[16];
  wchar_t szName[64];
  tagMIXERLINEW::<unnamed_type_Target> Target;
};

/* 7715 */
struct __declspec(align(4)) tagRemHENHMETAFILE
{
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 7716 */
struct __declspec(align(4)) _TIME_DYNAMIC_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
  wchar_t TimeZoneKeyName[128];
  unsigned __int8 DynamicDaylightTimeDisabled;
};

/* 7717 */
struct tagSIZE
{
  int cx;
  int cy;
};

/* 7718 */
struct __declspec(align(4)) tagEMRFRAMERGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  unsigned int ihBrush;
  tagSIZE szlStroke;
  unsigned __int8 RgnData[1];
};

/* 7719 */
struct tagMEASUREITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  unsigned int itemWidth;
  unsigned int itemHeight;
  unsigned int itemData;
};

/* 7720 */
struct DRVCONFIGINFOEX
{
  unsigned int dwDCISize;
  const wchar_t *lpszDCISectionName;
  const wchar_t *lpszDCIAliasName;
  unsigned int dnDevNode;
};

/* 7721 */
struct _CERT_LDAP_STORE_OPENED_PARA
{
  void *pvLdapSessionHandle;
  const wchar_t *pwszLdapUrl;
};

/* 7722 */
struct _PRINTER_INFO_1A
{
  unsigned int Flags;
  char *pDescription;
  char *pName;
  char *pComment;
};

/* 7723 */
struct tagOLEVERB
{
  int lVerb;
  wchar_t *lpszVerbName;
  unsigned int fuFlags;
  unsigned int grfAttribs;
};

/* 7724 */
struct _wireBRECORD
{
  unsigned int fFlags;
  unsigned int clSize;
  IRecordInfo *pRecInfo;
  unsigned __int8 *pRecord;
};

/* 7725 */
struct _wireSAFEARR_BRECORD
{
  unsigned int Size;
  _wireBRECORD **aRecord;
};

/* 7726 */
struct tagCUSTDATAITEM
{
  _GUID guid;
  tagVARIANT varValue;
};

/* 7727 */
struct _TRANSACTION_ENLISTMENT_PAIR
{
  _GUID EnlistmentId;
  _GUID ResourceManagerId;
};

/* 7728 */
struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
  unsigned int NumberOfEnlistments;
  _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};

/* 7729 */
struct __declspec(align(4)) _CREATE_PROCESS_DEBUG_INFO
{
  void *hFile;
  void *hProcess;
  void *hThread;
  void *lpBaseOfImage;
  unsigned int dwDebugInfoFileOffset;
  unsigned int nDebugInfoSize;
  void *lpThreadLocalBase;
  unsigned int (__stdcall *lpStartAddress)(void *);
  void *lpImageName;
  unsigned __int16 fUnicode;
};

/* 7730 */
struct $0D057425CB83406CCB6CB71DF3FA0A4C
{
  int lMinimum;
  int lMaximum;
};

/* 7731 */
struct $E50C0F09BB6F8C50FF087E1E76EA2CA0
{
  unsigned int dwMinimum;
  unsigned int dwMaximum;
};

/* 7732 */
union tagMIXERCONTROLW::<unnamed_type_Bounds>
{
  $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
  $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
  unsigned int dwReserved[6];
};

/* 7733 */
union tagMIXERCONTROLW::<unnamed_type_Metrics>
{
  unsigned int cSteps;
  unsigned int cbCustomData;
  unsigned int dwReserved[6];
};

/* 7734 */
struct tagMIXERCONTROLW
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int dwControlType;
  unsigned int fdwControl;
  unsigned int cMultipleItems;
  wchar_t szShortName[16];
  wchar_t szName[64];
  tagMIXERCONTROLW::<unnamed_type_Bounds> Bounds;
  tagMIXERCONTROLW::<unnamed_type_Metrics> Metrics;
};

/* 7735 */
union $476D211351DA30503E50D2F0E6E515B0
{
  unsigned int dwControlID;
  unsigned int dwControlType;
};

/* 7736 */
struct tagMIXERLINECONTROLSW
{
  unsigned int cbStruct;
  unsigned int dwLineID;
  $476D211351DA30503E50D2F0E6E515B0 ___u2;
  unsigned int cControls;
  unsigned int cbmxctrl;
  tagMIXERCONTROLW *pamxctrl;
};

/* 7737 */
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
{
  char *pszOrganization;
  unsigned int cNoticeNumbers;
  int *rgNoticeNumbers;
};

/* 7738 */
struct _CERT_POLICY_QUALIFIER_USER_NOTICE
{
  _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
  wchar_t *pszDisplayText;
};

/* 7739 */
struct _CERT_HASHED_URL
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB Hash;
  wchar_t *pwszUrl;
};

/* 7740 */
struct _CERT_LOGOTYPE_DETAILS
{
  wchar_t *pwszMimeType;
  unsigned int cHashedUrl;
  _CERT_HASHED_URL *rgHashedUrl;
};

/* 7741 */
union $3C8120B90EF6903C0B2E2DA025F6B029
{
  unsigned int dwNumBits;
  unsigned int dwTableSize;
};

/* 7742 */
struct _CERT_LOGOTYPE_IMAGE_INFO
{
  unsigned int dwLogotypeImageInfoChoice;
  unsigned int dwFileSize;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwLogotypeImageResolutionChoice;
  $3C8120B90EF6903C0B2E2DA025F6B029 ___u5;
  wchar_t *pwszLanguage;
};

/* 7743 */
struct _CERT_LOGOTYPE_IMAGE
{
  _CERT_LOGOTYPE_DETAILS LogotypeDetails;
  _CERT_LOGOTYPE_IMAGE_INFO *pLogotypeImageInfo;
};

/* 7744 */
struct _CERT_LOGOTYPE_AUDIO_INFO
{
  unsigned int dwFileSize;
  unsigned int dwPlayTime;
  unsigned int dwChannels;
  unsigned int dwSampleRate;
  wchar_t *pwszLanguage;
};

/* 7745 */
struct _CERT_LOGOTYPE_AUDIO
{
  _CERT_LOGOTYPE_DETAILS LogotypeDetails;
  _CERT_LOGOTYPE_AUDIO_INFO *pLogotypeAudioInfo;
};

/* 7746 */
struct _CERT_LOGOTYPE_DATA
{
  unsigned int cLogotypeImage;
  _CERT_LOGOTYPE_IMAGE *rgLogotypeImage;
  unsigned int cLogotypeAudio;
  _CERT_LOGOTYPE_AUDIO *rgLogotypeAudio;
};

/* 7747 */
struct _CERT_LOGOTYPE_REFERENCE
{
  unsigned int cHashedUrl;
  _CERT_HASHED_URL *rgHashedUrl;
};

/* 7748 */
union $2900F998C5786395FAF2ECD62BED1D3D
{
  _CERT_LOGOTYPE_DATA *pLogotypeDirectInfo;
  _CERT_LOGOTYPE_REFERENCE *pLogotypeIndirectInfo;
};

/* 7749 */
struct _CERT_LOGOTYPE_INFO
{
  unsigned int dwLogotypeInfoChoice;
  $2900F998C5786395FAF2ECD62BED1D3D ___u1;
};

/* 7750 */
struct _CERT_OTHER_LOGOTYPE_INFO
{
  char *pszObjId;
  _CERT_LOGOTYPE_INFO LogotypeInfo;
};

/* 7751 */
struct __declspec(align(8)) _TAPE_STATISTICS
{
  unsigned int Version;
  unsigned int Flags;
  _LARGE_INTEGER RecoveredWrites;
  _LARGE_INTEGER UnrecoveredWrites;
  _LARGE_INTEGER RecoveredReads;
  _LARGE_INTEGER UnrecoveredReads;
  unsigned __int8 CompressionRatioReads;
  unsigned __int8 CompressionRatioWrites;
};

/* 7752 */
struct __cppobj JfrEvent<EventG1BasicIHOP>
{
};

/* 7753 */
struct __cppobj EventG1BasicIHOP : JfrEvent<EventG1BasicIHOP>
{
};

/* 7754 */
struct __declspec(align(8)) _wfinddata64i32_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  unsigned int size;
  wchar_t name[260];
};

/* 7755 */
struct _ACE_HEADER
{
  unsigned __int8 AceType;
  unsigned __int8 AceFlags;
  unsigned __int16 AceSize;
};

/* 7756 */
struct HGLRC__
{
  int unused;
};

/* 7757 */
struct tagEMREXCLUDECLIPRECT
{
  tagEMR emr;
  _RECTL rclClip;
};

/* 7758 */
struct tagEMRPOLYPOLYLINE
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nPolys;
  unsigned int cptl;
  unsigned int aPolyCounts[1];
  _POINTL aptl[1];
};

/* 7759 */
struct midistrmbuffver_tag
{
  unsigned int dwVersion;
  unsigned int dwMid;
  unsigned int dwOEMVersion;
};

/* 7760 */
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
{
  unsigned int cbSize;
  unsigned int hCryptProv;
  _CMSG_MAIL_LIST_RECIPIENT_INFO *pMailList;
  unsigned int dwRecipientIndex;
  unsigned int dwKeyChoice;
  $444B8AF3F414656C8F88F98B3D40B8AE ___u5;
};

/* 7761 */
struct __declspec(align(4)) _CHANGER_EXCHANGE_MEDIUM
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Source;
  _CHANGER_ELEMENT Destination1;
  _CHANGER_ELEMENT Destination2;
  unsigned __int8 Flip1;
  unsigned __int8 Flip2;
};

/* 7762 */
struct _NON_PAGED_DEBUG_INFO
{
  unsigned __int16 Signature;
  unsigned __int16 Flags;
  unsigned int Size;
  unsigned __int16 Machine;
  unsigned __int16 Characteristics;
  unsigned int TimeDateStamp;
  unsigned int CheckSum;
  unsigned int SizeOfImage;
  unsigned __int64 ImageBase;
};

/* 7763 */
struct _CRYPT_CREDENTIALS
{
  unsigned int cbSize;
  const char *pszCredentialsOid;
  void *pvCredentials;
};

/* 7764 */
struct __unaligned __declspec(align(2)) tagPDA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned __int16 nFromPage;
  unsigned __int16 nToPage;
  unsigned __int16 nMinPage;
  unsigned __int16 nMaxPage;
  unsigned __int16 nCopies;
  HINSTANCE__ *hInstance;
  int lCustData;
  unsigned int (__stdcall *lpfnPrintHook)(HWND__ *, unsigned int, unsigned int, int);
  unsigned int (__stdcall *lpfnSetupHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpPrintTemplateName;
  const char *lpSetupTemplateName;
  void *hPrintTemplate;
  void *hSetupTemplate;
};

/* 7765 */
struct _CRYPT_HASH_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB Hash;
};

/* 7766 */
struct _CERT_OTHER_NAME
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 7767 */
union $34C918076E3044A6E4E7324A3C60CB72
{
  _CERT_OTHER_NAME *pOtherName;
  wchar_t *pwszRfc822Name;
  wchar_t *pwszDNSName;
  _CRYPTOAPI_BLOB DirectoryName;
  wchar_t *pwszURL;
  _CRYPTOAPI_BLOB IPAddress;
  char *pszRegisteredID;
};

/* 7768 */
struct _CERT_ALT_NAME_ENTRY
{
  unsigned int dwAltNameChoice;
  $34C918076E3044A6E4E7324A3C60CB72 ___u1;
};

/* 7769 */
struct _CERT_ACCESS_DESCRIPTION
{
  char *pszAccessMethod;
  _CERT_ALT_NAME_ENTRY AccessLocation;
};

/* 7770 */
struct HRGN__
{
  int unused;
};

/* 7771 */
struct tMIXERCONTROLDETAILS_UNSIGNED
{
  unsigned int dwValue;
};

/* 7772 */
struct __declspec(align(4)) _BYTE_BLOB
{
  unsigned int clSize;
  unsigned __int8 abData[1];
};

/* 7773 */
union _userHENHMETAFILE::__MIDL_IWinTypes_0006
{
  int hInproc;
  _BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 7774 */
struct _userHENHMETAFILE
{
  int fContext;
  _userHENHMETAFILE::__MIDL_IWinTypes_0006 u;
};

/* 7775 */
struct __cppobj IXMLDOMNode : IDispatch
{
};

/* 7776 */
struct __cppobj IXMLDOMNodeList : IDispatch
{
};

/* 7777 */
struct /*VFT*/ IXMLDOMNodeList_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_item)(IXMLDOMNodeList *this, int, IXMLDOMNode **);
  HRESULT (__stdcall *get_length)(IXMLDOMNodeList *this, int *);
  HRESULT (__stdcall *nextNode)(IXMLDOMNodeList *this, IXMLDOMNode **);
  HRESULT (__stdcall *reset)(IXMLDOMNodeList *this);
  HRESULT (__stdcall *get__newEnum)(IXMLDOMNodeList *this, IUnknown **);
};

/* 7778 */
struct __cppobj IXMLDOMNamedNodeMap : IDispatch
{
};

/* 7779 */
struct /*VFT*/ IXMLDOMNamedNodeMap_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *getNamedItem)(IXMLDOMNamedNodeMap *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *setNamedItem)(IXMLDOMNamedNodeMap *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeNamedItem)(IXMLDOMNamedNodeMap *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_item)(IXMLDOMNamedNodeMap *this, int, IXMLDOMNode **);
  HRESULT (__stdcall *get_length)(IXMLDOMNamedNodeMap *this, int *);
  HRESULT (__stdcall *getQualifiedItem)(IXMLDOMNamedNodeMap *this, wchar_t *, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *removeQualifiedItem)(IXMLDOMNamedNodeMap *this, wchar_t *, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *nextNode)(IXMLDOMNamedNodeMap *this, IXMLDOMNode **);
  HRESULT (__stdcall *reset)(IXMLDOMNamedNodeMap *this);
  HRESULT (__stdcall *get__newEnum)(IXMLDOMNamedNodeMap *this, IUnknown **);
};

/* 7780 */
struct __cppobj IXMLDOMDocumentType : IXMLDOMNode
{
};

/* 7781 */
struct __cppobj IXMLDOMDocument : IXMLDOMNode
{
};

/* 7782 */
struct __cppobj IXMLDOMImplementation : IDispatch
{
};

/* 7783 */
struct /*VFT*/ IXMLDOMImplementation_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *hasFeature)(IXMLDOMImplementation *this, wchar_t *, wchar_t *, __int16 *);
};

/* 7784 */
struct __cppobj IXMLDOMElement : IXMLDOMNode
{
};

/* 7785 */
struct __cppobj IXMLDOMAttribute : IXMLDOMNode
{
};

/* 7786 */
struct __cppobj IXMLDOMDocumentFragment : IXMLDOMNode
{
};

/* 7787 */
struct __cppobj IXMLDOMCharacterData : IXMLDOMNode
{
};

/* 7788 */
struct __cppobj IXMLDOMText : IXMLDOMCharacterData
{
};

/* 7789 */
struct __cppobj IXMLDOMComment : IXMLDOMCharacterData
{
};

/* 7790 */
struct __cppobj IXMLDOMCDATASection : IXMLDOMText
{
};

/* 7791 */
struct __cppobj IXMLDOMProcessingInstruction : IXMLDOMNode
{
};

/* 7792 */
struct __cppobj IXMLDOMEntityReference : IXMLDOMNode
{
};

/* 7793 */
struct __cppobj IXMLDOMParseError : IDispatch
{
};

/* 7794 */
struct /*VFT*/ IXMLDOMParseError_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_errorCode)(IXMLDOMParseError *this, int *);
  HRESULT (__stdcall *get_url)(IXMLDOMParseError *this, wchar_t **);
  HRESULT (__stdcall *get_reason)(IXMLDOMParseError *this, wchar_t **);
  HRESULT (__stdcall *get_srcText)(IXMLDOMParseError *this, wchar_t **);
  HRESULT (__stdcall *get_line)(IXMLDOMParseError *this, int *);
  HRESULT (__stdcall *get_linepos)(IXMLDOMParseError *this, int *);
  HRESULT (__stdcall *get_filepos)(IXMLDOMParseError *this, int *);
};

/* 7795 */
struct /*VFT*/ IXMLDOMNode_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
};

/* 7796 */
struct __cppobj JfrEvent<EventCPUInformation>
{
};

/* 7797 */
struct __cppobj EventCPUInformation : JfrEvent<EventCPUInformation>
{
};

/* 7798 */
struct _CERT_SIGNED_CONTENT_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPT_BIT_BLOB Signature;
};

/* 7799 */
struct _CMC_TAGGED_ATTRIBUTE
{
  unsigned int dwBodyPartID;
  _CRYPT_ATTRIBUTE Attribute;
};

/* 7800 */
struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  unsigned int (__stdcall *pfnBufferSize)(unsigned int *, unsigned int, void *);
  unsigned __int8 *(__stdcall *pfnMarshall)(unsigned int *, unsigned __int8 *, void *);
  unsigned __int8 *(__stdcall *pfnUnmarshall)(unsigned int *, unsigned __int8 *, void *);
  void (__stdcall *pfnFree)(unsigned int *, void *);
};

/* 7801 */
struct __declspec(align(4)) _STORAGE_ADAPTER_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int MaximumTransferLength;
  unsigned int MaximumPhysicalPages;
  unsigned int AlignmentMask;
  unsigned __int8 AdapterUsesPio;
  unsigned __int8 AdapterScansDown;
  unsigned __int8 CommandQueueing;
  unsigned __int8 AcceleratedTransfer;
  unsigned __int8 BusType;
  unsigned __int16 BusMajorVersion;
  unsigned __int16 BusMinorVersion;
};

/* 7802 */
struct tagOFN_NT4W
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpstrFilter;
  wchar_t *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  wchar_t *lpstrFile;
  unsigned int nMaxFile;
  wchar_t *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const wchar_t *lpstrInitialDir;
  const wchar_t *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const wchar_t *lpstrDefExt;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpTemplateName;
};

/* 7803 */
struct _JOBOBJECT_JOBSET_INFORMATION
{
  unsigned int MemberLevel;
};

/* 7804 */
struct tagRAWINPUTHEADER
{
  unsigned int dwType;
  unsigned int dwSize;
  void *hDevice;
  unsigned int wParam;
};

/* 7805 */
struct $0BEE17049826DA8EAC4E51F5C14BEE1D
{
  unsigned __int16 usButtonFlags;
  unsigned __int16 usButtonData;
};

/* 7806 */
union $7ABE6D399FF64B7ECD797BE9F01006FD
{
  unsigned int ulButtons;
  $0BEE17049826DA8EAC4E51F5C14BEE1D __s1;
};

/* 7807 */
struct tagRAWMOUSE
{
  unsigned __int16 usFlags;
  $7ABE6D399FF64B7ECD797BE9F01006FD ___u1;
  unsigned int ulRawButtons;
  int lLastX;
  int lLastY;
  unsigned int ulExtraInformation;
};

/* 7808 */
struct tagRAWKEYBOARD
{
  unsigned __int16 MakeCode;
  unsigned __int16 Flags;
  unsigned __int16 Reserved;
  unsigned __int16 VKey;
  unsigned int Message;
  unsigned int ExtraInformation;
};

/* 7809 */
union tagRAWINPUT::<unnamed_type_data>
{
  tagRAWMOUSE mouse;
  tagRAWKEYBOARD keyboard;
  tagRAWHID hid;
};

/* 7810 */
struct tagRAWINPUT
{
  tagRAWINPUTHEADER header;
  tagRAWINPUT::<unnamed_type_data> data;
};

/* 7811 */
struct CM_Power_Data_s
{
  unsigned int PD_Size;
  _DEVICE_POWER_STATE PD_MostRecentPowerState;
  unsigned int PD_Capabilities;
  unsigned int PD_D1Latency;
  unsigned int PD_D2Latency;
  unsigned int PD_D3Latency;
  _DEVICE_POWER_STATE PD_PowerStateMapping[7];
  _SYSTEM_POWER_STATE PD_DeepestSystemWake;
};

/* 7812 */
struct BITMAPV5HEADER
{
  unsigned int bV5Size;
  int bV5Width;
  int bV5Height;
  unsigned __int16 bV5Planes;
  unsigned __int16 bV5BitCount;
  unsigned int bV5Compression;
  unsigned int bV5SizeImage;
  int bV5XPelsPerMeter;
  int bV5YPelsPerMeter;
  unsigned int bV5ClrUsed;
  unsigned int bV5ClrImportant;
  unsigned int bV5RedMask;
  unsigned int bV5GreenMask;
  unsigned int bV5BlueMask;
  unsigned int bV5AlphaMask;
  unsigned int bV5CSType;
  tagICEXYZTRIPLE bV5Endpoints;
  unsigned int bV5GammaRed;
  unsigned int bV5GammaGreen;
  unsigned int bV5GammaBlue;
  unsigned int bV5Intent;
  unsigned int bV5ProfileData;
  unsigned int bV5ProfileSize;
  unsigned int bV5Reserved;
};

/* 7813 */
struct tagANIMATIONINFO
{
  unsigned int cbSize;
  int iMinAnimate;
};

/* 7814 */
struct tagWAVEOUTCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 7815 */
struct _CTL_FIND_USAGE_PARA
{
  unsigned int cbSize;
  _CTL_USAGE SubjectUsage;
  _CRYPTOAPI_BLOB ListIdentifier;
  _CERT_INFO *pSigner;
};

/* 7816 */
struct _CTL_FIND_SUBJECT_PARA
{
  unsigned int cbSize;
  _CTL_FIND_USAGE_PARA *pUsagePara;
  unsigned int dwSubjectType;
  void *pvSubject;
};

/* 7817 */
struct _VIDEOPARAMETERS
{
  _GUID Guid;
  unsigned int dwOffset;
  unsigned int dwCommand;
  unsigned int dwFlags;
  unsigned int dwMode;
  unsigned int dwTVStandard;
  unsigned int dwAvailableModes;
  unsigned int dwAvailableTVStandard;
  unsigned int dwFlickerFilter;
  unsigned int dwOverScanX;
  unsigned int dwOverScanY;
  unsigned int dwMaxUnscaledX;
  unsigned int dwMaxUnscaledY;
  unsigned int dwPositionX;
  unsigned int dwPositionY;
  unsigned int dwBrightness;
  unsigned int dwContrast;
  unsigned int dwCPType;
  unsigned int dwCPCommand;
  unsigned int dwCPStandard;
  unsigned int dwCPKey;
  unsigned int bCP_APSTriggerBits;
  unsigned __int8 bOEMCopyProtection[256];
};

/* 7818 */
struct _CMC_TAGGED_CONTENT_INFO
{
  unsigned int dwBodyPartID;
  _CRYPTOAPI_BLOB EncodedContentInfo;
};

/* 7819 */
struct _CMC_TAGGED_OTHER_MSG
{
  unsigned int dwBodyPartID;
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 7820 */
struct _CMC_RESPONSE_INFO
{
  unsigned int cTaggedAttribute;
  _CMC_TAGGED_ATTRIBUTE *rgTaggedAttribute;
  unsigned int cTaggedContentInfo;
  _CMC_TAGGED_CONTENT_INFO *rgTaggedContentInfo;
  unsigned int cTaggedOtherMsg;
  _CMC_TAGGED_OTHER_MSG *rgTaggedOtherMsg;
};

/* 7821 */
struct _OCSP_CERT_ID
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB IssuerNameHash;
  _CRYPTOAPI_BLOB IssuerKeyHash;
  _CRYPTOAPI_BLOB SerialNumber;
};

/* 7822 */
struct _PROCESSOR_GROUP_INFO
{
  unsigned __int8 MaximumProcessorCount;
  unsigned __int8 ActiveProcessorCount;
  unsigned __int8 Reserved[38];
  unsigned int ActiveProcessorMask;
};

/* 7823 */
struct _GROUP_RELATIONSHIP
{
  unsigned __int16 MaximumGroupCount;
  unsigned __int16 ActiveGroupCount;
  unsigned __int8 Reserved[20];
  _PROCESSOR_GROUP_INFO GroupInfo[1];
};

/* 7824 */
struct tagBITMAPCOREHEADER
{
  unsigned int bcSize;
  unsigned __int16 bcWidth;
  unsigned __int16 bcHeight;
  unsigned __int16 bcPlanes;
  unsigned __int16 bcBitCount;
};

/* 7825 */
struct __declspec(align(2)) tagBITMAPCOREINFO
{
  tagBITMAPCOREHEADER bmciHeader;
  tagRGBTRIPLE bmciColors[1];
};

/* 7826 */
struct tagPIXELFORMATDESCRIPTOR
{
  unsigned __int16 nSize;
  unsigned __int16 nVersion;
  unsigned int dwFlags;
  unsigned __int8 iPixelType;
  unsigned __int8 cColorBits;
  unsigned __int8 cRedBits;
  unsigned __int8 cRedShift;
  unsigned __int8 cGreenBits;
  unsigned __int8 cGreenShift;
  unsigned __int8 cBlueBits;
  unsigned __int8 cBlueShift;
  unsigned __int8 cAlphaBits;
  unsigned __int8 cAlphaShift;
  unsigned __int8 cAccumBits;
  unsigned __int8 cAccumRedBits;
  unsigned __int8 cAccumGreenBits;
  unsigned __int8 cAccumBlueBits;
  unsigned __int8 cAccumAlphaBits;
  unsigned __int8 cDepthBits;
  unsigned __int8 cStencilBits;
  unsigned __int8 cAuxBuffers;
  unsigned __int8 iLayerType;
  unsigned __int8 bReserved;
  unsigned int dwLayerMask;
  unsigned int dwVisibleMask;
  unsigned int dwDamageMask;
};

/* 7827 */
struct tagEMRFILLPATH
{
  tagEMR emr;
  _RECTL rclBounds;
};

/* 7828 */
struct _CHANGER_SET_ACCESS
{
  _CHANGER_ELEMENT Element;
  unsigned int Control;
};

/* 7829 */
struct _REMSECURITY_ATTRIBUTES
{
  unsigned int nLength;
  unsigned int lpSecurityDescriptor;
  int bInheritHandle;
};

/* 7830 */
struct __cppobj JfrEvent<EventCPULoad>
{
};

/* 7831 */
struct __cppobj EventCPULoad : JfrEvent<EventCPULoad>
{
};

/* 7832 */
struct _FLOAT128
{
  __int64 LowPart;
  __int64 HighPart;
};

/* 7833 */
struct _LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bytes>
{
  unsigned __int8 BaseMid;
  unsigned __int8 Flags1;
  unsigned __int8 Flags2;
  unsigned __int8 BaseHi;
};

/* 7834 */
struct _LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bits>
{
  unsigned __int32 BaseMid : 8;
  unsigned __int32 Type : 5;
  unsigned __int32 Dpl : 2;
  unsigned __int32 Pres : 1;
  unsigned __int32 LimitHi : 4;
  unsigned __int32 Sys : 1;
  unsigned __int32 Reserved_0 : 1;
  unsigned __int32 Default_Big : 1;
  unsigned __int32 Granularity : 1;
  unsigned __int32 BaseHi : 8;
};

/* 7835 */
union _LDT_ENTRY::<unnamed_type_HighWord>
{
  _LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bytes> Bytes;
  _LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bits> Bits;
};

/* 7836 */
struct _LDT_ENTRY
{
  unsigned __int16 LimitLow;
  unsigned __int16 BaseLow;
  _LDT_ENTRY::<unnamed_type_HighWord> HighWord;
};

/* 7837 */
struct __declspec(align(8)) _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
  _LARGE_INTEGER PerProcessUserTimeLimit;
  _LARGE_INTEGER PerJobUserTimeLimit;
  unsigned int LimitFlags;
  unsigned int MinimumWorkingSetSize;
  unsigned int MaximumWorkingSetSize;
  unsigned int ActiveProcessLimit;
  unsigned int Affinity;
  unsigned int PriorityClass;
  unsigned int SchedulingClass;
};

/* 7838 */
struct __unaligned __declspec(align(2)) tagMETAHEADER
{
  unsigned __int16 mtType;
  unsigned __int16 mtHeaderSize;
  unsigned __int16 mtVersion;
  unsigned int mtSize;
  unsigned __int16 mtNoObjects;
  unsigned int mtMaxRecord;
  unsigned __int16 mtNoParameters;
};

/* 7839 */
struct HBRUSH__
{
  int unused;
};

/* 7840 */
struct tagWNDCLASSEXA
{
  unsigned int cbSize;
  unsigned int style;
  int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const char *lpszMenuName;
  const char *lpszClassName;
  HICON__ *hIconSm;
};

/* 7841 */
struct _CRYPT_SMIME_CAPABILITY
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Parameters;
};

/* 7842 */
struct _CRYPT_SMIME_CAPABILITIES
{
  unsigned int cCapability;
  _CRYPT_SMIME_CAPABILITY *rgCapability;
};

/* 7843 */
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRegPolicySettings;
  int fCommercial;
};

/* 7844 */
struct _DEVICE_DATA_SET_RANGE
{
  __int64 StartingOffset;
  unsigned __int64 LengthInBytes;
};

/* 7845 */
struct _CREATE_DISK_GPT
{
  _GUID DiskId;
  unsigned int MaxPartitionCount;
};

/* 7846 */
struct SCARD_READERSTATEA
{
  const char *szReader;
  void *pvUserData;
  unsigned int dwCurrentState;
  unsigned int dwEventState;
  unsigned int cbAtr;
  unsigned __int8 rgbAtr[36];
};

/* 7847 */
struct HKL__
{
  int unused;
};

/* 7848 */
struct tagLOGFONTA
{
  int lfHeight;
  int lfWidth;
  int lfEscapement;
  int lfOrientation;
  int lfWeight;
  unsigned __int8 lfItalic;
  unsigned __int8 lfUnderline;
  unsigned __int8 lfStrikeOut;
  unsigned __int8 lfCharSet;
  unsigned __int8 lfOutPrecision;
  unsigned __int8 lfClipPrecision;
  unsigned __int8 lfQuality;
  unsigned __int8 lfPitchAndFamily;
  char lfFaceName[32];
};

/* 7849 */
struct tagCWPRETSTRUCT
{
  int lResult;
  int lParam;
  unsigned int wParam;
  unsigned int message;
  HWND__ *hwnd;
};

/* 7850 */
struct _SERVICE_STATUS_PROCESS
{
  unsigned int dwServiceType;
  unsigned int dwCurrentState;
  unsigned int dwControlsAccepted;
  unsigned int dwWin32ExitCode;
  unsigned int dwServiceSpecificExitCode;
  unsigned int dwCheckPoint;
  unsigned int dwWaitHint;
  unsigned int dwProcessId;
  unsigned int dwServiceFlags;
};

/* 7851 */
struct _SERVICE_NOTIFY_2A
{
  unsigned int dwVersion;
  void (__stdcall *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
  unsigned int dwNotificationTriggered;
  char *pszServiceNames;
};

/* 7852 */
struct HIMCC__
{
  int unused;
};

/* 7853 */
struct _MEMORY_BASIC_INFORMATION32
{
  unsigned int BaseAddress;
  unsigned int AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 7854 */
struct tagENHMETARECORD
{
  unsigned int iType;
  unsigned int nSize;
  unsigned int dParm[1];
};

/* 7855 */
struct __declspec(align(4)) tagTEXTMETRICA
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  unsigned __int8 tmFirstChar;
  unsigned __int8 tmLastChar;
  unsigned __int8 tmDefaultChar;
  unsigned __int8 tmBreakChar;
  unsigned __int8 tmItalic;
  unsigned __int8 tmUnderlined;
  unsigned __int8 tmStruckOut;
  unsigned __int8 tmPitchAndFamily;
  unsigned __int8 tmCharSet;
};

/* 7856 */
struct tagAUXCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7857 */
struct tagMIXERCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7858 */
struct OPENCARD_SEARCH_CRITERIAA
{
  unsigned int dwStructSize;
  char *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  const _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  char *lpstrCardNames;
  unsigned int nMaxCardNames;
  int (__stdcall *lpfnCheck)(unsigned int, unsigned int, void *);
  unsigned int (__stdcall *lpfnConnect)(unsigned int, char *, char *, void *);
  void (__stdcall *lpfnDisconnect)(unsigned int, unsigned int, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
};

/* 7859 */
struct OPENCARDNAME_EXA
{
  unsigned int dwStructSize;
  unsigned int hSCardContext;
  HWND__ *hwndOwner;
  unsigned int dwFlags;
  const char *lpstrTitle;
  const char *lpstrSearchDesc;
  HICON__ *hIcon;
  OPENCARD_SEARCH_CRITERIAA *pOpenCardSearchCriteria;
  unsigned int (__stdcall *lpfnConnect)(unsigned int, char *, char *, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  char *lpstrRdr;
  unsigned int nMaxRdr;
  char *lpstrCard;
  unsigned int nMaxCard;
  unsigned int dwActiveProtocol;
  unsigned int hCardHandle;
};

/* 7860 */
struct __declspec(align(8)) _DRIVE_LAYOUT_INFORMATION_GPT
{
  _GUID DiskId;
  _LARGE_INTEGER StartingUsableOffset;
  _LARGE_INTEGER UsableLength;
  unsigned int MaxPartitionCount;
};

/* 7861 */
struct _OFSTRUCT
{
  unsigned __int8 cBytes;
  unsigned __int8 fFixedDisk;
  unsigned __int16 nErrCode;
  unsigned __int16 Reserved1;
  unsigned __int16 Reserved2;
  char szPathName[128];
};

/* 7862 */
struct _FIXED
{
  unsigned __int16 fract;
  __int16 value;
};

/* 7863 */
struct _MAT2
{
  _FIXED eM11;
  _FIXED eM12;
  _FIXED eM21;
  _FIXED eM22;
};

/* 7864 */
struct _CREATE_DISK_MBR
{
  unsigned int Signature;
};

/* 7865 */
union $BF1BC8E3FB2688C194BFA225C6A1CFF8
{
  _CREATE_DISK_MBR Mbr;
  _CREATE_DISK_GPT Gpt;
};

/* 7866 */
struct _CREATE_DISK
{
  _PARTITION_STYLE PartitionStyle;
  $BF1BC8E3FB2688C194BFA225C6A1CFF8 ___u1;
};

/* 7867 */
struct _DISK_CONTROLLER_NUMBER
{
  unsigned int ControllerNumber;
  unsigned int DiskNumber;
};

/* 7868 */
struct __declspec(align(4)) tagEMRNAMEDESCAPE
{
  tagEMR emr;
  int iEscape;
  int cbDriver;
  int cbEscData;
  unsigned __int8 EscData[1];
};

/* 7869 */
struct tagHELPINFO
{
  unsigned int cbSize;
  int iContextType;
  int iCtrlId;
  void *hItemHandle;
  unsigned int dwContextId;
  tagPOINT MousePos;
};

/* 7870 */
struct tagMSGBOXPARAMSA
{
  unsigned int cbSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpszText;
  const char *lpszCaption;
  unsigned int dwStyle;
  const char *lpszIcon;
  unsigned int dwContextHelpId;
  void (__stdcall *lpfnMsgBoxCallback)(tagHELPINFO *);
  unsigned int dwLanguageId;
};

/* 7871 */
struct tagCLIENTCREATESTRUCT
{
  void *hWindowMenu;
  unsigned int idFirstChild;
};

/* 7872 */
struct _FORM_INFO_1W
{
  unsigned int Flags;
  wchar_t *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
};

/* 7873 */
struct _tagSOFTDISTINFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int dwAdState;
  wchar_t *szTitle;
  wchar_t *szAbstract;
  wchar_t *szHREF;
  unsigned int dwInstalledVersionMS;
  unsigned int dwInstalledVersionLS;
  unsigned int dwUpdateVersionMS;
  unsigned int dwUpdateVersionLS;
  unsigned int dwAdvertisedVersionMS;
  unsigned int dwAdvertisedVersionLS;
  unsigned int dwReserved;
};

/* 7874 */
struct __cppobj JfrEvent<EventThreadCPULoad>
{
};

/* 7875 */
struct __cppobj EventThreadCPULoad : JfrEvent<EventThreadCPULoad>
{
};

/* 7876 */
struct _TOKEN_MANDATORY_LABEL
{
  _SID_AND_ATTRIBUTES Label;
};

/* 7877 */
struct _OUTPUT_DEBUG_STRING_INFO
{
  char *lpDebugStringData;
  unsigned __int16 fUnicode;
  unsigned __int16 nDebugStringLength;
};

/* 7878 */
struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b>
{
  unsigned __int8 s_b1;
  unsigned __int8 s_b2;
  unsigned __int8 s_b3;
  unsigned __int8 s_b4;
};

/* 7879 */
struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w>
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 7880 */
union in_addr::<unnamed_type_S_un>
{
  in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b> S_un_b;
  in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w> S_un_w;
  unsigned int S_addr;
};

/* 7881 */
struct in_addr
{
  in_addr::<unnamed_type_S_un> S_un;
};

/* 7882 */
struct __cppobj IWaitMultiple : IUnknown
{
};

/* 7883 */
struct /*VFT*/ IWaitMultiple_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *WaitMultiple)(IWaitMultiple *this, unsigned int, ISynchronize **);
  HRESULT (__stdcall *AddSynchronize)(IWaitMultiple *this, ISynchronize *);
};

/* 7884 */
struct tagEVENTMSG
{
  unsigned int message;
  unsigned int paramL;
  unsigned int paramH;
  unsigned int time;
  HWND__ *hwnd;
};

/* 7885 */
struct _UNIVERSAL_NAME_INFOA
{
  char *lpUniversalName;
};

/* 7886 */
struct tagMCI_STATUS_PARMS
{
  unsigned int dwCallback;
  unsigned int dwReturn;
  unsigned int dwItem;
  unsigned int dwTrack;
};

/* 7887 */
struct __declspec(align(4)) _WORD_BLOB
{
  unsigned int clSize;
  unsigned __int16 asData[1];
};

/* 7888 */
struct _IMAGE_OPTIONAL_HEADER64
{
  unsigned __int16 Magic;
  unsigned __int8 MajorLinkerVersion;
  unsigned __int8 MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned __int64 ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned __int64 SizeOfStackReserve;
  unsigned __int64 SizeOfStackCommit;
  unsigned __int64 SizeOfHeapReserve;
  unsigned __int64 SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 7889 */
struct tagEMRSETVIEWPORTEXTEX
{
  tagEMR emr;
  tagSIZE szlExtent;
};

/* 7890 */
struct tagTRACKMOUSEEVENT
{
  unsigned int cbSize;
  unsigned int dwFlags;
  HWND__ *hwndTrack;
  unsigned int dwHoverTime;
};

/* 7891 */
struct tagCOMBOBOXINFO
{
  unsigned int cbSize;
  tagRECT rcItem;
  tagRECT rcButton;
  unsigned int stateButton;
  HWND__ *hwndCombo;
  HWND__ *hwndItem;
  HWND__ *hwndList;
};

/* 7892 */
struct _SEC_WINNT_AUTH_IDENTITY_A
{
  unsigned __int8 *User;
  unsigned int UserLength;
  unsigned __int8 *Domain;
  unsigned int DomainLength;
  unsigned __int8 *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 7893 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
  _SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  unsigned __int8 *ServerCertificateSubject;
};

/* 7894 */
union _RPC_SECURITY_QOS_V2_A::<unnamed_type_u>
{
  _RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
};

/* 7895 */
struct _RPC_SECURITY_QOS_V2_A
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  _RPC_SECURITY_QOS_V2_A::<unnamed_type_u> u;
};

/* 7896 */
struct tagCHOOSEFONTA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HDC__ *hDC;
  tagLOGFONTA *lpLogFont;
  int iPointSize;
  unsigned int Flags;
  unsigned int rgbColors;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpTemplateName;
  HINSTANCE__ *hInstance;
  char *lpszStyle;
  unsigned __int16 nFontType;
  unsigned __int16 ___MISSING_ALIGNMENT__;
  int nSizeMin;
  int nSizeMax;
};

/* 7897 */
struct _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_Misc>::<unnamed_type_LnSz>
{
  unsigned __int16 Linenumber;
  unsigned __int16 Size;
};

/* 7898 */
union _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_Misc>
{
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_Misc>::<unnamed_type_LnSz> LnSz;
  unsigned int TotalSize;
};

/* 7899 */
struct _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry>::<unnamed_type_Function>
{
  unsigned int PointerToLinenumber;
  unsigned int PointerToNextFunction;
};

/* 7900 */
struct _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry>::<unnamed_type_Array>
{
  unsigned __int16 Dimension[4];
};

/* 7901 */
union _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry>
{
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry>::<unnamed_type_Function> Function;
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry>::<unnamed_type_Array> Array;
};

/* 7902 */
struct __unaligned __declspec(align(2)) _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>
{
  unsigned int TagIndex;
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_Misc> Misc;
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym>::<unnamed_type_FcnAry> FcnAry;
  unsigned __int16 TvIndex;
};

/* 7903 */
struct _IMAGE_AUX_SYMBOL::<unnamed_type_File>
{
  unsigned __int8 Name[18];
};

/* 7904 */
struct __unaligned __declspec(align(2)) _IMAGE_AUX_SYMBOL::<unnamed_type_Section>
{
  unsigned int Length;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int CheckSum;
  __int16 Number;
  unsigned __int8 Selection;
  unsigned __int8 bReserved;
  __int16 HighNumber;
};

/* 7905 */
struct __unaligned __declspec(align(2)) IMAGE_AUX_SYMBOL_TOKEN_DEF
{
  unsigned __int8 bAuxType;
  unsigned __int8 bReserved;
  unsigned int SymbolTableIndex;
  unsigned __int8 rgbReserved[12];
};

/* 7906 */
struct __unaligned __declspec(align(2)) _IMAGE_AUX_SYMBOL::<unnamed_type_CRC>
{
  unsigned int crc;
  unsigned __int8 rgbReserved[14];
};

/* 7907 */
union _IMAGE_AUX_SYMBOL
{
  _IMAGE_AUX_SYMBOL::<unnamed_type_Sym> Sym;
  _IMAGE_AUX_SYMBOL::<unnamed_type_File> File;
  _IMAGE_AUX_SYMBOL::<unnamed_type_Section> Section;
  IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  _IMAGE_AUX_SYMBOL::<unnamed_type_CRC> CRC;
};

/* 7908 */
struct _BY_HANDLE_FILE_INFORMATION
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int dwVolumeSerialNumber;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int nNumberOfLinks;
  unsigned int nFileIndexHigh;
  unsigned int nFileIndexLow;
};

/* 7909 */
struct _CRYPT_X942_OTHER_INFO
{
  char *pszContentEncryptionObjId;
  unsigned __int8 rgbCounter[4];
  unsigned __int8 rgbKeyLength[4];
  _CRYPTOAPI_BLOB PubInfo;
};

/* 7910 */
struct _EVENTLOGRECORD
{
  unsigned int Length;
  unsigned int Reserved;
  unsigned int RecordNumber;
  unsigned int TimeGenerated;
  unsigned int TimeWritten;
  unsigned int EventID;
  unsigned __int16 EventType;
  unsigned __int16 NumStrings;
  unsigned __int16 EventCategory;
  unsigned __int16 ReservedFlags;
  unsigned int ClosingRecordNumber;
  unsigned int StringOffset;
  unsigned int UserSidLength;
  unsigned int UserSidOffset;
  unsigned int DataLength;
  unsigned int DataOffset;
};

/* 7911 */
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
  unsigned int PropagationCookie;
  _GUID UOW;
  _GUID TmIdentity;
  unsigned int BufferLength;
};

/* 7912 */
struct tagSTYLESTRUCT
{
  unsigned int styleOld;
  unsigned int styleNew;
};

/* 7913 */
struct _cpinfoexA
{
  unsigned int MaxCharSize;
  unsigned __int8 DefaultChar[2];
  unsigned __int8 LeadByte[12];
  wchar_t UnicodeDefaultChar;
  unsigned int CodePage;
  char CodePageName[260];
};

/* 7914 */
struct tagAUXCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 7915 */
struct timecaps_tag
{
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
};

/* 7916 */
struct tagMCI_OVLY_SAVE_PARMSW
{
  unsigned int dwCallback;
  const wchar_t *lpfilename;
  tagRECT rc;
};

/* 7917 */
struct _GET_LENGTH_INFORMATION
{
  _LARGE_INTEGER Length;
};

/* 7918 */
struct __cppobj BiasedLockingNamedCounter : NamedCounter
{
  BiasedLockingCounters _counters;
};

/* 7919 */
struct tagMCI_VD_ESCAPE_PARMSA
{
  unsigned int dwCallback;
  const char *lpstrCommand;
};

/* 7920 */
struct _BCRYPT_DSA_PARAMETER_HEADER
{
  unsigned int cbLength;
  unsigned int dwMagic;
  unsigned int cbKeyLength;
  unsigned __int8 Count[4];
  unsigned __int8 Seed[20];
  unsigned __int8 q[20];
};

/* 7921 */
struct HMONITOR__
{
  int unused;
};

/* 7922 */
struct tagEMRMODIFYWORLDTRANSFORM
{
  tagEMR emr;
  tagXFORM xform;
  unsigned int iMode;
};

/* 7923 */
struct SChannelHookCallInfo
{
  _GUID iid;
  unsigned int cbSize;
  _GUID uCausality;
  unsigned int dwServerPid;
  unsigned int iMethod;
  void *pObject;
};

/* 7924 */
struct __declspec(align(4)) tagEXTLOGFONTA
{
  tagLOGFONTA elfLogFont;
  unsigned __int8 elfFullName[64];
  unsigned __int8 elfStyle[32];
  unsigned int elfVersion;
  unsigned int elfStyleSize;
  unsigned int elfMatch;
  unsigned int elfReserved;
  unsigned __int8 elfVendorId[4];
  unsigned int elfCulture;
  tagPANOSE elfPanose;
};

/* 7925 */
struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int BytesPerCacheLine;
  unsigned int BytesOffsetForCacheAlignment;
  unsigned int BytesPerLogicalSector;
  unsigned int BytesPerPhysicalSector;
  unsigned int BytesOffsetForSectorAlignment;
};

/* 7926 */
struct _PORT_INFO_3W
{
  unsigned int dwStatus;
  wchar_t *pszStatus;
  unsigned int dwSeverity;
};

/* 7927 */
struct _tagPROTOCOLDATA
{
  unsigned int grfFlags;
  unsigned int dwState;
  void *pData;
  unsigned int cbData;
};

/* 7928 */
struct tagMENUITEMINFOA
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HMENU__ *hSubMenu;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  char *dwTypeData;
  unsigned int cch;
  HBITMAP__ *hbmpItem;
};

/* 7929 */
struct tagWAVEINCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7930 */
struct _CERT_ALT_NAME_INFO
{
  unsigned int cAltEntry;
  _CERT_ALT_NAME_ENTRY *rgAltEntry;
};

/* 7931 */
struct _STORAGE_DEVICE_NUMBER
{
  unsigned int DeviceType;
  unsigned int DeviceNumber;
  unsigned int PartitionNumber;
};

/* 7932 */
struct __declspec(align(4)) _DEVICE_SEEK_PENALTY_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int8 IncursSeekPenalty;
};

/* 7933 */
struct _XSAVE_AREA_HEADER
{
  unsigned __int64 Mask;
  unsigned __int64 Reserved[7];
};

/* 7934 */
struct _currencyfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  wchar_t *lpDecimalSep;
  wchar_t *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  wchar_t *lpCurrencySymbol;
};

/* 7935 */
struct tagMCI_OPEN_PARMSW
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const wchar_t *lpstrDeviceType;
  const wchar_t *lpstrElementName;
  const wchar_t *lpstrAlias;
};

/* 7936 */
struct _CERT_BASIC_CONSTRAINTS2_INFO
{
  int fCA;
  int fPathLenConstraint;
  unsigned int dwPathLenConstraint;
};

/* 7937 */
struct __declspec(align(4)) _DEVICE_WRITE_AGGREGATION_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int8 BenefitsFromWriteAggregation;
};

/* 7938 */
struct _BIN_RANGE
{
  _LARGE_INTEGER StartValue;
  _LARGE_INTEGER Length;
};

/* 7939 */
struct __declspec(align(8)) _BIN_COUNT
{
  _BIN_RANGE BinRange;
  unsigned int BinCount;
};

/* 7940 */
struct _BIN_RESULTS
{
  unsigned int NumberOfBins;
  _BIN_COUNT BinCounts[1];
};

/* 7941 */
struct __cppobj IDataAdviseHolder : IUnknown
{
};

/* 7942 */
struct /*VFT*/ IDataAdviseHolder_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Advise)(IDataAdviseHolder *this, IDataObject *, tagFORMATETC *, unsigned int, IAdviseSink *, unsigned int *);
  HRESULT (__stdcall *Unadvise)(IDataAdviseHolder *this, unsigned int);
  HRESULT (__stdcall *EnumAdvise)(IDataAdviseHolder *this, IEnumSTATDATA **);
  HRESULT (__stdcall *SendOnDataChange)(IDataAdviseHolder *this, IDataObject *, unsigned int, unsigned int);
};

/* 7943 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
  wchar_t *pmszRequiredPrivileges;
};

/* 7944 */
struct _TOKEN_DEFAULT_DACL
{
  _ACL *DefaultDacl;
};

/* 7945 */
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
  _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};

/* 7946 */
struct $5ACE225D4D14CE0550A9F5A217E306C5
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
};

/* 7947 */
union $8514277E68A30F7845165D80CC588DC1
{
  $5ACE225D4D14CE0550A9F5A217E306C5 __s0;
  _POINTL dmPosition;
};

/* 7948 */
struct $84BDF2D0EF3E6D92B6C33770B276E406
{
  __int16 dmScale;
  __int16 dmCopies;
};

/* 7949 */
union $8EABB062CA9321F2838D7BC3D9767150
{
  $84BDF2D0EF3E6D92B6C33770B276E406 __s0;
  unsigned int dmDisplayOrientation;
};

/* 7950 */
struct $319163E49F0A6F35652FDFBFBA0FF503
{
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
};

/* 7951 */
union $9A5D9A952FEE8D95A468EE677F73C12C
{
  $319163E49F0A6F35652FDFBFBA0FF503 __s0;
  unsigned int dmDisplayFixedOutput;
};

/* 7952 */
union $309666D137CBB19809FA597AD348B415
{
  unsigned int dmDisplayFlags;
  unsigned int dmNup;
};

/* 7953 */
struct _devicemodeA
{
  unsigned __int8 dmDeviceName[32];
  unsigned __int16 dmSpecVersion;
  unsigned __int16 dmDriverVersion;
  unsigned __int16 dmSize;
  unsigned __int16 dmDriverExtra;
  unsigned int dmFields;
  $8514277E68A30F7845165D80CC588DC1 ___u6;
  $8EABB062CA9321F2838D7BC3D9767150 ___u7;
  $9A5D9A952FEE8D95A468EE677F73C12C ___u8;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  unsigned __int8 dmFormName[32];
  unsigned __int16 dmLogPixels;
  unsigned int dmBitsPerPel;
  unsigned int dmPelsWidth;
  unsigned int dmPelsHeight;
  $309666D137CBB19809FA597AD348B415 ___u19;
  unsigned int dmDisplayFrequency;
  unsigned int dmICMMethod;
  unsigned int dmICMIntent;
  unsigned int dmMediaType;
  unsigned int dmDitherType;
  unsigned int dmReserved1;
  unsigned int dmReserved2;
  unsigned int dmPanningWidth;
  unsigned int dmPanningHeight;
};

/* 7954 */
struct tagEMRLINETO
{
  tagEMR emr;
  _POINTL ptl;
};

/* 7955 */
struct _CERT_LOGOTYPE_EXT_INFO
{
  unsigned int cCommunityLogo;
  _CERT_LOGOTYPE_INFO *rgCommunityLogo;
  _CERT_LOGOTYPE_INFO *pIssuerLogo;
  _CERT_LOGOTYPE_INFO *pSubjectLogo;
  unsigned int cOtherLogo;
  _CERT_OTHER_LOGOTYPE_INFO *rgOtherLogo;
};

/* 7956 */
struct __declspec(align(4)) tagRemBRUSH
{
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 7957 */
struct _SET_PARTITION_INFORMATION
{
  unsigned __int8 PartitionType;
};

/* 7958 */
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
  unsigned int dwDataType;
  unsigned int cbData;
  unsigned __int8 *pData;
};

/* 7959 */
struct $6E35CCFC02D81E31BD4C6BEDD77CB20A
{
  unsigned __int32 NameOffset : 31;
  unsigned __int32 NameIsString : 1;
};

/* 7960 */
union $876F15AEF9E49EA7BF51AA21C314A02A
{
  $6E35CCFC02D81E31BD4C6BEDD77CB20A __s0;
  unsigned int Name;
  unsigned __int16 Id;
};

/* 7961 */
struct $B2E03ED94C06E2E681F8D03FF7FF5CB3
{
  unsigned __int32 OffsetToDirectory : 31;
  unsigned __int32 DataIsDirectory : 1;
};

/* 7962 */
union $2182B6885846AA687A72BD67F58AFA42
{
  unsigned int OffsetToData;
  $B2E03ED94C06E2E681F8D03FF7FF5CB3 __s1;
};

/* 7963 */
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
  $876F15AEF9E49EA7BF51AA21C314A02A ___u0;
  $2182B6885846AA687A72BD67F58AFA42 ___u1;
};

/* 7964 */
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
  unsigned int ulFlags;
  ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
  unsigned int UiAccess;
};

/* 7965 */
struct _GRADIENT_TRIANGLE
{
  unsigned int Vertex1;
  unsigned int Vertex2;
  unsigned int Vertex3;
};

/* 7966 */
struct tagEMRROUNDRECT
{
  tagEMR emr;
  _RECTL rclBox;
  tagSIZE szlCorner;
};

/* 7967 */
struct tagMIXERCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
};

/* 7968 */
struct _ADMINISTRATOR_POWER_POLICY
{
  _SYSTEM_POWER_STATE MinSleep;
  _SYSTEM_POWER_STATE MaxSleep;
  unsigned int MinVideoTimeout;
  unsigned int MaxVideoTimeout;
  unsigned int MinSpindownTimeout;
  unsigned int MaxSpindownTimeout;
};

/* 7969 */
struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
  unsigned int ulFlags;
  unsigned int ulFilenameLength;
  unsigned int ulPathLength;
  const wchar_t *lpFileName;
  const wchar_t *lpFilePath;
};

/* 7970 */
struct _UNLOAD_DLL_DEBUG_INFO
{
  void *lpBaseOfDll;
};

/* 7971 */
struct tagLOGPEN
{
  unsigned int lopnStyle;
  tagPOINT lopnWidth;
  unsigned int lopnColor;
};

/* 7972 */
struct _REMOTE_NAME_INFOW
{
  wchar_t *lpUniversalName;
  wchar_t *lpConnectionName;
  wchar_t *lpRemainingPath;
};

/* 7973 */
struct tagMIDIOUTCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 7974 */
struct _CRL_FIND_ISSUED_FOR_PARA
{
  const _CERT_CONTEXT *pSubjectCert;
  const _CERT_CONTEXT *pIssuerCert;
};

/* 7976 */
union $FA47F85280613D2607EBD8EBA80F8487
{
  const wchar_t *pszTemplate;
  const DLGTEMPLATE *pResource;
};

/* 7977 */
union $812227CFA36A41A97E8F88268D069E46
{
  HICON__ *hIcon;
  const wchar_t *pszIcon;
};

/* 7975 */
struct _PROPSHEETPAGEW
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $FA47F85280613D2607EBD8EBA80F8487 ___u3;
  $812227CFA36A41A97E8F88268D069E46 ___u4;
  const wchar_t *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
  const wchar_t *pszHeaderTitle;
  const wchar_t *pszHeaderSubTitle;
  void *hActCtx;
};

/* 7978 */
union $83C8E2C911F5E2587ECBCD922D9E85F5
{
  unsigned int nStartPage;
  const wchar_t *pStartPage;
};

/* 7979 */
union $4725B8B8F36AC4BE99EB559356AAE6D3
{
  const _PROPSHEETPAGEW *ppsp;
  _PSP **phpage;
};

/* 7980 */
union $BD5EB9FDE2E3341790FAC138F8AD7A05
{
  HBITMAP__ *hbmWatermark;
  const wchar_t *pszbmWatermark;
};

/* 7981 */
union $7788F4001333B9A1F7CEE0522E247CFA
{
  HBITMAP__ *hbmHeader;
  const wchar_t *pszbmHeader;
};

/* 7982 */
struct _PROPSHEETHEADERW_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $812227CFA36A41A97E8F88268D069E46 ___u4;
  const wchar_t *pszCaption;
  unsigned int nPages;
  $83C8E2C911F5E2587ECBCD922D9E85F5 ___u7;
  $4725B8B8F36AC4BE99EB559356AAE6D3 ___u8;
  int (__stdcall *pfnCallback)(HWND__ *, unsigned int, int);
  $BD5EB9FDE2E3341790FAC138F8AD7A05 ___u10;
  HPALETTE__ *hplWatermark;
  $7788F4001333B9A1F7CEE0522E247CFA ___u12;
};

/* 7983 */
struct tagCHOOSECOLORA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HWND__ *hInstance;
  unsigned int rgbResult;
  unsigned int *lpCustColors;
  unsigned int Flags;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpTemplateName;
};

/* 7984 */
struct __cppobj JfrEvent<EventCPUTimeStampCounter>
{
};

/* 7985 */
struct _CONSOLE_READCONSOLE_CONTROL
{
  unsigned int nLength;
  unsigned int nInitialChars;
  unsigned int dwCtrlWakeupMask;
  unsigned int dwControlKeyState;
};

/* 7986 */
struct HTASK__
{
  int unused;
};

/* 7987 */
struct HMMIO__
{
  int unused;
};

/* 7988 */
struct _MMIOINFO
{
  unsigned int dwFlags;
  unsigned int fccIOProc;
  int (__stdcall *pIOProc)(char *, unsigned int, int, int);
  unsigned int wErrorRet;
  HTASK__ *htask;
  int cchBuffer;
  char *pchBuffer;
  char *pchNext;
  char *pchEndRead;
  char *pchEndWrite;
  int lBufOffset;
  int lDiskOffset;
  unsigned int adwInfo[3];
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  HMMIO__ *hmmio;
};

/* 7989 */
struct _CMSG_SIGNER_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB Issuer;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedHash;
  _CRYPT_ATTRIBUTES AuthAttrs;
  _CRYPT_ATTRIBUTES UnauthAttrs;
};

/* 7990 */
struct _JOB_INFO_2A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pNotifyName;
  char *pDatatype;
  char *pPrintProcessor;
  char *pParameters;
  char *pDriverName;
  _devicemodeA *pDevMode;
  char *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
};

/* 7991 */
struct _JOB_INFO_3
{
  unsigned int JobId;
  unsigned int NextJobId;
  unsigned int Reserved;
};

/* 7992 */
struct _ADDJOB_INFO_1W
{
  wchar_t *Path;
  unsigned int JobId;
};

/* 7993 */
struct __declspec(align(4)) SET_POWER_SETTING_VALUE
{
  unsigned int Version;
  _GUID Guid;
  SYSTEM_POWER_CONDITION PowerCondition;
  unsigned int DataLength;
  unsigned __int8 Data[1];
};

/* 7994 */
struct _RIP_INFO
{
  unsigned int dwError;
  unsigned int dwType;
};

/* 7995 */
struct tagLOGBRUSH32
{
  unsigned int lbStyle;
  unsigned int lbColor;
  unsigned int lbHatch;
};

/* 7996 */
struct tagKBDLLHOOKSTRUCT
{
  unsigned int vkCode;
  unsigned int scanCode;
  unsigned int flags;
  unsigned int time;
  unsigned int dwExtraInfo;
};

/* 7997 */
struct $F1C2A376F51C2AF6369AE2CC802D509D
{
  unsigned __int32 Valid : 1;
  unsigned __int32 ShareCount : 3;
  unsigned __int32 Win32Protection : 11;
  unsigned __int32 Shared : 1;
  unsigned __int32 Node : 6;
  unsigned __int32 Locked : 1;
  unsigned __int32 LargePage : 1;
};

/* 7998 */
union _PSAPI_WORKING_SET_EX_BLOCK
{
  unsigned int Flags;
  $F1C2A376F51C2AF6369AE2CC802D509D __s1;
};

/* 7999 */
struct _PSAPI_WORKING_SET_EX_INFORMATION
{
  void *VirtualAddress;
  _PSAPI_WORKING_SET_EX_BLOCK VirtualAttributes;
};

/* 8000 */
struct _SCARD_IO_REQUEST
{
  unsigned int dwProtocol;
  unsigned int cbPciLength;
};

/* 8001 */
struct __cppobj AllocFailStrategy
{
};

/* 8002 */
struct tagLOGBRUSH
{
  unsigned int lbStyle;
  unsigned int lbColor;
  unsigned int lbHatch;
};

/* 8003 */
struct __unaligned __declspec(align(2)) waveformat_tag
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
};

/* 8004 */
struct _PROVIDOR_INFO_1A
{
  char *pName;
  char *pEnvironment;
  char *pDLLName;
};

/* 8005 */
struct __cppobj JfrEvent<EventZStatisticsSampler>
{
};

/* 8006 */
struct __cppobj EventZStatisticsSampler : JfrEvent<EventZStatisticsSampler>
{
};

/* 8007 */
struct _M128A
{
  unsigned __int64 Low;
  __int64 High;
};

/* 8008 */
struct _XSAVE_FORMAT
{
  unsigned __int16 ControlWord;
  unsigned __int16 StatusWord;
  unsigned __int8 TagWord;
  unsigned __int8 Reserved1;
  unsigned __int16 ErrorOpcode;
  unsigned int ErrorOffset;
  unsigned __int16 ErrorSelector;
  unsigned __int16 Reserved2;
  unsigned int DataOffset;
  unsigned __int16 DataSelector;
  unsigned __int16 Reserved3;
  unsigned int MxCsr;
  unsigned int MxCsr_Mask;
  _M128A FloatRegisters[8];
  _M128A XmmRegisters[8];
  unsigned __int8 Reserved4[192];
  unsigned int StackControl[7];
  unsigned int Cr0NpxState;
};

/* 8009 */
struct _XSAVE_AREA
{
  _XSAVE_FORMAT LegacyState;
  _XSAVE_AREA_HEADER Header;
};

/* 8010 */
struct _XSTATE_CONTEXT
{
  unsigned __int64 Mask;
  unsigned int Length;
  unsigned int Reserved1;
  _XSAVE_AREA *Area;
  unsigned int Reserved2;
  void *Buffer;
  unsigned int Reserved3;
};

/* 8011 */
struct __declspec(align(4)) tagCOLORMATCHTOTARGET
{
  tagEMR emr;
  unsigned int dwAction;
  unsigned int dwFlags;
  unsigned int cbName;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 8012 */
struct tagMIXERCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8013 */
struct _CERT_POLICY_ID
{
  unsigned int cCertPolicyElementId;
  char **rgpszCertPolicyElementId;
};

/* 8014 */
struct _CERT_KEY_USAGE_RESTRICTION_INFO
{
  unsigned int cCertPolicyId;
  _CERT_POLICY_ID *rgCertPolicyId;
  _CRYPT_BIT_BLOB RestrictedKeyUsage;
};

/* 8015 */
struct _PRINTER_INFO_1W
{
  unsigned int Flags;
  wchar_t *pDescription;
  wchar_t *pName;
  wchar_t *pComment;
};

/* 8016 */
struct __cppobj IRpcOptions : IUnknown
{
};

/* 8017 */
struct /*VFT*/ IRpcOptions_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  Set *Set;
  HRESULT (__stdcall *Query)(IRpcOptions *this, IUnknown *, tagRPCOPT_PROPERTIES, unsigned int *);
};

/* 8018 */
struct __cppobj JfrEvent<EventMetaspaceAllocationFailure>
{
};

/* 8019 */
struct _ABC
{
  int abcA;
  unsigned int abcB;
  int abcC;
};

/* 8020 */
struct tagJOYCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  char szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  char szRegKey[32];
  char szOEMVxD[260];
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8021 */
struct tagMCI_ANIM_OPEN_PARMSA
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const char *lpstrDeviceType;
  const char *lpstrElementName;
  const char *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 8022 */
struct _CRYPT_PROPERTY_REF
{
  wchar_t *pszProperty;
  unsigned int cbValue;
  unsigned __int8 *pbValue;
};

/* 8023 */
struct _CRYPT_IMAGE_REF
{
  wchar_t *pszImage;
  unsigned int dwFlags;
};

/* 8024 */
struct _CRYPT_PROVIDER_REF
{
  unsigned int dwInterface;
  wchar_t *pszFunction;
  wchar_t *pszProvider;
  unsigned int cProperties;
  _CRYPT_PROPERTY_REF **rgpProperties;
  _CRYPT_IMAGE_REF *pUM;
  _CRYPT_IMAGE_REF *pKM;
};

/* 8025 */
struct __cppobj CodeBlobType
{
};

/* 8026 */
struct __cppobj EncodePNode : EncodeNarrowPtrNode
{
};

/* 8027 */
struct /*VFT*/ AbsINode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 8028 */
struct __cppobj AbsINode : AbsNode
{
};

/* 8029 */
struct _NETINFOSTRUCT
{
  unsigned int cbStructure;
  unsigned int dwProviderVersion;
  unsigned int dwStatus;
  unsigned int dwCharacteristics;
  unsigned int dwHandle;
  unsigned __int16 wNetType;
  unsigned int dwPrinters;
  unsigned int dwDrives;
};

/* 8030 */
struct _SCHANNEL_ALG
{
  unsigned int dwUse;
  unsigned int Algid;
  unsigned int cBits;
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 8031 */
struct _CERT_CREATE_CONTEXT_PARA
{
  unsigned int cbSize;
  void (__stdcall *pfnFree)(void *);
  void *pvFree;
  int (__stdcall *pfnSort)(unsigned int, unsigned int, unsigned int, void *);
  void *pvSort;
};

/* 8032 */
struct _RPC_VERSION
{
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 8033 */
struct _RPC_SYNTAX_IDENTIFIER
{
  _GUID SyntaxGUID;
  _RPC_VERSION SyntaxVersion;
};

/* 8034 */
struct _RPC_MESSAGE
{
  void *Handle;
  unsigned int DataRepresentation;
  void *Buffer;
  unsigned int BufferLength;
  unsigned int ProcNum;
  _RPC_SYNTAX_IDENTIFIER *TransferSyntax;
  void *RpcInterfaceInformation;
  void *ReservedForRuntime;
  void *ManagerEpv;
  void *ImportContext;
  unsigned int RpcFlags;
};

/* 8035 */
struct RPC_DISPATCH_TABLE
{
  unsigned int DispatchTableCount;
  void (__stdcall **DispatchTable)(_RPC_MESSAGE *);
  int Reserved;
};

/* 8036 */
struct _MIDL_SYNTAX_INFO
{
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  const unsigned __int8 *ProcString;
  const unsigned __int16 *FmtStringOffset;
  const unsigned __int8 *TypeString;
  const void *aUserMarshalQuadruple;
  unsigned int pReserved1;
  unsigned int pReserved2;
};

/* 8037 */
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8038 */
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
  _GUID TmIdentity;
  unsigned int Flags;
};

/* 8039 */
struct HKEY__
{
  int unused;
};

/* 8040 */
struct _OVERLAPPED_ENTRY
{
  unsigned int lpCompletionKey;
  _OVERLAPPED *lpOverlapped;
  unsigned int Internal;
  unsigned int dwNumberOfBytesTransferred;
};

/* 8041 */
struct tagEMRSELECTPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
};

/* 8042 */
struct _DSSSEED
{
  unsigned int counter;
  unsigned __int8 seed[20];
};

/* 8043 */
struct _PUBKEYVER3
{
  unsigned int magic;
  unsigned int bitlenP;
  unsigned int bitlenQ;
  unsigned int bitlenJ;
  _DSSSEED DSSSeed;
};

/* 8044 */
struct _CERT_REGISTRY_STORE_ROAMING_PARA
{
  HKEY__ *hKey;
  wchar_t *pwszStoreDirectory;
};

/* 8045 */
struct tagRPCOLEMESSAGE
{
  void *reserved1;
  unsigned int dataRepresentation;
  void *Buffer;
  unsigned int cbBuffer;
  unsigned int iMethod;
  void *reserved2[5];
  unsigned int rpcFlags;
};

/* 8046 */
struct __cppobj IRpcChannelBuffer : IUnknown
{
};

/* 8047 */
struct /*VFT*/ IRpcChannelBuffer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, const _GUID *);
  HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *);
  HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer *this, unsigned int *, void **);
  HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer *this);
};

/* 8048 */
struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
  void *Buffer;
  unsigned int BufferSize;
  void *(__stdcall *pfnAllocate)(unsigned int);
  void (__stdcall *pfnFree)(void *);
  IRpcChannelBuffer *pRpcChannelBuffer;
  unsigned int Reserved[5];
};

/* 8049 */
struct _FILE_ZERO_DATA_INFORMATION
{
  _LARGE_INTEGER FileOffset;
  _LARGE_INTEGER BeyondFinalZero;
};

/* 8050 */
struct _DATATYPES_INFO_1A
{
  char *pName;
};

/* 8051 */
struct __declspec(align(4)) _userBITMAP
{
  int bmType;
  int bmWidth;
  int bmHeight;
  int bmWidthBytes;
  unsigned __int16 bmPlanes;
  unsigned __int16 bmBitsPixel;
  unsigned int cbSize;
  unsigned __int8 pBuffer[1];
};

/* 8052 */
union _userHBITMAP::__MIDL_IWinTypes_0007
{
  int hInproc;
  _userBITMAP *hRemote;
  __int64 hInproc64;
};

/* 8053 */
struct _userHBITMAP
{
  int fContext;
  _userHBITMAP::__MIDL_IWinTypes_0007 u;
};

/* 8054 */
struct tagLOGPALETTE
{
  unsigned __int16 palVersion;
  unsigned __int16 palNumEntries;
  tagPALETTEENTRY palPalEntry[1];
};

/* 8055 */
union _userHPALETTE::__MIDL_IWinTypes_0008
{
  int hInproc;
  tagLOGPALETTE *hRemote;
  __int64 hInproc64;
};

/* 8056 */
struct _userHPALETTE
{
  int fContext;
  _userHPALETTE::__MIDL_IWinTypes_0008 u;
};

/* 8057 */
union _GDI_OBJECT::__MIDL_IAdviseSink_0002
{
  _userHBITMAP *hBitmap;
  _userHPALETTE *hPalette;
  _userHGLOBAL *hGeneric;
};

/* 8058 */
struct _GDI_OBJECT
{
  unsigned int ObjectType;
  _GDI_OBJECT::__MIDL_IAdviseSink_0002 u;
};

/* 8059 */
struct _PERSISTENT_RESERVE_COMMAND::<unnamed_tag>::<unnamed_type_PR_IN>
{
  unsigned __int8 ServiceAction : 5;
  unsigned __int8 Reserved1 : 3;
  unsigned __int16 AllocationLength;
};

/* 8060 */
struct _PERSISTENT_RESERVE_COMMAND::<unnamed_tag>::<unnamed_type_PR_OUT>
{
  unsigned __int8 ServiceAction : 5;
  unsigned __int8 Reserved1 : 3;
  unsigned __int8 Type : 4;
  unsigned __int8 Scope : 4;
  unsigned __int8 ParameterList[];
};

/* 8061 */
union $9D36F3D44DE28FB53FF1263C77567A6A
{
  _PERSISTENT_RESERVE_COMMAND::<unnamed_tag>::<unnamed_type_PR_IN> PR_IN;
  _PERSISTENT_RESERVE_COMMAND::<unnamed_tag>::<unnamed_type_PR_OUT> PR_OUT;
};

/* 8062 */
struct _PERSISTENT_RESERVE_COMMAND
{
  unsigned int Version;
  unsigned int Size;
  $9D36F3D44DE28FB53FF1263C77567A6A ___u2;
};

/* 8063 */
struct __declspec(align(4)) _ENCRYPTION_BUFFER
{
  unsigned int EncryptionOperation;
  unsigned __int8 Private[1];
};

/* 8064 */
struct __cppobj IComThreadingInfo : IUnknown
{
};

/* 8065 */
struct /*VFT*/ IComThreadingInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetCurrentApartmentType)(IComThreadingInfo *this, _APTTYPE *);
  HRESULT (__stdcall *GetCurrentThreadType)(IComThreadingInfo *this, _THDTYPE *);
  HRESULT (__stdcall *GetCurrentLogicalThreadId)(IComThreadingInfo *this, _GUID *);
  HRESULT (__stdcall *SetCurrentLogicalThreadId)(IComThreadingInfo *this, const _GUID *);
};

/* 8066 */
struct _COAUTHIDENTITY
{
  unsigned __int16 *User;
  unsigned int UserLength;
  unsigned __int16 *Domain;
  unsigned int DomainLength;
  unsigned __int16 *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 8067 */
struct _COAUTHINFO
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  wchar_t *pwszServerPrincName;
  unsigned int dwAuthnLevel;
  unsigned int dwImpersonationLevel;
  _COAUTHIDENTITY *pAuthIdentityData;
  unsigned int dwCapabilities;
};

/* 8068 */
struct _COSERVERINFO
{
  unsigned int dwReserved1;
  wchar_t *pwszName;
  _COAUTHINFO *pAuthInfo;
  unsigned int dwReserved2;
};

/* 8069 */
struct __cppobj tagBIND_OPTS2 : tagBIND_OPTS
{
  unsigned int dwTrackFlags;
  unsigned int dwClassContext;
  unsigned int locale;
  _COSERVERINFO *pServerInfo;
};

/* 8070 */
struct __cppobj tagBIND_OPTS3 : tagBIND_OPTS2
{
  HWND__ *hwnd;
};

/* 8071 */
struct _OLESTREAM
{
  _OLESTREAMVTBL *lpstbl;
};

/* 8072 */
struct _OLESTREAMVTBL
{
  unsigned int (__stdcall *Get)(_OLESTREAM *, void *, unsigned int);
  unsigned int (__stdcall *Put)(_OLESTREAM *, const void *, unsigned int);
};

/* 8073 */
struct __cppobj JfrEvent<EventJavaMonitorInflate>
{
};

/* 8074 */
struct __cppobj EventJavaMonitorInflate : JfrEvent<EventJavaMonitorInflate>
{
};

/* 8075 */
struct _WOW64_FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  unsigned __int8 RegisterArea[80];
  unsigned int Cr0NpxState;
};

/* 8076 */
struct _WOW64_CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _WOW64_FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Ebx;
  unsigned int Edx;
  unsigned int Ecx;
  unsigned int Eax;
  unsigned int Ebp;
  unsigned int Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int Esp;
  unsigned int SegSs;
  unsigned __int8 ExtendedRegisters[512];
};

/* 8077 */
struct tagENUMLOGFONTEXA
{
  tagLOGFONTA elfLogFont;
  unsigned __int8 elfFullName[64];
  unsigned __int8 elfStyle[32];
  unsigned __int8 elfScript[32];
};

/* 8078 */
struct tagDESIGNVECTOR
{
  unsigned int dvReserved;
  unsigned int dvNumAxes;
  int dvValues[16];
};

/* 8079 */
struct tagENUMLOGFONTEXDVA
{
  tagENUMLOGFONTEXA elfEnumLogfontEx;
  tagDESIGNVECTOR elfDesignVector;
};

/* 8080 */
struct tagDRAWTEXTPARAMS
{
  unsigned int cbSize;
  int iTabLength;
  int iLeftMargin;
  int iRightMargin;
  unsigned int uiLengthDrawn;
};

/* 8081 */
struct __cppobj JfrEvent<EventSafepointWaitBlocked>
{
};

/* 8082 */
struct __cppobj EventSafepointWaitBlocked : JfrEvent<EventSafepointWaitBlocked>
{
};

/* 8083 */
struct __cppobj JfrEvent<EventUnsignedLongFlag>
{
};

/* 8084 */
struct _TOKEN_ORIGIN
{
  _LUID OriginatingLogonSession;
};

/* 8085 */
struct _PRINTER_INFO_8A
{
  _devicemodeA *pDevMode;
};

/* 8086 */
struct _HARDWARE_COUNTER_DATA
{
  _HARDWARE_COUNTER_TYPE Type;
  unsigned int Reserved;
  unsigned __int64 Value;
};

/* 8087 */
struct __declspec(align(4)) tagPELARRAY
{
  int paXCount;
  int paYCount;
  int paXExt;
  int paYExt;
  unsigned __int8 paRGBs;
};

/* 8088 */
struct tagMDICREATESTRUCTA
{
  const char *szClass;
  const char *szTitle;
  void *hOwner;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int style;
  int lParam;
};

/* 8089 */
struct tagMCI_OPEN_PARMSA
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const char *lpstrDeviceType;
  const char *lpstrElementName;
  const char *lpstrAlias;
};

/* 8090 */
struct tagMCI_SAVE_PARMSW
{
  unsigned int dwCallback;
  const wchar_t *lpfilename;
};

/* 8091 */
struct __GENERIC_BINDING_INFO
{
  void *pObj;
  unsigned int Size;
  void *(__stdcall *pfnBind)(void *);
  void (__stdcall *pfnUnbind)(void *, unsigned __int8 *);
};

/* 8092 */
union _MIDL_STUB_DESC::<unnamed_type_IMPLICIT_HANDLE_INFO>
{
  void **pAutoHandle;
  void **pPrimitiveHandle;
  __GENERIC_BINDING_INFO *pGenericBindingInfo;
};

/* 8093 */
struct _GENERIC_BINDING_ROUTINE_PAIR
{
  void *(__stdcall *pfnBind)(void *);
  void (__stdcall *pfnUnbind)(void *, unsigned __int8 *);
};

/* 8094 */
struct _MIDL_STUB_MESSAGE
{
  _RPC_MESSAGE *RpcMsg;
  unsigned __int8 *Buffer;
  unsigned __int8 *BufferStart;
  unsigned __int8 *BufferEnd;
  unsigned __int8 *BufferMark;
  unsigned int BufferLength;
  unsigned int MemorySize;
  unsigned __int8 *Memory;
  unsigned __int8 IsClient;
  unsigned __int8 Pad;
  unsigned __int16 uFlags2;
  int ReuseBuffer;
  struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
  struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
  int IgnoreEmbeddedPointers;
  unsigned __int8 *PointerBufferMark;
  unsigned __int8 CorrDespIncrement;
  unsigned __int8 uFlags;
  unsigned __int16 UniquePtrCount;
  unsigned int MaxCount;
  unsigned int Offset;
  unsigned int ActualCount;
  void *(__stdcall *pfnAllocate)(unsigned int);
  void (__stdcall *pfnFree)(void *);
  unsigned __int8 *StackTop;
  unsigned __int8 *pPresentedType;
  unsigned __int8 *pTransmitType;
  void *SavedHandle;
  const _MIDL_STUB_DESC *StubDesc;
  _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
  unsigned int FullPtrRefId;
  unsigned int PointerLength;
  __int32 fInDontFree : 1;
  __int32 fDontCallFreeInst : 1;
  __int32 fInOnlyParam : 1;
  __int32 fHasReturn : 1;
  __int32 fHasExtensions : 1;
  __int32 fHasNewCorrDesc : 1;
  __int32 fIsIn : 1;
  __int32 fIsOut : 1;
  __int32 fIsOicf : 1;
  __int32 fBufferValid : 1;
  __int32 fHasMemoryValidateCallback : 1;
  __int32 fInFree : 1;
  __int32 fNeedMCCP : 1;
  __int32 fUnused : 3;
  __int32 fUnused2 : 16;
  unsigned int dwDestContext;
  void *pvDestContext;
  $3FA64165D15A4602C29B2D9B0DA4A5E9 **SavedContextHandles;
  int ParamNumber;
  IRpcChannelBuffer *pRpcChannelBuffer;
  ARRAY_INFO *pArrayInfo;
  unsigned int *SizePtrCountArray;
  unsigned int *SizePtrOffsetArray;
  unsigned int *SizePtrLengthArray;
  void *pArgQueue;
  unsigned int dwStubPhase;
  void *LowStackMark;
  struct _NDR_ASYNC_MESSAGE *pAsyncMsg;
  _NDR_CORRELATION_INFO *pCorrInfo;
  unsigned __int8 *pCorrMemory;
  void *pMemoryList;
  int pCSInfo;
  unsigned __int8 *ConformanceMark;
  unsigned __int8 *VarianceMark;
  int Unused;
  struct _NDR_PROC_CONTEXT *pContext;
  void *ContextHandleHash;
  void *pUserMarshalList;
  int Reserved51_3;
  int Reserved51_4;
  int Reserved51_5;
};

/* 8095 */
const struct _XMIT_ROUTINE_QUINTUPLE
{
  void (__stdcall *pfnTranslateToXmit)(_MIDL_STUB_MESSAGE *);
  void (__stdcall *pfnTranslateFromXmit)(_MIDL_STUB_MESSAGE *);
  void (__stdcall *pfnFreeXmit)(_MIDL_STUB_MESSAGE *);
  void (__stdcall *pfnFreeInst)(_MIDL_STUB_MESSAGE *);
};

/* 8096 */
struct _MALLOC_FREE_STRUCT
{
  void *(__stdcall *pfnAllocate)(unsigned int);
  void (__stdcall *pfnFree)(void *);
};

/* 8097 */
const struct _COMM_FAULT_OFFSETS
{
  __int16 CommOffset;
  __int16 FaultOffset;
};

/* 8098 */
struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
  void (__stdcall *pfnNetSize)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);
  void (__stdcall *pfnToNetCs)(void *, unsigned int, void *, unsigned int, unsigned __int8 *, unsigned int *, unsigned int *);
  void (__stdcall *pfnLocalSize)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);
  void (__stdcall *pfnFromNetCs)(void *, unsigned int, unsigned __int8 *, unsigned int, unsigned int, void *, unsigned int *, unsigned int *);
};

/* 8099 */
const struct _NDR_CS_ROUTINES
{
  _NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
  void (__stdcall **pTagGettingRoutines)(void *, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
};

/* 8100 */
const struct _NDR_EXPR_DESC
{
  const unsigned __int16 *pOffset;
  const unsigned __int8 *pFormatExpr;
};

/* 8101 */
const struct _MIDL_STUB_DESC
{
  void *RpcInterfaceInformation;
  void *(__stdcall *pfnAllocate)(unsigned int);
  void (__stdcall *pfnFree)(void *);
  _MIDL_STUB_DESC::<unnamed_type_IMPLICIT_HANDLE_INFO> IMPLICIT_HANDLE_INFO;
  void (__stdcall *const *apfnNdrRundownRoutines)(void *);
  const _GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
  void (__stdcall *const *apfnExprEval)(_MIDL_STUB_MESSAGE *);
  const _XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
  const unsigned __int8 *pFormatTypes;
  int fCheckBounds;
  unsigned int Version;
  _MALLOC_FREE_STRUCT *pMallocFreeStruct;
  int MIDLVersion;
  const _COMM_FAULT_OFFSETS *CommFaultOffsets;
  const _USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  void (__stdcall *const *NotifyRoutineTable)();
  unsigned int mFlags;
  const _NDR_CS_ROUTINES *CsRoutineTables;
  void *ProxyServerInfo;
  const _NDR_EXPR_DESC *pExprInfo;
};

/* 8102 */
struct $3FA64165D15A4602C29B2D9B0DA4A5E9
{
  void *pad[2];
  void *userContext;
};

/* 8103 */
struct ARRAY_INFO
{
  int Dimension;
  unsigned int *BufferConformanceMark;
  unsigned int *BufferVarianceMark;
  unsigned int *MaxCountArray;
  unsigned int *OffsetArray;
  unsigned int *ActualCountArray;
};

/* 8104 */
struct tagSTYLEBUFW
{
  unsigned int dwStyle;
  wchar_t szDescription[32];
};

/* 8105 */
struct __cppobj JfrEvent<EventCodeCacheConfiguration>
{
};

/* 8106 */
struct _GROUP_AFFINITY
{
  unsigned int Mask;
  unsigned __int16 Group;
  unsigned __int16 Reserved[3];
};

/* 8107 */
struct _PROCESSOR_RELATIONSHIP
{
  unsigned __int8 Flags;
  unsigned __int8 Reserved[21];
  unsigned __int16 GroupCount;
  _GROUP_AFFINITY GroupMask[1];
};

/* 8108 */
struct _POINTFLOAT
{
  float x;
  float y;
};

/* 8109 */
struct _GLYPHMETRICSFLOAT
{
  float gmfBlackBoxX;
  float gmfBlackBoxY;
  _POINTFLOAT gmfptGlyphOrigin;
  float gmfCellIncX;
  float gmfCellIncY;
};

/* 8110 */
union $598610CC988E402B9A82B84B75BDDF21
{
  unsigned int dwValue;
  unsigned int Algid;
  unsigned int dwLength;
};

/* 8111 */
struct _CRYPT_OID_INFO
{
  unsigned int cbSize;
  const char *pszOID;
  const wchar_t *pwszName;
  unsigned int dwGroupId;
  $598610CC988E402B9A82B84B75BDDF21 ___u4;
  _CRYPTOAPI_BLOB ExtraInfo;
};

/* 8112 */
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
  void (__stdcall *pfnCompletion)(void *, unsigned int, const char *, char *, void *);
  void *pvCompletion;
};

/* 8113 */
struct __cppobj JfrEvent<EventStringFlagChanged>
{
};

/* 8114 */
struct __cppobj EventStringFlagChanged : JfrEvent<EventStringFlagChanged>
{
};

/* 8115 */
struct _SYSTEM_ALARM_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 8116 */
struct _IMAGE_FUNCTION_ENTRY
{
  unsigned int StartingAddress;
  unsigned int EndingAddress;
  unsigned int EndOfPrologue;
};

/* 8117 */
struct tagFONTSIGNATURE
{
  unsigned int fsUsb[4];
  unsigned int fsCsb[2];
};

/* 8118 */
struct _STORAGE_PRIORITY_HINT_SUPPORT
{
  unsigned int SupportFlags;
};

/* 8119 */
struct _DRIVERSTATUS
{
  unsigned __int8 bDriverError;
  unsigned __int8 bIDEError;
  unsigned __int8 bReserved[2];
  unsigned int dwReserved[2];
};

/* 8120 */
struct _SERVICE_NOTIFY_2W
{
  unsigned int dwVersion;
  void (__stdcall *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
  unsigned int dwNotificationTriggered;
  wchar_t *pszServiceNames;
};

/* 8121 */
struct __cppobj JfrEvent<EventClassLoaderStatistics>
{
};

/* 8122 */
struct __cppobj EventClassLoaderStatistics : JfrEvent<EventClassLoaderStatistics>
{
};

/* 8123 */
struct POWER_ACTION_POLICY
{
  POWER_ACTION Action;
  unsigned int Flags;
  unsigned int EventCode;
};

/* 8124 */
struct SYSTEM_POWER_LEVEL
{
  unsigned __int8 Enable;
  unsigned __int8 Spare[3];
  unsigned int BatteryLevel;
  POWER_ACTION_POLICY PowerPolicy;
  _SYSTEM_POWER_STATE MinSystemState;
};

/* 8125 */
struct _IMAGE_OS2_HEADER
{
  unsigned __int16 ne_magic;
  char ne_ver;
  char ne_rev;
  unsigned __int16 ne_enttab;
  unsigned __int16 ne_cbenttab;
  int ne_crc;
  unsigned __int16 ne_flags;
  unsigned __int16 ne_autodata;
  unsigned __int16 ne_heap;
  unsigned __int16 ne_stack;
  int ne_csip;
  int ne_sssp;
  unsigned __int16 ne_cseg;
  unsigned __int16 ne_cmod;
  unsigned __int16 ne_cbnrestab;
  unsigned __int16 ne_segtab;
  unsigned __int16 ne_rsrctab;
  unsigned __int16 ne_restab;
  unsigned __int16 ne_modtab;
  unsigned __int16 ne_imptab;
  int ne_nrestab;
  unsigned __int16 ne_cmovent;
  unsigned __int16 ne_align;
  unsigned __int16 ne_cres;
  unsigned __int8 ne_exetyp;
  unsigned __int8 ne_flagsothers;
  unsigned __int16 ne_pretthunks;
  unsigned __int16 ne_psegrefbytes;
  unsigned __int16 ne_swaparea;
  unsigned __int16 ne_expver;
};

/* 8126 */
struct _MESSAGE_RESOURCE_BLOCK
{
  unsigned int LowId;
  unsigned int HighId;
  unsigned int OffsetToEntries;
};

/* 8127 */
struct tagACTCTXA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  const char *lpSource;
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wLangId;
  const char *lpAssemblyDirectory;
  const char *lpResourceName;
  const char *lpApplicationName;
  HINSTANCE__ *hModule;
};

/* 8128 */
struct SCARD_T1_REQUEST
{
  _SCARD_IO_REQUEST ioRequest;
};

/* 8129 */
struct _DRIVER_INFO_4A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
};

/* 8130 */
struct _ENLISTMENT_CRM_INFORMATION
{
  _GUID CrmTransactionManagerId;
  _GUID CrmResourceManagerId;
  _GUID CrmEnlistmentId;
};

/* 8131 */
struct tagEMRSETDIBITSTODEVICE
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  unsigned int iUsageSrc;
  unsigned int iStartScan;
  unsigned int cScans;
};

/* 8132 */
struct tagOBJECTDESCRIPTOR
{
  unsigned int cbSize;
  _GUID clsid;
  unsigned int dwDrawAspect;
  tagSIZE sizel;
  _POINTL pointl;
  unsigned int dwStatus;
  unsigned int dwFullUserTypeName;
  unsigned int dwSrcOfCopy;
};

/* 8133 */
struct _OFNOTIFYW
{
  tagNMHDR hdr;
  tagOFNW *lpOFN;
  wchar_t *pszFile;
};

/* 8134 */
struct _SERVICE_DELAYED_AUTO_START_INFO
{
  int fDelayedAutostart;
};

/* 8135 */
struct __cppobj JfrEvent<EventSafepointCleanup>
{
};

/* 8136 */
struct __cppobj EventSafepointCleanup : JfrEvent<EventSafepointCleanup>
{
};

/* 8137 */
struct HSZ__
{
  int unused;
};

/* 8138 */
struct HCONV__
{
  int unused;
};

/* 8139 */
struct tagMONCONVSTRUCT
{
  unsigned int cb;
  int fConnect;
  unsigned int dwTime;
  void *hTask;
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
  HCONV__ *hConvClient;
  HCONV__ *hConvServer;
};

/* 8140 */
struct tagMCI_PLAY_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 8141 */
struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  unsigned int dwQualifiers;
  unsigned int dwIssuanceUsageIndex;
};

/* 8142 */
struct _DISK_CACHE_INFORMATION::<unnamed_tag>::<unnamed_type_ScalarPrefetch>
{
  unsigned __int16 Minimum;
  unsigned __int16 Maximum;
  unsigned __int16 MaximumBlocks;
};

/* 8143 */
struct _DISK_CACHE_INFORMATION::<unnamed_tag>::<unnamed_type_BlockPrefetch>
{
  unsigned __int16 Minimum;
  unsigned __int16 Maximum;
};

/* 8144 */
union $93139822522C083EC0649E500B2B6AA6
{
  _DISK_CACHE_INFORMATION::<unnamed_tag>::<unnamed_type_ScalarPrefetch> ScalarPrefetch;
  _DISK_CACHE_INFORMATION::<unnamed_tag>::<unnamed_type_BlockPrefetch> BlockPrefetch;
};

/* 8145 */
struct __declspec(align(4)) _DISK_CACHE_INFORMATION
{
  unsigned __int8 ParametersSavable;
  unsigned __int8 ReadCacheEnabled;
  unsigned __int8 WriteCacheEnabled;
  DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
  DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
  unsigned __int16 DisablePrefetchTransferLength;
  unsigned __int8 PrefetchScalar;
  $93139822522C083EC0649E500B2B6AA6 ___u7;
};

/* 8146 */
struct tagACTCTXW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  const wchar_t *lpSource;
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wLangId;
  const wchar_t *lpAssemblyDirectory;
  const wchar_t *lpResourceName;
  const wchar_t *lpApplicationName;
  HINSTANCE__ *hModule;
};

/* 8147 */
struct NCryptProviderName
{
  wchar_t *pszName;
  wchar_t *pszComment;
};

/* 8148 */
struct __cppobj std::_Init_locks
{
};

/* 8149 */
struct std::_Bool_struct
{
  int _Member;
};

/* 8150 */
struct __cppobj std::_Lockit
{
  int _Locktype;
};

/* 8151 */
struct _ACCESS_ALLOWED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8152 */
union _CLIENT_CALL_RETURN
{
  void *Pointer;
  int Simple;
};

/* 8153 */
struct _PROPSHEETHEADERW_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $812227CFA36A41A97E8F88268D069E46 ___u4;
  const wchar_t *pszCaption;
  unsigned int nPages;
  $83C8E2C911F5E2587ECBCD922D9E85F5 ___u7;
  $4725B8B8F36AC4BE99EB559356AAE6D3 ___u8;
  int (__stdcall *pfnCallback)(HWND__ *, unsigned int, int);
};

/* 8154 */
struct _ADDJOB_INFO_1A
{
  char *Path;
  unsigned int JobId;
};

/* 8155 */
struct tagHEAPLIST32
{
  unsigned int dwSize;
  unsigned int th32ProcessID;
  unsigned int th32HeapID;
  unsigned int dwFlags;
};

/* 8156 */
struct tagMCI_WAVE_OPEN_PARMSA
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const char *lpstrDeviceType;
  const char *lpstrElementName;
  const char *lpstrAlias;
  unsigned int dwBufferSeconds;
};

/* 8157 */
struct _CERT_RDN_ATTR
{
  char *pszObjId;
  unsigned int dwValueType;
  _CRYPTOAPI_BLOB Value;
};

/* 8158 */
struct _CERT_RDN
{
  unsigned int cRDNAttr;
  _CERT_RDN_ATTR *rgRDNAttr;
};

/* 8159 */
struct _CERT_STORE_PROV_INFO
{
  unsigned int cbSize;
  unsigned int cStoreProvFunc;
  void **rgpvStoreProvFunc;
  void *hStoreProv;
  unsigned int dwStoreProvFlags;
  void *hStoreProvFuncAddr2;
};

/* 8160 */
struct _NUMA_NODE_RELATIONSHIP
{
  unsigned int NodeNumber;
  unsigned __int8 Reserved[20];
  _GROUP_AFFINITY GroupMask;
};

/* 8161 */
struct _CACHE_RELATIONSHIP
{
  unsigned __int8 Level;
  unsigned __int8 Associativity;
  unsigned __int16 LineSize;
  unsigned int CacheSize;
  _PROCESSOR_CACHE_TYPE Type;
  unsigned __int8 Reserved[20];
  _GROUP_AFFINITY GroupMask;
};

/* 8162 */
union $6619D38BA04CBBE3FFE7C73C1D3AC168
{
  _PROCESSOR_RELATIONSHIP Processor;
  _NUMA_NODE_RELATIONSHIP NumaNode;
  _CACHE_RELATIONSHIP Cache;
  _GROUP_RELATIONSHIP Group;
};

/* 8163 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
  _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  unsigned int Size;
  $6619D38BA04CBBE3FFE7C73C1D3AC168 ___u2;
};

/* 8164 */
struct __declspec(align(8)) VOLUME_BITMAP_BUFFER
{
  _LARGE_INTEGER StartingLcn;
  _LARGE_INTEGER BitmapSize;
  unsigned __int8 Buffer[1];
};

/* 8165 */
struct __cppobj ITypeMarshal : IUnknown
{
};

/* 8166 */
struct /*VFT*/ ITypeMarshal_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Size)(ITypeMarshal *this, void *, unsigned int, void *, unsigned int *);
  HRESULT (__stdcall *Marshal)(ITypeMarshal *this, void *, unsigned int, void *, unsigned int, unsigned __int8 *, unsigned int *);
  HRESULT (__stdcall *Unmarshal)(ITypeMarshal *this, void *, unsigned int, unsigned int, unsigned __int8 *, unsigned int *);
  HRESULT (__stdcall *Free)(ITypeMarshal *this, void *);
};

/* 8167 */
struct LIST_ENTRY32
{
  unsigned int Flink;
  unsigned int Blink;
};

/* 8168 */
struct PROCESSOR_IDLESTATE_INFO
{
  unsigned int TimeCheck;
  unsigned __int8 DemotePercent;
  unsigned __int8 PromotePercent;
  unsigned __int8 Spare[2];
};

/* 8169 */
union $E0927F6BE2F1645595F211B37EFD8766
{
  unsigned __int64 EndOfPrologue;
  unsigned __int64 UnwindInfoAddress;
};

/* 8170 */
struct _IMAGE_FUNCTION_ENTRY64
{
  unsigned __int64 StartingAddress;
  unsigned __int64 EndingAddress;
  $E0927F6BE2F1645595F211B37EFD8766 ___u2;
};

/* 8171 */
struct _EXIT_THREAD_DEBUG_INFO
{
  unsigned int dwExitCode;
};

/* 8172 */
struct tagMCI_GENERIC_PARMS
{
  unsigned int dwCallback;
};

/* 8173 */
struct servent
{
  char *s_name;
  char **s_aliases;
  __int16 s_port;
  char *s_proto;
};

/* 8174 */
struct _PRINTER_INFO_2A
{
  char *pServerName;
  char *pPrinterName;
  char *pShareName;
  char *pPortName;
  char *pDriverName;
  char *pComment;
  char *pLocation;
  _devicemodeA *pDevMode;
  char *pSepFile;
  char *pPrintProcessor;
  char *pDatatype;
  char *pParameters;
  void *pSecurityDescriptor;
  unsigned int Attributes;
  unsigned int Priority;
  unsigned int DefaultPriority;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int Status;
  unsigned int cJobs;
  unsigned int AveragePPM;
};

/* 8175 */
struct __cppobj IParseDisplayName : IUnknown
{
};

/* 8176 */
struct /*VFT*/ IParseDisplayName_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ParseDisplayName)(IParseDisplayName *this, IBindCtx *, wchar_t *, unsigned int *, IMoniker **);
};

/* 8177 */
struct __cppobj IEnumUnknown : IUnknown
{
};

/* 8178 */
struct /*VFT*/ IEnumUnknown_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumUnknown *this, unsigned int, IUnknown **, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumUnknown *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumUnknown *this);
  HRESULT (__stdcall *Clone)(IEnumUnknown *this, IEnumUnknown **);
};

/* 8179 */
struct __cppobj IOleContainer : IParseDisplayName
{
};

/* 8180 */
struct /*VFT*/ IOleContainer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ParseDisplayName)(IParseDisplayName *this, IBindCtx *, wchar_t *, unsigned int *, IMoniker **);
  HRESULT (__stdcall *EnumObjects)(IOleContainer *this, unsigned int, IEnumUnknown **);
  HRESULT (__stdcall *LockContainer)(IOleContainer *this, int);
};

/* 8181 */
struct __cppobj IOleItemContainer : IOleContainer
{
};

/* 8182 */
struct /*VFT*/ IOleItemContainer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ParseDisplayName)(IParseDisplayName *this, IBindCtx *, wchar_t *, unsigned int *, IMoniker **);
  HRESULT (__stdcall *EnumObjects)(IOleContainer *this, unsigned int, IEnumUnknown **);
  HRESULT (__stdcall *LockContainer)(IOleContainer *this, int);
  HRESULT (__stdcall *GetObjectA)(IOleItemContainer *this, wchar_t *, unsigned int, IBindCtx *, const _GUID *, void **);
  HRESULT (__stdcall *GetObjectStorage)(IOleItemContainer *this, wchar_t *, IBindCtx *, const _GUID *, void **);
  HRESULT (__stdcall *IsRunning)(IOleItemContainer *this, wchar_t *);
};

/* 8183 */
struct _ENUM_SERVICE_STATUS_PROCESSA
{
  char *lpServiceName;
  char *lpDisplayName;
  _SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 8184 */
struct __cppobj IWindowForBindingUI : IUnknown
{
};

/* 8185 */
struct /*VFT*/ IWindowForBindingUI_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IWindowForBindingUI *this, const _GUID *, HWND__ **);
};

/* 8186 */
struct tagACCEL
{
  unsigned __int8 fVirt;
  unsigned __int16 key;
  unsigned __int16 cmd;
};

/* 8187 */
struct _CMC_PEND_INFO
{
  _CRYPTOAPI_BLOB PendToken;
  _FILETIME PendTime;
};

/* 8188 */
union $24B1CE4BE5760B9B6F9154EE8C43B7FB
{
  unsigned int dwFailInfo;
  _CMC_PEND_INFO *pPendInfo;
};

/* 8189 */
struct _CMC_STATUS_INFO
{
  unsigned int dwStatus;
  unsigned int cBodyList;
  unsigned int *rgdwBodyList;
  wchar_t *pwszStatusString;
  unsigned int dwOtherInfoChoice;
  $24B1CE4BE5760B9B6F9154EE8C43B7FB ___u5;
};

/* 8190 */
struct _QUOTA_LIMITS
{
  unsigned int PagedPoolLimit;
  unsigned int NonPagedPoolLimit;
  unsigned int MinimumWorkingSetSize;
  unsigned int MaximumWorkingSetSize;
  unsigned int PagefileLimit;
  _LARGE_INTEGER TimeLimit;
};

/* 8191 */
struct tagSERIALKEYSW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  wchar_t *lpszActivePort;
  wchar_t *lpszPort;
  unsigned int iBaudRate;
  unsigned int iPortState;
  unsigned int iActive;
};

/* 8192 */
struct tagMCI_ANIM_OPEN_PARMSW
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const wchar_t *lpstrDeviceType;
  const wchar_t *lpstrElementName;
  const wchar_t *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 8193 */
union $23183F715972D75F676738B275E20F89
{
  unsigned int dwPredefined;
  char *pszObjId;
};

/* 8194 */
struct _CERT_BIOMETRIC_DATA
{
  unsigned int dwTypeOfBiometricDataChoice;
  $23183F715972D75F676738B275E20F89 ___u1;
  _CERT_HASHED_URL HashedUrl;
};

/* 8195 */
struct _CERT_BIOMETRIC_EXT_INFO
{
  unsigned int cBiometricData;
  _CERT_BIOMETRIC_DATA *rgBiometricData;
};

/* 8196 */
struct _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_DiskInfo>
{
  _LARGE_INTEGER Cylinders;
  _STORAGE_MEDIA_TYPE MediaType;
  unsigned int TracksPerCylinder;
  unsigned int SectorsPerTrack;
  unsigned int BytesPerSector;
  unsigned int NumberMediaSides;
  unsigned int MediaCharacteristics;
};

/* 8197 */
struct _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_RemovableDiskInfo>
{
  _LARGE_INTEGER Cylinders;
  _STORAGE_MEDIA_TYPE MediaType;
  unsigned int TracksPerCylinder;
  unsigned int SectorsPerTrack;
  unsigned int BytesPerSector;
  unsigned int NumberMediaSides;
  unsigned int MediaCharacteristics;
};

/* 8198 */
struct _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo>::<unnamed_type_BusSpecificData>::<unnamed_type_ScsiInformation>
{
  unsigned __int8 MediumType;
  unsigned __int8 DensityCode;
};

/* 8199 */
union _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo>::<unnamed_type_BusSpecificData>
{
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo>::<unnamed_type_BusSpecificData>::<unnamed_type_ScsiInformation> ScsiInformation;
};

/* 8200 */
struct __declspec(align(4)) _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo>
{
  _STORAGE_MEDIA_TYPE MediaType;
  unsigned int MediaCharacteristics;
  unsigned int CurrentBlockSize;
  _STORAGE_BUS_TYPE BusType;
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo>::<unnamed_type_BusSpecificData> BusSpecificData;
};

/* 8201 */
union _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>
{
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_DiskInfo> DiskInfo;
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_RemovableDiskInfo> RemovableDiskInfo;
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific>::<unnamed_type_TapeInfo> TapeInfo;
};

/* 8202 */
struct _DEVICE_MEDIA_INFO
{
  _DEVICE_MEDIA_INFO::<unnamed_type_DeviceSpecific> DeviceSpecific;
};

/* 8203 */
struct _GET_MEDIA_TYPES
{
  unsigned int DeviceType;
  unsigned int MediaInfoCount;
  _DEVICE_MEDIA_INFO MediaInfo[1];
};

/* 8204 */
struct _ZONEATTRIBUTES
{
  unsigned int cbSize;
  wchar_t szDisplayName[260];
  wchar_t szDescription[200];
  wchar_t szIconPath[260];
  unsigned int dwTemplateMinLevel;
  unsigned int dwTemplateRecommended;
  unsigned int dwTemplateCurrentLevel;
  unsigned int dwFlags;
};

/* 8205 */
struct __cppobj IInternetZoneManager : IUnknown
{
};

/* 8206 */
struct /*VFT*/ IInternetZoneManager_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetZoneAttributes)(IInternetZoneManager *this, unsigned int, _ZONEATTRIBUTES *);
  HRESULT (__stdcall *SetZoneAttributes)(IInternetZoneManager *this, unsigned int, _ZONEATTRIBUTES *);
  HRESULT (__stdcall *GetZoneCustomPolicy)(IInternetZoneManager *this, unsigned int, const _GUID *, unsigned __int8 **, unsigned int *, _URLZONEREG);
  HRESULT (__stdcall *SetZoneCustomPolicy)(IInternetZoneManager *this, unsigned int, const _GUID *, unsigned __int8 *, unsigned int, _URLZONEREG);
  HRESULT (__stdcall *GetZoneActionPolicy)(IInternetZoneManager *this, unsigned int, unsigned int, unsigned __int8 *, unsigned int, _URLZONEREG);
  HRESULT (__stdcall *SetZoneActionPolicy)(IInternetZoneManager *this, unsigned int, unsigned int, unsigned __int8 *, unsigned int, _URLZONEREG);
  HRESULT (__stdcall *PromptAction)(IInternetZoneManager *this, unsigned int, HWND__ *, const wchar_t *, const wchar_t *, unsigned int);
  HRESULT (__stdcall *LogAction)(IInternetZoneManager *this, unsigned int, const wchar_t *, const wchar_t *, unsigned int);
  HRESULT (__stdcall *CreateZoneEnumerator)(IInternetZoneManager *this, unsigned int *, unsigned int *, unsigned int);
  HRESULT (__stdcall *GetZoneAt)(IInternetZoneManager *this, unsigned int, unsigned int, unsigned int *);
  HRESULT (__stdcall *DestroyZoneEnumerator)(IInternetZoneManager *this, unsigned int);
  HRESULT (__stdcall *CopyTemplatePoliciesToZone)(IInternetZoneManager *this, unsigned int, unsigned int, unsigned int);
};

/* 8207 */
struct __cppobj ICreateTypeInfo : IUnknown
{
};

/* 8208 */
struct /*VFT*/ ICreateTypeInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetGuid)(ICreateTypeInfo *this, const _GUID *);
  HRESULT (__stdcall *SetTypeFlags)(ICreateTypeInfo *this, unsigned int);
  HRESULT (__stdcall *SetDocString)(ICreateTypeInfo *this, wchar_t *);
  HRESULT (__stdcall *SetHelpContext)(ICreateTypeInfo *this, unsigned int);
  HRESULT (__stdcall *SetVersion)(ICreateTypeInfo *this, unsigned __int16, unsigned __int16);
  HRESULT (__stdcall *AddRefTypeInfo)(ICreateTypeInfo *this, ITypeInfo *, unsigned int *);
  HRESULT (__stdcall *AddFuncDesc)(ICreateTypeInfo *this, unsigned int, tagFUNCDESC *);
  HRESULT (__stdcall *AddImplType)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetImplTypeFlags)(ICreateTypeInfo *this, unsigned int, int);
  HRESULT (__stdcall *SetAlignment)(ICreateTypeInfo *this, unsigned __int16);
  HRESULT (__stdcall *SetSchema)(ICreateTypeInfo *this, wchar_t *);
  HRESULT (__stdcall *AddVarDesc)(ICreateTypeInfo *this, unsigned int, tagVARDESC *);
  HRESULT (__stdcall *SetFuncAndParamNames)(ICreateTypeInfo *this, unsigned int, wchar_t **, unsigned int);
  HRESULT (__stdcall *SetVarName)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetTypeDescAlias)(ICreateTypeInfo *this, tagTYPEDESC *);
  HRESULT (__stdcall *DefineFuncAsDllEntry)(ICreateTypeInfo *this, unsigned int, wchar_t *, wchar_t *);
  HRESULT (__stdcall *SetFuncDocString)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetVarDocString)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetFuncHelpContext)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetVarHelpContext)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetMops)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetTypeIdldesc)(ICreateTypeInfo *this, tagIDLDESC *);
  HRESULT (__stdcall *LayOut)(ICreateTypeInfo *this);
};

/* 8209 */
struct __cppobj ICreateTypeLib : IUnknown
{
};

/* 8210 */
struct /*VFT*/ ICreateTypeLib_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateTypeInfo)(ICreateTypeLib *this, wchar_t *, tagTYPEKIND, ICreateTypeInfo **);
  HRESULT (__stdcall *SetName)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetVersion)(ICreateTypeLib *this, unsigned __int16, unsigned __int16);
  HRESULT (__stdcall *SetGuid)(ICreateTypeLib *this, const _GUID *);
  HRESULT (__stdcall *SetDocString)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetHelpFileName)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetHelpContext)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SetLcid)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SetLibFlags)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SaveAllChanges)(ICreateTypeLib *this);
};

/* 8211 */
struct __cppobj ICreateTypeLib2 : ICreateTypeLib
{
};

/* 8212 */
struct /*VFT*/ ICreateTypeLib2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateTypeInfo)(ICreateTypeLib *this, wchar_t *, tagTYPEKIND, ICreateTypeInfo **);
  HRESULT (__stdcall *SetName)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetVersion)(ICreateTypeLib *this, unsigned __int16, unsigned __int16);
  HRESULT (__stdcall *SetGuid)(ICreateTypeLib *this, const _GUID *);
  HRESULT (__stdcall *SetDocString)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetHelpFileName)(ICreateTypeLib *this, wchar_t *);
  HRESULT (__stdcall *SetHelpContext)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SetLcid)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SetLibFlags)(ICreateTypeLib *this, unsigned int);
  HRESULT (__stdcall *SaveAllChanges)(ICreateTypeLib *this);
  HRESULT (__stdcall *DeleteTypeInfo)(ICreateTypeLib2 *this, wchar_t *);
  HRESULT (__stdcall *SetCustData)(ICreateTypeLib2 *this, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetHelpStringContext)(ICreateTypeLib2 *this, unsigned int);
  HRESULT (__stdcall *SetHelpStringDll)(ICreateTypeLib2 *this, wchar_t *);
};

/* 8213 */
struct tagPSDA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  unsigned int Flags;
  tagPOINT ptPaperSize;
  tagRECT rtMinMargin;
  tagRECT rtMargin;
  HINSTANCE__ *hInstance;
  int lCustData;
  unsigned int (__stdcall *lpfnPageSetupHook)(HWND__ *, unsigned int, unsigned int, int);
  unsigned int (__stdcall *lpfnPagePaintHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpPageSetupTemplateName;
  void *hPageSetupTemplate;
};

/* 8214 */
struct _PROPSHEETHEADERA_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $196C3329479FA964FD47E623CF5615B3 ___u4;
  const char *pszCaption;
  unsigned int nPages;
  $E3CAD8411F77256CCB020CE77D197F57 ___u7;
  $6C52E29C553C65BD73B5502998E7AB46 ___u8;
  int (__stdcall *pfnCallback)(HWND__ *, unsigned int, int);
};

/* 8215 */
struct _PRINTER_DEFAULTSA
{
  char *pDatatype;
  _devicemodeA *pDevMode;
  unsigned int DesiredAccess;
};

/* 8216 */
struct __cppobj CompactibleSpaceClosure : StackObj
{
  CompactibleSpaceClosure_vtbl *__vftable /*VFT*/;
};

/* 8217 */
struct /*VFT*/ CompactibleSpaceClosure_vtbl
{
  void (__thiscall *do_space)(CompactibleSpaceClosure *this, CompactibleSpace *);
};

/* 8218 */
struct _TOKEN_LINKED_TOKEN
{
  void *LinkedToken;
};

/* 8219 */
struct _NETCONNECTINFOSTRUCT
{
  unsigned int cbStructure;
  unsigned int dwFlags;
  unsigned int dwSpeed;
  unsigned int dwDelay;
  unsigned int dwOptDataSize;
};

/* 8220 */
struct _CMS_DH_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Algid;
  char *pszContentEncObjId;
  _CRYPTOAPI_BLOB PubInfo;
  void *pReserved;
};

/* 8221 */
struct _SERVICE_TRIGGER
{
  unsigned int dwTriggerType;
  unsigned int dwAction;
  _GUID *pTriggerSubtype;
  unsigned int cDataItems;
  _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *pDataItems;
};

/* 8222 */
struct _IMAGE_SYMBOL::<unnamed_type_N>::<unnamed_type_Name>
{
  unsigned int Short;
  unsigned int Long;
};

/* 8223 */
union _IMAGE_SYMBOL::<unnamed_type_N>
{
  unsigned __int8 ShortName[8];
  _IMAGE_SYMBOL::<unnamed_type_N>::<unnamed_type_Name> Name;
  unsigned int LongName[2];
};

/* 8224 */
struct __unaligned __declspec(align(2)) _IMAGE_SYMBOL
{
  _IMAGE_SYMBOL::<unnamed_type_N> N;
  unsigned int Value;
  __int16 SectionNumber;
  unsigned __int16 Type;
  unsigned __int8 StorageClass;
  unsigned __int8 NumberOfAuxSymbols;
};

/* 8225 */
struct __declspec(align(8)) _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
  unsigned int ulFlags;
  unsigned int ulEncodedAssemblyIdentityLength;
  unsigned int ulManifestPathType;
  unsigned int ulManifestPathLength;
  _LARGE_INTEGER liManifestLastWriteTime;
  unsigned int ulPolicyPathType;
  unsigned int ulPolicyPathLength;
  _LARGE_INTEGER liPolicyLastWriteTime;
  unsigned int ulMetadataSatelliteRosterIndex;
  unsigned int ulManifestVersionMajor;
  unsigned int ulManifestVersionMinor;
  unsigned int ulPolicyVersionMajor;
  unsigned int ulPolicyVersionMinor;
  unsigned int ulAssemblyDirectoryNameLength;
  const wchar_t *lpAssemblyEncodedAssemblyIdentity;
  const wchar_t *lpAssemblyManifestPath;
  const wchar_t *lpAssemblyPolicyPath;
  const wchar_t *lpAssemblyDirectoryName;
  unsigned int ulFileCount;
};

/* 8226 */
struct _tagBINDINFO
{
  unsigned int cbSize;
  wchar_t *szExtraInfo;
  tagSTGMEDIUM stgmedData;
  unsigned int grfBindInfoF;
  unsigned int dwBindVerb;
  wchar_t *szCustomVerb;
  unsigned int cbstgmedData;
  unsigned int dwOptions;
  unsigned int dwOptionsFlags;
  unsigned int dwCodePage;
  _SECURITY_ATTRIBUTES securityAttributes;
  _GUID iid;
  IUnknown *pUnk;
  unsigned int dwReserved;
};

/* 8227 */
struct __cppobj IInternetBindInfo : IUnknown
{
};

/* 8228 */
struct /*VFT*/ IInternetBindInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBindInfo)(IInternetBindInfo *this, unsigned int *, _tagBINDINFO *);
  HRESULT (__stdcall *GetBindString)(IInternetBindInfo *this, unsigned int, wchar_t **, unsigned int, unsigned int *);
};

/* 8229 */
struct __cppobj IInternetProtocolRoot : IUnknown
{
};

/* 8230 */
struct /*VFT*/ IInternetProtocolRoot_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Start)(IInternetProtocolRoot *this, const wchar_t *, IInternetProtocolSink *, IInternetBindInfo *, unsigned int, unsigned int);
  HRESULT (__stdcall *Continue)(IInternetProtocolRoot *this, _tagPROTOCOLDATA *);
  HRESULT (__stdcall *Abort)(IInternetProtocolRoot *this, HRESULT, unsigned int);
  HRESULT (__stdcall *Terminate)(IInternetProtocolRoot *this, unsigned int);
  HRESULT (__stdcall *Suspend)(IInternetProtocolRoot *this);
  HRESULT (__stdcall *Resume)(IInternetProtocolRoot *this);
};

/* 8231 */
struct __cppobj IInternetProtocol : IInternetProtocolRoot
{
};

/* 8232 */
struct /*VFT*/ IInternetProtocol_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Start)(IInternetProtocolRoot *this, const wchar_t *, IInternetProtocolSink *, IInternetBindInfo *, unsigned int, unsigned int);
  HRESULT (__stdcall *Continue)(IInternetProtocolRoot *this, _tagPROTOCOLDATA *);
  HRESULT (__stdcall *Abort)(IInternetProtocolRoot *this, HRESULT, unsigned int);
  HRESULT (__stdcall *Terminate)(IInternetProtocolRoot *this, unsigned int);
  HRESULT (__stdcall *Suspend)(IInternetProtocolRoot *this);
  HRESULT (__stdcall *Resume)(IInternetProtocolRoot *this);
  HRESULT (__stdcall *Read)(IInternetProtocol *this, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Seek)(IInternetProtocol *this, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
  HRESULT (__stdcall *LockRequest)(IInternetProtocol *this, unsigned int);
  HRESULT (__stdcall *UnlockRequest)(IInternetProtocol *this);
};

/* 8233 */
struct tagDROPSTRUCT
{
  HWND__ *hwndSource;
  HWND__ *hwndSink;
  unsigned int wFmt;
  unsigned int dwData;
  tagPOINT ptDrop;
  unsigned int dwControlData;
};

/* 8234 */
struct __declspec(align(4)) _SECURITY_QUALITY_OF_SERVICE
{
  unsigned int Length;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  unsigned __int8 ContextTrackingMode;
  unsigned __int8 EffectiveOnly;
};

/* 8235 */
struct tagCONVCONTEXT
{
  unsigned int cb;
  unsigned int wFlags;
  unsigned int wCountryID;
  int iCodePage;
  unsigned int dwLangID;
  unsigned int dwSecurity;
  _SECURITY_QUALITY_OF_SERVICE qos;
};

/* 8236 */
struct __unaligned __declspec(align(1)) _SENDCMDOUTPARAMS
{
  unsigned int cBufferSize;
  _DRIVERSTATUS DriverStatus;
  unsigned __int8 bBuffer[1];
};

/* 8237 */
struct __declspec(align(4)) _PATHNAME_BUFFER
{
  unsigned int PathNameLength;
  wchar_t Name[1];
};

/* 8238 */
struct _JOB_INFO_1A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pDatatype;
  char *pStatus;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int TotalPages;
  unsigned int PagesPrinted;
  _SYSTEMTIME Submitted;
};

/* 8239 */
struct _TOKEN_GROUPS_AND_PRIVILEGES
{
  unsigned int SidCount;
  unsigned int SidLength;
  _SID_AND_ATTRIBUTES *Sids;
  unsigned int RestrictedSidCount;
  unsigned int RestrictedSidLength;
  _SID_AND_ATTRIBUTES *RestrictedSids;
  unsigned int PrivilegeCount;
  unsigned int PrivilegeLength;
  _LUID_AND_ATTRIBUTES *Privileges;
  _LUID AuthenticationId;
};

/* 8240 */
struct tagMSLLHOOKSTRUCT
{
  tagPOINT pt;
  unsigned int mouseData;
  unsigned int flags;
  unsigned int time;
  unsigned int dwExtraInfo;
};

/* 8241 */
struct _SEC_WINNT_AUTH_IDENTITY_W
{
  unsigned __int16 *User;
  unsigned int UserLength;
  unsigned __int16 *Domain;
  unsigned int DomainLength;
  unsigned __int16 *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 8242 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
  _SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  unsigned __int16 *ServerCertificateSubject;
};

/* 8243 */
union _RPC_SECURITY_QOS_V2_W::<unnamed_type_u>
{
  _RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
};

/* 8244 */
struct _RPC_SECURITY_QOS_V2_W
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  _RPC_SECURITY_QOS_V2_W::<unnamed_type_u> u;
};

/* 8245 */
struct _SID
{
  unsigned __int8 Revision;
  unsigned __int8 SubAuthorityCount;
  _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  unsigned int SubAuthority[1];
};

/* 8246 */
struct _CERTIFICATE_BLOB
{
  unsigned int dwCertEncodingType;
  unsigned int cbData;
  unsigned __int8 *pbData;
};

/* 8247 */
struct _ENCRYPTION_CERTIFICATE
{
  unsigned int cbTotalLength;
  _SID *pUserSid;
  _CERTIFICATE_BLOB *pCertBlob;
};

/* 8248 */
struct _STORAGE_PREDICT_FAILURE
{
  unsigned int PredictFailure;
  unsigned __int8 VendorSpecific[512];
};

/* 8249 */
struct _devicemodeW
{
  wchar_t dmDeviceName[32];
  unsigned __int16 dmSpecVersion;
  unsigned __int16 dmDriverVersion;
  unsigned __int16 dmSize;
  unsigned __int16 dmDriverExtra;
  unsigned int dmFields;
  $8514277E68A30F7845165D80CC588DC1 ___u6;
  $8EABB062CA9321F2838D7BC3D9767150 ___u7;
  $9A5D9A952FEE8D95A468EE677F73C12C ___u8;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  wchar_t dmFormName[32];
  unsigned __int16 dmLogPixels;
  unsigned int dmBitsPerPel;
  unsigned int dmPelsWidth;
  unsigned int dmPelsHeight;
  $309666D137CBB19809FA597AD348B415 ___u19;
  unsigned int dmDisplayFrequency;
  unsigned int dmICMMethod;
  unsigned int dmICMIntent;
  unsigned int dmMediaType;
  unsigned int dmDitherType;
  unsigned int dmReserved1;
  unsigned int dmReserved2;
  unsigned int dmPanningWidth;
  unsigned int dmPanningHeight;
};

/* 8250 */
struct _JOB_INFO_4W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pNotifyName;
  wchar_t *pDatatype;
  wchar_t *pPrintProcessor;
  wchar_t *pParameters;
  wchar_t *pDriverName;
  _devicemodeW *pDevMode;
  wchar_t *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
  int SizeHigh;
};

/* 8251 */
struct tagIMEMENUITEMINFOA
{
  unsigned int cbSize;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  char szString[80];
  HBITMAP__ *hbmpItem;
};

/* 8252 */
struct JDK1_1InitArgs
{
  int version;
  char **properties;
  int checkSource;
  int nativeStackSize;
  int javaStackSize;
  int minHeapSize;
  int maxHeapSize;
  int verifyMode;
  char *classpath;
  int (__stdcall *vfprintf)(_iobuf *, const char *, char *);
  void (__stdcall *exit)(int);
  void (__stdcall *abort)();
  int enableClassGC;
  int enableVerboseGC;
  int disableAsyncGC;
  int verbose;
  unsigned __int8 debugging;
  int debugPort;
};

/* 8253 */
struct __cppobj JfrEvent<EventPromotionFailed>
{
};

/* 8254 */
struct __cppobj EventPromotionFailed : JfrEvent<EventPromotionFailed>
{
};

/* 8255 */
struct __cppobj JfrStructCopyFailed
{
};

/* 8256 */
struct tagEXTLOGPEN
{
  unsigned int elpPenStyle;
  unsigned int elpWidth;
  unsigned int elpBrushStyle;
  unsigned int elpColor;
  unsigned int elpHatch;
  unsigned int elpNumEntries;
  unsigned int elpStyleEntry[1];
};

/* 8257 */
struct midievent_tag
{
  unsigned int dwDeltaTime;
  unsigned int dwStreamID;
  unsigned int dwEvent;
  unsigned int dwParms[1];
};

/* 8258 */
struct __cppobj JfrEvent<EventObjectAllocationOutsideTLAB>
{
};

/* 8259 */
struct _OUTLINETEXTMETRICA
{
  unsigned int otmSize;
  tagTEXTMETRICA otmTextMetrics;
  unsigned __int8 otmFiller;
  tagPANOSE otmPanoseNumber;
  unsigned int otmfsSelection;
  unsigned int otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  unsigned int otmEMSquare;
  int otmAscent;
  int otmDescent;
  unsigned int otmLineGap;
  unsigned int otmsCapEmHeight;
  unsigned int otmsXHeight;
  tagRECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  unsigned int otmMacLineGap;
  unsigned int otmusMinimumPPEM;
  tagPOINT otmptSubscriptSize;
  tagPOINT otmptSubscriptOffset;
  tagPOINT otmptSuperscriptSize;
  tagPOINT otmptSuperscriptOffset;
  unsigned int otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  char *otmpFamilyName;
  char *otmpFaceName;
  char *otmpStyleName;
  char *otmpFullName;
};

/* 8260 */
struct tagAUXCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 8261 */
union _userCLIPFORMAT::__MIDL_IWinTypes_0001
{
  unsigned int dwValue;
  wchar_t *pwszName;
};

/* 8262 */
struct _userCLIPFORMAT
{
  int fContext;
  _userCLIPFORMAT::__MIDL_IWinTypes_0001 u;
};

/* 8263 */
struct _CERT_OR_CRL_BLOB
{
  unsigned int dwChoice;
  unsigned int cbEncoded;
  unsigned __int8 *pbEncoded;
};

/* 8264 */
struct _CRYPT_RC2_CBC_PARAMETERS
{
  unsigned int dwVersion;
  int fIV;
  unsigned __int8 rgbIV[8];
};

/* 8265 */
struct _PREVENT_MEDIA_REMOVAL
{
  unsigned __int8 PreventMediaRemoval;
};

/* 8266 */
struct _DOC_INFO_2A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
  unsigned int dwMode;
  unsigned int JobId;
};

/* 8267 */
struct _RASTERIZER_STATUS
{
  __int16 nSize;
  __int16 wFlags;
  __int16 nLanguageID;
};

/* 8268 */
struct $95574E1D25B33B0231919ED30524205C
{
  unsigned __int8 BirthVolumeId[16];
  unsigned __int8 BirthObjectId[16];
  unsigned __int8 DomainId[16];
};

/* 8269 */
union $ABE3DA4821D88A1B4EFD60DBFBB073D3
{
  $95574E1D25B33B0231919ED30524205C __s0;
  unsigned __int8 ExtendedInfo[48];
};

/* 8270 */
struct _FILE_OBJECTID_BUFFER
{
  unsigned __int8 ObjectId[16];
  $ABE3DA4821D88A1B4EFD60DBFBB073D3 ___u1;
};

/* 8271 */
struct _PRINTER_INFO_4A
{
  char *pPrinterName;
  char *pServerName;
  unsigned int Attributes;
};

/* 8272 */
struct tagOFN_NT4A
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpstrFilter;
  char *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  char *lpstrFile;
  unsigned int nMaxFile;
  char *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const char *lpstrInitialDir;
  const char *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const char *lpstrDefExt;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const char *lpTemplateName;
};

/* 8273 */
struct _OFNOTIFYA
{
  tagNMHDR hdr;
  tagOFNA *lpOFN;
  char *pszFile;
};

/* 8274 */
struct _WIN32_FIND_DATAW
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  wchar_t cFileName[260];
  wchar_t cAlternateFileName[14];
};

/* 8275 */
struct _CERT_FORTEZZA_DATA_PROP
{
  unsigned __int8 SerialNumber[8];
  int CertIndex;
  unsigned __int8 CertLabel[36];
};

/* 8276 */
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
  unsigned int cbSize;
  unsigned int dwSignerIndex;
  unsigned int dwUnauthAttrIndex;
};

/* 8277 */
struct _GETVERSIONINPARAMS
{
  unsigned __int8 bVersion;
  unsigned __int8 bRevision;
  unsigned __int8 bReserved;
  unsigned __int8 bIDEDeviceMap;
  unsigned int fCapabilities;
  unsigned int dwReserved[4];
};

/* 8278 */
struct _PRINTER_INFO_8W
{
  _devicemodeW *pDevMode;
};

/* 8279 */
struct tagEMRTEXT
{
  _POINTL ptlReference;
  unsigned int nChars;
  unsigned int offString;
  unsigned int fOptions;
  _RECTL rcl;
  unsigned int offDx;
};

/* 8280 */
struct tagEMRPOLYTEXTOUTA
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int iGraphicsMode;
  float exScale;
  float eyScale;
  int cStrings;
  tagEMRTEXT aemrtext[1];
};

/* 8281 */
struct pcmwaveformat_tag
{
  waveformat_tag wf;
  unsigned __int16 wBitsPerSample;
};

/* 8282 */
struct tagMCI_OVLY_OPEN_PARMSW
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const wchar_t *lpstrDeviceType;
  const wchar_t *lpstrElementName;
  const wchar_t *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 8283 */
struct _DRIVER_INFO_1A
{
  char *pName;
};

/* 8284 */
struct _PRINTER_DEFAULTSW
{
  wchar_t *pDatatype;
  _devicemodeW *pDevMode;
  unsigned int DesiredAccess;
};

/* 8285 */
struct HLSURF__
{
  int unused;
};

/* 8286 */
struct tagBITMAPINFOHEADER
{
  unsigned int biSize;
  int biWidth;
  int biHeight;
  unsigned __int16 biPlanes;
  unsigned __int16 biBitCount;
  unsigned int biCompression;
  unsigned int biSizeImage;
  int biXPelsPerMeter;
  int biYPelsPerMeter;
  unsigned int biClrUsed;
  unsigned int biClrImportant;
};

/* 8287 */
struct tagNEWTEXTMETRICA
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  unsigned __int8 tmFirstChar;
  unsigned __int8 tmLastChar;
  unsigned __int8 tmDefaultChar;
  unsigned __int8 tmBreakChar;
  unsigned __int8 tmItalic;
  unsigned __int8 tmUnderlined;
  unsigned __int8 tmStruckOut;
  unsigned __int8 tmPitchAndFamily;
  unsigned __int8 tmCharSet;
  unsigned int ntmFlags;
  unsigned int ntmSizeEM;
  unsigned int ntmCellHeight;
  unsigned int ntmAvgWidth;
};

/* 8288 */
struct tagNEWTEXTMETRICEXA
{
  tagNEWTEXTMETRICA ntmTm;
  tagFONTSIGNATURE ntmFontSig;
};

/* 8289 */
struct tagAXISINFOA
{
  int axMinValue;
  int axMaxValue;
  unsigned __int8 axAxisName[16];
};

/* 8290 */
struct tagAXESLISTA
{
  unsigned int axlReserved;
  unsigned int axlNumAxes;
  tagAXISINFOA axlAxisInfo[16];
};

/* 8291 */
struct tagENUMTEXTMETRICA
{
  tagNEWTEXTMETRICEXA etmNewTextMetricEx;
  tagAXESLISTA etmAxesList;
};

/* 8292 */
struct _BCRYPT_ECCKEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
};

/* 8293 */
struct _CRYPT_ECC_CMS_SHARED_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPTOAPI_BLOB EntityUInfo;
  unsigned __int8 rgbSuppPubInfo[4];
};

/* 8294 */
struct /*VFT*/ IInternet_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 8295 */
struct __cppobj IInternet : IUnknown
{
};

/* 8296 */
struct __cppobj IInternetProtocolInfo : IUnknown
{
};

/* 8297 */
struct /*VFT*/ IInternetProtocolInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ParseUrl)(IInternetProtocolInfo *this, const wchar_t *, _tagPARSEACTION, unsigned int, wchar_t *, unsigned int, unsigned int *, unsigned int);
  HRESULT (__stdcall *CombineUrl)(IInternetProtocolInfo *this, const wchar_t *, const wchar_t *, unsigned int, wchar_t *, unsigned int, unsigned int *, unsigned int);
  HRESULT (__stdcall *CompareUrl)(IInternetProtocolInfo *this, const wchar_t *, const wchar_t *, unsigned int);
  HRESULT (__stdcall *QueryInfo)(IInternetProtocolInfo *this, const wchar_t *, _tagQUERYOPTION, unsigned int, void *, unsigned int, unsigned int *, unsigned int);
};

/* 8298 */
struct tagEMRSTRETCHDIBITS
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  unsigned int iUsageSrc;
  unsigned int dwRop;
  int cxDest;
  int cyDest;
};

/* 8299 */
struct _BINARY_CONTAINER
{
  unsigned int cbBuf;
  unsigned __int8 *pData;
};

/* 8300 */
union _BIDI_DATA::<unnamed_type_u>
{
  int bData;
  int iData;
  wchar_t *sData;
  float fData;
  _BINARY_CONTAINER biData;
};

/* 8301 */
struct _BIDI_DATA
{
  unsigned int dwBidiType;
  _BIDI_DATA::<unnamed_type_u> u;
};

/* 8302 */
struct _BIDI_RESPONSE_DATA
{
  unsigned int dwResult;
  unsigned int dwReqNumber;
  wchar_t *pSchema;
  _BIDI_DATA data;
};

/* 8303 */
struct _BIDI_RESPONSE_CONTAINER
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _BIDI_RESPONSE_DATA aData[1];
};

/* 8304 */
struct _TP_POOL_STACK_INFORMATION
{
  unsigned int StackReserve;
  unsigned int StackCommit;
};

/* 8305 */
struct _STORAGE_HOTPLUG_INFO
{
  unsigned int Size;
  unsigned __int8 MediaRemovable;
  unsigned __int8 MediaHotplug;
  unsigned __int8 DeviceHotplug;
  unsigned __int8 WriteCacheEnableOverride;
};

/* 8306 */
union $BCD5257052F2DAAF91A32A374615C63E
{
  unsigned int propid;
  wchar_t *lpwstr;
};

/* 8307 */
const struct tagPROPSPEC
{
  unsigned int ulKind;
  $BCD5257052F2DAAF91A32A374615C63E ___u1;
};

/* 8308 */
struct __cppobj IPropertyStorage : IUnknown
{
};

/* 8309 */
struct __declspec(align(4)) tagSTATPROPSTG
{
  wchar_t *lpwstrName;
  unsigned int propid;
  unsigned __int16 vt;
};

/* 8310 */
struct __cppobj IEnumSTATPROPSTG : IUnknown
{
};

/* 8311 */
struct /*VFT*/ IEnumSTATPROPSTG_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumSTATPROPSTG *this, unsigned int, tagSTATPROPSTG *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumSTATPROPSTG *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumSTATPROPSTG *this);
  HRESULT (__stdcall *Clone)(IEnumSTATPROPSTG *this, IEnumSTATPROPSTG **);
};

/* 8312 */
struct tagSTATPROPSETSTG
{
  _GUID fmtid;
  _GUID clsid;
  unsigned int grfFlags;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int dwOSVersion;
};

/* 8313 */
struct /*VFT*/ IPropertyStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ReadMultiple)(IPropertyStorage *this, unsigned int, const tagPROPSPEC *, tagPROPVARIANT *);
  HRESULT (__stdcall *WriteMultiple)(IPropertyStorage *this, unsigned int, const tagPROPSPEC *, const tagPROPVARIANT *, unsigned int);
  HRESULT (__stdcall *DeleteMultiple)(IPropertyStorage *this, unsigned int, const tagPROPSPEC *);
  HRESULT (__stdcall *ReadPropertyNames)(IPropertyStorage *this, unsigned int, const unsigned int *, wchar_t **);
  HRESULT (__stdcall *WritePropertyNames)(IPropertyStorage *this, unsigned int, const unsigned int *, wchar_t *const *);
  HRESULT (__stdcall *DeletePropertyNames)(IPropertyStorage *this, unsigned int, const unsigned int *);
  HRESULT (__stdcall *Commit)(IPropertyStorage *this, unsigned int);
  HRESULT (__stdcall *Revert)(IPropertyStorage *this);
  HRESULT (__stdcall *Enum)(IPropertyStorage *this, IEnumSTATPROPSTG **);
  HRESULT (__stdcall *SetTimes)(IPropertyStorage *this, const _FILETIME *, const _FILETIME *, const _FILETIME *);
  HRESULT (__stdcall *SetClass)(IPropertyStorage *this, const _GUID *);
  HRESULT (__stdcall *Stat)(IPropertyStorage *this, tagSTATPROPSETSTG *);
};

/* 8314 */
struct __unaligned __declspec(align(2)) tagPDW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned __int16 nFromPage;
  unsigned __int16 nToPage;
  unsigned __int16 nMinPage;
  unsigned __int16 nMaxPage;
  unsigned __int16 nCopies;
  HINSTANCE__ *hInstance;
  int lCustData;
  unsigned int (__stdcall *lpfnPrintHook)(HWND__ *, unsigned int, unsigned int, int);
  unsigned int (__stdcall *lpfnSetupHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpPrintTemplateName;
  const wchar_t *lpSetupTemplateName;
  void *hPrintTemplate;
  void *hSetupTemplate;
};

/* 8315 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int SecurityCookie;
  unsigned int SEHandlerTable;
  unsigned int SEHandlerCount;
};

/* 8316 */
struct _TRIVERTEX
{
  int x;
  int y;
  unsigned __int16 Red;
  unsigned __int16 Green;
  unsigned __int16 Blue;
  unsigned __int16 Alpha;
};

/* 8317 */
struct _ACCESS_DENIED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 8318 */
struct __declspec(align(4)) tagTEXTMETRICW
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  wchar_t tmFirstChar;
  wchar_t tmLastChar;
  wchar_t tmDefaultChar;
  wchar_t tmBreakChar;
  unsigned __int8 tmItalic;
  unsigned __int8 tmUnderlined;
  unsigned __int8 tmStruckOut;
  unsigned __int8 tmPitchAndFamily;
  unsigned __int8 tmCharSet;
};

/* 8319 */
struct _OUTLINETEXTMETRICW
{
  unsigned int otmSize;
  tagTEXTMETRICW otmTextMetrics;
  unsigned __int8 otmFiller;
  tagPANOSE otmPanoseNumber;
  unsigned int otmfsSelection;
  unsigned int otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  unsigned int otmEMSquare;
  int otmAscent;
  int otmDescent;
  unsigned int otmLineGap;
  unsigned int otmsCapEmHeight;
  unsigned int otmsXHeight;
  tagRECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  unsigned int otmMacLineGap;
  unsigned int otmusMinimumPPEM;
  tagPOINT otmptSubscriptSize;
  tagPOINT otmptSubscriptOffset;
  tagPOINT otmptSuperscriptSize;
  tagPOINT otmptSuperscriptOffset;
  unsigned int otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  char *otmpFamilyName;
  char *otmpFaceName;
  char *otmpStyleName;
  char *otmpFullName;
};

/* 8320 */
struct sockaddr_in
{
  __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 8321 */
struct _CERT_CRL_CONTEXT_PAIR
{
  const _CERT_CONTEXT *pCertContext;
  const _CRL_CONTEXT *pCrlContext;
};

/* 8322 */
struct __declspec(align(4)) tagRemHPALETTE
{
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 8323 */
struct _DOCINFOA
{
  int cbSize;
  const char *lpszDocName;
  const char *lpszOutput;
  const char *lpszDatatype;
  unsigned int fwType;
};

/* 8324 */
struct MENUITEMTEMPLATEHEADER
{
  unsigned __int16 versionNumber;
  unsigned __int16 offset;
};

/* 8325 */
struct HDDEDATA__
{
  int unused;
};

/* 8326 */
struct _BCRYPT_INTERFACE_VERSION
{
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 8327 */
struct _DRIVER_INFO_6W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  wchar_t *pszMfgName;
  wchar_t *pszOEMUrl;
  wchar_t *pszHardwareID;
  wchar_t *pszProvider;
};

/* 8328 */
struct _SYSTEM_AUDIT_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 8329 */
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
  void *hActCtx;
  unsigned int dwFlags;
};

/* 8330 */
struct _PARTITION_INFORMATION_MBR
{
  unsigned __int8 PartitionType;
  unsigned __int8 BootIndicator;
  unsigned __int8 RecognizedPartition;
  unsigned int HiddenSectors;
};

/* 8331 */
struct _PARTITION_INFORMATION_GPT
{
  _GUID PartitionType;
  _GUID PartitionId;
  unsigned __int64 Attributes;
  wchar_t Name[36];
};

/* 8332 */
union $4FDEA2A23AF8275C51B26401D23290F8
{
  _PARTITION_INFORMATION_MBR Mbr;
  _PARTITION_INFORMATION_GPT Gpt;
};

/* 8333 */
struct _PARTITION_INFORMATION_EX
{
  _PARTITION_STYLE PartitionStyle;
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER PartitionLength;
  unsigned int PartitionNumber;
  unsigned __int8 RewritePartition;
  $4FDEA2A23AF8275C51B26401D23290F8 ___u5;
};

/* 8334 */
struct tagWNDCLASSA
{
  unsigned int style;
  int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const char *lpszMenuName;
  const char *lpszClassName;
};

/* 8335 */
struct __declspec(align(4)) _FLAGGED_WORD_BLOB
{
  unsigned int fFlags;
  unsigned int clSize;
  unsigned __int16 asData[1];
};

/* 8336 */
struct _CHANGER_ELEMENT_LIST
{
  _CHANGER_ELEMENT Element;
  unsigned int NumberOfElements;
};

/* 8337 */
struct __declspec(align(4)) _CHANGER_READ_ELEMENT_STATUS
{
  _CHANGER_ELEMENT_LIST ElementList;
  unsigned __int8 VolumeTagInfo;
};

/* 8338 */
struct _DECRYPTION_STATUS_BUFFER
{
  unsigned __int8 NoEncryptedStreams;
};

/* 8339 */
struct __cppobj IUrlMon : IUnknown
{
};

/* 8340 */
struct /*VFT*/ IUrlMon_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *AsyncGetClassBits)(IUrlMon *this, const _GUID *, const wchar_t *, const wchar_t *, unsigned int, unsigned int, const wchar_t *, IBindCtx *, unsigned int, const _GUID *, unsigned int);
};

/* 8341 */
struct BITMAPV4HEADER
{
  unsigned int bV4Size;
  int bV4Width;
  int bV4Height;
  unsigned __int16 bV4Planes;
  unsigned __int16 bV4BitCount;
  unsigned int bV4V4Compression;
  unsigned int bV4SizeImage;
  int bV4XPelsPerMeter;
  int bV4YPelsPerMeter;
  unsigned int bV4ClrUsed;
  unsigned int bV4ClrImportant;
  unsigned int bV4RedMask;
  unsigned int bV4GreenMask;
  unsigned int bV4BlueMask;
  unsigned int bV4AlphaMask;
  unsigned int bV4CSType;
  tagICEXYZTRIPLE bV4Endpoints;
  unsigned int bV4GammaRed;
  unsigned int bV4GammaGreen;
  unsigned int bV4GammaBlue;
};

/* 8342 */
struct _BLENDFUNCTION
{
  unsigned __int8 BlendOp;
  unsigned __int8 BlendFlags;
  unsigned __int8 SourceConstantAlpha;
  unsigned __int8 AlphaFormat;
};

/* 8343 */
struct _RPC_PROTSEQ_VECTORW
{
  unsigned int Count;
  unsigned __int16 *Protseq[1];
};

/* 8344 */
struct _PUBKEY
{
  unsigned int magic;
  unsigned int bitlen;
};

/* 8345 */
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  unsigned int hCryptProv;
  _CRYPT_BIT_BLOB RecipientPublicKey;
  _CERT_ID RecipientId;
};

/* 8346 */
union $43F1C1DA7A789B0739CE633BCAA43956
{
  _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *pKeyTrans;
  _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *pKeyAgree;
  _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *pMailList;
};

/* 8347 */
struct _CMSG_RECIPIENT_ENCODE_INFO
{
  unsigned int dwRecipientChoice;
  $43F1C1DA7A789B0739CE633BCAA43956 ___u1;
};

/* 8348 */
union $0F1490AD5F7A3D17ACD65F4EF8ACD5E5
{
  unsigned int hContentEncryptKey;
  void *hCNGContentEncryptKey;
};

/* 8349 */
struct _CMSG_CONTENT_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int cRecipients;
  _CMSG_RECIPIENT_ENCODE_INFO *rgCmsRecipients;
  void *(__stdcall *pfnAlloc)(unsigned int);
  void (__stdcall *pfnFree)(void *);
  unsigned int dwEncryptFlags;
  $0F1490AD5F7A3D17ACD65F4EF8ACD5E5 ___u9;
  unsigned int dwFlags;
  int fCNG;
  unsigned __int8 *pbCNGContentEncryptKeyObject;
  unsigned __int8 *pbContentEncryptKey;
  unsigned int cbContentEncryptKey;
};

/* 8350 */
struct __cppobj IRpcProxyBuffer : IUnknown
{
};

/* 8351 */
struct /*VFT*/ IRpcProxyBuffer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Connect)(IRpcProxyBuffer *this, IRpcChannelBuffer *);
  void (__stdcall *Disconnect)(IRpcProxyBuffer *this);
};

/* 8352 */
struct __cppobj IPSFactoryBuffer : IUnknown
{
};

/* 8353 */
struct __cppobj IRpcStubBuffer : IUnknown
{
};

/* 8354 */
struct /*VFT*/ IRpcStubBuffer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Connect)(IRpcStubBuffer *this, IUnknown *);
  void (__stdcall *Disconnect)(IRpcStubBuffer *this);
  Invoke *Invoke;
  IRpcStubBuffer *(__stdcall *IsIIDSupported)(IRpcStubBuffer *this, const _GUID *);
  unsigned int (__stdcall *CountRefs)(IRpcStubBuffer *this);
  HRESULT (__stdcall *DebugServerQueryInterface)(IRpcStubBuffer *this, void **);
  void (__stdcall *DebugServerRelease)(IRpcStubBuffer *this, void *);
};

/* 8355 */
struct /*VFT*/ IPSFactoryBuffer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateProxy)(IPSFactoryBuffer *this, IUnknown *, const _GUID *, IRpcProxyBuffer **, void **);
  HRESULT (__stdcall *CreateStub)(IPSFactoryBuffer *this, const _GUID *, IUnknown *, IRpcStubBuffer **);
};

/* 8356 */
struct _FILEMUIINFO
{
  unsigned int dwSize;
  unsigned int dwVersion;
  unsigned int dwFileType;
  unsigned __int8 pChecksum[16];
  unsigned __int8 pServiceChecksum[16];
  unsigned int dwLanguageNameOffset;
  unsigned int dwTypeIDMainSize;
  unsigned int dwTypeIDMainOffset;
  unsigned int dwTypeNameMainOffset;
  unsigned int dwTypeIDMUISize;
  unsigned int dwTypeIDMUIOffset;
  unsigned int dwTypeNameMUIOffset;
  unsigned __int8 abBuffer[8];
};

/* 8357 */
struct __NCRYPT_UI_POLICY_BLOB
{
  unsigned int dwVersion;
  unsigned int dwFlags;
  unsigned int cbCreationTitle;
  unsigned int cbFriendlyName;
  unsigned int cbDescription;
};

/* 8358 */
struct __cppobj IXMLElement2 : IDispatch
{
};

/* 8359 */
struct __cppobj IXMLElementCollection : IDispatch
{
};

/* 8360 */
struct /*VFT*/ IXMLElementCollection_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *put_length)(IXMLElementCollection *this, int);
  HRESULT (__stdcall *get_length)(IXMLElementCollection *this, int *);
  HRESULT (__stdcall *get__newEnum)(IXMLElementCollection *this, IUnknown **);
  HRESULT (__stdcall *item)(IXMLElementCollection *this, tagVARIANT, tagVARIANT, IDispatch **);
};

/* 8361 */
struct /*VFT*/ IXMLElement2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_tagName)(IXMLElement2 *this, wchar_t **);
  HRESULT (__stdcall *put_tagName)(IXMLElement2 *this, wchar_t *);
  HRESULT (__stdcall *get_parent)(IXMLElement2 *this, IXMLElement2 **);
  HRESULT (__stdcall *setAttribute)(IXMLElement2 *this, wchar_t *, tagVARIANT);
  HRESULT (__stdcall *getAttribute)(IXMLElement2 *this, wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *removeAttribute)(IXMLElement2 *this, wchar_t *);
  HRESULT (__stdcall *get_children)(IXMLElement2 *this, IXMLElementCollection **);
  HRESULT (__stdcall *get_type)(IXMLElement2 *this, int *);
  HRESULT (__stdcall *get_text)(IXMLElement2 *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLElement2 *this, wchar_t *);
  HRESULT (__stdcall *addChild)(IXMLElement2 *this, IXMLElement2 *, int, int);
  HRESULT (__stdcall *removeChild)(IXMLElement2 *this, IXMLElement2 *);
  HRESULT (__stdcall *get_attributes)(IXMLElement2 *this, IXMLElementCollection **);
};

/* 8362 */
struct _TRANSACTION_BIND_INFORMATION
{
  void *TmHandle;
};

/* 8363 */
struct __unaligned __declspec(align(2)) _SHFILEOPSTRUCTW
{
  HWND__ *hwnd;
  unsigned int wFunc;
  const wchar_t *pFrom;
  const wchar_t *pTo;
  unsigned __int16 fFlags;
  int fAnyOperationsAborted;
  void *hNameMappings;
  const wchar_t *lpszProgressTitle;
};

/* 8364 */
struct HUMPD__
{
  int unused;
};

/* 8365 */
struct _CERT_PRIVATE_KEY_VALIDITY
{
  _FILETIME NotBefore;
  _FILETIME NotAfter;
};

/* 8366 */
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
{
  unsigned int cbSize;
  _CRYPTOAPI_BLOB EncryptedKey;
};

/* 8367 */
struct _CMSG_KEY_AGREE_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  unsigned int dwOriginatorChoice;
  $289431123AC80C928951A7C6F1C88E2D ___u5;
  unsigned int cKeyAgreeKeyEncryptInfo;
  _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO **rgpKeyAgreeKeyEncryptInfo;
  unsigned int dwFlags;
};

/* 8368 */
struct _FILE_SET_SPARSE_BUFFER
{
  unsigned __int8 SetSparse;
};

/* 8369 */
struct _PROVIDOR_INFO_2W
{
  wchar_t *pOrder;
};

/* 8370 */
struct _NETRESOURCEA
{
  unsigned int dwScope;
  unsigned int dwType;
  unsigned int dwDisplayType;
  unsigned int dwUsage;
  char *lpLocalName;
  char *lpRemoteName;
  char *lpComment;
  char *lpProvider;
};

/* 8371 */
struct _KEY_TYPE_SUBTYPE
{
  unsigned int dwKeySpec;
  _GUID Type;
  _GUID Subtype;
};

/* 8372 */
struct __cppobj IProcessInitControl : IUnknown
{
};

/* 8373 */
struct /*VFT*/ IProcessInitControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ResetInitializerTimeout)(IProcessInitControl *this, unsigned int);
};

/* 8374 */
struct __cppobj JfrEvent<EventCompilation>
{
};

/* 8375 */
struct __cppobj EventCompilation : JfrEvent<EventCompilation>
{
};

/* 8376 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_11
{
  const void *pVFTable;
  void *spare;
  char name[11];
};

/* 8377 */
struct tagEMRCREATEDIBPATTERNBRUSHPT
{
  tagEMR emr;
  unsigned int ihBrush;
  unsigned int iUsage;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
};

/* 8378 */
struct tagAUXCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8379 */
struct _CHANGER_ELEMENT_STATUS_EX
{
  _CHANGER_ELEMENT Element;
  _CHANGER_ELEMENT SrcElementAddress;
  unsigned int Flags;
  unsigned int ExceptionCode;
  unsigned __int8 TargetId;
  unsigned __int8 Lun;
  unsigned __int16 Reserved;
  unsigned __int8 PrimaryVolumeID[36];
  unsigned __int8 AlternateVolumeID[36];
  unsigned __int8 VendorIdentification[8];
  unsigned __int8 ProductIdentification[16];
  unsigned __int8 SerialNumber[32];
};

/* 8380 */
struct __declspec(align(4)) tagRemSTGMEDIUM
{
  unsigned int tymed;
  unsigned int dwHandleType;
  unsigned int pData;
  unsigned int pUnkForRelease;
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 8381 */
struct SC_HANDLE__
{
  int unused;
};

/* 8382 */
struct _KTMOBJECT_CURSOR
{
  _GUID LastQuery;
  unsigned int ObjectIdCount;
  _GUID ObjectIds[1];
};

/* 8383 */
struct tagPOINTS
{
  __int16 x;
  __int16 y;
};

/* 8384 */
struct tagMOUSEINPUT
{
  int dx;
  int dy;
  unsigned int mouseData;
  unsigned int dwFlags;
  unsigned int time;
  unsigned int dwExtraInfo;
};

/* 8385 */
struct tagKEYBDINPUT
{
  unsigned __int16 wVk;
  unsigned __int16 wScan;
  unsigned int dwFlags;
  unsigned int time;
  unsigned int dwExtraInfo;
};

/* 8386 */
struct tagHARDWAREINPUT
{
  unsigned int uMsg;
  unsigned __int16 wParamL;
  unsigned __int16 wParamH;
};

/* 8387 */
union $3A382271DF123DC48A1091D088A7E726
{
  tagMOUSEINPUT mi;
  tagKEYBDINPUT ki;
  tagHARDWAREINPUT hi;
};

/* 8388 */
struct tagINPUT
{
  unsigned int type;
  $3A382271DF123DC48A1091D088A7E726 ___u1;
};

/* 8389 */
struct _RPC_PROTSEQ_ENDPOINT
{
  unsigned __int8 *RpcProtocolSequence;
  unsigned __int8 *Endpoint;
};

/* 8390 */
struct _DEVICE_DSM_NOTIFICATION_PARAMETERS
{
  unsigned int Size;
  unsigned int Flags;
  unsigned int NumFileTypeIDs;
  _GUID FileTypeID[1];
};

/* 8391 */
struct _DRIVER_INFO_5W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  unsigned int dwDriverAttributes;
  unsigned int dwConfigVersion;
  unsigned int dwDriverVersion;
};

/* 8392 */
struct __cppobj IPersistMoniker : IUnknown
{
};

/* 8393 */
struct /*VFT*/ IPersistMoniker_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersistMoniker *this, _GUID *);
  HRESULT (__stdcall *IsDirty)(IPersistMoniker *this);
  HRESULT (__stdcall *Load)(IPersistMoniker *this, int, IMoniker *, IBindCtx *, unsigned int);
  HRESULT (__stdcall *Save)(IPersistMoniker *this, IMoniker *, IBindCtx *, int);
  HRESULT (__stdcall *SaveCompleted)(IPersistMoniker *this, IMoniker *, IBindCtx *);
  HRESULT (__stdcall *GetCurMoniker)(IPersistMoniker *this, IMoniker **);
};

/* 8394 */
struct _KCRM_PROTOCOL_BLOB
{
  _GUID ProtocolId;
  unsigned int StaticInfoLength;
  unsigned int TransactionIdInfoLength;
  unsigned int Unused1;
  unsigned int Unused2;
};

/* 8395 */
struct _CRYPT_AES_128_KEY_STATE
{
  unsigned __int8 Key[16];
  unsigned __int8 IV[16];
  unsigned __int8 EncryptionState[11][16];
  unsigned __int8 DecryptionState[11][16];
  unsigned __int8 Feedback[16];
};

/* 8396 */
union $F9A1AA9C669A5036464F3ED98AB68F06
{
  _SET_PARTITION_INFORMATION Mbr;
  _PARTITION_INFORMATION_GPT Gpt;
};

/* 8397 */
struct _SET_PARTITION_INFORMATION_EX
{
  _PARTITION_STYLE PartitionStyle;
  $F9A1AA9C669A5036464F3ED98AB68F06 ___u1;
};

/* 8398 */
struct __cppobj Argument : _ValueObj
{
};

/* 8399 */
struct tagPOINTFX
{
  _FIXED x;
  _FIXED y;
};

/* 8400 */
struct _PROV_ENUMALGS_EX
{
  unsigned int aiAlgid;
  unsigned int dwDefaultLen;
  unsigned int dwMinLen;
  unsigned int dwMaxLen;
  unsigned int dwProtocols;
  unsigned int dwNameLen;
  char szName[20];
  unsigned int dwLongNameLen;
  char szLongName[40];
};

/* 8401 */
struct _CERT_X942_DH_VALIDATION_PARAMS
{
  _CRYPT_BIT_BLOB seed;
  unsigned int pgenCounter;
};

/* 8402 */
struct _CERT_X942_DH_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB g;
  _CRYPTOAPI_BLOB q;
  _CRYPTOAPI_BLOB j;
  _CERT_X942_DH_VALIDATION_PARAMS *pValidationParams;
};

/* 8403 */
struct __cppobj IOleWindow : IUnknown
{
};

/* 8404 */
struct /*VFT*/ IOleWindow_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
};

/* 8405 */
struct tagMSG
{
  HWND__ *hwnd;
  unsigned int message;
  unsigned int wParam;
  int lParam;
  unsigned int time;
  tagPOINT pt;
};

/* 8406 */
struct __cppobj IOleInPlaceActiveObject : IOleWindow
{
};

/* 8407 */
struct __cppobj IOleInPlaceUIWindow : IOleWindow
{
};

/* 8408 */
struct /*VFT*/ IOleInPlaceUIWindow_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
  HRESULT (__stdcall *GetBorder)(IOleInPlaceUIWindow *this, tagRECT *);
  HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceUIWindow *this, const tagRECT *);
  HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceUIWindow *this, const tagRECT *);
  HRESULT (__stdcall *SetActiveObject)(IOleInPlaceUIWindow *this, IOleInPlaceActiveObject *, const wchar_t *);
};

/* 8409 */
struct /*VFT*/ IOleInPlaceActiveObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
  HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceActiveObject *this, tagMSG *);
  HRESULT (__stdcall *OnFrameWindowActivate)(IOleInPlaceActiveObject *this, int);
  HRESULT (__stdcall *OnDocWindowActivate)(IOleInPlaceActiveObject *this, int);
  HRESULT (__stdcall *ResizeBorder)(IOleInPlaceActiveObject *this, const tagRECT *, IOleInPlaceUIWindow *, int);
  HRESULT (__stdcall *EnableModeless)(IOleInPlaceActiveObject *this, int);
};

/* 8410 */
struct PPM_WMI_PERF_STATE
{
  unsigned int Frequency;
  unsigned int Power;
  unsigned __int8 PercentFrequency;
  unsigned __int8 IncreaseLevel;
  unsigned __int8 DecreaseLevel;
  unsigned __int8 Type;
  unsigned int IncreaseTime;
  unsigned int DecreaseTime;
  unsigned __int64 Control;
  unsigned __int64 Status;
  unsigned int HitCount;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  unsigned __int64 Reserved3;
};

/* 8411 */
struct PPM_WMI_PERF_STATES_EX
{
  unsigned int Count;
  unsigned int MaxFrequency;
  unsigned int CurrentState;
  unsigned int MaxPerfState;
  unsigned int MinPerfState;
  unsigned int LowestPerfState;
  unsigned int ThermalConstraint;
  unsigned __int8 BusyAdjThreshold;
  unsigned __int8 PolicyType;
  unsigned __int8 Type;
  unsigned __int8 Reserved;
  unsigned int TimerInterval;
  void *TargetProcessors;
  unsigned int PStateHandler;
  unsigned int PStateContext;
  unsigned int TStateHandler;
  unsigned int TStateContext;
  unsigned int FeedbackHandler;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  PPM_WMI_PERF_STATE State[1];
};

/* 8412 */
struct __declspec(align(4)) _COMMPROP
{
  unsigned __int16 wPacketLength;
  unsigned __int16 wPacketVersion;
  unsigned int dwServiceMask;
  unsigned int dwReserved1;
  unsigned int dwMaxTxQueue;
  unsigned int dwMaxRxQueue;
  unsigned int dwMaxBaud;
  unsigned int dwProvSubType;
  unsigned int dwProvCapabilities;
  unsigned int dwSettableParams;
  unsigned int dwSettableBaud;
  unsigned __int16 wSettableData;
  unsigned __int16 wSettableStopParity;
  unsigned int dwCurrentTxQueue;
  unsigned int dwCurrentRxQueue;
  unsigned int dwProvSpec1;
  unsigned int dwProvSpec2;
  wchar_t wcProvChar[1];
};

/* 8413 */
struct tagGUITHREADINFO
{
  unsigned int cbSize;
  unsigned int flags;
  HWND__ *hwndActive;
  HWND__ *hwndFocus;
  HWND__ *hwndCapture;
  HWND__ *hwndMenuOwner;
  HWND__ *hwndMoveSize;
  HWND__ *hwndCaret;
  tagRECT rcCaret;
};

/* 8414 */
struct __declspec(align(4)) _CHANGER_INITIALIZE_ELEMENT_STATUS
{
  _CHANGER_ELEMENT_LIST ElementList;
  unsigned __int8 BarCodeScan;
};

/* 8415 */
struct _PRINTER_ENUM_VALUESW
{
  wchar_t *pValueName;
  unsigned int cbValueName;
  unsigned int dwType;
  unsigned __int8 *pData;
  unsigned int cbData;
};

/* 8416 */
struct _KCRM_TRANSACTION_BLOB
{
  _GUID UOW;
  _GUID TmIdentity;
  unsigned int IsolationLevel;
  unsigned int IsolationFlags;
  unsigned int Timeout;
  wchar_t Description[64];
};

/* 8417 */
struct tagEXTLOGPEN32
{
  unsigned int elpPenStyle;
  unsigned int elpWidth;
  unsigned int elpBrushStyle;
  unsigned int elpColor;
  unsigned int elpHatch;
  unsigned int elpNumEntries;
  unsigned int elpStyleEntry[1];
};

/* 8418 */
struct tagPAINTSTRUCT
{
  HDC__ *hdc;
  int fErase;
  tagRECT rcPaint;
  int fRestore;
  int fIncUpdate;
  unsigned __int8 rgbReserved[32];
};

/* 8419 */
struct _DISCDLGSTRUCTA
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  char *lpLocalName;
  char *lpRemoteName;
  unsigned int dwFlags;
};

/* 8420 */
struct _QUERY_SERVICE_CONFIGW
{
  unsigned int dwServiceType;
  unsigned int dwStartType;
  unsigned int dwErrorControl;
  wchar_t *lpBinaryPathName;
  wchar_t *lpLoadOrderGroup;
  unsigned int dwTagId;
  wchar_t *lpDependencies;
  wchar_t *lpServiceStartName;
  wchar_t *lpDisplayName;
};

/* 8421 */
struct _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 8422 */
struct _SYSTEM_ALARM_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8423 */
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8424 */
struct tagWNDCLASSEXW
{
  unsigned int cbSize;
  unsigned int style;
  int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const wchar_t *lpszMenuName;
  const wchar_t *lpszClassName;
  HICON__ *hIconSm;
};

/* 8425 */
struct tagMONITORINFO
{
  unsigned int cbSize;
  tagRECT rcMonitor;
  tagRECT rcWork;
  unsigned int dwFlags;
};

/* 8426 */
struct __cppobj tagMONITORINFOEXA : tagMONITORINFO
{
  char szDevice[32];
};

/* 8427 */
struct _PROCESS_MEMORY_COUNTERS
{
  unsigned int cb;
  unsigned int PageFaultCount;
  unsigned int PeakWorkingSetSize;
  unsigned int WorkingSetSize;
  unsigned int QuotaPeakPagedPoolUsage;
  unsigned int QuotaPagedPoolUsage;
  unsigned int QuotaPeakNonPagedPoolUsage;
  unsigned int QuotaNonPagedPoolUsage;
  unsigned int PagefileUsage;
  unsigned int PeakPagefileUsage;
};

/* 8428 */
struct _NAME_BUFFER
{
  unsigned __int8 name[16];
  unsigned __int8 name_num;
  unsigned __int8 name_flags;
};

/* 8429 */
struct _CMSG_ENCRYPTED_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
};

/* 8430 */
struct __declspec(align(8)) _PARTITION_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER PartitionLength;
  unsigned int HiddenSectors;
  unsigned int PartitionNumber;
  unsigned __int8 PartitionType;
  unsigned __int8 BootIndicator;
  unsigned __int8 RecognizedPartition;
  unsigned __int8 RewritePartition;
};

/* 8431 */
struct _DOC_INFO_1A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
};

/* 8432 */
struct _PROCESS_MEMORY_COUNTERS_EX
{
  unsigned int cb;
  unsigned int PageFaultCount;
  unsigned int PeakWorkingSetSize;
  unsigned int WorkingSetSize;
  unsigned int QuotaPeakPagedPoolUsage;
  unsigned int QuotaPagedPoolUsage;
  unsigned int QuotaPeakNonPagedPoolUsage;
  unsigned int QuotaNonPagedPoolUsage;
  unsigned int PagefileUsage;
  unsigned int PeakPagefileUsage;
  unsigned int PrivateUsage;
};

/* 8433 */
struct __cppobj JfrEvent<EventLongFlag>
{
};

/* 8434 */
struct __cppobj EventLongFlag : JfrEvent<EventLongFlag>
{
};

/* 8435 */
struct __declspec(align(4)) tagEMRINVERTRGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  unsigned __int8 RgnData[1];
};

/* 8436 */
struct _BCRYPT_OID
{
  unsigned int cbOID;
  unsigned __int8 *pbOID;
};

/* 8437 */
struct _BCRYPT_OID_LIST
{
  unsigned int dwOIDCount;
  _BCRYPT_OID *pOIDs;
};

/* 8438 */
struct tagMCI_VD_ESCAPE_PARMSW
{
  unsigned int dwCallback;
  const wchar_t *lpstrCommand;
};

/* 8439 */
struct __declspec(align(4)) _MODEMSETTINGS
{
  unsigned int dwActualSize;
  unsigned int dwRequiredSize;
  unsigned int dwDevSpecificOffset;
  unsigned int dwDevSpecificSize;
  unsigned int dwCallSetupFailTimer;
  unsigned int dwInactivityTimeout;
  unsigned int dwSpeakerVolume;
  unsigned int dwSpeakerMode;
  unsigned int dwPreferredModemOptions;
  unsigned int dwNegotiatedModemOptions;
  unsigned int dwNegotiatedDCERate;
  unsigned __int8 abVariablePortion[1];
};

/* 8440 */
struct _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned int SpinCount;
};

/* 8441 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 8442 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  unsigned int EntryCount;
  unsigned int ContentionCount;
  unsigned int Flags;
  unsigned __int16 CreatorBackTraceIndexHigh;
  unsigned __int16 SpareWORD;
};

/* 8443 */
struct _OCSP_BASIC_REVOKED_INFO
{
  _FILETIME RevocationDate;
  unsigned int dwCrlReasonCode;
};

/* 8444 */
struct _DRIVER_INFO_4W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
};

/* 8445 */
struct tagRGBQUAD
{
  unsigned __int8 rgbBlue;
  unsigned __int8 rgbGreen;
  unsigned __int8 rgbRed;
  unsigned __int8 rgbReserved;
};

/* 8446 */
struct tagBITMAPINFO
{
  tagBITMAPINFOHEADER bmiHeader;
  tagRGBQUAD bmiColors[1];
};

/* 8447 */
struct __cppobj JfrEvent<EventG1HeapRegionInformation>
{
};

/* 8448 */
struct __cppobj IntInterval : IntType
{
  int _beg;
  int _end;
};

/* 8449 */
struct tagMIDIOUTCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8450 */
struct _CERT_REVOCATION_PARA
{
  unsigned int cbSize;
  const _CERT_CONTEXT *pIssuerCert;
  unsigned int cCertStore;
  void **rgCertStore;
  void *hCrlStore;
  _FILETIME *pftTimeToUse;
};

/* 8451 */
struct __declspec(align(8)) _DISK_RECORD
{
  _LARGE_INTEGER ByteOffset;
  _LARGE_INTEGER StartTime;
  _LARGE_INTEGER EndTime;
  void *VirtualAddress;
  unsigned int NumberOfBytes;
  unsigned __int8 DeviceNumber;
  unsigned __int8 ReadRequest;
};

/* 8452 */
struct _PERFORMANCE_INFORMATION
{
  unsigned int cb;
  unsigned int CommitTotal;
  unsigned int CommitLimit;
  unsigned int CommitPeak;
  unsigned int PhysicalTotal;
  unsigned int PhysicalAvailable;
  unsigned int SystemCache;
  unsigned int KernelTotal;
  unsigned int KernelPaged;
  unsigned int KernelNonpaged;
  unsigned int PageSize;
  unsigned int HandleCount;
  unsigned int ProcessCount;
  unsigned int ThreadCount;
};

/* 8453 */
union $2648935626D60F3A93F830EF5D884CB4
{
  unsigned int hCryptProv;
  unsigned int hNCryptKey;
};

/* 8454 */
struct _CMSG_CTRL_DECRYPT_PARA
{
  unsigned int cbSize;
  $2648935626D60F3A93F830EF5D884CB4 ___u1;
  unsigned int dwKeySpec;
  unsigned int dwRecipientIndex;
};

/* 8455 */
struct _IMAGE_ROM_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  unsigned __int8 MajorLinkerVersion;
  unsigned __int8 MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int BaseOfBss;
  unsigned int GprMask;
  unsigned int CprMask[4];
  unsigned int GpValue;
};

/* 8456 */
struct _IMAGE_ROM_HEADERS
{
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};

/* 8457 */
struct tagSCROLLBARINFO
{
  unsigned int cbSize;
  tagRECT rcScrollBar;
  int dxyLineButton;
  int xyThumbTop;
  int xyThumbBottom;
  int reserved;
  unsigned int rgstate[6];
};

/* 8458 */
struct tagMIDIINCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwSupport;
};

/* 8459 */
struct tagMCI_WAVE_SET_PARMS
{
  unsigned int dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
  unsigned int wInput;
  unsigned int wOutput;
  unsigned __int16 wFormatTag;
  unsigned __int16 wReserved2;
  unsigned __int16 nChannels;
  unsigned __int16 wReserved3;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wReserved4;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 wReserved5;
};

/* 8460 */
struct _HISTOGRAM_BUCKET
{
  unsigned int Reads;
  unsigned int Writes;
};

/* 8461 */
struct _IMAGE_DEBUG_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Type;
  unsigned int SizeOfData;
  unsigned int AddressOfRawData;
  unsigned int PointerToRawData;
};

/* 8462 */
struct pvalueA
{
  char *pv_valuename;
  int pv_valuelen;
  void *pv_value_context;
  unsigned int pv_type;
};

/* 8463 */
struct _STORAGE_BUS_RESET_REQUEST
{
  unsigned __int8 PathId;
};

/* 8464 */
struct _PRINTER_INFO_4W
{
  wchar_t *pPrinterName;
  wchar_t *pServerName;
  unsigned int Attributes;
};

/* 8465 */
struct __cppobj LIR_OprRefArray : ResourceArray
{
};

/* 8466 */
struct _TOKEN_USER
{
  _SID_AND_ATTRIBUTES User;
};

/* 8467 */
struct tagEMREXTTEXTOUTA
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int iGraphicsMode;
  float exScale;
  float eyScale;
  tagEMRTEXT emrtext;
};

/* 8468 */
struct _CMSG_CMS_SIGNER_INFO
{
  unsigned int dwVersion;
  _CERT_ID SignerId;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedHash;
  _CRYPT_ATTRIBUTES AuthAttrs;
  _CRYPT_ATTRIBUTES UnauthAttrs;
};

/* 8469 */
struct __cppobj IPropertySetStorage : IUnknown
{
};

/* 8470 */
struct __cppobj IEnumSTATPROPSETSTG : IUnknown
{
};

/* 8471 */
struct /*VFT*/ IEnumSTATPROPSETSTG_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumSTATPROPSETSTG *this, unsigned int, tagSTATPROPSETSTG *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumSTATPROPSETSTG *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumSTATPROPSETSTG *this);
  HRESULT (__stdcall *Clone)(IEnumSTATPROPSETSTG *this, IEnumSTATPROPSETSTG **);
};

/* 8472 */
struct /*VFT*/ IPropertySetStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Create)(IPropertySetStorage *this, const _GUID *, const _GUID *, unsigned int, unsigned int, IPropertyStorage **);
  HRESULT (__stdcall *Open)(IPropertySetStorage *this, const _GUID *, unsigned int, IPropertyStorage **);
  HRESULT (__stdcall *Delete)(IPropertySetStorage *this, const _GUID *);
  HRESULT (__stdcall *Enum)(IPropertySetStorage *this, IEnumSTATPROPSETSTG **);
};

/* 8473 */
struct HCONVLIST__
{
  int unused;
};

/* 8474 */
struct tagCONVINFO
{
  unsigned int cb;
  unsigned int hUser;
  HCONV__ *hConvPartner;
  HSZ__ *hszSvcPartner;
  HSZ__ *hszServiceReq;
  HSZ__ *hszTopic;
  HSZ__ *hszItem;
  unsigned int wFmt;
  unsigned int wType;
  unsigned int wStatus;
  unsigned int wConvst;
  unsigned int wLastError;
  HCONVLIST__ *hConvList;
  tagCONVCONTEXT ConvCtxt;
  HWND__ *hwnd;
  HWND__ *hwndPartner;
};

/* 8475 */
struct _PROPSHEETPAGEW_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $FA47F85280613D2607EBD8EBA80F8487 ___u3;
  $812227CFA36A41A97E8F88268D069E46 ___u4;
  const wchar_t *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
  const wchar_t *pszHeaderTitle;
  const wchar_t *pszHeaderSubTitle;
};

/* 8476 */
struct tagEMRANGLEARC
{
  tagEMR emr;
  _POINTL ptlCenter;
  unsigned int nRadius;
  float eStartAngle;
  float eSweepAngle;
};

/* 8477 */
struct __declspec(align(4)) _STORAGE_IDENTIFIER
{
  _STORAGE_IDENTIFIER_CODE_SET CodeSet;
  _STORAGE_IDENTIFIER_TYPE Type;
  unsigned __int16 IdentifierSize;
  unsigned __int16 NextOffset;
  _STORAGE_ASSOCIATION_TYPE Association;
  unsigned __int8 Identifier[1];
};

/* 8478 */
struct _PROPSHEETPAGEA_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $EBE87E7C02BA0FA6B43ABECE118F3C84 ___u3;
  $196C3329479FA964FD47E623CF5615B3 ___u4;
  const char *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
};

/* 8479 */
struct __cppobj IWrappedProtocol : IUnknown
{
};

/* 8480 */
struct /*VFT*/ IWrappedProtocol_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWrapperCode)(IWrappedProtocol *this, int *, unsigned int);
};

/* 8481 */
struct tagCANDIDATEFORM
{
  unsigned int dwIndex;
  unsigned int dwStyle;
  tagPOINT ptCurrentPos;
  tagRECT rcArea;
};

/* 8482 */
struct tagEMRSETARCDIRECTION
{
  tagEMR emr;
  unsigned int iArcDirection;
};

/* 8483 */
struct midihdr_tag
{
  char *lpData;
  unsigned int dwBufferLength;
  unsigned int dwBytesRecorded;
  unsigned int dwUser;
  unsigned int dwFlags;
  midihdr_tag *lpNext;
  unsigned int reserved;
  unsigned int dwOffset;
  unsigned int dwReserved[8];
};

/* 8484 */
struct tagLAYERPLANEDESCRIPTOR
{
  unsigned __int16 nSize;
  unsigned __int16 nVersion;
  unsigned int dwFlags;
  unsigned __int8 iPixelType;
  unsigned __int8 cColorBits;
  unsigned __int8 cRedBits;
  unsigned __int8 cRedShift;
  unsigned __int8 cGreenBits;
  unsigned __int8 cGreenShift;
  unsigned __int8 cBlueBits;
  unsigned __int8 cBlueShift;
  unsigned __int8 cAlphaBits;
  unsigned __int8 cAlphaShift;
  unsigned __int8 cAccumBits;
  unsigned __int8 cAccumRedBits;
  unsigned __int8 cAccumGreenBits;
  unsigned __int8 cAccumBlueBits;
  unsigned __int8 cAccumAlphaBits;
  unsigned __int8 cDepthBits;
  unsigned __int8 cStencilBits;
  unsigned __int8 cAuxBuffers;
  unsigned __int8 iLayerPlane;
  unsigned __int8 bReserved;
  unsigned int crTransparent;
};

/* 8485 */
struct tagMCI_WAVE_DELETE_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 8486 */
struct __declspec(align(8)) _TAPE_SET_POSITION
{
  unsigned int Method;
  unsigned int Partition;
  _LARGE_INTEGER Offset;
  unsigned __int8 Immediate;
};

/* 8487 */
struct _numberfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  wchar_t *lpDecimalSep;
  wchar_t *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 8488 */
struct _CONNECTDLGSTRUCTA
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  _NETRESOURCEA *lpConnRes;
  unsigned int dwFlags;
  unsigned int dwDevNum;
};

/* 8489 */
struct _CRYPT_PASSWORD_CREDENTIALSA
{
  unsigned int cbSize;
  char *pszUsername;
  char *pszPassword;
};

/* 8490 */
struct __cppobj JfrEvent<EventZStatisticsCounter>
{
};

/* 8491 */
struct $_TypeDescriptor$_extraBytes_56
{
  const void *pVFTable;
  void *spare;
  char name[56];
};

/* 8492 */
struct tagRID_DEVICE_INFO_MOUSE
{
  unsigned int dwId;
  unsigned int dwNumberOfButtons;
  unsigned int dwSampleRate;
  int fHasHorizontalWheel;
};

/* 8493 */
struct tagRID_DEVICE_INFO_KEYBOARD
{
  unsigned int dwType;
  unsigned int dwSubType;
  unsigned int dwKeyboardMode;
  unsigned int dwNumberOfFunctionKeys;
  unsigned int dwNumberOfIndicators;
  unsigned int dwNumberOfKeysTotal;
};

/* 8494 */
struct tagRID_DEVICE_INFO_HID
{
  unsigned int dwVendorId;
  unsigned int dwProductId;
  unsigned int dwVersionNumber;
  unsigned __int16 usUsagePage;
  unsigned __int16 usUsage;
};

/* 8495 */
union $C6A71A9D0240A5D7D40F29D86BFFCCCD
{
  tagRID_DEVICE_INFO_MOUSE mouse;
  tagRID_DEVICE_INFO_KEYBOARD keyboard;
  tagRID_DEVICE_INFO_HID hid;
};

/* 8496 */
struct tagRID_DEVICE_INFO
{
  unsigned int cbSize;
  unsigned int dwType;
  $C6A71A9D0240A5D7D40F29D86BFFCCCD ___u2;
};

/* 8497 */
struct _CERT_REQUEST_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB Subject;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 8498 */
struct _STORAGE_GET_BC_PROPERTIES_OUTPUT
{
  unsigned int MaximumRequestsPerPeriod;
  unsigned int MinimumPeriod;
  unsigned __int64 MaximumRequestSize;
  unsigned int EstimatedTimePerRequest;
  unsigned int NumOutStandingRequests;
  unsigned __int64 RequestSize;
};

/* 8499 */
struct _PRINTPROCESSOR_CAPS_1
{
  unsigned int dwLevel;
  unsigned int dwNupOptions;
  unsigned int dwPageOrderFlags;
  unsigned int dwNumberOfCopies;
};

/* 8500 */
struct _PORT_INFO_3A
{
  unsigned int dwStatus;
  char *pszStatus;
  unsigned int dwSeverity;
};

/* 8501 */
struct __cppobj JfrEvent<EventGarbageCollection>
{
};

/* 8502 */
struct __cppobj EventGarbageCollection : JfrEvent<EventGarbageCollection>
{
};

/* 8503 */
union _IMAGE_LINENUMBER::<unnamed_type_Type>
{
  unsigned int SymbolTableIndex;
  unsigned int VirtualAddress;
};

/* 8504 */
struct __unaligned __declspec(align(2)) _IMAGE_LINENUMBER
{
  _IMAGE_LINENUMBER::<unnamed_type_Type> Type;
  unsigned __int16 Linenumber;
};

/* 8505 */
struct tagMIXERLINEA::<unnamed_type_Target>
{
  unsigned int dwType;
  unsigned int dwDeviceID;
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
};

/* 8506 */
struct tagMIXERLINEA
{
  unsigned int cbStruct;
  unsigned int dwDestination;
  unsigned int dwSource;
  unsigned int dwLineID;
  unsigned int fdwLine;
  unsigned int dwUser;
  unsigned int dwComponentType;
  unsigned int cChannels;
  unsigned int cConnections;
  unsigned int cControls;
  char szShortName[16];
  char szName[64];
  tagMIXERLINEA::<unnamed_type_Target> Target;
};

/* 8507 */
struct __cppobj JfrEvent<EventMetaspaceChunkFreeListSummary>
{
};

/* 8508 */
struct _EXCEPTION_DEBUG_INFO
{
  _EXCEPTION_RECORD ExceptionRecord;
  unsigned int dwFirstChance;
};

/* 8509 */
struct _CERT_POLICY_QUALIFIER_INFO
{
  char *pszPolicyQualifierId;
  _CRYPTOAPI_BLOB Qualifier;
};

/* 8510 */
struct _CERT_POLICY_INFO
{
  char *pszPolicyIdentifier;
  unsigned int cPolicyQualifier;
  _CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
};

/* 8511 */
struct _CERT_POLICIES_INFO
{
  unsigned int cPolicyInfo;
  _CERT_POLICY_INFO *rgPolicyInfo;
};

/* 8512 */
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
{
  unsigned int cbSize;
  $2648935626D60F3A93F830EF5D884CB4 ___u1;
  unsigned int dwKeySpec;
  _CMSG_KEY_TRANS_RECIPIENT_INFO *pKeyTrans;
  unsigned int dwRecipientIndex;
};

/* 8513 */
struct _MONITOR_INFO_1A
{
  char *pName;
};

/* 8514 */
struct __cppobj JfrEvent<EventReservedStackActivation>
{
};

/* 8515 */
struct _DISPLAY_DEVICEA
{
  unsigned int cb;
  char DeviceName[32];
  char DeviceString[128];
  unsigned int StateFlags;
  char DeviceID[128];
  char DeviceKey[128];
};

/* 8516 */
struct tagWCRANGE
{
  wchar_t wcLow;
  unsigned __int16 cGlyphs;
};

/* 8517 */
struct _PRINTER_INFO_6
{
  unsigned int dwStatus;
};

/* 8518 */
struct __cppobj AsyncIPipeDouble : IUnknown
{
};

/* 8519 */
struct /*VFT*/ AsyncIPipeDouble_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Begin_Pull)(AsyncIPipeDouble *this, unsigned int);
  HRESULT (__stdcall *Finish_Pull)(AsyncIPipeDouble *this, long double *, unsigned int *);
  HRESULT (__stdcall *Begin_Push)(AsyncIPipeDouble *this, long double *, unsigned int);
  HRESULT (__stdcall *Finish_Push)(AsyncIPipeDouble *this);
};

/* 8520 */
struct _OFNOTIFYEXW
{
  tagNMHDR hdr;
  tagOFNW *lpOFN;
  void *psf;
  void *pidl;
};

/* 8521 */
struct __declspec(align(4)) _IMAGE_DEBUG_MISC
{
  unsigned int DataType;
  unsigned int Length;
  unsigned __int8 Unicode;
  unsigned __int8 Reserved[3];
  unsigned __int8 Data[1];
};

/* 8522 */
struct _TRANSACTION_LIST_ENTRY
{
  _GUID UOW;
};

/* 8523 */
struct _ROOT_INFO_LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 8524 */
struct _CRYPT_SMART_CARD_ROOT_INFO
{
  unsigned __int8 rgbCardID[16];
  _ROOT_INFO_LUID luid;
};

/* 8525 */
struct tagMCI_BREAK_PARMS
{
  unsigned int dwCallback;
  int nVirtKey;
  HWND__ *hwndBreak;
};

/* 8526 */
struct _CERT_PHYSICAL_STORE_INFO
{
  unsigned int cbSize;
  char *pszOpenStoreProvider;
  unsigned int dwOpenEncodingType;
  unsigned int dwOpenFlags;
  _CRYPTOAPI_BLOB OpenParameters;
  unsigned int dwFlags;
  unsigned int dwPriority;
};

/* 8527 */
struct _FILESYSTEM_STATISTICS
{
  unsigned __int16 FileSystemType;
  unsigned __int16 Version;
  unsigned int SizeOfCompleteStructure;
  unsigned int UserFileReads;
  unsigned int UserFileReadBytes;
  unsigned int UserDiskReads;
  unsigned int UserFileWrites;
  unsigned int UserFileWriteBytes;
  unsigned int UserDiskWrites;
  unsigned int MetaDataReads;
  unsigned int MetaDataReadBytes;
  unsigned int MetaDataDiskReads;
  unsigned int MetaDataWrites;
  unsigned int MetaDataWriteBytes;
  unsigned int MetaDataDiskWrites;
};

/* 8528 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
  char *pmszRequiredPrivileges;
};

/* 8529 */
struct tagMCI_ANIM_WINDOW_PARMSW
{
  unsigned int dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const wchar_t *lpstrText;
};

/* 8530 */
struct _CERT_KEYGEN_REQUEST_INFO
{
  unsigned int dwVersion;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  wchar_t *pwszChallengeString;
};

/* 8531 */
struct __cppobj EventZStatisticsCounter : JfrEvent<EventZStatisticsCounter>
{
};

/* 8532 */
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int ExceptionHandler;
  unsigned int HandlerData;
  unsigned int PrologEndAddress;
};

/* 8533 */
struct __declspec(align(4)) _RESOURCEMANAGER_BASIC_INFORMATION
{
  _GUID ResourceManagerId;
  unsigned int DescriptionLength;
  wchar_t Description[1];
};

/* 8534 */
struct $E9DA48AF932E64A156469FA5748FF30E
{
  unsigned __int32 Protection : 5;
  unsigned __int32 ShareCount : 3;
  unsigned __int32 Shared : 1;
  unsigned __int32 Reserved : 3;
  unsigned __int32 VirtualPage : 20;
};

/* 8535 */
union _PSAPI_WORKING_SET_BLOCK
{
  unsigned int Flags;
  $E9DA48AF932E64A156469FA5748FF30E __s1;
};

/* 8536 */
struct _PSAPI_WORKING_SET_INFORMATION
{
  unsigned int NumberOfEntries;
  _PSAPI_WORKING_SET_BLOCK WorkingSetInfo[1];
};

/* 8537 */
struct _COMPATIBILITY_CONTEXT_ELEMENT
{
  _GUID Id;
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
};

/* 8538 */
struct _DISK_PARTITION_INFO::<unnamed_tag>::<unnamed_type_Mbr>
{
  unsigned int Signature;
  unsigned int CheckSum;
};

/* 8539 */
struct _DISK_PARTITION_INFO::<unnamed_tag>::<unnamed_type_Gpt>
{
  _GUID DiskId;
};

/* 8540 */
union $F2D490DFF5F85CF61C8E41EF67B869DC
{
  _DISK_PARTITION_INFO::<unnamed_tag>::<unnamed_type_Mbr> Mbr;
  _DISK_PARTITION_INFO::<unnamed_tag>::<unnamed_type_Gpt> Gpt;
};

/* 8541 */
struct _DISK_PARTITION_INFO
{
  unsigned int SizeOfPartitionInfo;
  _PARTITION_STYLE PartitionStyle;
  $F2D490DFF5F85CF61C8E41EF67B869DC ___u2;
};

/* 8542 */
struct __cppobj IClassActivator : IUnknown
{
};

/* 8543 */
struct /*VFT*/ IClassActivator_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassObject)(IClassActivator *this, const _GUID *, unsigned int, unsigned int, const _GUID *, void **);
};

/* 8544 */
struct _SHFILEINFOW
{
  HICON__ *hIcon;
  int iIcon;
  unsigned int dwAttributes;
  wchar_t szDisplayName[260];
  wchar_t szTypeName[80];
};

/* 8545 */
struct _OSVERSIONINFOW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  wchar_t szCSDVersion[128];
};

/* 8546 */
struct __BCRYPT_KEY_LENGTHS_STRUCT
{
  unsigned int dwMinLength;
  unsigned int dwMaxLength;
  unsigned int dwIncrement;
};

/* 8547 */
struct tagRECONVERTSTRING
{
  unsigned int dwSize;
  unsigned int dwVersion;
  unsigned int dwStrLen;
  unsigned int dwStrOffset;
  unsigned int dwCompStrLen;
  unsigned int dwCompStrOffset;
  unsigned int dwTargetStrLen;
  unsigned int dwTargetStrOffset;
};

/* 8548 */
struct _EXCEPTION_RECORD32
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned int ExceptionRecord;
  unsigned int ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 8549 */
struct _CRYPT_ENCODE_PARA
{
  unsigned int cbSize;
  void *(__stdcall *pfnAlloc)(unsigned int);
  void (__stdcall *pfnFree)(void *);
};

/* 8550 */
struct _DOC_INFO_3W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
  unsigned int dwFlags;
};

/* 8551 */
struct __cppobj JfrEvent<EventGCTLABConfiguration>
{
};

/* 8552 */
struct __cppobj IAddrExclusionControl : IUnknown
{
};

/* 8553 */
struct /*VFT*/ IAddrExclusionControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetCurrentAddrExclusionList)(IAddrExclusionControl *this, const _GUID *, void **);
  HRESULT (__stdcall *UpdateAddrExclusionList)(IAddrExclusionControl *this, IUnknown *);
};

/* 8554 */
struct __cppobj IPrintDialogServices : IUnknown
{
};

/* 8555 */
struct /*VFT*/ IPrintDialogServices_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetCurrentDevMode)(IPrintDialogServices *this, _devicemodeA *, unsigned int *);
  HRESULT (__stdcall *GetCurrentPrinterName)(IPrintDialogServices *this, wchar_t *, unsigned int *);
  HRESULT (__stdcall *GetCurrentPortName)(IPrintDialogServices *this, wchar_t *, unsigned int *);
};

/* 8556 */
struct __cppobj JfrEvent<EventClassLoadingStatistics>
{
};

/* 8557 */
struct __cppobj EventClassLoadingStatistics : JfrEvent<EventClassLoadingStatistics>
{
};

/* 8558 */
struct _IMAGE_SYMBOL_EX::<unnamed_type_N>::<unnamed_type_Name>
{
  unsigned int Short;
  unsigned int Long;
};

/* 8559 */
union _IMAGE_SYMBOL_EX::<unnamed_type_N>
{
  unsigned __int8 ShortName[8];
  _IMAGE_SYMBOL_EX::<unnamed_type_N>::<unnamed_type_Name> Name;
  unsigned int LongName[2];
};

/* 8560 */
struct _IMAGE_SYMBOL_EX
{
  _IMAGE_SYMBOL_EX::<unnamed_type_N> N;
  unsigned int Value;
  int SectionNumber;
  unsigned __int16 Type;
  unsigned __int8 StorageClass;
  unsigned __int8 NumberOfAuxSymbols;
};

/* 8561 */
struct __declspec(align(4)) tagEMREXTSELECTCLIPRGN
{
  tagEMR emr;
  unsigned int cbRgnData;
  unsigned int iMode;
  unsigned __int8 RgnData[1];
};

/* 8562 */
struct _CERT_TEMPLATE_EXT
{
  char *pszObjId;
  unsigned int dwMajorVersion;
  int fMinorVersion;
  unsigned int dwMinorVersion;
};

/* 8563 */
struct _FORM_INFO_1A
{
  unsigned int Flags;
  char *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
};

/* 8564 */
struct tagMODULEENTRY32W
{
  unsigned int dwSize;
  unsigned int th32ModuleID;
  unsigned int th32ProcessID;
  unsigned int GlblcntUsage;
  unsigned int ProccntUsage;
  unsigned __int8 *modBaseAddr;
  unsigned int modBaseSize;
  HINSTANCE__ *hModule;
  wchar_t szModule[256];
  wchar_t szExePath[260];
};

/* 8565 */
struct tagSTICKYKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 8566 */
struct tagTITLEBARINFO
{
  unsigned int cbSize;
  tagRECT rcTitleBar;
  unsigned int rgstate[6];
};

/* 8567 */
struct tagMCI_SEQ_SET_PARMS
{
  unsigned int dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
  unsigned int dwTempo;
  unsigned int dwPort;
  unsigned int dwSlave;
  unsigned int dwMaster;
  unsigned int dwOffset;
};

/* 8568 */
struct _RPC_IF_ID
{
  _GUID Uuid;
  unsigned __int16 VersMajor;
  unsigned __int16 VersMinor;
};

/* 8569 */
struct _CERT_KEY_ATTRIBUTES_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CRYPT_BIT_BLOB IntendedKeyUsage;
  _CERT_PRIVATE_KEY_VALIDITY *pPrivateKeyUsagePeriod;
};

/* 8570 */
struct _DRIVER_INFO_2W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
};

/* 8571 */
struct /*VFT*/ ciJumpData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 8572 */
struct __cppobj ciJumpData : JumpData
{
};

/* 8573 */
struct _TRANSACTION_BASIC_INFORMATION
{
  _GUID TransactionId;
  unsigned int State;
  unsigned int Outcome;
};

/* 8574 */
union _userHMETAFILE::__MIDL_IWinTypes_0004
{
  int hInproc;
  _BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 8575 */
struct _userHMETAFILE
{
  int fContext;
  _userHMETAFILE::__MIDL_IWinTypes_0004 u;
};

/* 8576 */
struct __cppobj JfrEvent<EventCompilerConfiguration>
{
};

/* 8577 */
struct tagAXISINFOW
{
  int axMinValue;
  int axMaxValue;
  wchar_t axAxisName[16];
};

/* 8578 */
struct _DRIVER_INFO_3A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
};

/* 8579 */
struct _PORT_INFO_2W
{
  wchar_t *pPortName;
  wchar_t *pMonitorName;
  wchar_t *pDescription;
  unsigned int fPortType;
  unsigned int Reserved;
};

/* 8580 */
struct tagRemFORMATETC
{
  unsigned int cfFormat;
  unsigned int ptd;
  unsigned int dwAspect;
  int lindex;
  unsigned int tymed;
};

/* 8581 */
struct __cppobj CodeEmitInfoArray : ResourceArray
{
};

/* 8582 */
struct tagENUMLOGFONTA
{
  tagLOGFONTA elfLogFont;
  unsigned __int8 elfFullName[64];
  unsigned __int8 elfStyle[32];
};

/* 8583 */
struct tagEMRALPHABLEND
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 8584 */
struct tagMOUSEHOOKSTRUCT
{
  tagPOINT pt;
  HWND__ *hwnd;
  unsigned int wHitTestCode;
  unsigned int dwExtraInfo;
};

/* 8585 */
struct tagUPDATELAYEREDWINDOWINFO
{
  unsigned int cbSize;
  HDC__ *hdcDst;
  const tagPOINT *pptDst;
  const tagSIZE *psize;
  HDC__ *hdcSrc;
  const tagPOINT *pptSrc;
  unsigned int crKey;
  const _BLENDFUNCTION *pblend;
  unsigned int dwFlags;
  const tagRECT *prcDirty;
};

/* 8586 */
union tagMIXERCONTROLA::<unnamed_type_Bounds>
{
  $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
  $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
  unsigned int dwReserved[6];
};

/* 8587 */
union tagMIXERCONTROLA::<unnamed_type_Metrics>
{
  unsigned int cSteps;
  unsigned int cbCustomData;
  unsigned int dwReserved[6];
};

/* 8588 */
struct tagMIXERCONTROLA
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int dwControlType;
  unsigned int fdwControl;
  unsigned int cMultipleItems;
  char szShortName[16];
  char szName[64];
  tagMIXERCONTROLA::<unnamed_type_Bounds> Bounds;
  tagMIXERCONTROLA::<unnamed_type_Metrics> Metrics;
};

/* 8589 */
struct _CRYPT_CONTENT_INFO
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Content;
};

/* 8590 */
struct __cppobj IPersistStorage : IPersist
{
};

/* 8591 */
struct /*VFT*/ IPersistStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersist *this, _GUID *);
  HRESULT (__stdcall *IsDirty)(IPersistStorage *this);
  HRESULT (__stdcall *InitNew)(IPersistStorage *this, IStorage *);
  HRESULT (__stdcall *Load)(IPersistStorage *this, IStorage *);
  HRESULT (__stdcall *Save)(IPersistStorage *this, IStorage *, int);
  HRESULT (__stdcall *SaveCompleted)(IPersistStorage *this, IStorage *);
  HRESULT (__stdcall *HandsOffStorage)(IPersistStorage *this);
};

/* 8592 */
struct __declspec(align(4)) tagEMRGLSRECORD
{
  tagEMR emr;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 8593 */
struct tagMOUSEKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iMaxSpeed;
  unsigned int iTimeToMaxSpeed;
  unsigned int iCtrlSpeed;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 8594 */
struct tagDDEML_MSG_HOOK_DATA
{
  unsigned int uiLo;
  unsigned int uiHi;
  unsigned int cbData;
  unsigned int Data[8];
};

/* 8595 */
struct tagMONMSGSTRUCT
{
  unsigned int cb;
  HWND__ *hwndTo;
  unsigned int dwTime;
  void *hTask;
  unsigned int wMsg;
  unsigned int wParam;
  int lParam;
  tagDDEML_MSG_HOOK_DATA dmhd;
};

/* 8596 */
struct _PSHNOTIFY
{
  tagNMHDR hdr;
  int lParam;
};

/* 8597 */
struct HACCEL__
{
  int unused;
};

/* 8598 */
struct _RPC_POLICY
{
  unsigned int Length;
  unsigned int EndpointFlags;
  unsigned int NICFlags;
};

/* 8599 */
struct __cppobj ICache : AbstractICache
{
};

/* 8600 */
struct __cppobj JfrEvent<EventBiasedLockRevocation>
{
};

/* 8601 */
struct tagEMRSTRETCHBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 8602 */
struct _ACCESS_DENIED_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 8603 */
struct _TOKEN_GROUPS
{
  unsigned int GroupCount;
  _SID_AND_ATTRIBUTES Groups[1];
};

/* 8604 */
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
  unsigned int SecurityLimitFlags;
  void *JobToken;
  _TOKEN_GROUPS *SidsToDisable;
  _TOKEN_PRIVILEGES *PrivilegesToDelete;
  _TOKEN_GROUPS *RestrictedSids;
};

/* 8605 */
union _IMAGE_THUNK_DATA32::<unnamed_type_u1>
{
  unsigned int ForwarderString;
  unsigned int Function;
  unsigned int Ordinal;
  unsigned int AddressOfData;
};

/* 8606 */
struct _IMAGE_THUNK_DATA32
{
  _IMAGE_THUNK_DATA32::<unnamed_type_u1> u1;
};

/* 8607 */
struct _remoteMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  _userHMETAFILE *hMF;
};

/* 8608 */
union _userHMETAFILEPICT::__MIDL_IWinTypes_0005
{
  int hInproc;
  _remoteMETAFILEPICT *hRemote;
  __int64 hInproc64;
};

/* 8609 */
struct _userHMETAFILEPICT
{
  int fContext;
  _userHMETAFILEPICT::__MIDL_IWinTypes_0005 u;
};

/* 8610 */
union _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003
{
  _userHMETAFILEPICT *hMetaFilePict;
  _userHENHMETAFILE *hHEnhMetaFile;
  _GDI_OBJECT *hGdiHandle;
  _userHGLOBAL *hGlobal;
  wchar_t *lpszFileName;
  _BYTE_BLOB *pstm;
  _BYTE_BLOB *pstg;
};

/* 8611 */
struct _userSTGMEDIUM::_STGMEDIUM_UNION
{
  unsigned int tymed;
  _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003 u;
};

/* 8612 */
struct _userSTGMEDIUM
{
  IUnknown *pUnkForRelease;
};

/* 8613 */
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
  unsigned int FuncStart;
  unsigned __int32 PrologLen : 8;
  unsigned __int32 FuncLen : 22;
  unsigned __int32 ThirtyTwoBit : 1;
  unsigned __int32 ExceptionFlag : 1;
};

/* 8614 */
struct _REASSIGN_BLOCKS
{
  unsigned __int16 Reserved;
  unsigned __int16 Count;
  unsigned int BlockNumber[1];
};

/* 8615 */
struct tagSERIALKEYSA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  char *lpszActivePort;
  char *lpszPort;
  unsigned int iBaudRate;
  unsigned int iPortState;
  unsigned int iActive;
};

/* 8616 */
struct _DISK_EXTENT
{
  unsigned int DiskNumber;
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER ExtentLength;
};

/* 8617 */
struct _VOLUME_DISK_EXTENTS
{
  unsigned int NumberOfDiskExtents;
  _DISK_EXTENT Extents[1];
};

/* 8618 */
struct __cppobj JfrEvent<EventThreadStart>
{
};

/* 8619 */
struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
  void *IoCompletionPortHandle;
  unsigned int CompletionKey;
};

/* 8620 */
struct __cppobj IInternetPriority : IUnknown
{
};

/* 8621 */
struct /*VFT*/ IInternetPriority_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetPriority)(IInternetPriority *this, int);
  HRESULT (__stdcall *GetPriority)(IInternetPriority *this, int *);
};

/* 8622 */
struct _wireSAFEARR_HAVEIID
{
  unsigned int Size;
  IUnknown **apUnknown;
  _GUID iid;
};

/* 8623 */
struct ANON_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
};

/* 8624 */
struct __declspec(align(4)) tagEMREXTESCAPE
{
  tagEMR emr;
  int iEscape;
  int cbEscData;
  unsigned __int8 EscData[1];
};

/* 8625 */
struct tagMCI_ANIM_RECT_PARMS
{
  unsigned int dwCallback;
  tagRECT rc;
};

/* 8626 */
struct tagLOGCOLORSPACEA
{
  unsigned int lcsSignature;
  unsigned int lcsVersion;
  unsigned int lcsSize;
  int lcsCSType;
  int lcsIntent;
  tagICEXYZTRIPLE lcsEndpoints;
  unsigned int lcsGammaRed;
  unsigned int lcsGammaGreen;
  unsigned int lcsGammaBlue;
  char lcsFilename[260];
};

/* 8627 */
struct tagEMRCREATECOLORSPACE
{
  tagEMR emr;
  unsigned int ihCS;
  tagLOGCOLORSPACEA lcs;
};

/* 8628 */
struct tagMIDIINCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8629 */
struct __NCRYPT_SUPPORTED_LENGTHS
{
  unsigned int dwMinLength;
  unsigned int dwMaxLength;
  unsigned int dwIncrement;
  unsigned int dwDefaultLength;
};

/* 8630 */
struct midiproptimediv_tag
{
  unsigned int cbStruct;
  unsigned int dwTimeDiv;
};

/* 8631 */
struct _SESSION_HEADER
{
  unsigned __int8 sess_name;
  unsigned __int8 num_sess;
  unsigned __int8 rcv_dg_outstanding;
  unsigned __int8 rcv_any_outstanding;
};

/* 8632 */
struct tagCUSTDATA
{
  unsigned int cCustData;
  tagCUSTDATAITEM *prgCustData;
};

/* 8633 */
struct _IMAGE_VXD_HEADER
{
  unsigned __int16 e32_magic;
  unsigned __int8 e32_border;
  unsigned __int8 e32_worder;
  unsigned int e32_level;
  unsigned __int16 e32_cpu;
  unsigned __int16 e32_os;
  unsigned int e32_ver;
  unsigned int e32_mflags;
  unsigned int e32_mpages;
  unsigned int e32_startobj;
  unsigned int e32_eip;
  unsigned int e32_stackobj;
  unsigned int e32_esp;
  unsigned int e32_pagesize;
  unsigned int e32_lastpagesize;
  unsigned int e32_fixupsize;
  unsigned int e32_fixupsum;
  unsigned int e32_ldrsize;
  unsigned int e32_ldrsum;
  unsigned int e32_objtab;
  unsigned int e32_objcnt;
  unsigned int e32_objmap;
  unsigned int e32_itermap;
  unsigned int e32_rsrctab;
  unsigned int e32_rsrccnt;
  unsigned int e32_restab;
  unsigned int e32_enttab;
  unsigned int e32_dirtab;
  unsigned int e32_dircnt;
  unsigned int e32_fpagetab;
  unsigned int e32_frectab;
  unsigned int e32_impmod;
  unsigned int e32_impmodcnt;
  unsigned int e32_impproc;
  unsigned int e32_pagesum;
  unsigned int e32_datapage;
  unsigned int e32_preload;
  unsigned int e32_nrestab;
  unsigned int e32_cbnrestab;
  unsigned int e32_nressum;
  unsigned int e32_autodata;
  unsigned int e32_debuginfo;
  unsigned int e32_debuglen;
  unsigned int e32_instpreload;
  unsigned int e32_instdemand;
  unsigned int e32_heapsize;
  unsigned __int8 e32_res3[12];
  unsigned int e32_winresoff;
  unsigned int e32_winreslen;
  unsigned __int16 e32_devid;
  unsigned __int16 e32_ddkver;
};

/* 8634 */
union _RemotableHandle::__MIDL_IWinTypes_0009
{
  int hInproc;
  int hRemote;
};

/* 8635 */
struct _RemotableHandle
{
  int fContext;
  _RemotableHandle::__MIDL_IWinTypes_0009 u;
};

/* 8636 */
struct __cppobj JfrEvent<EventG1HeapSummary>
{
};

/* 8637 */
struct __declspec(align(8)) _DISK_HISTOGRAM
{
  _LARGE_INTEGER DiskSize;
  _LARGE_INTEGER Start;
  _LARGE_INTEGER End;
  _LARGE_INTEGER Average;
  _LARGE_INTEGER AverageRead;
  _LARGE_INTEGER AverageWrite;
  unsigned int Granularity;
  unsigned int Size;
  unsigned int ReadCount;
  unsigned int WriteCount;
  _HISTOGRAM_BUCKET *Histogram;
};

/* 8638 */
struct __cppobj IAuthenticate : IUnknown
{
};

/* 8639 */
struct /*VFT*/ IAuthenticate_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Authenticate)(IAuthenticate *this, HWND__ **, wchar_t **, wchar_t **);
};

/* 8640 */
struct _tagAUTHENTICATEINFO
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 8641 */
struct __cppobj IAuthenticateEx : IAuthenticate
{
};

/* 8642 */
struct /*VFT*/ IAuthenticateEx_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Authenticate)(IAuthenticate *this, HWND__ **, wchar_t **, wchar_t **);
  HRESULT (__stdcall *AuthenticateEx)(IAuthenticateEx *this, HWND__ **, wchar_t **, wchar_t **, _tagAUTHENTICATEINFO *);
};

/* 8643 */
struct tagEMRSETWORLDTRANSFORM
{
  tagEMR emr;
  tagXFORM xform;
};

/* 8644 */
struct _CERT_POLICY_MAPPING
{
  char *pszIssuerDomainPolicy;
  char *pszSubjectDomainPolicy;
};

/* 8645 */
struct _CERT_POLICY_MAPPINGS_INFO
{
  unsigned int cPolicyMapping;
  _CERT_POLICY_MAPPING *rgPolicyMapping;
};

/* 8646 */
struct __cppobj ISynchronizeHandle : IUnknown
{
};

/* 8647 */
struct /*VFT*/ ISynchronizeHandle_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetHandle)(ISynchronizeHandle *this, void **);
};

/* 8648 */
struct __cppobj ISynchronizeEvent : ISynchronizeHandle
{
};

/* 8649 */
struct /*VFT*/ ISynchronizeEvent_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetHandle)(ISynchronizeHandle *this, void **);
  HRESULT (__stdcall *SetEventHandle)(ISynchronizeEvent *this, void **);
};

/* 8650 */
struct _CACHE_DESCRIPTOR
{
  unsigned __int8 Level;
  unsigned __int8 Associativity;
  unsigned __int16 LineSize;
  unsigned int Size;
  _PROCESSOR_CACHE_TYPE Type;
};

/* 8651 */
struct _RTL_CONDITION_VARIABLE
{
  void *Ptr;
};

/* 8652 */
struct __declspec(align(4)) tagMULTIKEYHELPA
{
  unsigned int mkSize;
  char mkKeylist;
  char szKeyphrase[1];
};

/* 8653 */
struct _CMSG_MAIL_LIST_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  unsigned int dwFlags;
};

/* 8654 */
struct __cppobj JfrEvent<EventG1EvacuationOldStatistics>
{
};

/* 8655 */
struct __cppobj EventG1EvacuationOldStatistics : JfrEvent<EventG1EvacuationOldStatistics>
{
};

/* 8656 */
struct __cppobj JfrStructG1EvacuationStatistics
{
};

/* 8657 */
struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
  _GUID TmIdentity;
  _LARGE_INTEGER VirtualClock;
};

/* 8658 */
struct _CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  void *pvExtraPolicyPara;
};

/* 8659 */
struct __cppobj IViewObject : IUnknown
{
};

/* 8660 */
struct /*VFT*/ IViewObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Draw)(IViewObject *this, unsigned int, int, void *, tagDVTARGETDEVICE *, HDC__ *, HDC__ *, const _RECTL *, const _RECTL *, int (__stdcall *)(unsigned int), unsigned int);
  HRESULT (__stdcall *GetColorSet)(IViewObject *this, unsigned int, int, void *, tagDVTARGETDEVICE *, HDC__ *, tagLOGPALETTE **);
  HRESULT (__stdcall *Freeze)(IViewObject *this, unsigned int, int, void *, unsigned int *);
  HRESULT (__stdcall *Unfreeze)(IViewObject *this, unsigned int);
  HRESULT (__stdcall *SetAdvise)(IViewObject *this, unsigned int, unsigned int, IAdviseSink *);
  HRESULT (__stdcall *GetAdvise)(IViewObject *this, unsigned int *, unsigned int *, IAdviseSink **);
};

/* 8661 */
struct _CERT_POLICY_CONSTRAINTS_INFO
{
  int fRequireExplicitPolicy;
  unsigned int dwRequireExplicitPolicySkipCerts;
  int fInhibitPolicyMapping;
  unsigned int dwInhibitPolicyMappingSkipCerts;
};

/* 8662 */
struct __declspec(align(4)) USN_RECORD
{
  unsigned int RecordLength;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int64 FileReferenceNumber;
  unsigned __int64 ParentFileReferenceNumber;
  __int64 Usn;
  _LARGE_INTEGER TimeStamp;
  unsigned int Reason;
  unsigned int SourceInfo;
  unsigned int SecurityId;
  unsigned int FileAttributes;
  unsigned __int16 FileNameLength;
  unsigned __int16 FileNameOffset;
  wchar_t FileName[1];
};

/* 8663 */
struct _MONITOR_INFO_2W
{
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDLLName;
};

/* 8664 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
};

/* 8665 */
struct _MMCKINFO
{
  unsigned int ckid;
  unsigned int cksize;
  unsigned int fccType;
  unsigned int dwDataOffset;
  unsigned int dwFlags;
};

/* 8666 */
struct _PRINTER_INFO_9A
{
  _devicemodeA *pDevMode;
};

/* 8667 */
struct _JOB_INFO_1W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pDatatype;
  wchar_t *pStatus;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int TotalPages;
  unsigned int PagesPrinted;
  _SYSTEMTIME Submitted;
};

/* 8668 */
struct _PRINTER_ENUM_VALUESA
{
  char *pValueName;
  unsigned int cbValueName;
  unsigned int dwType;
  unsigned __int8 *pData;
  unsigned int cbData;
};

/* 8669 */
struct PPM_WMI_IDLE_STATE
{
  unsigned int Latency;
  unsigned int Power;
  unsigned int TimeCheck;
  unsigned __int8 PromotePercent;
  unsigned __int8 DemotePercent;
  unsigned __int8 StateType;
  unsigned __int8 Reserved;
  unsigned int StateFlags;
  unsigned int Context;
  unsigned int IdleHandler;
  unsigned int Reserved1;
};

/* 8670 */
struct PPM_WMI_IDLE_STATES
{
  unsigned int Type;
  unsigned int Count;
  unsigned int TargetState;
  unsigned int OldState;
  unsigned __int64 TargetProcessors;
  PPM_WMI_IDLE_STATE State[1];
};

/* 8671 */
struct _BCryptBuffer
{
  unsigned int cbBuffer;
  unsigned int BufferType;
  void *pvBuffer;
};

/* 8672 */
struct _BCryptBufferDesc
{
  unsigned int ulVersion;
  unsigned int cBuffers;
  _BCryptBuffer *pBuffers;
};

/* 8673 */
struct _CRL_DIST_POINT_NAME
{
  unsigned int dwDistPointNameChoice;
  _CERT_ALT_NAME_INFO FullName;
};

/* 8674 */
struct _CRYPT_PASSWORD_CREDENTIALSW
{
  unsigned int cbSize;
  wchar_t *pszUsername;
  wchar_t *pszPassword;
};

/* 8675 */
struct tMIXERCONTROLDETAILS_SIGNED
{
  int lValue;
};

/* 8676 */
struct _OCSP_SIGNATURE_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPT_BIT_BLOB Signature;
  unsigned int cCertEncoded;
  _CRYPTOAPI_BLOB *rgCertEncoded;
};

/* 8677 */
struct _OCSP_BASIC_SIGNED_RESPONSE_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _OCSP_SIGNATURE_INFO SignatureInfo;
};

/* 8678 */
struct _IMAGE_COFF_SYMBOLS_HEADER
{
  unsigned int NumberOfSymbols;
  unsigned int LvaToFirstSymbol;
  unsigned int NumberOfLinenumbers;
  unsigned int LvaToFirstLinenumber;
  unsigned int RvaToFirstByteOfCode;
  unsigned int RvaToLastByteOfCode;
  unsigned int RvaToFirstByteOfData;
  unsigned int RvaToLastByteOfData;
};

/* 8679 */
struct _ImageArchitectureHeader
{
  unsigned __int32 AmaskValue : 1;
  unsigned __int32 : 7;
  unsigned __int32 AmaskShift : 8;
  unsigned int FirstEntryRVA;
};

/* 8680 */
struct _SYSTEM_POWER_STATUS
{
  unsigned __int8 ACLineStatus;
  unsigned __int8 BatteryFlag;
  unsigned __int8 BatteryLifePercent;
  unsigned __int8 Reserved1;
  unsigned int BatteryLifeTime;
  unsigned int BatteryFullLifeTime;
};

/* 8681 */
struct tagEMRPOLYLINE16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cpts;
  tagPOINTS apts[1];
};

/* 8682 */
struct _OCSP_RESPONSE_INFO
{
  unsigned int dwStatus;
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 8683 */
struct _tagDATAINFO
{
  unsigned int ulTotalSize;
  unsigned int ulavrPacketSize;
  unsigned int ulConnectSpeed;
  unsigned int ulProcessorSpeed;
};

/* 8684 */
struct __cppobj IDataFilter : IUnknown
{
};

/* 8685 */
struct /*VFT*/ IDataFilter_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *DoEncode)(IDataFilter *this, unsigned int, int, unsigned __int8 *, int, unsigned __int8 *, int, int *, int *, unsigned int);
  HRESULT (__stdcall *DoDecode)(IDataFilter *this, unsigned int, int, unsigned __int8 *, int, unsigned __int8 *, int, int *, int *, unsigned int);
  HRESULT (__stdcall *SetEncodingLevel)(IDataFilter *this, unsigned int);
};

/* 8686 */
struct __cppobj IEncodingFilterFactory : IUnknown
{
};

/* 8687 */
struct /*VFT*/ IEncodingFilterFactory_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *FindBestFilter)(IEncodingFilterFactory *this, const wchar_t *, const wchar_t *, _tagDATAINFO, IDataFilter **);
  HRESULT (__stdcall *GetDefaultFilter)(IEncodingFilterFactory *this, const wchar_t *, const wchar_t *, IDataFilter **);
};

/* 8688 */
struct tagMENUBARINFO
{
  unsigned int cbSize;
  tagRECT rcBar;
  HMENU__ *hMenu;
  HWND__ *hwndMenu;
  __int32 fBarFocused : 1;
  __int32 fFocused : 1;
};

/* 8689 */
struct _BYTE_SIZEDARR
{
  unsigned int clSize;
  unsigned __int8 *pData;
};

/* 8690 */
struct _DRIVER_INFO_3W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
};

/* 8691 */
struct tagWTSSESSION_NOTIFICATION
{
  unsigned int cbSize;
  unsigned int dwSessionId;
};

/* 8692 */
struct RETRIEVAL_POINTERS_BUFFER::<unnamed_type_Extents>
{
  _LARGE_INTEGER NextVcn;
  _LARGE_INTEGER Lcn;
};

/* 8693 */
struct RETRIEVAL_POINTERS_BUFFER
{
  unsigned int ExtentCount;
  _LARGE_INTEGER StartingVcn;
  RETRIEVAL_POINTERS_BUFFER::<unnamed_type_Extents> Extents[1];
};

/* 8694 */
struct __declspec(align(4)) tagINTERFACEINFO
{
  IUnknown *pUnk;
  _GUID iid;
  unsigned __int16 wMethod;
};

/* 8695 */
struct __declspec(align(8)) PPM_IDLE_STATE_BUCKET_EX
{
  unsigned __int64 TotalTimeUs;
  unsigned int MinTimeUs;
  unsigned int MaxTimeUs;
  unsigned int Count;
};

/* 8696 */
struct PPM_IDLE_STATE_ACCOUNTING_EX
{
  unsigned __int64 TotalTime;
  unsigned int IdleTransitions;
  unsigned int FailedTransitions;
  unsigned int InvalidBucketIndex;
  unsigned int MinTimeUs;
  unsigned int MaxTimeUs;
  PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
};

/* 8697 */
struct HWAVEIN__
{
  int unused;
};

/* 8698 */
struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 8699 */
struct $_TypeDescriptor$_extraBytes_52
{
  const void *pVFTable;
  void *spare;
  char name[52];
};

/* 8700 */
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8701 */
struct _DRAGINFOA
{
  unsigned int uSize;
  tagPOINT pt;
  int fNC;
  char *lpFileList;
  unsigned int grfKeyState;
};

/* 8702 */
struct __cppobj JfrEvent<EventMetaspaceOOM>
{
};

/* 8703 */
struct __cppobj EventMetaspaceOOM : JfrEvent<EventMetaspaceOOM>
{
};

/* 8704 */
struct tagMIXERCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
};

/* 8705 */
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
{
  char *pszObjId;
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 8706 */
struct tagEMRSCALEVIEWPORTEXTEX
{
  tagEMR emr;
  int xNum;
  int xDenom;
  int yNum;
  int yDenom;
};

/* 8707 */
struct tagJOYCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  wchar_t szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  wchar_t szRegKey[32];
  wchar_t szOEMVxD[260];
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 8708 */
struct joyinfoex_tag
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwXpos;
  unsigned int dwYpos;
  unsigned int dwZpos;
  unsigned int dwRpos;
  unsigned int dwUpos;
  unsigned int dwVpos;
  unsigned int dwButtons;
  unsigned int dwButtonNumber;
  unsigned int dwPOV;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 8709 */
struct _CRYPT_MASK_GEN_ALGORITHM
{
  char *pszObjId;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
};

/* 8710 */
struct _CRYPT_RSA_SSA_PSS_PARAMETERS
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
  unsigned int dwSaltLength;
  unsigned int dwTrailerField;
};

/* 8711 */
struct _PRINTER_INFO_5W
{
  wchar_t *pPrinterName;
  wchar_t *pPortName;
  unsigned int Attributes;
  unsigned int DeviceNotSelectedTimeout;
  unsigned int TransmissionRetryTimeout;
};

/* 8712 */
struct tagEMRELLIPSE
{
  tagEMR emr;
  _RECTL rclBox;
};

/* 8713 */
struct _PSAPI_WS_WATCH_INFORMATION
{
  void *FaultingPc;
  void *FaultingVa;
};

/* 8714 */
struct _ACCESS_ALLOWED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 8715 */
struct $79FA692AF2D868318B7516C685A0638E
{
  unsigned __int32 RatePercent : 7;
  unsigned __int32 Reserved0 : 25;
};

/* 8716 */
union _RATE_QUOTA_LIMIT
{
  unsigned int RateData;
  $79FA692AF2D868318B7516C685A0638E __s1;
};

/* 8717 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed_tag>::<unnamed_type_ProcessorCore>
{
  unsigned __int8 Flags;
};

/* 8718 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed_tag>::<unnamed_type_NumaNode>
{
  unsigned int NodeNumber;
};

/* 8719 */
union $7FBF8FC90BAA6DEAF546BA478C88C98D
{
  _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed_tag>::<unnamed_type_ProcessorCore> ProcessorCore;
  _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::<unnamed_tag>::<unnamed_type_NumaNode> NumaNode;
  _CACHE_DESCRIPTOR Cache;
  unsigned __int64 Reserved[2];
};

/* 8720 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
  unsigned int ProcessorMask;
  _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  $7FBF8FC90BAA6DEAF546BA478C88C98D ___u2;
};

/* 8721 */
struct tagENHMETAHEADER
{
  unsigned int iType;
  unsigned int nSize;
  _RECTL rclBounds;
  _RECTL rclFrame;
  unsigned int dSignature;
  unsigned int nVersion;
  unsigned int nBytes;
  unsigned int nRecords;
  unsigned __int16 nHandles;
  unsigned __int16 sReserved;
  unsigned int nDescription;
  unsigned int offDescription;
  unsigned int nPalEntries;
  tagSIZE szlDevice;
  tagSIZE szlMillimeters;
  unsigned int cbPixelFormat;
  unsigned int offPixelFormat;
  unsigned int bOpenGL;
  tagSIZE szlMicrometers;
};

/* 8722 */
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
{
  unsigned int cbSize;
  $2648935626D60F3A93F830EF5D884CB4 ___u1;
  unsigned int dwKeySpec;
  _CMSG_KEY_AGREE_RECIPIENT_INFO *pKeyAgree;
  unsigned int dwRecipientIndex;
  unsigned int dwRecipientEncryptedKeyIndex;
  _CRYPT_BIT_BLOB OriginatorPublicKey;
};

/* 8723 */
struct __cppobj JfrEvent<EventSystemProcess>
{
};

/* 8724 */
struct __cppobj EventSystemProcess : JfrEvent<EventSystemProcess>
{
};

/* 8725 */
struct _TAPE_WMI_OPERATIONS
{
  unsigned int Method;
  unsigned int DataBufferSize;
  void *DataBuffer;
};

/* 8726 */
struct tagMCI_SYSINFO_PARMSW
{
  unsigned int dwCallback;
  wchar_t *lpstrReturn;
  unsigned int dwRetSize;
  unsigned int dwNumber;
  unsigned int wDeviceType;
};

/* 8727 */
struct __cppobj vc_attributes::PreBoundAttribute
{
  unsigned int Deref;
};

/* 8728 */
struct OPENCARD_SEARCH_CRITERIAW
{
  unsigned int dwStructSize;
  wchar_t *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  const _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  wchar_t *lpstrCardNames;
  unsigned int nMaxCardNames;
  int (__stdcall *lpfnCheck)(unsigned int, unsigned int, void *);
  unsigned int (__stdcall *lpfnConnect)(unsigned int, wchar_t *, wchar_t *, void *);
  void (__stdcall *lpfnDisconnect)(unsigned int, unsigned int, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
};

/* 8729 */
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
{
  unsigned int cOID;
  char **rgpszOID;
};

/* 8730 */
struct _PRINTER_NOTIFY_INFO
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _PRINTER_NOTIFY_INFO_DATA aData[1];
};

/* 8731 */
struct __cppobj ISurrogate : IUnknown
{
};

/* 8732 */
struct /*VFT*/ ISurrogate_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *LoadDllServer)(ISurrogate *this, const _GUID *);
  HRESULT (__stdcall *FreeSurrogate)(ISurrogate *this);
};

/* 8733 */
struct _SE_SECURITY_DESCRIPTOR
{
  unsigned int Size;
  unsigned int Flags;
  void *SecurityDescriptor;
};

/* 8734 */
struct HFONT__
{
  int unused;
};

/* 8735 */
struct tagMCI_OVLY_WINDOW_PARMSA
{
  unsigned int dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const char *lpstrText;
};

/* 8736 */
struct _PRINTER_INFO_7A
{
  char *pszObjectGUID;
  unsigned int dwAction;
};

/* 8737 */
struct tagMOUSEMOVEPOINT
{
  int x;
  int y;
  unsigned int time;
  unsigned int dwExtraInfo;
};

/* 8738 */
struct __cppobj JfrStructCalleeMethod
{
};

/* 8739 */
struct tagHIGHCONTRASTA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  char *lpszDefaultScheme;
};

/* 8740 */
struct _CERT_AUTHORITY_INFO_ACCESS
{
  unsigned int cAccDescr;
  _CERT_ACCESS_DESCRIPTION *rgAccDescr;
};

/* 8741 */
struct _CMSG_CNG_CONTENT_DECRYPT_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *(__stdcall *pfnAlloc)(unsigned int);
  void (__stdcall *pfnFree)(void *);
  unsigned int hNCryptKey;
  unsigned __int8 *pbContentEncryptKey;
  unsigned int cbContentEncryptKey;
  void *hCNGContentEncryptKey;
  unsigned __int8 *pbCNGContentEncryptKeyObject;
};

/* 8742 */
struct __cppobj NativeReturn : NativeInstruction
{
};

/* 8743 */
struct _JIT_DEBUG_INFO
{
  unsigned int dwSize;
  unsigned int dwProcessorArchitecture;
  unsigned int dwThreadID;
  unsigned int dwReserved0;
  unsigned __int64 lpExceptionAddress;
  unsigned __int64 lpExceptionRecord;
  unsigned __int64 lpContextRecord;
};

/* 8744 */
struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRootProgramQualifierFlags;
};

/* 8745 */
struct __declspec(align(4)) tagEMRSETICMPROFILE
{
  tagEMR emr;
  unsigned int dwFlags;
  unsigned int cbName;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 8746 */
struct _CERT_GENERAL_SUBTREE
{
  _CERT_ALT_NAME_ENTRY Base;
  unsigned int dwMinimum;
  int fMaximum;
  unsigned int dwMaximum;
};

/* 8747 */
struct _CERT_KEY_CONTEXT
{
  unsigned int cbSize;
  $2648935626D60F3A93F830EF5D884CB4 ___u1;
  unsigned int dwKeySpec;
};

/* 8748 */
struct _TAPE_GET_STATISTICS
{
  unsigned int Operation;
};

/* 8749 */
struct _PROVIDOR_INFO_1W
{
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDLLName;
};

/* 8750 */
struct __cppobj ITypeLib2 : ITypeLib
{
};

/* 8751 */
struct /*VFT*/ ITypeLib2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *GetTypeInfoCount)(ITypeLib *this);
  HRESULT (__stdcall *GetTypeInfo)(ITypeLib *this, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *this, unsigned int, tagTYPEKIND *);
  HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *this, const _GUID *, ITypeInfo **);
  HRESULT (__stdcall *GetLibAttr)(ITypeLib *this, tagTLIBATTR **);
  HRESULT (__stdcall *GetTypeComp)(ITypeLib *this, ITypeComp **);
  HRESULT (__stdcall *GetDocumentation)(ITypeLib *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *IsName)(ITypeLib *this, wchar_t *, unsigned int, int *);
  HRESULT (__stdcall *FindName)(ITypeLib *this, wchar_t *, unsigned int, ITypeInfo **, int *, unsigned __int16 *);
  void (__stdcall *ReleaseTLibAttr)(ITypeLib *this, tagTLIBATTR *);
  HRESULT (__stdcall *GetCustData)(ITypeLib2 *this, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetLibStatistics)(ITypeLib2 *this, unsigned int *, unsigned int *);
  HRESULT (__stdcall *GetDocumentation2)(ITypeLib2 *this, int, unsigned int, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *GetAllCustData)(ITypeLib2 *this, tagCUSTDATA *);
};

/* 8752 */
struct _IMAGE_BASE_RELOCATION
{
  unsigned int VirtualAddress;
  unsigned int SizeOfBlock;
};

/* 8753 */
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
  unsigned __int64 LastRecoveredLsn;
};

/* 8754 */
struct _PERF_COUNTER_DEFINITION
{
  unsigned int ByteLength;
  unsigned int CounterNameTitleIndex;
  wchar_t *CounterNameTitle;
  unsigned int CounterHelpTitleIndex;
  wchar_t *CounterHelpTitle;
  int DefaultScale;
  unsigned int DetailLevel;
  unsigned int CounterType;
  unsigned int CounterSize;
  unsigned int CounterOffset;
};

/* 8755 */
union $B5432B5766EACA8D7A891B0C9CA17601
{
  unsigned int cbStruct;
  unsigned int cbSize;
};

/* 8756 */
struct _HTTPSPolicyCallbackData
{
  $B5432B5766EACA8D7A891B0C9CA17601 ___u0;
  unsigned int dwAuthType;
  unsigned int fdwChecks;
  wchar_t *pwszServerName;
};

/* 8757 */
struct _PROCESSOR_NUMBER
{
  unsigned __int16 Group;
  unsigned __int8 Number;
  unsigned __int8 Reserved;
};

/* 8758 */
struct tagWAVEINCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
};

/* 8759 */
struct _CERT_REVOCATION_CHAIN_PARA
{
  unsigned int cbSize;
  void *hChainEngine;
  void *hAdditionalStore;
  unsigned int dwChainFlags;
  unsigned int dwUrlRetrievalTimeout;
  _FILETIME *pftCurrentTime;
  _FILETIME *pftCacheResync;
  unsigned int cbMaxUrlRetrievalByteCount;
};

/* 8760 */
struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
{
  unsigned int cbSize;
  int iDeltaCrlIndicator;
  _FILETIME *pftCacheResync;
  _FILETIME *pLastSyncTime;
  _FILETIME *pMaxAgeTime;
  _CERT_REVOCATION_CHAIN_PARA *pChainPara;
  _CRYPTOAPI_BLOB *pDeltaCrlIndicator;
};

/* 8761 */
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
  _GUID EnlistmentId;
  _GUID UOW;
};

/* 8762 */
struct tagMCI_OVLY_LOAD_PARMSA
{
  unsigned int dwCallback;
  const char *lpfilename;
  tagRECT rc;
};

/* 8763 */
struct _wireSAFEARR_BSTR
{
  unsigned int Size;
  _FLAGGED_WORD_BLOB **aBstr;
};

/* 8764 */
struct _wireSAFEARR_UNKNOWN
{
  unsigned int Size;
  IUnknown **apUnknown;
};

/* 8765 */
struct _wireSAFEARR_DISPATCH
{
  unsigned int Size;
  IDispatch **apDispatch;
};

/* 8771 */
struct _wireSAFEARR_VARIANT
{
  unsigned int Size;
  _wireVARIANT **aVariant;
};

/* 8772 */
struct _SHORT_SIZEDARR
{
  unsigned int clSize;
  unsigned __int16 *pData;
};

/* 8773 */
struct _LONG_SIZEDARR
{
  unsigned int clSize;
  unsigned int *pData;
};

/* 8774 */
struct _HYPER_SIZEDARR
{
  unsigned int clSize;
  __int64 *pData;
};

/* 8766 */
union _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001
{
  _wireSAFEARR_BSTR BstrStr;
  _wireSAFEARR_UNKNOWN UnknownStr;
  _wireSAFEARR_DISPATCH DispatchStr;
  _wireSAFEARR_VARIANT VariantStr;
  _wireSAFEARR_BRECORD RecordStr;
  _wireSAFEARR_HAVEIID HaveIidStr;
  _BYTE_SIZEDARR ByteStr;
  _SHORT_SIZEDARR WordStr;
  _LONG_SIZEDARR LongStr;
  _HYPER_SIZEDARR HyperStr;
};

/* 8767 */
struct __unaligned __declspec(align(4)) _wireSAFEARRAY_UNION
{
  unsigned int sfType;
  _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001 u;
};

/* 8768 */
struct _wireSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  __unaligned __declspec(align(1)) _wireSAFEARRAY_UNION uArrayStructs;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 8770 */
union $86A054D37940EEAA2D7BCBB3091319A5
{
  __int64 llVal;
  int lVal;
  unsigned __int8 bVal;
  __int16 iVal;
  float fltVal;
  long double dblVal;
  __int16 boolVal;
  int scode;
  tagCY cyVal;
  long double date;
  _FLAGGED_WORD_BLOB *bstrVal;
  IUnknown *punkVal;
  IDispatch *pdispVal;
  _wireSAFEARRAY **parray;
  _wireBRECORD *brecVal;
  unsigned __int8 *pbVal;
  __int16 *piVal;
  int *plVal;
  __int64 *pllVal;
  float *pfltVal;
  long double *pdblVal;
  __int16 *pboolVal;
  int *pscode;
  tagCY *pcyVal;
  long double *pdate;
  _FLAGGED_WORD_BLOB **pbstrVal;
  IUnknown **ppunkVal;
  IDispatch **ppdispVal;
  _wireSAFEARRAY ***pparray;
  _wireVARIANT **pvarVal;
  char cVal;
  unsigned __int16 uiVal;
  unsigned int ulVal;
  unsigned __int64 ullVal;
  int intVal;
  unsigned int uintVal;
  tagDEC decVal;
  tagDEC *pdecVal;
  char *pcVal;
  unsigned __int16 *puiVal;
  unsigned int *pulVal;
  unsigned __int64 *pullVal;
  int *pintVal;
  unsigned int *puintVal;
};

/* 8769 */
struct _wireVARIANT
{
  unsigned int clSize;
  unsigned int rpcReserved;
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  $86A054D37940EEAA2D7BCBB3091319A5 ___u6;
};

/* 8775 */
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
  unsigned int MarshalCookie;
  _GUID UOW;
};

/* 8776 */
struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
  unsigned int dwMagic;
  unsigned int dwVersion;
  unsigned int cbKeyData;
};

/* 8777 */
struct __declspec(align(8)) _DISK_GEOMETRY_EX
{
  _DISK_GEOMETRY Geometry;
  _LARGE_INTEGER DiskSize;
  unsigned __int8 Data[1];
};

/* 8778 */
struct tagCANDIDATELIST
{
  unsigned int dwSize;
  unsigned int dwStyle;
  unsigned int dwCount;
  unsigned int dwSelection;
  unsigned int dwPageStart;
  unsigned int dwPageSize;
  unsigned int dwOffset[1];
};

/* 8779 */
struct tagACCESSTIMEOUT
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iTimeOutMSec;
};

/* 8780 */
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
  unsigned int cbSize;
  unsigned int dwSignerIndex;
  _CRYPTOAPI_BLOB blob;
};

/* 8781 */
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005::<unnamed_type_ByName>
{
  wchar_t *pPackageName;
  _GUID PolicyId;
};

/* 8782 */
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005::<unnamed_type_ByObjectId>
{
  _GUID ObjectId;
  _GUID PolicyId;
};

/* 8783 */
union __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005
{
  _GUID clsid;
  wchar_t *pFileExt;
  wchar_t *pMimeType;
  wchar_t *pProgId;
  wchar_t *pFileName;
  __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005::<unnamed_type_ByName> ByName;
  __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005::<unnamed_type_ByObjectId> ByObjectId;
};

/* 8784 */
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
{
  unsigned int tyspec;
  __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
};

/* 8785 */
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
  void *CompletionKey;
  void *CompletionPort;
};

/* 8786 */
struct HWINEVENTHOOK__
{
  int unused;
};

/* 8787 */
struct tagMCI_OVLY_OPEN_PARMSA
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const char *lpstrDeviceType;
  const char *lpstrElementName;
  const char *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 8788 */
struct _CMC_TAGGED_CERT_REQUEST
{
  unsigned int dwBodyPartID;
  _CRYPTOAPI_BLOB SignedCertRequest;
};

/* 8789 */
struct _CMC_TAGGED_REQUEST
{
  unsigned int dwTaggedRequestChoice;
  _CMC_TAGGED_CERT_REQUEST *pTaggedCertRequest;
};

/* 8790 */
struct _userFLAG_STGMEDIUM
{
  int ContextFlags;
  int fPassOwnership;
  _userSTGMEDIUM Stgmed;
};

/* 8791 */
struct __cppobj JfrEvent<EventGCPhasePauseLevel1>
{
};

/* 8792 */
struct tagMENUGETOBJECTINFO
{
  unsigned int dwFlags;
  unsigned int uPos;
  HMENU__ *hmenu;
  void *riid;
  void *pvObj;
};

/* 8793 */
struct __unaligned __declspec(align(2)) tWAVEFORMATEX
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 cbSize;
};

/* 8794 */
struct _CMS_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Algid;
  unsigned __int8 *pbOID;
  unsigned int cbOID;
};

/* 8795 */
struct _CTL_VERIFY_USAGE_PARA
{
  unsigned int cbSize;
  _CRYPTOAPI_BLOB ListIdentifier;
  unsigned int cCtlStore;
  void **rghCtlStore;
  unsigned int cSignerStore;
  void **rghSignerStore;
};

/* 8796 */
struct _JOB_INFO_4A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pNotifyName;
  char *pDatatype;
  char *pPrintProcessor;
  char *pParameters;
  char *pDriverName;
  _devicemodeA *pDevMode;
  char *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
  int SizeHigh;
};

/* 8797 */
struct _CMSG_KEY_TRANS_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  unsigned int dwFlags;
};

/* 8798 */
struct __cppobj JfrEvent<EventOldGarbageCollection>
{
};

/* 8799 */
struct __declspec(align(2)) _MESSAGE_RESOURCE_ENTRY
{
  unsigned __int16 Length;
  unsigned __int16 Flags;
  unsigned __int8 Text[1];
};

/* 8800 */
struct tagHIGHCONTRASTW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  wchar_t *lpszDefaultScheme;
};

/* 8801 */
struct tagMCI_LOAD_PARMSA
{
  unsigned int dwCallback;
  const char *lpfilename;
};

/* 8802 */
struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO
{
  unsigned int cbSize;
  unsigned int dwObjectType;
  unsigned int dwError;
  unsigned int dwReserved;
  _FILETIME ThisUpdateTime;
  _FILETIME NextUpdateTime;
  _FILETIME PublishTime;
};

/* 8803 */
struct _CRYPTNET_URL_CACHE_FLUSH_INFO
{
  unsigned int cbSize;
  unsigned int dwExemptSeconds;
  _FILETIME ExpireTime;
};

/* 8804 */
struct _CRYPTNET_URL_CACHE_RESPONSE_INFO
{
  unsigned int cbSize;
  unsigned __int16 wResponseType;
  unsigned __int16 wResponseFlags;
  _FILETIME LastModifiedTime;
  unsigned int dwMaxAge;
  const wchar_t *pwszETag;
  unsigned int dwProxyId;
};

/* 8805 */
struct _CRYPT_RETRIEVE_AUX_INFO
{
  unsigned int cbSize;
  _FILETIME *pLastSyncTime;
  unsigned int dwMaxUrlRetrievalByteCount;
  _CRYPTNET_URL_CACHE_PRE_FETCH_INFO *pPreFetchInfo;
  _CRYPTNET_URL_CACHE_FLUSH_INFO *pFlushInfo;
  _CRYPTNET_URL_CACHE_RESPONSE_INFO **ppResponseInfo;
  wchar_t *pwszCacheFileNamePrefix;
  _FILETIME *pftCacheResync;
  int fProxyCacheRetrieval;
  unsigned int dwHttpStatusCode;
};

/* 8806 */
struct tagSOLE_AUTHENTICATION_INFO
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  void *pAuthInfo;
};

/* 8807 */
union $22971E98F1DCAE471B592EC18ECB1551
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 8808 */
struct _IMAGE_SECTION_HEADER
{
  unsigned __int8 Name[8];
  $22971E98F1DCAE471B592EC18ECB1551 Misc;
  unsigned int VirtualAddress;
  unsigned int SizeOfRawData;
  unsigned int PointerToRawData;
  unsigned int PointerToRelocations;
  unsigned int PointerToLinenumbers;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int Characteristics;
};

/* 8809 */
struct tagPOLYTEXTW
{
  int x;
  int y;
  unsigned int n;
  const wchar_t *lpstr;
  unsigned int uiFlags;
  tagRECT rcl;
  int *pdx;
};

/* 8810 */
struct _BCRYPT_PSS_PADDING_INFO
{
  const wchar_t *pszAlgId;
  unsigned int cbSalt;
};

/* 8811 */
struct OPENCARDNAMEW
{
  unsigned int dwStructSize;
  HWND__ *hwndOwner;
  unsigned int hSCardContext;
  wchar_t *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  wchar_t *lpstrCardNames;
  unsigned int nMaxCardNames;
  const _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  wchar_t *lpstrRdr;
  unsigned int nMaxRdr;
  wchar_t *lpstrCard;
  unsigned int nMaxCard;
  const wchar_t *lpstrTitle;
  unsigned int dwFlags;
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  unsigned int dwActiveProtocol;
  unsigned int (__stdcall *lpfnConnect)(unsigned int, wchar_t *, wchar_t *, void *);
  int (__stdcall *lpfnCheck)(unsigned int, unsigned int, void *);
  void (__stdcall *lpfnDisconnect)(unsigned int, unsigned int, void *);
  unsigned int hCardHandle;
};

/* 8812 */
struct __cppobj JfrEvent<EventConcurrentModeFailure>
{
};

/* 8813 */
struct __cppobj EventConcurrentModeFailure : JfrEvent<EventConcurrentModeFailure>
{
};

/* 8814 */
struct _CRYPT_PSOURCE_ALGORITHM
{
  char *pszObjId;
  _CRYPTOAPI_BLOB EncodingParameters;
};

/* 8815 */
struct _CRYPT_RSAES_OAEP_PARAMETERS
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
  _CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
};

/* 8816 */
struct _PORT_INFO_1W
{
  wchar_t *pName;
};

/* 8817 */
struct __cppobj JfrEvent<EventThreadEnd>
{
};

/* 8818 */
struct __cppobj EventBiasedLockRevocation : JfrEvent<EventBiasedLockRevocation>
{
};

/* 8819 */
struct _LONGDOUBLE
{
  long double x;
};

/* 8820 */
struct PPM_PERFSTATE_DOMAIN_EVENT
{
  unsigned int State;
  unsigned int Latency;
  unsigned int Speed;
  unsigned __int64 Processors;
};

/* 8821 */
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
  unsigned int SavepointId;
};

/* 8822 */
struct tagWAVEINCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
};

/* 8823 */
struct _CRL_REVOCATION_INFO
{
  _CRL_ENTRY *pCrlEntry;
  const _CRL_CONTEXT *pCrlContext;
  const _CERT_CHAIN_CONTEXT *pCrlIssuerChain;
};

/* 8824 */
struct _IDEREGS
{
  unsigned __int8 bFeaturesReg;
  unsigned __int8 bSectorCountReg;
  unsigned __int8 bSectorNumberReg;
  unsigned __int8 bCylLowReg;
  unsigned __int8 bCylHighReg;
  unsigned __int8 bDriveHeadReg;
  unsigned __int8 bCommandReg;
  unsigned __int8 bReserved;
};

/* 8825 */
struct __unaligned __declspec(align(1)) _SENDCMDINPARAMS
{
  unsigned int cBufferSize;
  _IDEREGS irDriveRegs;
  unsigned __int8 bDriveNumber;
  unsigned __int8 bReserved[3];
  unsigned int dwReserved[4];
  unsigned __int8 bBuffer[1];
};

/* 8826 */
struct _BIDI_REQUEST_DATA
{
  unsigned int dwReqNumber;
  wchar_t *pSchema;
  _BIDI_DATA data;
};

/* 8827 */
struct _BIDI_REQUEST_CONTAINER
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _BIDI_REQUEST_DATA aData[1];
};

/* 8828 */
struct __cppobj IDropSource : IUnknown
{
};

/* 8829 */
struct /*VFT*/ IDropSource_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryContinueDrag)(IDropSource *this, int, unsigned int);
  HRESULT (__stdcall *GiveFeedback)(IDropSource *this, unsigned int);
};

/* 8830 */
struct _EFS_HASH_BLOB
{
  unsigned int cbData;
  unsigned __int8 *pbData;
};

/* 8831 */
struct tagFINDREPLACEW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  unsigned int Flags;
  wchar_t *lpstrFindWhat;
  wchar_t *lpstrReplaceWith;
  unsigned __int16 wFindWhatLen;
  unsigned __int16 wReplaceWithLen;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpTemplateName;
};

/* 8832 */
struct SYSTEM_BATTERY_STATE
{
  unsigned __int8 AcOnLine;
  unsigned __int8 BatteryPresent;
  unsigned __int8 Charging;
  unsigned __int8 Discharging;
  unsigned __int8 Spare1[4];
  unsigned int MaxCapacity;
  unsigned int RemainingCapacity;
  unsigned int Rate;
  unsigned int EstimatedTime;
  unsigned int DefaultAlert1;
  unsigned int DefaultAlert2;
};

/* 8833 */
struct tagICONMETRICSA
{
  unsigned int cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  tagLOGFONTA lfFont;
};

/* 8834 */
struct wavehdr_tag
{
  char *lpData;
  unsigned int dwBufferLength;
  unsigned int dwBytesRecorded;
  unsigned int dwUser;
  unsigned int dwFlags;
  unsigned int dwLoops;
  wavehdr_tag *lpNext;
  unsigned int reserved;
};

/* 8835 */
struct _nlsversioninfo
{
  unsigned int dwNLSVersionInfoSize;
  unsigned int dwNLSVersion;
  unsigned int dwDefinedVersion;
};

/* 8836 */
struct __cppobj JfrEvent<EventGCConfiguration>
{
};

/* 8837 */
struct __cppobj EventGCConfiguration : JfrEvent<EventGCConfiguration>
{
};

/* 8838 */
struct __declspec(align(8)) _TRANSACTION_PROPERTIES_INFORMATION
{
  unsigned int IsolationLevel;
  unsigned int IsolationFlags;
  _LARGE_INTEGER Timeout;
  unsigned int Outcome;
  unsigned int DescriptionLength;
  wchar_t Description[1];
};

/* 8839 */
struct HMETAFILE__
{
  int unused;
};

/* 8840 */
struct tagMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  HMETAFILE__ *hMF;
};

/* 8841 */
struct tagAXESLISTW
{
  unsigned int axlReserved;
  unsigned int axlNumAxes;
  tagAXISINFOW axlAxisInfo[16];
};

/* 8842 */
struct __cppobj JfrEvent<EventInitialSystemProperty>
{
};

/* 8843 */
union $E5EC784184F61E2D1DB730C15D65FB8F
{
  void *hIcon;
  void *hMonitor;
};

/* 8844 */
struct _SHELLEXECUTEINFOA
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const char *lpVerb;
  const char *lpFile;
  const char *lpParameters;
  const char *lpDirectory;
  int nShow;
  HINSTANCE__ *hInstApp;
  void *lpIDList;
  const char *lpClass;
  HKEY__ *hkeyClass;
  unsigned int dwHotKey;
  $E5EC784184F61E2D1DB730C15D65FB8F ___u13;
  void *hProcess;
};

/* 8845 */
struct _CRYPT_HASH_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned int hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
};

/* 8846 */
struct /*VFT*/ StoreNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 8847 */
struct __cppobj StoreNNode : StoreNode
{
};

/* 8848 */
struct _CERT_BASIC_CONSTRAINTS_INFO
{
  _CRYPT_BIT_BLOB SubjectType;
  int fPathLenConstraint;
  unsigned int dwPathLenConstraint;
  unsigned int cSubtreesConstraint;
  _CRYPTOAPI_BLOB *rgSubtreesConstraint;
};

/* 8849 */
struct tagHELPWININFOW
{
  int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  wchar_t rgchMember[2];
};

/* 8850 */
struct _numberfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 8851 */
struct _CERT_STORE_PROV_FIND_INFO
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned int dwFindFlags;
  unsigned int dwFindType;
  const void *pvFindPara;
};

/* 8852 */
struct _BCRYPT_OAEP_PADDING_INFO
{
  const wchar_t *pszAlgId;
  unsigned __int8 *pbLabel;
  unsigned int cbLabel;
};

/* 8853 */
struct __cppobj JfrEvent<EventUnsignedIntFlagChanged>
{
};

/* 8854 */
struct __cppobj EventUnsignedIntFlagChanged : JfrEvent<EventUnsignedIntFlagChanged>
{
};

/* 8855 */
struct tagHANDLETABLE
{
  void *objectHandle[1];
};

/* 8856 */
struct __declspec(align(4)) tagBinaryParam
{
  void *Buffer;
  __int16 Size;
};

/* 8857 */
struct _OCSP_REQUEST_ENTRY
{
  _OCSP_CERT_ID CertId;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 8858 */
struct _OCSP_REQUEST_INFO
{
  unsigned int dwVersion;
  _CERT_ALT_NAME_ENTRY *pRequestorName;
  unsigned int cRequestEntry;
  _OCSP_REQUEST_ENTRY *rgRequestEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 8859 */
struct _NTFS_STATISTICS::<unnamed_type_MftWritesUserLevel>
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
  unsigned __int16 Flush;
};

/* 8860 */
struct _NTFS_STATISTICS::<unnamed_type_Mft2WritesUserLevel>
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
  unsigned __int16 Flush;
};

/* 8861 */
struct _NTFS_STATISTICS::<unnamed_type_BitmapWritesUserLevel>
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
};

/* 8862 */
struct _NTFS_STATISTICS::<unnamed_type_MftBitmapWritesUserLevel>
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
  unsigned __int16 Flush;
};

/* 8863 */
struct _NTFS_STATISTICS::<unnamed_type_Allocate>
{
  unsigned int Calls;
  unsigned int Clusters;
  unsigned int Hints;
  unsigned int RunsReturned;
  unsigned int HintsHonored;
  unsigned int HintsClusters;
  unsigned int Cache;
  unsigned int CacheClusters;
  unsigned int CacheMiss;
  unsigned int CacheMissClusters;
};

/* 8864 */
struct _NTFS_STATISTICS
{
  unsigned int LogFileFullExceptions;
  unsigned int OtherExceptions;
  unsigned int MftReads;
  unsigned int MftReadBytes;
  unsigned int MftWrites;
  unsigned int MftWriteBytes;
  _NTFS_STATISTICS::<unnamed_type_MftWritesUserLevel> MftWritesUserLevel;
  unsigned __int16 MftWritesFlushForLogFileFull;
  unsigned __int16 MftWritesLazyWriter;
  unsigned __int16 MftWritesUserRequest;
  unsigned int Mft2Writes;
  unsigned int Mft2WriteBytes;
  _NTFS_STATISTICS::<unnamed_type_Mft2WritesUserLevel> Mft2WritesUserLevel;
  unsigned __int16 Mft2WritesFlushForLogFileFull;
  unsigned __int16 Mft2WritesLazyWriter;
  unsigned __int16 Mft2WritesUserRequest;
  unsigned int RootIndexReads;
  unsigned int RootIndexReadBytes;
  unsigned int RootIndexWrites;
  unsigned int RootIndexWriteBytes;
  unsigned int BitmapReads;
  unsigned int BitmapReadBytes;
  unsigned int BitmapWrites;
  unsigned int BitmapWriteBytes;
  unsigned __int16 BitmapWritesFlushForLogFileFull;
  unsigned __int16 BitmapWritesLazyWriter;
  unsigned __int16 BitmapWritesUserRequest;
  _NTFS_STATISTICS::<unnamed_type_BitmapWritesUserLevel> BitmapWritesUserLevel;
  unsigned int MftBitmapReads;
  unsigned int MftBitmapReadBytes;
  unsigned int MftBitmapWrites;
  unsigned int MftBitmapWriteBytes;
  unsigned __int16 MftBitmapWritesFlushForLogFileFull;
  unsigned __int16 MftBitmapWritesLazyWriter;
  unsigned __int16 MftBitmapWritesUserRequest;
  _NTFS_STATISTICS::<unnamed_type_MftBitmapWritesUserLevel> MftBitmapWritesUserLevel;
  unsigned int UserIndexReads;
  unsigned int UserIndexReadBytes;
  unsigned int UserIndexWrites;
  unsigned int UserIndexWriteBytes;
  unsigned int LogFileReads;
  unsigned int LogFileReadBytes;
  unsigned int LogFileWrites;
  unsigned int LogFileWriteBytes;
  _NTFS_STATISTICS::<unnamed_type_Allocate> Allocate;
};

/* 8865 */
struct tagSOUNDSENTRYA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iFSTextEffect;
  unsigned int iFSTextEffectMSec;
  unsigned int iFSTextEffectColorBits;
  unsigned int iFSGrafEffect;
  unsigned int iFSGrafEffectMSec;
  unsigned int iFSGrafEffectColor;
  unsigned int iWindowsEffect;
  unsigned int iWindowsEffectMSec;
  char *lpszWindowsEffectDLL;
  unsigned int iWindowsEffectOrdinal;
};

/* 8866 */
struct _IMAGE_RESOURCE_DATA_ENTRY
{
  unsigned int OffsetToData;
  unsigned int Size;
  unsigned int CodePage;
  unsigned int Reserved;
};

/* 8867 */
struct _COMMTIMEOUTS
{
  unsigned int ReadIntervalTimeout;
  unsigned int ReadTotalTimeoutMultiplier;
  unsigned int ReadTotalTimeoutConstant;
  unsigned int WriteTotalTimeoutMultiplier;
  unsigned int WriteTotalTimeoutConstant;
};

/* 8868 */
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 8869 */
struct _EXIT_PROCESS_DEBUG_INFO
{
  unsigned int dwExitCode;
};

/* 8870 */
struct _SHNAMEMAPPINGA
{
  char *pszOldPath;
  char *pszNewPath;
  int cchOldPath;
  int cchNewPath;
};

/* 8871 */
struct _CMC_ADD_ATTRIBUTES_INFO
{
  unsigned int dwCmcDataReference;
  unsigned int cCertReference;
  unsigned int *rgdwCertReference;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 8872 */
struct _ImageArchitectureEntry
{
  unsigned int FixupInstRVA;
  unsigned int NewInst;
};

/* 8873 */
union $4CFA15F5CE489CDF0BD78DFB308FEF36
{
  unsigned __int16 Ordinal;
  unsigned __int16 Hint;
};

/* 8874 */
struct IMPORT_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  unsigned int SizeOfData;
  $4CFA15F5CE489CDF0BD78DFB308FEF36 ___u6;
  unsigned __int16 Type : 2;
  unsigned __int16 NameType : 3;
  unsigned __int16 Reserved : 11;
};

/* 8875 */
struct tagMSGBOXPARAMSW
{
  unsigned int cbSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpszText;
  const wchar_t *lpszCaption;
  unsigned int dwStyle;
  const wchar_t *lpszIcon;
  unsigned int dwContextHelpId;
  void (__stdcall *lpfnMsgBoxCallback)(tagHELPINFO *);
  unsigned int dwLanguageId;
};

/* 8876 */
struct __cppobj IContinue : IUnknown
{
};

/* 8877 */
struct /*VFT*/ IContinue_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *FContinue)(IContinue *this);
};

/* 8878 */
struct _CRYPT_TIME_STAMP_REQUEST_INFO
{
  char *pszTimeStampAlgorithm;
  char *pszContentType;
  _CRYPTOAPI_BLOB Content;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 8879 */
struct __cppobj JfrEvent<EventEvacuationFailed>
{
};

/* 8880 */
struct _CERT_AUTHORITY_KEY_ID2_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CERT_ALT_NAME_INFO AuthorityCertIssuer;
  _CRYPTOAPI_BLOB AuthorityCertSerialNumber;
};

/* 8881 */
struct tagNONCLIENTMETRICSA
{
  unsigned int cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  tagLOGFONTA lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  tagLOGFONTA lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  tagLOGFONTA lfMenuFont;
  tagLOGFONTA lfStatusFont;
  tagLOGFONTA lfMessageFont;
};

/* 8882 */
struct tagRAWINPUTDEVICE
{
  unsigned __int16 usUsagePage;
  unsigned __int16 usUsage;
  unsigned int dwFlags;
  HWND__ *hwndTarget;
};

/* 8883 */
struct FIND_BY_SID_DATA
{
  unsigned int Restart;
  _SID Sid;
};

/* 8884 */
struct tagCREATESTRUCTW
{
  void *lpCreateParams;
  HINSTANCE__ *hInstance;
  HMENU__ *hMenu;
  HWND__ *hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  int style;
  const wchar_t *lpszName;
  const wchar_t *lpszClass;
  unsigned int dwExStyle;
};

/* 8885 */
struct tagCBT_CREATEWNDW
{
  tagCREATESTRUCTW *lpcs;
  HWND__ *hwndInsertAfter;
};

/* 8886 */
struct USN_JOURNAL_DATA
{
  unsigned __int64 UsnJournalID;
  __int64 FirstUsn;
  __int64 NextUsn;
  __int64 LowestValidUsn;
  __int64 MaxUsn;
  unsigned __int64 MaximumSize;
  unsigned __int64 AllocationDelta;
};

/* 8887 */
struct __cppobj ICancelMethodCalls : IUnknown
{
};

/* 8888 */
struct /*VFT*/ ICancelMethodCalls_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Cancel)(ICancelMethodCalls *this, unsigned int);
  HRESULT (__stdcall *TestCancel)(ICancelMethodCalls *this);
};

/* 8889 */
struct tagMONERRSTRUCT
{
  unsigned int cb;
  unsigned int wLastError;
  unsigned int dwTime;
  void *hTask;
};

/* 8890 */
struct _PRINTPROCESSOR_INFO_1W
{
  wchar_t *pName;
};

/* 8891 */
struct tagACTCTX_SECTION_KEYED_DATA_2600
{
  unsigned int cbSize;
  unsigned int ulDataFormatVersion;
  void *lpData;
  unsigned int ulLength;
  void *lpSectionGlobalData;
  unsigned int ulSectionGlobalDataLength;
  void *lpSectionBase;
  unsigned int ulSectionTotalLength;
  void *hActCtx;
  unsigned int ulAssemblyRosterIndex;
};

/* 8892 */
struct _RPC_SERVER_INTERFACE
{
  unsigned int Length;
  _RPC_SYNTAX_IDENTIFIER InterfaceId;
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  unsigned int RpcProtseqEndpointCount;
  _RPC_PROTSEQ_ENDPOINT *RpcProtseqEndpoint;
  void *DefaultManagerEpv;
  const void *InterpreterInfo;
  unsigned int Flags;
};

/* 8893 */
struct __cppobj IServiceProvider : IUnknown
{
};

/* 8894 */
struct /*VFT*/ IServiceProvider_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryService)(IServiceProvider *this, const _GUID *, const _GUID *, void **);
};

/* 8895 */
struct __cppobj IStdMarshalInfo : IUnknown
{
};

/* 8896 */
struct /*VFT*/ IStdMarshalInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassForHandler)(IStdMarshalInfo *this, unsigned int, void *, _GUID *);
};

/* 8897 */
struct _PERFORMANCE_DATA
{
  unsigned __int16 Size;
  unsigned __int8 Version;
  unsigned __int8 HwCountersCount;
  unsigned int ContextSwitchCount;
  unsigned __int64 WaitReasonBitMap;
  unsigned __int64 CycleTime;
  unsigned int RetryCount;
  unsigned int Reserved;
  _HARDWARE_COUNTER_DATA HwCounters[16];
};

/* 8898 */
struct FLASHWINFO
{
  unsigned int cbSize;
  HWND__ *hwnd;
  unsigned int dwFlags;
  unsigned int uCount;
  unsigned int dwTimeout;
};

/* 8899 */
struct _CRYPT_OBJID_TABLE
{
  unsigned int dwAlgId;
  const char *pszObjId;
};

/* 8900 */
struct _DRIVE_LAYOUT_INFORMATION_MBR
{
  unsigned int Signature;
};

/* 8901 */
union $183A3D5D88148F28553006A88AEF43CA
{
  _DRIVE_LAYOUT_INFORMATION_MBR Mbr;
  _DRIVE_LAYOUT_INFORMATION_GPT Gpt;
};

/* 8902 */
struct _DRIVE_LAYOUT_INFORMATION_EX
{
  unsigned int PartitionStyle;
  unsigned int PartitionCount;
  $183A3D5D88148F28553006A88AEF43CA ___u2;
  _PARTITION_INFORMATION_EX PartitionEntry[1];
};

/* 8903 */
struct _PERF_DATA_BLOCK
{
  wchar_t Signature[4];
  unsigned int LittleEndian;
  unsigned int Version;
  unsigned int Revision;
  unsigned int TotalByteLength;
  unsigned int HeaderLength;
  unsigned int NumObjectTypes;
  int DefaultObject;
  _SYSTEMTIME SystemTime;
  _LARGE_INTEGER PerfTime;
  _LARGE_INTEGER PerfFreq;
  _LARGE_INTEGER PerfTime100nSec;
  unsigned int SystemNameLength;
  unsigned int SystemNameOffset;
};

/* 8904 */
struct __declspec(align(4)) _MODEMDEVCAPS
{
  unsigned int dwActualSize;
  unsigned int dwRequiredSize;
  unsigned int dwDevSpecificOffset;
  unsigned int dwDevSpecificSize;
  unsigned int dwModemProviderVersion;
  unsigned int dwModemManufacturerOffset;
  unsigned int dwModemManufacturerSize;
  unsigned int dwModemModelOffset;
  unsigned int dwModemModelSize;
  unsigned int dwModemVersionOffset;
  unsigned int dwModemVersionSize;
  unsigned int dwDialOptions;
  unsigned int dwCallSetupFailTimer;
  unsigned int dwInactivityTimeout;
  unsigned int dwSpeakerVolume;
  unsigned int dwSpeakerMode;
  unsigned int dwModemOptions;
  unsigned int dwMaxDTERate;
  unsigned int dwMaxDCERate;
  unsigned __int8 abVariablePortion[1];
};

/* 8905 */
struct tagWAVEOUTCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 8906 */
struct _CERT_AUTHORITY_KEY_ID_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CRYPTOAPI_BLOB CertIssuer;
  _CRYPTOAPI_BLOB CertSerialNumber;
};

/* 8907 */
struct _CERT_PAIR
{
  _CRYPTOAPI_BLOB Forward;
  _CRYPTOAPI_BLOB Reverse;
};

/* 8908 */
struct _EXCEPTION_REGISTRATION_RECORD
{
  _EXCEPTION_REGISTRATION_RECORD *Next;
  _EXCEPTION_DISPOSITION (__cdecl *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
};

/* 8910 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
  void *FiberData;
  unsigned int Version;
};

/* 8909 */
struct _NT_TIB
{
  _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  void *StackBase;
  void *StackLimit;
  void *SubSystemTib;
  $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
  void *ArbitraryUserPointer;
  _NT_TIB *Self;
};

/* 8911 */
struct tagWINDOWPLACEMENT
{
  unsigned int length;
  unsigned int flags;
  unsigned int showCmd;
  tagPOINT ptMinPosition;
  tagPOINT ptMaxPosition;
  tagRECT rcNormalPosition;
};

/* 8912 */
struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
  unsigned int cbSize;
  _COORD dwSize;
  _COORD dwCursorPosition;
  unsigned __int16 wAttributes;
  _SMALL_RECT srWindow;
  _COORD dwMaximumWindowSize;
  unsigned __int16 wPopupAttributes;
  int bFullscreenSupported;
  unsigned int ColorTable[16];
};

/* 8913 */
struct __declspec(align(8)) _DISK_EX_INT13_INFO
{
  unsigned __int16 ExBufferSize;
  unsigned __int16 ExFlags;
  unsigned int ExCylinders;
  unsigned int ExHeads;
  unsigned int ExSectorsPerTrack;
  unsigned __int64 ExSectorsPerDrive;
  unsigned __int16 ExSectorSize;
  unsigned __int16 ExReserved;
};

/* 8914 */
struct _SERVICE_STATUS
{
  unsigned int dwServiceType;
  unsigned int dwCurrentState;
  unsigned int dwControlsAccepted;
  unsigned int dwWin32ExitCode;
  unsigned int dwServiceSpecificExitCode;
  unsigned int dwCheckPoint;
  unsigned int dwWaitHint;
};

/* 8915 */
struct _ENUM_SERVICE_STATUSW
{
  wchar_t *lpServiceName;
  wchar_t *lpDisplayName;
  _SERVICE_STATUS ServiceStatus;
};

/* 8916 */
struct _CONSOLE_FONT_INFOEX
{
  unsigned int cbSize;
  unsigned int nFont;
  _COORD dwFontSize;
  unsigned int FontFamily;
  unsigned int FontWeight;
  wchar_t FaceName[32];
};

/* 8917 */
struct value_entW
{
  wchar_t *ve_valuename;
  unsigned int ve_valuelen;
  unsigned int ve_valueptr;
  unsigned int ve_type;
};

/* 8918 */
struct tagMCI_INFO_PARMSW
{
  unsigned int dwCallback;
  wchar_t *lpstrReturn;
  unsigned int dwRetSize;
};

/* 8919 */
struct _CRYPT_CONTEXT_FUNCTIONS
{
  unsigned int cFunctions;
  wchar_t **rgpszFunctions;
};

/* 8920 */
struct _CROSS_CERT_DIST_POINTS_INFO
{
  unsigned int dwSyncDeltaTime;
  unsigned int cDistPoint;
  _CERT_ALT_NAME_INFO *rgDistPoint;
};

/* 8921 */
struct __declspec(align(4)) _CHANGER_MOVE_MEDIUM
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Source;
  _CHANGER_ELEMENT Destination;
  unsigned __int8 Flip;
};

/* 8922 */
struct _PACKEDEVENTINFO
{
  unsigned int ulSize;
  unsigned int ulNumEventsForLogFile;
  unsigned int ulOffsets[];
};

/* 8923 */
struct sockproto
{
  unsigned __int16 sp_family;
  unsigned __int16 sp_protocol;
};

/* 8924 */
struct _ENCRYPTION_CERTIFICATE_LIST
{
  unsigned int nUsers;
  _ENCRYPTION_CERTIFICATE **pUsers;
};

/* 8925 */
struct _EFS_RPC_BLOB
{
  unsigned int cbData;
  unsigned __int8 *pbData;
};

/* 8926 */
struct tagMULTI_QI
{
  const _GUID *pIID;
  IUnknown *pItf;
  HRESULT hr;
};

/* 8927 */
struct _XSTATE_FEATURE
{
  unsigned int Offset;
  unsigned int Size;
};

/* 8928 */
struct _PSINJECTDATA
{
  unsigned int DataBytes;
  unsigned __int16 InjectionPoint;
  unsigned __int16 PageNumber;
};

/* 8929 */
struct tagMENUITEMINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HMENU__ *hSubMenu;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  wchar_t *dwTypeData;
  unsigned int cch;
  HBITMAP__ *hbmpItem;
};

/* 8930 */
struct __cppobj IHttpNegotiate : IUnknown
{
};

/* 8931 */
struct /*VFT*/ IHttpNegotiate_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *BeginningTransaction)(IHttpNegotiate *this, const wchar_t *, const wchar_t *, unsigned int, wchar_t **);
  HRESULT (__stdcall *OnResponse)(IHttpNegotiate *this, unsigned int, const wchar_t *, const wchar_t *, wchar_t **);
};

/* 8932 */
struct __cppobj IHttpNegotiate2 : IHttpNegotiate
{
};

/* 8933 */
struct /*VFT*/ IHttpNegotiate2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *BeginningTransaction)(IHttpNegotiate *this, const wchar_t *, const wchar_t *, unsigned int, wchar_t **);
  HRESULT (__stdcall *OnResponse)(IHttpNegotiate *this, unsigned int, const wchar_t *, const wchar_t *, wchar_t **);
  HRESULT (__stdcall *GetRootSecurityId)(IHttpNegotiate2 *this, unsigned __int8 *, unsigned int *, unsigned int);
};

/* 8934 */
struct tagGCP_RESULTSA
{
  unsigned int lStructSize;
  char *lpOutString;
  unsigned int *lpOrder;
  int *lpDx;
  int *lpCaretPos;
  char *lpClass;
  wchar_t *lpGlyphs;
  unsigned int nGlyphs;
  int nMaxFit;
};

/* 8935 */
struct __cppobj IPersistFile : IPersist
{
};

/* 8936 */
struct /*VFT*/ IPersistFile_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetClassID)(IPersist *this, _GUID *);
  HRESULT (__stdcall *IsDirty)(IPersistFile *this);
  HRESULT (__stdcall *Load)(IPersistFile *this, const wchar_t *, unsigned int);
  HRESULT (__stdcall *Save)(IPersistFile *this, const wchar_t *, int);
  HRESULT (__stdcall *SaveCompleted)(IPersistFile *this, const wchar_t *);
  HRESULT (__stdcall *GetCurFile)(IPersistFile *this, wchar_t **);
};

/* 8937 */
struct _SERVICE_NOTIFY_1
{
  unsigned int dwVersion;
  void (__stdcall *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 8938 */
struct tagEMRFORMAT
{
  unsigned int dSignature;
  unsigned int nVersion;
  unsigned int cbData;
  unsigned int offData;
};

/* 8939 */
struct tagMCI_VD_STEP_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrames;
};

/* 8940 */
struct _CRL_DIST_POINT
{
  _CRL_DIST_POINT_NAME DistPointName;
  _CRYPT_BIT_BLOB ReasonFlags;
  _CERT_ALT_NAME_INFO CRLIssuer;
};

/* 8941 */
struct _CRL_DIST_POINTS_INFO
{
  unsigned int cDistPoint;
  _CRL_DIST_POINT *rgDistPoint;
};

/* 8942 */
struct tagMETARECORD
{
  unsigned int rdSize;
  unsigned __int16 rdFunction;
  unsigned __int16 rdParm[1];
};

/* 8943 */
struct tagRPC_ERROR_ENUM_HANDLE
{
  unsigned int Signature;
  void *CurrentPos;
  void *Head;
};

/* 8944 */
struct _PERF_BIN
{
  unsigned int NumberOfBins;
  unsigned int TypeOfBin;
  _BIN_RANGE BinsRanges[1];
};

/* 8945 */
struct __cppobj JfrEvent<EventGCPhasePauseLevel3>
{
};

/* 8946 */
struct __cppobj EventGCPhasePauseLevel3 : JfrEvent<EventGCPhasePauseLevel3>
{
};

/* 8947 */
struct _UUID_VECTOR
{
  unsigned int Count;
  _GUID *Uuid[1];
};

/* 8948 */
struct SCARD_T0_COMMAND
{
  unsigned __int8 bCla;
  unsigned __int8 bIns;
  unsigned __int8 bP1;
  unsigned __int8 bP2;
  unsigned __int8 bP3;
};

/* 8949 */
struct _GENERIC_MAPPING
{
  unsigned int GenericRead;
  unsigned int GenericWrite;
  unsigned int GenericExecute;
  unsigned int GenericAll;
};

/* 8950 */
struct _EFS_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Entropy;
  unsigned int Algorithm;
  unsigned int KeyLength;
};

/* 8951 */
struct __declspec(align(4)) tagMONHSZSTRUCTW
{
  unsigned int cb;
  int fsAction;
  unsigned int dwTime;
  HSZ__ *hsz;
  void *hTask;
  wchar_t str[1];
};

/* 8952 */
struct _heapinfo
{
  int *_pentry;
  unsigned int _size;
  int _useflag;
};

/* 8953 */
struct _SCONTEXT_QUEUE
{
  unsigned int NumberOfObjects;
  $3FA64165D15A4602C29B2D9B0DA4A5E9 **ArrayOfObjects;
};

/* 8954 */
struct __cppobj IMallocSpy : IUnknown
{
};

/* 8955 */
struct /*VFT*/ IMallocSpy_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *PreAlloc)(IMallocSpy *this, unsigned int);
  void *(__stdcall *PostAlloc)(IMallocSpy *this, void *);
  void *(__stdcall *PreFree)(IMallocSpy *this, void *, int);
  void (__stdcall *PostFree)(IMallocSpy *this, int);
  unsigned int (__stdcall *PreRealloc)(IMallocSpy *this, void *, unsigned int, void **, int);
  void *(__stdcall *PostRealloc)(IMallocSpy *this, void *, int);
  void *(__stdcall *PreGetSize)(IMallocSpy *this, void *, int);
  unsigned int (__stdcall *PostGetSize)(IMallocSpy *this, unsigned int, int);
  void *(__stdcall *PreDidAlloc)(IMallocSpy *this, void *, int);
  int (__stdcall *PostDidAlloc)(IMallocSpy *this, void *, int, int);
  void (__stdcall *PreHeapMinimize)(IMallocSpy *this);
  void (__stdcall *PostHeapMinimize)(IMallocSpy *this);
};

/* 8956 */
struct tagMIDIOUTCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
};

/* 8957 */
struct tagMCI_WAVE_OPEN_PARMSW
{
  unsigned int dwCallback;
  unsigned int wDeviceID;
  const wchar_t *lpstrDeviceType;
  const wchar_t *lpstrElementName;
  const wchar_t *lpstrAlias;
  unsigned int dwBufferSeconds;
};

/* 8958 */
struct _RPC_TRANSFER_SYNTAX
{
  _GUID Uuid;
  unsigned __int16 VersMajor;
  unsigned __int16 VersMinor;
};

/* 8959 */
struct _CRYPT_PROVIDER_REFS
{
  unsigned int cProviders;
  _CRYPT_PROVIDER_REF **rgpProviders;
};

/* 8960 */
struct _CRYPT_VERIFY_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned int hCryptProv;
  const _CERT_CONTEXT *(__stdcall *pfnGetSignerCertificate)(void *, unsigned int, _CERT_INFO *, void *);
  void *pvGetArg;
};

/* 8961 */
struct _SC_ACTION
{
  _SC_ACTION_TYPE Type;
  unsigned int Delay;
};

/* 8962 */
struct _SERVICE_FAILURE_ACTIONSA
{
  unsigned int dwResetPeriod;
  char *lpRebootMsg;
  char *lpCommand;
  unsigned int cActions;
  _SC_ACTION *lpsaActions;
};

/* 8963 */
struct HIMC__
{
  int unused;
};

/* 8964 */
struct __cppobj JfrEvent<EventCompilerInlining>
{
};

/* 8965 */
struct _CMSG_SIGNER_ENCODE_INFO
{
  unsigned int cbSize;
  _CERT_INFO *pCertInfo;
  $2648935626D60F3A93F830EF5D884CB4 ___u2;
  unsigned int dwKeySpec;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  unsigned int cAuthAttr;
  _CRYPT_ATTRIBUTE *rgAuthAttr;
  unsigned int cUnauthAttr;
  _CRYPT_ATTRIBUTE *rgUnauthAttr;
};

/* 8966 */
struct _CMSG_SIGNED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned int cSigners;
  _CMSG_SIGNER_ENCODE_INFO *rgSigners;
  unsigned int cCertEncoded;
  _CRYPTOAPI_BLOB *rgCertEncoded;
  unsigned int cCrlEncoded;
  _CRYPTOAPI_BLOB *rgCrlEncoded;
};

/* 8967 */
struct _CHANGER_PRODUCT_DATA
{
  unsigned __int8 VendorId[8];
  unsigned __int8 ProductId[16];
  unsigned __int8 Revision[4];
  unsigned __int8 SerialNumber[32];
  unsigned __int8 DeviceType;
};

/* 8968 */
struct tagEMREXTCREATEPEN
{
  tagEMR emr;
  unsigned int ihPen;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
  tagEXTLOGPEN32 elp;
};

/* 8969 */
struct tagMCI_OVLY_SAVE_PARMSA
{
  unsigned int dwCallback;
  const char *lpfilename;
  tagRECT rc;
};

/* 8970 */
struct __cppobj IBindHost : IUnknown
{
};

/* 8971 */
struct __cppobj IBinding : IUnknown
{
};

/* 8972 */
struct /*VFT*/ IBinding_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Abort)(IBinding *this);
  HRESULT (__stdcall *Suspend)(IBinding *this);
  HRESULT (__stdcall *Resume)(IBinding *this);
  HRESULT (__stdcall *SetPriority)(IBinding *this, int);
  HRESULT (__stdcall *GetPriority)(IBinding *this, int *);
  HRESULT (__stdcall *GetBindResult)(IBinding *this, _GUID *, unsigned int *, wchar_t **, unsigned int *);
};

/* 8973 */
struct __cppobj IBindStatusCallback : IUnknown
{
};

/* 8974 */
struct /*VFT*/ IBindStatusCallback_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *OnStartBinding)(IBindStatusCallback *this, unsigned int, IBinding *);
  HRESULT (__stdcall *GetPriority)(IBindStatusCallback *this, int *);
  HRESULT (__stdcall *OnLowResource)(IBindStatusCallback *this, unsigned int);
  HRESULT (__stdcall *OnProgress)(IBindStatusCallback *this, unsigned int, unsigned int, unsigned int, const wchar_t *);
  HRESULT (__stdcall *OnStopBinding)(IBindStatusCallback *this, HRESULT, const wchar_t *);
  HRESULT (__stdcall *GetBindInfo)(IBindStatusCallback *this, unsigned int *, _tagBINDINFO *);
  HRESULT (__stdcall *OnDataAvailable)(IBindStatusCallback *this, unsigned int, unsigned int, tagFORMATETC *, tagSTGMEDIUM *);
  HRESULT (__stdcall *OnObjectAvailable)(IBindStatusCallback *this, const _GUID *, IUnknown *);
};

/* 8975 */
struct /*VFT*/ IBindHost_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateMoniker)(IBindHost *this, wchar_t *, IBindCtx *, IMoniker **, unsigned int);
  HRESULT (__stdcall *MonikerBindToStorage)(IBindHost *this, IMoniker *, IBindCtx *, IBindStatusCallback *, const _GUID *, void **);
  HRESULT (__stdcall *MonikerBindToObject)(IBindHost *this, IMoniker *, IBindCtx *, IBindStatusCallback *, const _GUID *, void **);
};

/* 8976 */
union $66A2FC5ED47CB5912809650DAB14E256
{
  unsigned int VirtualAddress;
  unsigned int RelocCount;
};

/* 8977 */
struct __unaligned __declspec(align(2)) _IMAGE_RELOCATION
{
  $66A2FC5ED47CB5912809650DAB14E256 ___u0;
  unsigned int SymbolTableIndex;
  unsigned __int16 Type;
};

/* 8978 */
struct STARTING_LCN_INPUT_BUFFER
{
  _LARGE_INTEGER StartingLcn;
};

/* 8979 */
struct tagCHOOSEFONTW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HDC__ *hDC;
  tagLOGFONTW *lpLogFont;
  int iPointSize;
  unsigned int Flags;
  unsigned int rgbColors;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpTemplateName;
  HINSTANCE__ *hInstance;
  wchar_t *lpszStyle;
  unsigned __int16 nFontType;
  unsigned __int16 ___MISSING_ALIGNMENT__;
  int nSizeMin;
  int nSizeMax;
};

/* 8980 */
struct PPM_WMI_PERF_STATES
{
  unsigned int Count;
  unsigned int MaxFrequency;
  unsigned int CurrentState;
  unsigned int MaxPerfState;
  unsigned int MinPerfState;
  unsigned int LowestPerfState;
  unsigned int ThermalConstraint;
  unsigned __int8 BusyAdjThreshold;
  unsigned __int8 PolicyType;
  unsigned __int8 Type;
  unsigned __int8 Reserved;
  unsigned int TimerInterval;
  unsigned __int64 TargetProcessors;
  unsigned int PStateHandler;
  unsigned int PStateContext;
  unsigned int TStateHandler;
  unsigned int TStateContext;
  unsigned int FeedbackHandler;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  PPM_WMI_PERF_STATE State[1];
};

/* 8981 */
struct _CRYPT_CONTEXT_CONFIG
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 8982 */
struct __declspec(align(4)) _STORAGE_PROPERTY_QUERY
{
  _STORAGE_PROPERTY_ID PropertyId;
  _STORAGE_QUERY_TYPE QueryType;
  unsigned __int8 AdditionalParameters[1];
};

/* 8983 */
struct _SCARD_ATRMASK
{
  unsigned int cbAtr;
  unsigned __int8 rgbAtr[36];
  unsigned __int8 rgbMask[36];
};

/* 8984 */
struct __cppobj JfrEvent<EventGCPhasePause>
{
};

/* 8985 */
struct __cppobj EventGCPhasePause : JfrEvent<EventGCPhasePause>
{
};

/* 8986 */
struct tagWNDCLASSW
{
  unsigned int style;
  int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const wchar_t *lpszMenuName;
  const wchar_t *lpszClassName;
};

/* 8987 */
struct _LANA_ENUM
{
  unsigned __int8 length;
  unsigned __int8 lana[255];
};

/* 8988 */
struct _QUERY_SERVICE_LOCK_STATUSW
{
  unsigned int fIsLocked;
  wchar_t *lpLockOwner;
  unsigned int dwLockDuration;
};

/* 8989 */
struct _PRINTER_INFO_7W
{
  wchar_t *pszObjectGUID;
  unsigned int dwAction;
};

/* 8990 */
struct tagHEAPENTRY32
{
  unsigned int dwSize;
  void *hHandle;
  unsigned int dwAddress;
  unsigned int dwBlockSize;
  unsigned int dwFlags;
  unsigned int dwLockCount;
  unsigned int dwResvd;
  unsigned int th32ProcessID;
  unsigned int th32HeapID;
};

/* 8991 */
struct __cppobj ISupportErrorInfo : IUnknown
{
};

/* 8992 */
struct /*VFT*/ ISupportErrorInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *InterfaceSupportsErrorInfo)(ISupportErrorInfo *this, const _GUID *);
};

/* 8993 */
struct $_TypeDescriptor$_extraBytes_12
{
  const void *pVFTable;
  void *spare;
  char name[12];
};

/* 8994 */
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
  _GUID OldestTransactionGuid;
};

/* 8995 */
struct tagMCI_OVLY_LOAD_PARMSW
{
  unsigned int dwCallback;
  const wchar_t *lpfilename;
  tagRECT rc;
};

/* 8996 */
struct tagLOCALESIGNATURE
{
  unsigned int lsUsb[4];
  unsigned int lsCsbDefault[2];
  unsigned int lsCsbSupported[2];
};

/* 8997 */
struct _CONNECTDLGSTRUCTW
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  _NETRESOURCEW *lpConnRes;
  unsigned int dwFlags;
  unsigned int dwDevNum;
};

/* 8998 */
struct _RPC_SECURITY_QOS
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
};

/* 8999 */
struct tagWINDOWPOS
{
  HWND__ *hwnd;
  HWND__ *hwndInsertAfter;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int flags;
};

/* 9000 */
struct tagNCCALCSIZE_PARAMS
{
  tagRECT rgrc[3];
  tagWINDOWPOS *lppos;
};

/* 9001 */
struct __declspec(align(4)) tagMONHSZSTRUCTA
{
  unsigned int cb;
  int fsAction;
  unsigned int dwTime;
  HSZ__ *hsz;
  void *hTask;
  char str[1];
};

/* 9002 */
struct MARK_HANDLE_INFO
{
  unsigned int UsnSourceInfo;
  void *VolumeHandle;
  unsigned int HandleInfo;
};

/* 9003 */
struct __cppobj IClientSecurity : IUnknown
{
};

/* 9004 */
struct /*VFT*/ IClientSecurity_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryBlanket)(IClientSecurity *this, IUnknown *, unsigned int *, unsigned int *, wchar_t **, unsigned int *, unsigned int *, void **, unsigned int *);
  HRESULT (__stdcall *SetBlanket)(IClientSecurity *this, IUnknown *, unsigned int, unsigned int, wchar_t *, unsigned int, unsigned int, void *, unsigned int);
  HRESULT (__stdcall *CopyProxy)(IClientSecurity *this, IUnknown *, IUnknown **);
};

/* 9005 */
struct tagSOLE_AUTHENTICATION_SERVICE
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  wchar_t *pPrincipalName;
  HRESULT hr;
};

/* 9006 */
struct __cppobj JfrEvent<EventPromoteObjectOutsidePLAB>
{
};

/* 9007 */
struct __cppobj EventPromoteObjectOutsidePLAB : JfrEvent<EventPromoteObjectOutsidePLAB>
{
};

/* 9008 */
struct _IMAGE_SEPARATE_DEBUG_HEADER
{
  unsigned __int16 Signature;
  unsigned __int16 Flags;
  unsigned __int16 Machine;
  unsigned __int16 Characteristics;
  unsigned int TimeDateStamp;
  unsigned int CheckSum;
  unsigned int ImageBase;
  unsigned int SizeOfImage;
  unsigned int NumberOfSections;
  unsigned int ExportedNamesSize;
  unsigned int DebugDirectorySize;
  unsigned int SectionAlignment;
  unsigned int Reserved[2];
};

/* 9009 */
struct tagCOMPAREITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  HWND__ *hwndItem;
  unsigned int itemID1;
  unsigned int itemData1;
  unsigned int itemID2;
  unsigned int itemData2;
  unsigned int dwLocaleId;
};

/* 9010 */
struct mmtime_tag::<unnamed_type_u>::<unnamed_type_smpte>
{
  unsigned __int8 hour;
  unsigned __int8 min;
  unsigned __int8 sec;
  unsigned __int8 frame;
  unsigned __int8 fps;
  unsigned __int8 dummy;
  unsigned __int8 pad[2];
};

/* 9011 */
struct mmtime_tag::<unnamed_type_u>::<unnamed_type_midi>
{
  unsigned int songptrpos;
};

/* 9012 */
union mmtime_tag::<unnamed_type_u>
{
  unsigned int ms;
  unsigned int sample;
  unsigned int cb;
  unsigned int ticks;
  mmtime_tag::<unnamed_type_u>::<unnamed_type_smpte> smpte;
  mmtime_tag::<unnamed_type_u>::<unnamed_type_midi> midi;
};

/* 9013 */
struct mmtime_tag
{
  unsigned int wType;
  mmtime_tag::<unnamed_type_u> u;
};

/* 9014 */
struct tagCHOOSECOLORW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HWND__ *hInstance;
  unsigned int rgbResult;
  unsigned int *lpCustColors;
  unsigned int Flags;
  int lCustData;
  unsigned int (__stdcall *lpfnHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpTemplateName;
};

/* 9015 */
union _RTL_RUN_ONCE
{
  void *Ptr;
};

/* 9016 */
struct tagMCI_OVLY_WINDOW_PARMSW
{
  unsigned int dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const wchar_t *lpstrText;
};

/* 9017 */
struct _CERT_USAGE_MATCH
{
  unsigned int dwType;
  _CTL_USAGE Usage;
};

/* 9018 */
struct _CERT_CHAIN_PARA
{
  unsigned int cbSize;
  _CERT_USAGE_MATCH RequestedUsage;
};

/* 9019 */
struct __cppobj IMarshal : IUnknown
{
};

/* 9020 */
struct /*VFT*/ IMarshal_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetUnmarshalClass)(IMarshal *this, const _GUID *, void *, unsigned int, void *, unsigned int, _GUID *);
  HRESULT (__stdcall *GetMarshalSizeMax)(IMarshal *this, const _GUID *, void *, unsigned int, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *MarshalInterface)(IMarshal *this, IStream *, const _GUID *, void *, unsigned int, void *, unsigned int);
  HRESULT (__stdcall *UnmarshalInterface)(IMarshal *this, IStream *, const _GUID *, void **);
  HRESULT (__stdcall *ReleaseMarshalData)(IMarshal *this, IStream *);
  HRESULT (__stdcall *DisconnectObject)(IMarshal *this, unsigned int);
};

/* 9021 */
struct /*VFT*/ IMarshal2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetUnmarshalClass)(IMarshal *this, const _GUID *, void *, unsigned int, void *, unsigned int, _GUID *);
  HRESULT (__stdcall *GetMarshalSizeMax)(IMarshal *this, const _GUID *, void *, unsigned int, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *MarshalInterface)(IMarshal *this, IStream *, const _GUID *, void *, unsigned int, void *, unsigned int);
  HRESULT (__stdcall *UnmarshalInterface)(IMarshal *this, IStream *, const _GUID *, void **);
  HRESULT (__stdcall *ReleaseMarshalData)(IMarshal *this, IStream *);
  HRESULT (__stdcall *DisconnectObject)(IMarshal *this, unsigned int);
};

/* 9022 */
struct __cppobj IMarshal2 : IMarshal
{
};

/* 9023 */
struct _CONTEXT_CHUNK
{
  int Offset;
  unsigned int Length;
};

/* 9024 */
struct __cppobj IClassFactory : IUnknown
{
};

/* 9025 */
struct /*VFT*/ IClassFactory_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateInstance)(IClassFactory *this, IUnknown *, const _GUID *, void **);
  HRESULT (__stdcall *LockServer)(IClassFactory *this, int);
};

/* 9026 */
struct __cppobj ICallFactory : IUnknown
{
};

/* 9027 */
struct /*VFT*/ ICallFactory_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateCall)(ICallFactory *this, const _GUID *, IUnknown *, const _GUID *, IUnknown **);
};

/* 9028 */
struct __cppobj IRootStorage : IUnknown
{
};

/* 9029 */
struct /*VFT*/ IRootStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SwitchToFile)(IRootStorage *this, wchar_t *);
};

/* 9030 */
struct _ENUM_SERVICE_STATUSA
{
  char *lpServiceName;
  char *lpDisplayName;
  _SERVICE_STATUS ServiceStatus;
};

/* 9031 */
struct __cppobj JfrEvent<EventSafepointBegin>
{
};

/* 9032 */
struct tagEMRRESTOREDC
{
  tagEMR emr;
  int iRelative;
};

/* 9033 */
struct __cppobj IXMLDSOControl : IDispatch
{
};

/* 9034 */
struct /*VFT*/ IXMLDSOControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_XMLDocument)(IXMLDSOControl *this, IXMLDOMDocument **);
  HRESULT (__stdcall *put_XMLDocument)(IXMLDSOControl *this, IXMLDOMDocument *);
  HRESULT (__stdcall *get_JavaDSOCompatible)(IXMLDSOControl *this, int *);
  HRESULT (__stdcall *put_JavaDSOCompatible)(IXMLDSOControl *this, int);
  HRESULT (__stdcall *get_readyState)(IXMLDSOControl *this, int *);
};

/* 9035 */
struct tagDEVNAMES
{
  unsigned __int16 wDriverOffset;
  unsigned __int16 wDeviceOffset;
  unsigned __int16 wOutputOffset;
  unsigned __int16 wDefault;
};

/* 9036 */
struct /*VFT*/ GetAndSetNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 9037 */
struct __cppobj GetAndSetNNode : LoadStoreNode
{
};

/* 9038 */
struct STORAGE_BREAK_RESERVATION_REQUEST
{
  unsigned int Length;
  unsigned __int8 _unused;
  unsigned __int8 PathId;
  unsigned __int8 TargetId;
  unsigned __int8 Lun;
};

/* 9039 */
struct _UMS_CREATE_THREAD_ATTRIBUTES
{
  unsigned int UmsVersion;
  void *UmsContext;
  void *UmsCompletionList;
};

/* 9040 */
struct _MESSAGE_RESOURCE_DATA
{
  unsigned int NumberOfBlocks;
  _MESSAGE_RESOURCE_BLOCK Blocks[1];
};

/* 9041 */
struct _cpinfoexW
{
  unsigned int MaxCharSize;
  unsigned __int8 DefaultChar[2];
  unsigned __int8 LeadByte[12];
  wchar_t UnicodeDefaultChar;
  unsigned int CodePage;
  wchar_t CodePageName[260];
};

/* 9042 */
struct tagIMECHARPOSITION
{
  unsigned int dwSize;
  unsigned int dwCharPos;
  tagPOINT pt;
  unsigned int cLineHeight;
  tagRECT rcDocument;
};

/* 9043 */
struct tagTHREADENTRY32
{
  unsigned int dwSize;
  unsigned int cntUsage;
  unsigned int th32ThreadID;
  unsigned int th32OwnerProcessID;
  int tpBasePri;
  int tpDeltaPri;
  unsigned int dwFlags;
};

/* 9044 */
struct $189783EC0C8BE70D5DDB7606F093E7CD
{
  _SINGLE_LIST_ENTRY Next;
  unsigned __int16 Depth;
  unsigned __int16 Sequence;
};

/* 9045 */
union _SLIST_HEADER
{
  unsigned __int64 Alignment;
  $189783EC0C8BE70D5DDB7606F093E7CD __s1;
};

/* 9046 */
struct _UNIVERSAL_NAME_INFOW
{
  wchar_t *lpUniversalName;
};

/* 9047 */
struct __declspec(align(4)) _TAPE_WRITE_MARKS
{
  unsigned int Type;
  unsigned int Count;
  unsigned __int8 Immediate;
};

/* 9048 */
struct __cppobj JfrEvent<EventThreadContextSwitchRate>
{
};

/* 9049 */
struct tagSTYLEBUFA
{
  unsigned int dwStyle;
  char szDescription[32];
};

/* 9050 */
struct tagCURSORINFO
{
  unsigned int cbSize;
  unsigned int flags;
  HICON__ *hCursor;
  tagPOINT ptScreenPos;
};

/* 9051 */
struct value_entA
{
  char *ve_valuename;
  unsigned int ve_valuelen;
  unsigned int ve_valueptr;
  unsigned int ve_type;
};

/* 9052 */
struct __cppobj JfrEvent<EventParallelOldGarbageCollection>
{
};

/* 9053 */
struct tagENUMLOGFONTEXW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
  wchar_t elfScript[32];
};

/* 9054 */
struct tagENUMLOGFONTEXDVW
{
  tagENUMLOGFONTEXW elfEnumLogfontEx;
  tagDESIGNVECTOR elfDesignVector;
};

/* 9055 */
struct _STORAGE_READ_CAPACITY
{
  unsigned int Version;
  unsigned int Size;
  unsigned int BlockLength;
  _LARGE_INTEGER NumberOfBlocks;
  _LARGE_INTEGER DiskLength;
};

/* 9056 */
struct __cppobj ITypeChangeEvents : IUnknown
{
};

/* 9057 */
struct /*VFT*/ ITypeChangeEvents_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *RequestTypeChange)(ITypeChangeEvents *this, tagCHANGEKIND, ITypeInfo *, wchar_t *, int *);
  HRESULT (__stdcall *AfterTypeChange)(ITypeChangeEvents *this, tagCHANGEKIND, ITypeInfo *, wchar_t *);
};

/* 9058 */
struct _IO_COUNTERS
{
  unsigned __int64 ReadOperationCount;
  unsigned __int64 WriteOperationCount;
  unsigned __int64 OtherOperationCount;
  unsigned __int64 ReadTransferCount;
  unsigned __int64 WriteTransferCount;
  unsigned __int64 OtherTransferCount;
};

/* 9059 */
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
  _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
  _IO_COUNTERS IoInfo;
  unsigned int ProcessMemoryLimit;
  unsigned int JobMemoryLimit;
  unsigned int PeakProcessMemoryUsed;
  unsigned int PeakJobMemoryUsed;
};

/* 9060 */
struct tagPSDW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  unsigned int Flags;
  tagPOINT ptPaperSize;
  tagRECT rtMinMargin;
  tagRECT rtMargin;
  HINSTANCE__ *hInstance;
  int lCustData;
  unsigned int (__stdcall *lpfnPageSetupHook)(HWND__ *, unsigned int, unsigned int, int);
  unsigned int (__stdcall *lpfnPagePaintHook)(HWND__ *, unsigned int, unsigned int, int);
  const wchar_t *lpPageSetupTemplateName;
  void *hPageSetupTemplate;
};

/* 9061 */
struct __cppobj JfrEvent<EventYoungGenerationConfiguration>
{
};

/* 9062 */
struct _STORAGE_DESCRIPTOR_HEADER
{
  unsigned int Version;
  unsigned int Size;
};

/* 9063 */
struct tagMIXERCONTROLDETAILS_LISTTEXTW
{
  unsigned int dwParam1;
  unsigned int dwParam2;
  wchar_t szName[64];
};

/* 9064 */
struct _FSCTL_QUERY_FAT_BPB_BUFFER
{
  unsigned __int8 First0x24BytesOfBootSector[36];
};

/* 9065 */
struct _DRIVER_INFO_6A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  char *pszMfgName;
  char *pszOEMUrl;
  char *pszHardwareID;
  char *pszProvider;
};

/* 9066 */
struct __cppobj AsyncIMultiQI : IUnknown
{
};

/* 9067 */
struct /*VFT*/ AsyncIMultiQI_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Begin_QueryMultipleInterfaces)(AsyncIMultiQI *this, unsigned int, tagMULTI_QI *);
  HRESULT (__stdcall *Finish_QueryMultipleInterfaces)(AsyncIMultiQI *this, tagMULTI_QI *);
};

/* 9068 */
struct _nlsversioninfoex
{
  unsigned int dwNLSVersionInfoSize;
  unsigned int dwNLSVersion;
  unsigned int dwDefinedVersion;
  unsigned int dwEffectiveId;
  _GUID guidCustomVersion;
};

/* 9069 */
struct _MEMORYSTATUS
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned int dwTotalPhys;
  unsigned int dwAvailPhys;
  unsigned int dwTotalPageFile;
  unsigned int dwAvailPageFile;
  unsigned int dwTotalVirtual;
  unsigned int dwAvailVirtual;
};

/* 9070 */
struct _WGLSWAP
{
  HDC__ *hdc;
  unsigned int uiFlags;
};

/* 9071 */
struct _SHELLEXECUTEINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const wchar_t *lpVerb;
  const wchar_t *lpFile;
  const wchar_t *lpParameters;
  const wchar_t *lpDirectory;
  int nShow;
  HINSTANCE__ *hInstApp;
  void *lpIDList;
  const wchar_t *lpClass;
  HKEY__ *hkeyClass;
  unsigned int dwHotKey;
  $E5EC784184F61E2D1DB730C15D65FB8F ___u13;
  void *hProcess;
};

/* 9072 */
struct _CERT_NAME_CONSTRAINTS_INFO
{
  unsigned int cPermittedSubtree;
  _CERT_GENERAL_SUBTREE *rgPermittedSubtree;
  unsigned int cExcludedSubtree;
  _CERT_GENERAL_SUBTREE *rgExcludedSubtree;
};

/* 9073 */
struct HMIDIOUT__
{
  int unused;
};

/* 9074 */
struct tagCLEANLOCALSTORAGE
{
  IUnknown *pInterface;
  void *pStorage;
  unsigned int flags;
};

/* 9075 */
struct __cppobj JfrEvent<EventDataLoss>
{
};

/* 9076 */
struct __cppobj EventDataLoss : JfrEvent<EventDataLoss>
{
};

/* 9077 */
struct tagCHARSETINFO
{
  unsigned int ciCharset;
  unsigned int ciACP;
  tagFONTSIGNATURE fs;
};

/* 9078 */
struct tagTTPOLYGONHEADER
{
  unsigned int cb;
  unsigned int dwType;
  tagPOINTFX pfxStart;
};

/* 9079 */
struct __cppobj IBindProtocol : IUnknown
{
};

/* 9080 */
struct /*VFT*/ IBindProtocol_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateBinding)(IBindProtocol *this, const wchar_t *, IBindCtx *, IBinding **);
};

/* 9081 */
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
  unsigned int dwReason;
  char *pszComment;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 9082 */
struct __cppobj JfrEvent<EventObjectAllocationInNewTLAB>
{
};

/* 9083 */
struct __cppobj EventObjectAllocationInNewTLAB : JfrEvent<EventObjectAllocationInNewTLAB>
{
};

/* 9084 */
struct __cppobj JfrEvent<EventSafepointStateSynchronization>
{
};

/* 9085 */
struct __cppobj EventSafepointStateSynchronization : JfrEvent<EventSafepointStateSynchronization>
{
};

/* 9086 */
struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
  unsigned __int8 Name[16];
  unsigned __int8 Date[12];
  unsigned __int8 UserID[6];
  unsigned __int8 GroupID[6];
  unsigned __int8 Mode[8];
  unsigned __int8 Size[10];
  unsigned __int8 EndHeader[2];
};

/* 9087 */
struct __declspec(align(8)) _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
  unsigned int cbSize;
  unsigned int dwInfoVersion;
  unsigned __int8 *pbNonce;
  unsigned int cbNonce;
  unsigned __int8 *pbAuthData;
  unsigned int cbAuthData;
  unsigned __int8 *pbTag;
  unsigned int cbTag;
  unsigned __int8 *pbMacContext;
  unsigned int cbMacContext;
  unsigned int cbAAD;
  unsigned __int64 cbData;
  unsigned int dwFlags;
};

/* 9088 */
struct _CERT_DSS_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB q;
  _CRYPTOAPI_BLOB g;
};

/* 9089 */
struct _NCB
{
  unsigned __int8 ncb_command;
  unsigned __int8 ncb_retcode;
  unsigned __int8 ncb_lsn;
  unsigned __int8 ncb_num;
  unsigned __int8 *ncb_buffer;
  unsigned __int16 ncb_length;
  unsigned __int8 ncb_callname[16];
  unsigned __int8 ncb_name[16];
  unsigned __int8 ncb_rto;
  unsigned __int8 ncb_sto;
  void (__stdcall *ncb_post)(_NCB *);
  unsigned __int8 ncb_lana_num;
  unsigned __int8 ncb_cmd_cplt;
  unsigned __int8 ncb_reserve[10];
  void *ncb_event;
};

/* 9090 */
struct _CERT_CHAIN
{
  unsigned int cCerts;
  _CRYPTOAPI_BLOB *certs;
  _CRYPT_KEY_PROV_INFO keyLocatorInfo;
};

/* 9091 */
struct __cppobj JfrEvent<EventThreadSleep>
{
};

/* 9092 */
union $D0FAA225C480F7E79DE0C59B79FF3D5C
{
  unsigned int EntryPointToken;
  unsigned int EntryPointRVA;
};

/* 9093 */
struct IMAGE_COR20_HEADER
{
  unsigned int cb;
  unsigned __int16 MajorRuntimeVersion;
  unsigned __int16 MinorRuntimeVersion;
  _IMAGE_DATA_DIRECTORY MetaData;
  unsigned int Flags;
  $D0FAA225C480F7E79DE0C59B79FF3D5C ___u5;
  _IMAGE_DATA_DIRECTORY Resources;
  _IMAGE_DATA_DIRECTORY StrongNameSignature;
  _IMAGE_DATA_DIRECTORY CodeManagerTable;
  _IMAGE_DATA_DIRECTORY VTableFixups;
  _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
  _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
};

/* 9094 */
struct __declspec(align(4)) FIND_BY_SID_OUTPUT
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 9095 */
struct __unaligned __declspec(align(2)) _SHFILEOPSTRUCTA
{
  HWND__ *hwnd;
  unsigned int wFunc;
  const char *pFrom;
  const char *pTo;
  unsigned __int16 fFlags;
  int fAnyOperationsAborted;
  void *hNameMappings;
  const char *lpszProgressTitle;
};

/* 9096 */
struct _DRIVER_INFO_8A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  char *pszMfgName;
  char *pszOEMUrl;
  char *pszHardwareID;
  char *pszProvider;
  char *pszPrintProcessor;
  char *pszVendorSetup;
  char *pszzColorProfiles;
  char *pszInfPath;
  unsigned int dwPrinterDriverAttributes;
  char *pszzCoreDriverDependencies;
  _FILETIME ftMinInboxDriverVerDate;
  unsigned __int64 dwlMinInboxDriverVerVersion;
};

/* 9097 */
struct __declspec(align(2)) _SERVICE_PREFERRED_NODE_INFO
{
  unsigned __int16 usPreferredNode;
  unsigned __int8 fDelete;
};

/* 9098 */
struct _IMAGE_EXPORT_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Name;
  unsigned int Base;
  unsigned int NumberOfFunctions;
  unsigned int NumberOfNames;
  unsigned int AddressOfFunctions;
  unsigned int AddressOfNames;
  unsigned int AddressOfNameOrdinals;
};

/* 9099 */
struct tagNEWTEXTMETRICW
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  wchar_t tmFirstChar;
  wchar_t tmLastChar;
  wchar_t tmDefaultChar;
  wchar_t tmBreakChar;
  unsigned __int8 tmItalic;
  unsigned __int8 tmUnderlined;
  unsigned __int8 tmStruckOut;
  unsigned __int8 tmPitchAndFamily;
  unsigned __int8 tmCharSet;
  unsigned int ntmFlags;
  unsigned int ntmSizeEM;
  unsigned int ntmCellHeight;
  unsigned int ntmAvgWidth;
};

/* 9100 */
struct tagNEWTEXTMETRICEXW
{
  tagNEWTEXTMETRICW ntmTm;
  tagFONTSIGNATURE ntmFontSig;
};

/* 9101 */
struct tagENUMTEXTMETRICW
{
  tagNEWTEXTMETRICEXW etmNewTextMetricEx;
  tagAXESLISTW etmAxesList;
};

/* 9102 */
struct _CHANGER_ELEMENT_STATUS
{
  _CHANGER_ELEMENT Element;
  _CHANGER_ELEMENT SrcElementAddress;
  unsigned int Flags;
  unsigned int ExceptionCode;
  unsigned __int8 TargetId;
  unsigned __int8 Lun;
  unsigned __int16 Reserved;
  unsigned __int8 PrimaryVolumeID[36];
  unsigned __int8 AlternateVolumeID[36];
};

/* 9103 */
struct _READ_ELEMENT_ADDRESS_INFO
{
  unsigned int NumberOfElements;
  _CHANGER_ELEMENT_STATUS ElementStatus[1];
};

/* 9104 */
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
  void *lpInformation;
  void *lpSectionBase;
  unsigned int ulSectionLength;
  void *lpSectionGlobalDataBase;
  unsigned int ulSectionGlobalDataLength;
};

/* 9105 */
struct tagACTCTX_SECTION_KEYED_DATA
{
  unsigned int cbSize;
  unsigned int ulDataFormatVersion;
  void *lpData;
  unsigned int ulLength;
  void *lpSectionGlobalData;
  unsigned int ulSectionGlobalDataLength;
  void *lpSectionBase;
  unsigned int ulSectionTotalLength;
  void *hActCtx;
  unsigned int ulAssemblyRosterIndex;
  unsigned int ulFlags;
  tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
};

/* 9106 */
struct _CRYPT_KEY_SIGN_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  $2648935626D60F3A93F830EF5D884CB4 ___u2;
  unsigned int dwKeySpec;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  _CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
};

/* 9107 */
struct __cppobj IOleInPlaceObject : IOleWindow
{
};

/* 9108 */
struct /*VFT*/ IOleInPlaceObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
  HRESULT (__stdcall *InPlaceDeactivate)(IOleInPlaceObject *this);
  HRESULT (__stdcall *UIDeactivate)(IOleInPlaceObject *this);
  HRESULT (__stdcall *SetObjectRects)(IOleInPlaceObject *this, const tagRECT *, const tagRECT *);
  HRESULT (__stdcall *ReactivateAndUndo)(IOleInPlaceObject *this);
};

/* 9109 */
struct __cppobj JfrEvent<EventClassDefine>
{
};

/* 9110 */
struct __cppobj EventClassDefine : JfrEvent<EventClassDefine>
{
};

/* 9111 */
struct __cppobj JfrEvent<EventG1MMU>
{
};

/* 9112 */
struct tagEMRPLGBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  _POINTL aptlDest[3];
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int xMask;
  int yMask;
  unsigned int iUsageMask;
  unsigned int offBmiMask;
  unsigned int cbBmiMask;
  unsigned int offBitsMask;
  unsigned int cbBitsMask;
};

/* 9113 */
struct __cppobj JfrEvent<EventPhysicalMemory>
{
};

/* 9114 */
struct __cppobj EventPhysicalMemory : JfrEvent<EventPhysicalMemory>
{
};

/* 9115 */
struct __declspec(align(4)) _LOAD_DLL_DEBUG_INFO
{
  void *hFile;
  void *lpBaseOfDll;
  unsigned int dwDebugInfoFileOffset;
  unsigned int nDebugInfoSize;
  void *lpImageName;
  unsigned __int16 fUnicode;
};

/* 9116 */
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int UnwindInfoAddress;
};

/* 9117 */
struct _CMSG_HASHED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned int hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
};

/* 9118 */
struct _DRIVE_LAYOUT_INFORMATION
{
  unsigned int PartitionCount;
  unsigned int Signature;
  _PARTITION_INFORMATION PartitionEntry[1];
};

/* 9119 */
struct __cppobj JfrEvent<EventGCPhasePauseLevel4>
{
};

/* 9120 */
struct __cppobj EventGCPhasePauseLevel4 : JfrEvent<EventGCPhasePauseLevel4>
{
};

/* 9121 */
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
{
  unsigned int cbSize;
  unsigned int hCryptProv;
  unsigned int dwSignerIndex;
  unsigned int dwSignerType;
  void *pvSigner;
};

/* 9122 */
struct _ENCRYPTION_CERTIFICATE_HASH
{
  unsigned int cbTotalLength;
  _SID *pUserSid;
  _EFS_HASH_BLOB *pHash;
  wchar_t *lpDisplayInformation;
};

/* 9123 */
struct _ENCRYPTION_CERTIFICATE_HASH_LIST
{
  unsigned int nCert_Hash;
  _ENCRYPTION_CERTIFICATE_HASH **pUsers;
};

/* 9124 */
struct __cppobj JfrEvent<EventDumpReason>
{
};

/* 9125 */
struct __cppobj EventDumpReason : JfrEvent<EventDumpReason>
{
};

/* 9126 */
struct _IMAGE_AUX_SYMBOL_EX::<unnamed_type_Sym>
{
  unsigned int WeakDefaultSymIndex;
  unsigned int WeakSearchType;
  unsigned __int8 rgbReserved[12];
};

/* 9127 */
struct _IMAGE_AUX_SYMBOL_EX::<unnamed_type_File>
{
  unsigned __int8 Name[20];
};

/* 9128 */
struct _IMAGE_AUX_SYMBOL_EX::<unnamed_type_Section>
{
  unsigned int Length;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int CheckSum;
  __int16 Number;
  unsigned __int8 Selection;
  unsigned __int8 bReserved;
  __int16 HighNumber;
  unsigned __int8 rgbReserved[2];
};

/* 9129 */
struct _IMAGE_AUX_SYMBOL_EX::<unnamed_type_CRC>
{
  unsigned int crc;
  unsigned __int8 rgbReserved[16];
};

/* 9130 */
struct $F63F0DDFF661F010F0D0CFCAA537165E
{
  IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  unsigned __int8 rgbReserved[2];
};

/* 9131 */
union _IMAGE_AUX_SYMBOL_EX
{
  _IMAGE_AUX_SYMBOL_EX::<unnamed_type_Sym> Sym;
  _IMAGE_AUX_SYMBOL_EX::<unnamed_type_File> File;
  _IMAGE_AUX_SYMBOL_EX::<unnamed_type_Section> Section;
  $F63F0DDFF661F010F0D0CFCAA537165E __s3;
  _IMAGE_AUX_SYMBOL_EX::<unnamed_type_CRC> CRC;
};

/* 9132 */
struct DDEADVISE
{
  unsigned __int16 reserved : 14;
  unsigned __int16 fDeferUpd : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
};

/* 9133 */
struct __cppobj IServerSecurity : IUnknown
{
};

/* 9134 */
struct /*VFT*/ IServerSecurity_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryBlanket)(IServerSecurity *this, unsigned int *, unsigned int *, wchar_t **, unsigned int *, unsigned int *, void **, unsigned int *);
  HRESULT (__stdcall *ImpersonateClient)(IServerSecurity *this);
  HRESULT (__stdcall *RevertToSelf)(IServerSecurity *this);
  int (__stdcall *IsImpersonating)(IServerSecurity *this);
};

/* 9135 */
struct __cppobj JfrEvent<EventSweepCodeCache>
{
};

/* 9136 */
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
  unsigned __int64 CycleTime;
};

/* 9137 */
struct tagEMRCREATEMONOBRUSH
{
  tagEMR emr;
  unsigned int ihBrush;
  unsigned int iUsage;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
};

/* 9138 */
struct HDESK__
{
  int unused;
};

/* 9139 */
struct BSMINFO
{
  unsigned int cbSize;
  HDESK__ *hdesk;
  HWND__ *hwnd;
  _LUID luid;
};

/* 9140 */
union tagRPC_EE_INFO_PARAM::<unnamed_type_u>
{
  char *AnsiString;
  wchar_t *UnicodeString;
  int LVal;
  __int16 SVal;
  unsigned __int64 PVal;
  tagBinaryParam BVal;
};

/* 9141 */
struct tagRPC_EE_INFO_PARAM
{
  tagExtendedErrorParamTypes ParameterType;
  tagRPC_EE_INFO_PARAM::<unnamed_type_u> u;
};

/* 9142 */
union _FILE_SEGMENT_ELEMENT
{
  void *__ptr64 Buffer;
  unsigned __int64 Alignment;
};

/* 9143 */
struct __declspec(align(4)) _SI_COPYFILE
{
  unsigned int SourceFileNameLength;
  unsigned int DestinationFileNameLength;
  unsigned int Flags;
  wchar_t FileNameBuffer[1];
};

/* 9144 */
struct _div_t
{
  int quot;
  int rem;
};

/* 9145 */
struct _SID_AND_ATTRIBUTES_HASH
{
  unsigned int SidCount;
  _SID_AND_ATTRIBUTES *SidAttr;
  unsigned int Hash[32];
};

/* 9146 */
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
  unsigned int ElementCount;
  _COMPATIBILITY_CONTEXT_ELEMENT Elements[];
};

/* 9147 */
struct tagStorageLayout
{
  unsigned int LayoutType;
  wchar_t *pwcsElementName;
  _LARGE_INTEGER cOffset;
  _LARGE_INTEGER cBytes;
};

/* 9148 */
struct _SERVICE_FAILURE_ACTIONS_FLAG
{
  int fFailureActionsOnNonCrashFailures;
};

/* 9149 */
struct _GLYPHMETRICS
{
  unsigned int gmBlackBoxX;
  unsigned int gmBlackBoxY;
  tagPOINT gmptGlyphOrigin;
  __int16 gmCellIncX;
  __int16 gmCellIncY;
};

/* 9150 */
struct _JOB_SET_ARRAY
{
  void *JobHandle;
  unsigned int MemberLevel;
  unsigned int Flags;
};

/* 9151 */
struct __cppobj JfrEvent<EventJavaMonitorEnter>
{
};

/* 9152 */
struct __cppobj EventJavaMonitorEnter : JfrEvent<EventJavaMonitorEnter>
{
};

/* 9153 */
struct __declspec(align(4)) _FORMAT_EX_PARAMETERS
{
  _MEDIA_TYPE MediaType;
  unsigned int StartCylinderNumber;
  unsigned int EndCylinderNumber;
  unsigned int StartHeadNumber;
  unsigned int EndHeadNumber;
  unsigned __int16 FormatGapLength;
  unsigned __int16 SectorsPerTrack;
  unsigned __int16 SectorNumber[1];
};

/* 9154 */
struct _MIDL_FORMAT_STRING
{
  __int16 Pad;
  unsigned __int8 Format[];
};

/* 9155 */
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
  _LARGE_INTEGER TotalUserTime;
  _LARGE_INTEGER TotalKernelTime;
  _LARGE_INTEGER ThisPeriodTotalUserTime;
  _LARGE_INTEGER ThisPeriodTotalKernelTime;
  unsigned int TotalPageFaultCount;
  unsigned int TotalProcesses;
  unsigned int ActiveProcesses;
  unsigned int TotalTerminatedProcesses;
};

/* 9156 */
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
  _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  _IO_COUNTERS IoInfo;
};

/* 9157 */
struct __cppobj EventYoungGenerationConfiguration : JfrEvent<EventYoungGenerationConfiguration>
{
};

/* 9158 */
struct tagEMRSETMITERLIMIT
{
  tagEMR emr;
  float eMiterLimit;
};

/* 9159 */
struct tagEMRCREATEBRUSHINDIRECT
{
  tagEMR emr;
  unsigned int ihBrush;
  tagLOGBRUSH32 lb;
};

/* 9160 */
struct tagMCI_ANIM_STEP_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrames;
};

/* 9161 */
struct _CERT_DH_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB g;
};

/* 9162 */
struct _STORAGE_ALLOCATE_BC_STREAM_INPUT
{
  unsigned int Version;
  unsigned int RequestsPerPeriod;
  unsigned int Period;
  unsigned __int8 RetryFailures;
  unsigned __int8 Discardable;
  unsigned __int8 Reserved1[2];
  unsigned int AccessType;
  unsigned int AccessMode;
};

/* 9163 */
struct __cppobj IInternetSecurityMgrSite : IUnknown
{
};

/* 9164 */
struct /*VFT*/ IInternetSecurityMgrSite_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IInternetSecurityMgrSite *this, HWND__ **);
  HRESULT (__stdcall *EnableModeless)(IInternetSecurityMgrSite *this, int);
};

/* 9165 */
struct __cppobj IInternetSecurityManager : IUnknown
{
};

/* 9166 */
struct /*VFT*/ IInternetSecurityManager_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetSecuritySite)(IInternetSecurityManager *this, IInternetSecurityMgrSite *);
  HRESULT (__stdcall *GetSecuritySite)(IInternetSecurityManager *this, IInternetSecurityMgrSite **);
  HRESULT (__stdcall *MapUrlToZone)(IInternetSecurityManager *this, const wchar_t *, unsigned int *, unsigned int);
  HRESULT (__stdcall *GetSecurityId)(IInternetSecurityManager *this, const wchar_t *, unsigned __int8 *, unsigned int *, unsigned int);
  HRESULT (__stdcall *ProcessUrlAction)(IInternetSecurityManager *this, const wchar_t *, unsigned int, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int, unsigned int, unsigned int);
  HRESULT (__stdcall *QueryCustomPolicy)(IInternetSecurityManager *this, const wchar_t *, const _GUID *, unsigned __int8 **, unsigned int *, unsigned __int8 *, unsigned int, unsigned int);
  HRESULT (__stdcall *SetZoneMapping)(IInternetSecurityManager *this, unsigned int, const wchar_t *, unsigned int);
  HRESULT (__stdcall *GetZoneMappings)(IInternetSecurityManager *this, unsigned int, IEnumString **, unsigned int);
};

/* 9167 */
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
  unsigned int dwFlags;
  unsigned int ulFormatVersion;
  unsigned int ulAssemblyCount;
  unsigned int ulRootManifestPathType;
  unsigned int ulRootManifestPathChars;
  unsigned int ulRootConfigurationPathType;
  unsigned int ulRootConfigurationPathChars;
  unsigned int ulAppDirPathType;
  unsigned int ulAppDirPathChars;
  const wchar_t *lpRootManifestPath;
  const wchar_t *lpRootConfigurationPath;
  const wchar_t *lpAppDirPath;
};

/* 9168 */
struct _CREATE_THREAD_DEBUG_INFO
{
  void *hThread;
  void *lpThreadLocalBase;
  unsigned int (__stdcall *lpStartAddress)(void *);
};

/* 9169 */
union _DEBUG_EVENT::<unnamed_type_u>
{
  _EXCEPTION_DEBUG_INFO Exception;
  _CREATE_THREAD_DEBUG_INFO CreateThread;
  _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
  _EXIT_THREAD_DEBUG_INFO ExitThread;
  _EXIT_PROCESS_DEBUG_INFO ExitProcess;
  _LOAD_DLL_DEBUG_INFO LoadDll;
  _UNLOAD_DLL_DEBUG_INFO UnloadDll;
  _OUTPUT_DEBUG_STRING_INFO DebugString;
  _RIP_INFO RipInfo;
};

/* 9170 */
struct _DEBUG_EVENT
{
  unsigned int dwDebugEventCode;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
  _DEBUG_EVENT::<unnamed_type_u> u;
};

/* 9171 */
struct _SECURITY_DESCRIPTOR_RELATIVE
{
  unsigned __int8 Revision;
  unsigned __int8 Sbz1;
  unsigned __int16 Control;
  unsigned int Owner;
  unsigned int Group;
  unsigned int Sacl;
  unsigned int Dacl;
};

/* 9172 */
struct _SHFILEINFOA
{
  HICON__ *hIcon;
  int iIcon;
  unsigned int dwAttributes;
  char szDisplayName[260];
  char szTypeName[80];
};

/* 9173 */
struct _CERT_REVOCATION_STATUS
{
  unsigned int cbSize;
  unsigned int dwIndex;
  unsigned int dwError;
  unsigned int dwReason;
  int fHasFreshnessTime;
  unsigned int dwFreshnessTime;
};

/* 9174 */
struct _TOKEN_STATISTICS
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LARGE_INTEGER ExpirationTime;
  _TOKEN_TYPE TokenType;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  unsigned int DynamicCharged;
  unsigned int DynamicAvailable;
  unsigned int GroupCount;
  unsigned int PrivilegeCount;
  _LUID ModifiedId;
};

/* 9175 */
struct __cppobj IInternetBindInfoEx : IInternetBindInfo
{
};

/* 9176 */
struct /*VFT*/ IInternetBindInfoEx_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBindInfo)(IInternetBindInfo *this, unsigned int *, _tagBINDINFO *);
  HRESULT (__stdcall *GetBindString)(IInternetBindInfo *this, unsigned int, wchar_t **, unsigned int, unsigned int *);
  HRESULT (__stdcall *GetBindInfoEx)(IInternetBindInfoEx *this, unsigned int *, _tagBINDINFO *, unsigned int *, unsigned int *);
};

/* 9177 */
struct __cppobj JfrEvent<EventEvacuationInformation>
{
};

/* 9178 */
struct __cppobj vc_attributes::SuccessAttribute
{
  const wchar_t *Condition;
};

/* 9179 */
struct tagMIXERLINECONTROLSA
{
  unsigned int cbStruct;
  unsigned int dwLineID;
  $476D211351DA30503E50D2F0E6E515B0 ___u2;
  unsigned int cControls;
  unsigned int cbmxctrl;
  tagMIXERCONTROLA *pamxctrl;
};

/* 9180 */
struct tagCSPLATFORM
{
  unsigned int dwPlatformId;
  unsigned int dwVersionHi;
  unsigned int dwVersionLo;
  unsigned int dwProcessorArch;
};

/* 9181 */
struct tagQUERYCONTEXT
{
  unsigned int dwContext;
  tagCSPLATFORM Platform;
  unsigned int Locale;
  unsigned int dwVersionHi;
  unsigned int dwVersionLo;
};

/* 9182 */
struct _SHNAMEMAPPINGW
{
  wchar_t *pszOldPath;
  wchar_t *pszNewPath;
  int cchOldPath;
  int cchNewPath;
};

/* 9183 */
struct _TAPE_GET_POSITION
{
  unsigned int Type;
  unsigned int Partition;
  _LARGE_INTEGER Offset;
};

/* 9184 */
struct _CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  unsigned int dwError;
  int lChainIndex;
  int lElementIndex;
  void *pvExtraPolicyStatus;
};

/* 9185 */
struct __declspec(align(4)) _DEVICE_TRIM_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int8 TrimEnabled;
};

/* 9186 */
struct _CRYPT_PKCS8_EXPORT_PARAMS
{
  unsigned int hCryptProv;
  unsigned int dwKeySpec;
  char *pszPrivateKeyObjId;
  int (__stdcall *pEncryptPrivateKeyFunc)(_CRYPT_ALGORITHM_IDENTIFIER *, _CRYPTOAPI_BLOB *, unsigned __int8 *, unsigned int *, void *);
  void *pVoidEncryptFunc;
};

/* 9187 */
struct __cppobj IChannelHook : IUnknown
{
};

/* 9188 */
struct /*VFT*/ IChannelHook_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void (__stdcall *ClientGetSize)(IChannelHook *this, const _GUID *, const _GUID *, unsigned int *);
  void (__stdcall *ClientFillBuffer)(IChannelHook *this, const _GUID *, const _GUID *, unsigned int *, void *);
  void (__stdcall *ClientNotify)(IChannelHook *this, const _GUID *, const _GUID *, unsigned int, void *, unsigned int, HRESULT);
  void (__stdcall *ServerNotify)(IChannelHook *this, const _GUID *, const _GUID *, unsigned int, void *, unsigned int);
  void (__stdcall *ServerGetSize)(IChannelHook *this, const _GUID *, const _GUID *, HRESULT, unsigned int *);
  void (__stdcall *ServerFillBuffer)(IChannelHook *this, const _GUID *, const _GUID *, unsigned int *, void *, HRESULT);
};

/* 9189 */
struct __declspec(align(8)) _stat32i64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};

/* 9190 */
struct _wfinddata64_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  __int64 size;
  wchar_t name[260];
};

/* 9191 */
struct tagMCI_GETDEVCAPS_PARMS
{
  unsigned int dwCallback;
  unsigned int dwReturn;
  unsigned int dwItem;
};

/* 9192 */
struct _tagHIT_LOGGING_INFO
{
  unsigned int dwStructSize;
  char *lpszLoggedUrlName;
  _SYSTEMTIME StartTime;
  _SYSTEMTIME EndTime;
  char *lpszExtendedInfo;
};

/* 9193 */
struct tagRPC_CALL_ATTRIBUTES_V1_W
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  unsigned __int16 *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  unsigned __int16 *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
};

/* 9194 */
struct PPM_IDLE_ACCOUNTING
{
  unsigned int StateCount;
  unsigned int TotalTransitions;
  unsigned int ResetCount;
  unsigned __int64 StartTime;
  PPM_IDLE_STATE_ACCOUNTING State[1];
};

/* 9195 */
struct __cppobj tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT
{
  unsigned int mouseData;
};

/* 9196 */
struct tagMCI_LOAD_PARMSW
{
  unsigned int dwCallback;
  const wchar_t *lpfilename;
};

/* 9197 */
struct __cppobj IErrorInfo : IUnknown
{
};

/* 9198 */
struct /*VFT*/ IErrorInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetGUID)(IErrorInfo *this, _GUID *);
  HRESULT (__stdcall *GetSource)(IErrorInfo *this, wchar_t **);
  HRESULT (__stdcall *GetDescription)(IErrorInfo *this, wchar_t **);
  HRESULT (__stdcall *GetHelpFile)(IErrorInfo *this, wchar_t **);
  HRESULT (__stdcall *GetHelpContext)(IErrorInfo *this, unsigned int *);
};

/* 9199 */
struct tagCWPSTRUCT
{
  int lParam;
  unsigned int wParam;
  unsigned int message;
  HWND__ *hwnd;
};

/* 9200 */
struct tagALTTABINFO
{
  unsigned int cbSize;
  int cItems;
  int cColumns;
  int cRows;
  int iColFocus;
  int iRowFocus;
  int cxItem;
  int cyItem;
  tagPOINT ptStart;
};

/* 9201 */
struct _RSAPUBKEY
{
  unsigned int magic;
  unsigned int bitlen;
  unsigned int pubexp;
};

/* 9202 */
struct method_size_info
{
  unsigned int code;
  unsigned int excs;
  unsigned int etab;
  unsigned int lnum;
  unsigned int lvar;
};

/* 9203 */
struct _IMAGE_TLS_DIRECTORY32
{
  unsigned int StartAddressOfRawData;
  unsigned int EndAddressOfRawData;
  unsigned int AddressOfIndex;
  unsigned int AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 9204 */
struct __declspec(align(4)) tagEMRPOLYDRAW16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cpts;
  tagPOINTS apts[1];
  unsigned __int8 abTypes[1];
};

/* 9205 */
struct __declspec(align(8)) _VERIFY_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  unsigned int Length;
};

/* 9206 */
struct _GRADIENT_RECT
{
  unsigned int UpperLeft;
  unsigned int LowerRight;
};

/* 9207 */
struct NTFS_EXTENDED_VOLUME_DATA
{
  unsigned int ByteCount;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 9208 */
struct _SESSION_BUFFER
{
  unsigned __int8 lsn;
  unsigned __int8 state;
  unsigned __int8 local_name[16];
  unsigned __int8 remote_name[16];
  unsigned __int8 rcvs_outstanding;
  unsigned __int8 sends_outstanding;
};

/* 9209 */
struct __cppobj IOleLink : IUnknown
{
};

/* 9210 */
struct /*VFT*/ IOleLink_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetUpdateOptions)(IOleLink *this, unsigned int);
  HRESULT (__stdcall *GetUpdateOptions)(IOleLink *this, unsigned int *);
  HRESULT (__stdcall *SetSourceMoniker)(IOleLink *this, IMoniker *, const _GUID *);
  HRESULT (__stdcall *GetSourceMoniker)(IOleLink *this, IMoniker **);
  HRESULT (__stdcall *SetSourceDisplayName)(IOleLink *this, const wchar_t *);
  HRESULT (__stdcall *GetSourceDisplayName)(IOleLink *this, wchar_t **);
  HRESULT (__stdcall *BindToSource)(IOleLink *this, unsigned int, IBindCtx *);
  HRESULT (__stdcall *BindIfRunning)(IOleLink *this);
  HRESULT (__stdcall *GetBoundSource)(IOleLink *this, IUnknown **);
  HRESULT (__stdcall *UnbindSource)(IOleLink *this);
  HRESULT (__stdcall *Update)(IOleLink *this, IBindCtx *);
};

/* 9211 */
struct _SYSTEM_MANDATORY_LABEL_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 9212 */
struct __declspec(align(4)) _TAPE_ERASE
{
  unsigned int Type;
  unsigned __int8 Immediate;
};

/* 9213 */
struct HRSRC__
{
  int unused;
};

/* 9214 */
struct _OCSP_BASIC_RESPONSE_ENTRY
{
  _OCSP_CERT_ID CertId;
  unsigned int dwCertStatus;
  _OCSP_BASIC_REVOKED_INFO *pRevokedInfo;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 9215 */
struct _CMSG_SP3_COMPATIBLE_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 9216 */
struct __cppobj IOleCache : IUnknown
{
};

/* 9217 */
struct /*VFT*/ IOleCache_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Cache)(IOleCache *this, tagFORMATETC *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Uncache)(IOleCache *this, unsigned int);
  HRESULT (__stdcall *EnumCache)(IOleCache *this, IEnumSTATDATA **);
  HRESULT (__stdcall *InitCache)(IOleCache *this, IDataObject *);
  HRESULT (__stdcall *SetData)(IOleCache *this, tagFORMATETC *, tagSTGMEDIUM *, int);
};

/* 9218 */
struct tagEMRPOLYPOLYLINE16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nPolys;
  unsigned int cpts;
  unsigned int aPolyCounts[1];
  tagPOINTS apts[1];
};

/* 9219 */
struct _CRYPT_PRIVATE_KEY_INFO
{
  unsigned int Version;
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPTOAPI_BLOB PrivateKey;
  _CRYPT_ATTRIBUTES *pAttributes;
};

/* 9220 */
struct _FLAG_STGMEDIUM
{
  int ContextFlags;
  int fPassOwnership;
  tagSTGMEDIUM Stgmed;
};

/* 9221 */
struct __cppobj JfrEvent<EventDoubleFlag>
{
};

/* 9222 */
struct __cppobj EventDoubleFlag : JfrEvent<EventDoubleFlag>
{
};

/* 9223 */
struct _TRANSMIT_FILE_BUFFERS
{
  void *Head;
  unsigned int HeadLength;
  void *Tail;
  unsigned int TailLength;
};

/* 9224 */
struct _PRINTER_INFO_9W
{
  _devicemodeW *pDevMode;
};

/* 9225 */
struct __cppobj IViewObject2 : IViewObject
{
};

/* 9226 */
struct /*VFT*/ IViewObject2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Draw)(IViewObject *this, unsigned int, int, void *, tagDVTARGETDEVICE *, HDC__ *, HDC__ *, const _RECTL *, const _RECTL *, int (__stdcall *)(unsigned int), unsigned int);
  HRESULT (__stdcall *GetColorSet)(IViewObject *this, unsigned int, int, void *, tagDVTARGETDEVICE *, HDC__ *, tagLOGPALETTE **);
  HRESULT (__stdcall *Freeze)(IViewObject *this, unsigned int, int, void *, unsigned int *);
  HRESULT (__stdcall *Unfreeze)(IViewObject *this, unsigned int);
  HRESULT (__stdcall *SetAdvise)(IViewObject *this, unsigned int, unsigned int, IAdviseSink *);
  HRESULT (__stdcall *GetAdvise)(IViewObject *this, unsigned int *, unsigned int *, IAdviseSink **);
  HRESULT (__stdcall *GetExtent)(IViewObject2 *this, unsigned int, int, tagDVTARGETDEVICE *, tagSIZE *);
};

/* 9227 */
struct __cppobj JfrEvent<EventExecutionSample>
{
};

/* 9228 */
struct __cppobj EventExecutionSample : JfrEvent<EventExecutionSample>
{
};

/* 9229 */
struct /*VFT*/ TypeVectS_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 9230 */
struct __cppobj TypeVectS : TypeVect
{
};

/* 9231 */
struct __cppobj IRunnableObject : IUnknown
{
};

/* 9232 */
struct /*VFT*/ IRunnableObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetRunningClass)(IRunnableObject *this, _GUID *);
  HRESULT (__stdcall *Run)(IRunnableObject *this, IBindCtx *);
  int (__stdcall *IsRunning)(IRunnableObject *this);
  HRESULT (__stdcall *LockRunning)(IRunnableObject *this, int, int);
  HRESULT (__stdcall *SetContainedObject)(IRunnableObject *this, int);
};

/* 9233 */
struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
  _GUID LogIdentity;
};

/* 9234 */
struct __cppobj G1HeapRegionTraceType : AllStatic
{
};

/* 9235 */
struct tagDRVCONFIGINFO
{
  unsigned int dwDCISize;
  const wchar_t *lpszDCISectionName;
  const wchar_t *lpszDCIAliasName;
};

/* 9236 */
struct __declspec(align(2)) tagHW_PROFILE_INFOA
{
  unsigned int dwDockInfo;
  char szHwProfileGuid[39];
  char szHwProfileName[80];
};

/* 9237 */
struct _FILE_PREFETCH
{
  unsigned int Type;
  unsigned int Count;
  unsigned __int64 Prefetch[1];
};

/* 9238 */
struct _CMSG_RC2_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwBitLen;
};

/* 9239 */
struct _ENUM_SERVICE_STATUS_PROCESSW
{
  wchar_t *lpServiceName;
  wchar_t *lpDisplayName;
  _SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 9240 */
struct __cppobj JfrEvent<EventCodeCacheFull>
{
};

/* 9241 */
struct __cppobj IMultiQI : IUnknown
{
};

/* 9242 */
struct /*VFT*/ IMultiQI_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryMultipleInterfaces)(IMultiQI *this, unsigned int, tagMULTI_QI *);
};

/* 9243 */
struct __cppobj JfrEvent<EventOSInformation>
{
};

/* 9244 */
struct tagKERNINGPAIR
{
  unsigned __int16 wFirst;
  unsigned __int16 wSecond;
  int iKernAmount;
};

/* 9245 */
struct _CRYPT_PROVIDERS
{
  unsigned int cProviders;
  wchar_t **rgpszProviders;
};

/* 9246 */
struct PPM_IDLE_ACCOUNTING_EX
{
  unsigned int StateCount;
  unsigned int TotalTransitions;
  unsigned int ResetCount;
  unsigned __int64 StartTime;
  PPM_IDLE_STATE_ACCOUNTING_EX State[1];
};

/* 9247 */
struct _ENLISTMENT_BASIC_INFORMATION
{
  _GUID EnlistmentId;
  _GUID TransactionId;
  _GUID ResourceManagerId;
};

/* 9248 */
struct $12EDD93CAC4208332C3108DBB4839320
{
  unsigned __int16 AllowScaling : 1;
  unsigned __int16 Disabled : 1;
  unsigned __int16 Reserved : 14;
};

/* 9249 */
union PROCESSOR_IDLESTATE_POLICY::<unnamed_type_Flags>
{
  unsigned __int16 AsWORD;
  $12EDD93CAC4208332C3108DBB4839320 __s1;
};

/* 9250 */
struct PROCESSOR_IDLESTATE_POLICY
{
  unsigned __int16 Revision;
  PROCESSOR_IDLESTATE_POLICY::<unnamed_type_Flags> Flags;
  unsigned int PolicyCount;
  PROCESSOR_IDLESTATE_INFO Policy[3];
};

/* 9251 */
struct __declspec(align(8)) _STORAGE_ALLOCATE_BC_STREAM_OUTPUT
{
  unsigned __int64 RequestSize;
  unsigned int NumOutStandingRequests;
};

/* 9252 */
struct __cppobj IBindStatusCallbackEx : IBindStatusCallback
{
};

/* 9253 */
struct /*VFT*/ IBindStatusCallbackEx_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *OnStartBinding)(IBindStatusCallback *this, unsigned int, IBinding *);
  HRESULT (__stdcall *GetPriority)(IBindStatusCallback *this, int *);
  HRESULT (__stdcall *OnLowResource)(IBindStatusCallback *this, unsigned int);
  HRESULT (__stdcall *OnProgress)(IBindStatusCallback *this, unsigned int, unsigned int, unsigned int, const wchar_t *);
  HRESULT (__stdcall *OnStopBinding)(IBindStatusCallback *this, HRESULT, const wchar_t *);
  HRESULT (__stdcall *GetBindInfo)(IBindStatusCallback *this, unsigned int *, _tagBINDINFO *);
  HRESULT (__stdcall *OnDataAvailable)(IBindStatusCallback *this, unsigned int, unsigned int, tagFORMATETC *, tagSTGMEDIUM *);
  HRESULT (__stdcall *OnObjectAvailable)(IBindStatusCallback *this, const _GUID *, IUnknown *);
  HRESULT (__stdcall *GetBindInfoEx)(IBindStatusCallbackEx *this, unsigned int *, _tagBINDINFO *, unsigned int *, unsigned int *);
};

/* 9254 */
struct tagEMRCREATEPEN
{
  tagEMR emr;
  unsigned int ihPen;
  tagLOGPEN lopn;
};

/* 9255 */
struct _MIDL_STUBLESS_PROXY_INFO
{
  const _MIDL_STUB_DESC *pStubDesc;
  const unsigned __int8 *ProcFormatString;
  const unsigned __int16 *FormatStringOffset;
  _RPC_SYNTAX_IDENTIFIER *pTransferSyntax;
  unsigned int nCount;
  _MIDL_SYNTAX_INFO *pSyntaxInfo;
};

/* 9256 */
struct _GET_CHANGER_PARAMETERS
{
  unsigned int Size;
  unsigned __int16 NumberTransportElements;
  unsigned __int16 NumberStorageElements;
  unsigned __int16 NumberCleanerSlots;
  unsigned __int16 NumberIEElements;
  unsigned __int16 NumberDataTransferElements;
  unsigned __int16 NumberOfDoors;
  unsigned __int16 FirstSlotNumber;
  unsigned __int16 FirstDriveNumber;
  unsigned __int16 FirstTransportNumber;
  unsigned __int16 FirstIEPortNumber;
  unsigned __int16 FirstCleanerSlotAddress;
  unsigned __int16 MagazineSize;
  unsigned int DriveCleanTimeout;
  unsigned int Features0;
  unsigned int Features1;
  unsigned __int8 MoveFromTransport;
  unsigned __int8 MoveFromSlot;
  unsigned __int8 MoveFromIePort;
  unsigned __int8 MoveFromDrive;
  unsigned __int8 ExchangeFromTransport;
  unsigned __int8 ExchangeFromSlot;
  unsigned __int8 ExchangeFromIePort;
  unsigned __int8 ExchangeFromDrive;
  unsigned __int8 LockUnlockCapabilities;
  unsigned __int8 PositionCapabilities;
  unsigned __int8 Reserved1[2];
  unsigned int Reserved2[2];
};

/* 9257 */
struct tagPROCESSENTRY32W
{
  unsigned int dwSize;
  unsigned int cntUsage;
  unsigned int th32ProcessID;
  unsigned int th32DefaultHeapID;
  unsigned int th32ModuleID;
  unsigned int cntThreads;
  unsigned int th32ParentProcessID;
  int pcPriClassBase;
  unsigned int dwFlags;
  wchar_t szExeFile[260];
};

/* 9258 */
struct __cppobj JfrEvent<EventClassLoad>
{
};

/* 9259 */
struct _PROPSHEETPAGEW_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $FA47F85280613D2607EBD8EBA80F8487 ___u3;
  $812227CFA36A41A97E8F88268D069E46 ___u4;
  const wchar_t *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
};

/* 9260 */
struct tagGLYPHSET
{
  unsigned int cbThis;
  unsigned int flAccel;
  unsigned int cGlyphsSupported;
  unsigned int cRanges;
  tagWCRANGE ranges[1];
};

/* 9261 */
struct class_size_info
{
  unsigned int constants;
  unsigned int fields;
  unsigned int methods;
  unsigned int interfaces;
  unsigned int fields2;
  unsigned int innerclasses;
  method_size_info clinit;
  method_size_info main;
};

/* 9262 */
struct _PERF_INSTANCE_DEFINITION
{
  unsigned int ByteLength;
  unsigned int ParentObjectTitleIndex;
  unsigned int ParentObjectInstance;
  int UniqueID;
  unsigned int NameOffset;
  unsigned int NameLength;
};

/* 9263 */
struct __declspec(align(4)) _DISK_INT13_INFO
{
  unsigned __int16 DriveSelect;
  unsigned int MaxCylinders;
  unsigned __int16 SectorsPerTrack;
  unsigned __int16 MaxHeads;
  unsigned __int16 NumberDrives;
};

/* 9264 */
struct _DISK_DETECTION_INFO
{
  unsigned int SizeOfDetectInfo;
  _DETECTION_TYPE DetectionType;
  _DISK_INT13_INFO Int13;
  _DISK_EX_INT13_INFO ExInt13;
};

/* 9265 */
struct __declspec(align(8)) MOVE_FILE_DATA
{
  void *FileHandle;
  _LARGE_INTEGER StartingVcn;
  _LARGE_INTEGER StartingLcn;
  unsigned int ClusterCount;
};

/* 9266 */
struct _DRIVER_INFO_8W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  wchar_t *pszMfgName;
  wchar_t *pszOEMUrl;
  wchar_t *pszHardwareID;
  wchar_t *pszProvider;
  wchar_t *pszPrintProcessor;
  wchar_t *pszVendorSetup;
  wchar_t *pszzColorProfiles;
  wchar_t *pszInfPath;
  unsigned int dwPrinterDriverAttributes;
  wchar_t *pszzCoreDriverDependencies;
  _FILETIME ftMinInboxDriverVerDate;
  unsigned __int64 dwlMinInboxDriverVerVersion;
};

/* 9267 */
struct _PROVIDOR_INFO_2A
{
  char *pOrder;
};

/* 9268 */
struct _QUERY_SERVICE_LOCK_STATUSA
{
  unsigned int fIsLocked;
  char *lpLockOwner;
  unsigned int dwLockDuration;
};

/* 9269 */
struct _CONSOLE_HISTORY_INFO
{
  unsigned int cbSize;
  unsigned int HistoryBufferSize;
  unsigned int NumberOfHistoryBuffers;
  unsigned int dwFlags;
};

/* 9270 */
struct HMIDISTRM__
{
  int unused;
};

/* 9271 */
struct _CERT_OR_CRL_BUNDLE
{
  unsigned int cItem;
  _CERT_OR_CRL_BLOB *rgItem;
};

/* 9272 */
struct _OBJECTID
{
  _GUID Lineage;
  unsigned int Uniquifier;
};

/* 9273 */
struct _SYSTEM_ALARM_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 9274 */
struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned __int64 DeCommitFreeBlockThreshold;
  unsigned __int64 DeCommitTotalFreeThreshold;
  unsigned __int64 LockPrefixTable;
  unsigned __int64 MaximumAllocationSize;
  unsigned __int64 VirtualMemoryThreshold;
  unsigned __int64 ProcessAffinityMask;
  unsigned int ProcessHeapFlags;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned __int64 EditList;
  unsigned __int64 SecurityCookie;
  unsigned __int64 SEHandlerTable;
  unsigned __int64 SEHandlerCount;
};

/* 9275 */
struct tagEMRSETPIXELV
{
  tagEMR emr;
  _POINTL ptlPixel;
  unsigned int crColor;
};

/* 9276 */
struct linger
{
  unsigned __int16 l_onoff;
  unsigned __int16 l_linger;
};

/* 9277 */
struct __declspec(align(4)) _STORAGE_MINIPORT_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  _STORAGE_PORT_CODE_SET Portdriver;
  unsigned __int8 LUNResetSupported;
  unsigned __int8 TargetResetSupported;
};

/* 9278 */
struct __cppobj JfrEvent<EventPSHeapSummary>
{
};

/* 9279 */
union $8662F439D215AAEDBB1F787C8B649648
{
  unsigned __int64 FiberData;
  unsigned int Version;
};

/* 9280 */
struct _NT_TIB64
{
  unsigned __int64 ExceptionList;
  unsigned __int64 StackBase;
  unsigned __int64 StackLimit;
  unsigned __int64 SubSystemTib;
  $8662F439D215AAEDBB1F787C8B649648 ___u4;
  unsigned __int64 ArbitraryUserPointer;
  unsigned __int64 Self;
};

/* 9281 */
struct _ABCFLOAT
{
  float abcfA;
  float abcfB;
  float abcfC;
};

/* 9282 */
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
  unsigned __int64 BeginAddress;
  unsigned __int64 EndAddress;
  unsigned __int64 ExceptionHandler;
  unsigned __int64 HandlerData;
  unsigned __int64 PrologEndAddress;
};

/* 9283 */
struct _CONSOLE_CURSOR_INFO
{
  unsigned int dwSize;
  int bVisible;
};

/* 9284 */
struct _CERT_NAME_VALUE
{
  unsigned int dwValueType;
  _CRYPTOAPI_BLOB Value;
};

/* 9285 */
struct _CPS_URLS
{
  wchar_t *pszURL;
  _CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
  _CRYPTOAPI_BLOB *pDigest;
};

/* 9286 */
struct __cppobj IMessageFilter : IUnknown
{
};

/* 9287 */
struct /*VFT*/ IMessageFilter_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *HandleInComingCall)(IMessageFilter *this, unsigned int, HTASK__ *, unsigned int, tagINTERFACEINFO *);
  unsigned int (__stdcall *RetryRejectedCall)(IMessageFilter *this, HTASK__ *, unsigned int, unsigned int);
  unsigned int (__stdcall *MessagePending)(IMessageFilter *this, HTASK__ *, unsigned int, unsigned int);
};

/* 9288 */
struct __declspec(align(8)) _TAPE_GET_MEDIA_PARAMETERS
{
  _LARGE_INTEGER Capacity;
  _LARGE_INTEGER Remaining;
  unsigned int BlockSize;
  unsigned int PartitionCount;
  unsigned __int8 WriteProtected;
};

/* 9289 */
struct _PROV_ENUMALGS
{
  unsigned int aiAlgid;
  unsigned int dwBitLen;
  unsigned int dwNameLen;
  char szName[20];
};

/* 9290 */
struct __cppobj IAsyncManager : IUnknown
{
};

/* 9291 */
struct /*VFT*/ IAsyncManager_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CompleteCall)(IAsyncManager *this, HRESULT);
  HRESULT (__stdcall *GetCallContext)(IAsyncManager *this, const _GUID *, void **);
  HRESULT (__stdcall *GetState)(IAsyncManager *this, unsigned int *);
};

/* 9292 */
struct __cppobj IReleaseMarshalBuffers : IUnknown
{
};

/* 9293 */
struct /*VFT*/ IReleaseMarshalBuffers_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ReleaseMarshalBuffer)(IReleaseMarshalBuffers *this, tagRPCOLEMESSAGE *, unsigned int, IUnknown *);
};

/* 9294 */
struct __cppobj JfrEvent<EventUnsignedLongFlagChanged>
{
};

/* 9295 */
struct __cppobj EventUnsignedLongFlagChanged : JfrEvent<EventUnsignedLongFlagChanged>
{
};

/* 9296 */
struct _TOKEN_ELEVATION
{
  unsigned int TokenIsElevated;
};

/* 9297 */
struct _CRL_ISSUING_DIST_POINT
{
  _CRL_DIST_POINT_NAME DistPointName;
  int fOnlyContainsUserCerts;
  int fOnlyContainsCACerts;
  _CRYPT_BIT_BLOB OnlySomeReasonFlags;
  int fIndirectCRL;
};

/* 9298 */
struct _FILE_PREFETCH_EX
{
  unsigned int Type;
  unsigned int Count;
  void *Context;
  unsigned __int64 Prefetch[1];
};

/* 9299 */
struct _SERVICE_DESCRIPTIONA
{
  char *lpDescription;
};

/* 9300 */
struct tagRAWINPUTDEVICELIST
{
  void *hDevice;
  unsigned int dwType;
};

/* 9301 */
struct _XSTATE_CONFIGURATION
{
  unsigned __int64 EnabledFeatures;
  unsigned int Size;
  unsigned __int32 OptimizedSave : 1;
  _XSTATE_FEATURE Features[64];
};

/* 9302 */
struct tagCRGB
{
  unsigned __int8 bRed;
  unsigned __int8 bGreen;
  unsigned __int8 bBlue;
  unsigned __int8 bExtra;
};

/* 9303 */
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR
{
  wchar_t *pwszName;
  wchar_t *pwszValue;
};

/* 9304 */
struct __cppobj IOleClientSite : IUnknown
{
};

/* 9305 */
struct /*VFT*/ IOleClientSite_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SaveObject)(IOleClientSite *this);
  HRESULT (__stdcall *GetMoniker)(IOleClientSite *this, unsigned int, unsigned int, IMoniker **);
  HRESULT (__stdcall *GetContainer)(IOleClientSite *this, IOleContainer **);
  HRESULT (__stdcall *ShowObject)(IOleClientSite *this);
  HRESULT (__stdcall *OnShowWindow)(IOleClientSite *this, int);
  HRESULT (__stdcall *RequestNewObjectLayout)(IOleClientSite *this);
};

/* 9306 */
struct __cppobj IOleObject : IUnknown
{
};

/* 9307 */
struct __cppobj IEnumOLEVERB : IUnknown
{
};

/* 9308 */
struct /*VFT*/ IEnumOLEVERB_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumOLEVERB *this, unsigned int, tagOLEVERB *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumOLEVERB *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumOLEVERB *this);
  HRESULT (__stdcall *Clone)(IEnumOLEVERB *this, IEnumOLEVERB **);
};

/* 9309 */
struct /*VFT*/ IOleObject_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetClientSite)(IOleObject *this, IOleClientSite *);
  HRESULT (__stdcall *GetClientSite)(IOleObject *this, IOleClientSite **);
  HRESULT (__stdcall *SetHostNames)(IOleObject *this, const wchar_t *, const wchar_t *);
  HRESULT (__stdcall *Close)(IOleObject *this, unsigned int);
  HRESULT (__stdcall *SetMoniker)(IOleObject *this, unsigned int, IMoniker *);
  HRESULT (__stdcall *GetMoniker)(IOleObject *this, unsigned int, unsigned int, IMoniker **);
  HRESULT (__stdcall *InitFromData)(IOleObject *this, IDataObject *, int, unsigned int);
  HRESULT (__stdcall *GetClipboardData)(IOleObject *this, unsigned int, IDataObject **);
  HRESULT (__stdcall *DoVerb)(IOleObject *this, int, tagMSG *, IOleClientSite *, int, HWND__ *, const tagRECT *);
  HRESULT (__stdcall *EnumVerbs)(IOleObject *this, IEnumOLEVERB **);
  HRESULT (__stdcall *Update)(IOleObject *this);
  HRESULT (__stdcall *IsUpToDate)(IOleObject *this);
  HRESULT (__stdcall *GetUserClassID)(IOleObject *this, _GUID *);
  HRESULT (__stdcall *GetUserType)(IOleObject *this, unsigned int, wchar_t **);
  HRESULT (__stdcall *SetExtent)(IOleObject *this, unsigned int, tagSIZE *);
  HRESULT (__stdcall *GetExtent)(IOleObject *this, unsigned int, tagSIZE *);
  HRESULT (__stdcall *Advise)(IOleObject *this, IAdviseSink *, unsigned int *);
  HRESULT (__stdcall *Unadvise)(IOleObject *this, unsigned int);
  HRESULT (__stdcall *EnumAdvise)(IOleObject *this, IEnumSTATDATA **);
  HRESULT (__stdcall *GetMiscStatus)(IOleObject *this, unsigned int, unsigned int *);
  HRESULT (__stdcall *SetColorScheme)(IOleObject *this, tagLOGPALETTE *);
};

/* 9310 */
struct tagBITMAP
{
  int bmType;
  int bmWidth;
  int bmHeight;
  int bmWidthBytes;
  unsigned __int16 bmPlanes;
  unsigned __int16 bmBitsPixel;
  void *bmBits;
};

/* 9311 */
struct tagDIBSECTION
{
  tagBITMAP dsBm;
  tagBITMAPINFOHEADER dsBmih;
  unsigned int dsBitfields[3];
  void *dshSection;
  unsigned int dsOffset;
};

/* 9312 */
struct __declspec(align(4)) tagRemHBITMAP
{
  unsigned int cbData;
  unsigned __int8 data[1];
};

/* 9313 */
struct tagSOleTlsDataPublic
{
  void *pvReserved0[2];
  unsigned int dwReserved0[3];
  void *pvReserved1[1];
  unsigned int dwReserved1[3];
  void *pvReserved2[4];
  unsigned int dwReserved2[1];
  void *pCurrentCtx;
};

/* 9314 */
struct _WOW64_LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bytes>
{
  unsigned __int8 BaseMid;
  unsigned __int8 Flags1;
  unsigned __int8 Flags2;
  unsigned __int8 BaseHi;
};

/* 9315 */
struct _WOW64_LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bits>
{
  unsigned __int32 BaseMid : 8;
  unsigned __int32 Type : 5;
  unsigned __int32 Dpl : 2;
  unsigned __int32 Pres : 1;
  unsigned __int32 LimitHi : 4;
  unsigned __int32 Sys : 1;
  unsigned __int32 Reserved_0 : 1;
  unsigned __int32 Default_Big : 1;
  unsigned __int32 Granularity : 1;
  unsigned __int32 BaseHi : 8;
};

/* 9316 */
union _WOW64_LDT_ENTRY::<unnamed_type_HighWord>
{
  _WOW64_LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bytes> Bytes;
  _WOW64_LDT_ENTRY::<unnamed_type_HighWord>::<unnamed_type_Bits> Bits;
};

/* 9317 */
struct _WOW64_LDT_ENTRY
{
  unsigned __int16 LimitLow;
  unsigned __int16 BaseLow;
  _WOW64_LDT_ENTRY::<unnamed_type_HighWord> HighWord;
};

/* 9318 */
struct __declspec(align(4)) _WIN32_STREAM_ID
{
  unsigned int dwStreamId;
  unsigned int dwStreamAttributes;
  _LARGE_INTEGER Size;
  unsigned int dwStreamNameSize;
  wchar_t cStreamName[1];
};

/* 9319 */
struct _TOKEN_OWNER
{
  void *Owner;
};

/* 9320 */
struct _CMSG_RC4_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwBitLen;
};

/* 9321 */
struct _tagRemBINDINFO
{
  unsigned int cbSize;
  wchar_t *szExtraInfo;
  unsigned int grfBindInfoF;
  unsigned int dwBindVerb;
  wchar_t *szCustomVerb;
  unsigned int cbstgmedData;
  unsigned int dwOptions;
  unsigned int dwOptionsFlags;
  unsigned int dwCodePage;
  _REMSECURITY_ATTRIBUTES securityAttributes;
  _GUID iid;
  IUnknown *pUnk;
  unsigned int dwReserved;
};

/* 9322 */
struct _EVENTSFORLOGFILE
{
  unsigned int ulSize;
  wchar_t szLogicalLogFile[256];
  unsigned int ulNumRecords;
  _EVENTLOGRECORD pEventLogRecords[];
};

/* 9323 */
struct __cppobj IXMLHttpRequest : IDispatch
{
};

/* 9324 */
struct /*VFT*/ IXMLHttpRequest_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *_open)(IXMLHttpRequest *this, wchar_t *, wchar_t *, tagVARIANT, tagVARIANT, tagVARIANT);
  HRESULT (__stdcall *setRequestHeader)(IXMLHttpRequest *this, wchar_t *, wchar_t *);
  HRESULT (__stdcall *getResponseHeader)(IXMLHttpRequest *this, wchar_t *, wchar_t **);
  HRESULT (__stdcall *getAllResponseHeaders)(IXMLHttpRequest *this, wchar_t **);
  HRESULT (__stdcall *send)(IXMLHttpRequest *this, tagVARIANT);
  HRESULT (__stdcall *abort)(IXMLHttpRequest *this);
  HRESULT (__stdcall *get_status)(IXMLHttpRequest *this, int *);
  HRESULT (__stdcall *get_statusText)(IXMLHttpRequest *this, wchar_t **);
  HRESULT (__stdcall *get_responseXML)(IXMLHttpRequest *this, IDispatch **);
  HRESULT (__stdcall *get_responseText)(IXMLHttpRequest *this, wchar_t **);
  HRESULT (__stdcall *get_responseBody)(IXMLHttpRequest *this, tagVARIANT *);
  HRESULT (__stdcall *get_responseStream)(IXMLHttpRequest *this, tagVARIANT *);
  HRESULT (__stdcall *get_readyState)(IXMLHttpRequest *this, int *);
  HRESULT (__stdcall *put_onreadystatechange)(IXMLHttpRequest *this, IDispatch *);
};

/* 9325 */
struct _SUPPORTED_OS_INFO
{
  unsigned __int16 OsCount;
  unsigned __int16 MitigationExist;
  unsigned __int16 OsList[4];
};

/* 9326 */
struct tMIXERCONTROLDETAILS_BOOLEAN
{
  int fValue;
};

/* 9327 */
struct __cppobj JfrEvent<EventZPageAllocation>
{
};

/* 9328 */
struct __cppobj EventZPageAllocation : JfrEvent<EventZPageAllocation>
{
};

/* 9329 */
struct __declspec(align(2)) _IMAGE_RESOURCE_DIRECTORY_STRING
{
  unsigned __int16 Length;
  char NameString[1];
};

/* 9330 */
struct _CRYPT_CSP_PROVIDER
{
  unsigned int dwKeySpec;
  wchar_t *pwszProviderName;
  _CRYPT_BIT_BLOB Signature;
};

/* 9331 */
struct __cppobj EventOSInformation : JfrEvent<EventOSInformation>
{
};

/* 9332 */
struct _ACCESS_DENIED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 9333 */
struct _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 9334 */
struct _ADAPTER_STATUS
{
  unsigned __int8 adapter_address[6];
  unsigned __int8 rev_major;
  unsigned __int8 reserved0;
  unsigned __int8 adapter_type;
  unsigned __int8 rev_minor;
  unsigned __int16 duration;
  unsigned __int16 frmr_recv;
  unsigned __int16 frmr_xmit;
  unsigned __int16 iframe_recv_err;
  unsigned __int16 xmit_aborts;
  unsigned int xmit_success;
  unsigned int recv_success;
  unsigned __int16 iframe_xmit_err;
  unsigned __int16 recv_buff_unavail;
  unsigned __int16 t1_timeouts;
  unsigned __int16 ti_timeouts;
  unsigned int reserved1;
  unsigned __int16 free_ncbs;
  unsigned __int16 max_cfg_ncbs;
  unsigned __int16 max_ncbs;
  unsigned __int16 xmit_buf_unavail;
  unsigned __int16 max_dgram_size;
  unsigned __int16 pending_sess;
  unsigned __int16 max_cfg_sess;
  unsigned __int16 max_sess;
  unsigned __int16 max_sess_pkt_size;
  unsigned __int16 name_count;
};

/* 9335 */
struct _CTL_ANY_SUBJECT_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  _CRYPTOAPI_BLOB SubjectIdentifier;
};

/* 9336 */
struct _NOTIFYICONDATAW
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  unsigned int uFlags;
  unsigned int uCallbackMessage;
  HICON__ *hIcon;
  wchar_t szTip[128];
  unsigned int dwState;
  unsigned int dwStateMask;
  wchar_t szInfo[256];
  $30417D6DC3305618FB171BBBD15A8541 ___u10;
  wchar_t szInfoTitle[64];
  unsigned int dwInfoFlags;
  _GUID guidItem;
};

/* 9337 */
struct _PRIVKEYVER3
{
  unsigned int magic;
  unsigned int bitlenP;
  unsigned int bitlenQ;
  unsigned int bitlenJ;
  unsigned int bitlenX;
  _DSSSEED DSSSeed;
};

/* 9338 */
struct STARTING_VCN_INPUT_BUFFER
{
  _LARGE_INTEGER StartingVcn;
};

/* 9339 */
struct __cppobj JfrEvent<EventCompilerStatistics>
{
};

/* 9340 */
struct __cppobj EventCompilerStatistics : JfrEvent<EventCompilerStatistics>
{
};

/* 9341 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_63
{
  const void *pVFTable;
  void *spare;
  char name[63];
};

/* 9342 */
struct __cppobj DecodeNKlassNode : DecodeNarrowPtrNode
{
};

/* 9343 */
struct HDROP__
{
  int unused;
};

/* 9344 */
struct /*VFT*/ LoadNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 9345 */
struct __cppobj LoadNNode : LoadNode
{
};

/* 9346 */
struct /*VFT*/ LoadNKlassNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
  bool (__thiscall *can_remove_control)(LoadNode *this);
  bool (__thiscall *is_g1_marking_load)(LoadNode *this);
};

/* 9347 */
struct __cppobj LoadNKlassNode : LoadNNode
{
};

/* 9348 */
struct _FORMAT_PARAMETERS
{
  _MEDIA_TYPE MediaType;
  unsigned int StartCylinderNumber;
  unsigned int EndCylinderNumber;
  unsigned int StartHeadNumber;
  unsigned int EndHeadNumber;
};

/* 9349 */
struct tagLASTINPUTINFO
{
  unsigned int cbSize;
  unsigned int dwTime;
};

/* 9350 */
struct _DRAGINFOW
{
  unsigned int uSize;
  tagPOINT pt;
  int fNC;
  wchar_t *lpFileList;
  unsigned int grfKeyState;
};

/* 9351 */
struct __declspec(align(4)) _STORAGE_DEVICE_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int8 DeviceType;
  unsigned __int8 DeviceTypeModifier;
  unsigned __int8 RemovableMedia;
  unsigned __int8 CommandQueueing;
  unsigned int VendorIdOffset;
  unsigned int ProductIdOffset;
  unsigned int ProductRevisionOffset;
  unsigned int SerialNumberOffset;
  _STORAGE_BUS_TYPE BusType;
  unsigned int RawPropertiesLength;
  unsigned __int8 RawDeviceProperties[1];
};

/* 9352 */
struct __declspec(align(8)) DELETE_USN_JOURNAL_DATA
{
  unsigned __int64 UsnJournalID;
  unsigned int DeleteFlags;
};

/* 9353 */
struct tagIMEMENUITEMINFOW
{
  unsigned int cbSize;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  wchar_t szString[80];
  HBITMAP__ *hbmpItem;
};

/* 9354 */
struct tagCOLORADJUSTMENT
{
  unsigned __int16 caSize;
  unsigned __int16 caFlags;
  unsigned __int16 caIlluminantIndex;
  unsigned __int16 caRedGamma;
  unsigned __int16 caGreenGamma;
  unsigned __int16 caBlueGamma;
  unsigned __int16 caReferenceBlack;
  unsigned __int16 caReferenceWhite;
  __int16 caContrast;
  __int16 caBrightness;
  __int16 caColorfulness;
  __int16 caRedGreenTint;
};

/* 9355 */
struct tagEMRSETCOLORADJUSTMENT
{
  tagEMR emr;
  tagCOLORADJUSTMENT ColorAdjustment;
};

/* 9356 */
struct _CERT_NAME_INFO
{
  unsigned int cRDN;
  _CERT_RDN *rgRDN;
};

/* 9357 */
struct _FPO_DATA
{
  unsigned int ulOffStart;
  unsigned int cbProcSize;
  unsigned int cdwLocals;
  unsigned __int16 cdwParams;
  unsigned __int16 cbProlog : 8;
  unsigned __int16 cbRegs : 3;
  unsigned __int16 fHasSEH : 1;
  unsigned __int16 fUseBP : 1;
  unsigned __int16 reserved : 1;
  unsigned __int16 cbFrame : 2;
};

/* 9358 */
struct tagNONCLIENTMETRICSW
{
  unsigned int cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  tagLOGFONTW lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  tagLOGFONTW lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  tagLOGFONTW lfMenuFont;
  tagLOGFONTW lfStatusFont;
  tagLOGFONTW lfMessageFont;
};

/* 9359 */
struct _BCRYPT_DSA_KEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
  unsigned __int8 Count[4];
  unsigned __int8 Seed[20];
  unsigned __int8 q[20];
};

/* 9360 */
struct __cppobj JfrEvent<EventJavaMonitorWait>
{
};

/* 9361 */
struct __cppobj JfrEvent<EventBooleanFlag>
{
};

/* 9362 */
struct _NDR_USER_MARSHAL_INFO
{
  unsigned int InformationLevel;
  _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
};

/* 9363 */
struct _TOKEN_MANDATORY_POLICY
{
  unsigned int Policy;
};

/* 9364 */
struct _TOKEN_ACCESS_INFORMATION
{
  _SID_AND_ATTRIBUTES_HASH *SidHash;
  _SID_AND_ATTRIBUTES_HASH *RestrictedSidHash;
  _TOKEN_PRIVILEGES *Privileges;
  _LUID AuthenticationId;
  _TOKEN_TYPE TokenType;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  unsigned int Flags;
};

/* 9365 */
struct tagEMRSETVIEWPORTORGEX
{
  tagEMR emr;
  _POINTL ptlOrigin;
};

/* 9366 */
struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
  unsigned int Selector;
  _WOW64_LDT_ENTRY Descriptor;
};

/* 9367 */
struct _SERVICE_TABLE_ENTRYA
{
  char *lpServiceName;
  void (__stdcall *lpServiceProc)(unsigned int, char **);
};

/* 9368 */
struct _RPC_PROTSEQ_VECTORA
{
  unsigned int Count;
  unsigned __int8 *Protseq[1];
};

/* 9369 */
struct _PLEX_READ_DATA_REQUEST
{
  _LARGE_INTEGER ByteOffset;
  unsigned int ByteLength;
  unsigned int PlexNumber;
};

/* 9370 */
struct __cppobj JfrEvent<EventObjectCountAfterGC>
{
};

/* 9371 */
struct _RGNDATAHEADER
{
  unsigned int dwSize;
  unsigned int iType;
  unsigned int nCount;
  unsigned int nRgnSize;
  tagRECT rcBound;
};

/* 9372 */
struct __declspec(align(4)) _RGNDATA
{
  _RGNDATAHEADER rdh;
  char Buffer[1];
};

/* 9373 */
struct _REMOTE_NAME_INFOA
{
  char *lpUniversalName;
  char *lpConnectionName;
  char *lpRemainingPath;
};

/* 9374 */
struct _CMSG_STREAM_INFO
{
  unsigned int cbContent;
  int (__stdcall *pfnStreamOutput)(const void *, unsigned __int8 *, unsigned int, int);
  void *pvArg;
};

/* 9375 */
struct _DATATYPES_INFO_1W
{
  wchar_t *pName;
};

/* 9376 */
struct _FIND_NAME_HEADER
{
  unsigned __int16 node_count;
  unsigned __int8 reserved;
  unsigned __int8 unique_group;
};

/* 9377 */
struct __cppobj JfrEvent<EventGCSurvivorConfiguration>
{
};

/* 9378 */
struct __declspec(align(8)) _TRANSACTION_NOTIFICATION
{
  void *TransactionKey;
  unsigned int TransactionNotification;
  _LARGE_INTEGER TmVirtualClock;
  unsigned int ArgumentLength;
};

/* 9379 */
struct tagFILTERKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iWaitMSec;
  unsigned int iDelayMSec;
  unsigned int iRepeatMSec;
  unsigned int iBounceMSec;
};

/* 9380 */
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
  unsigned int cbSize;
  _CMSG_SIGNED_ENCODE_INFO SignedInfo;
  _CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
};

/* 9381 */
struct tagEMRSETTEXTCOLOR
{
  tagEMR emr;
  unsigned int crColor;
};

/* 9382 */
struct _FIND_NAME_BUFFER
{
  unsigned __int8 length;
  unsigned __int8 access_control;
  unsigned __int8 frame_control;
  unsigned __int8 destination_addr[6];
  unsigned __int8 source_addr[6];
  unsigned __int8 routing_info[18];
};

/* 9383 */
struct _ACTION_HEADER
{
  unsigned int transport_id;
  unsigned __int16 action_code;
  unsigned __int16 reserved;
};

/* 9384 */
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRegPolicySettings;
  _CMSG_SIGNER_INFO *pSignerInfo;
};

/* 9385 */
struct __cppobj IOleCache2 : IOleCache
{
};

/* 9386 */
struct /*VFT*/ IOleCache2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Cache)(IOleCache *this, tagFORMATETC *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Uncache)(IOleCache *this, unsigned int);
  HRESULT (__stdcall *EnumCache)(IOleCache *this, IEnumSTATDATA **);
  HRESULT (__stdcall *InitCache)(IOleCache *this, IDataObject *);
  HRESULT (__stdcall *SetData)(IOleCache *this, tagFORMATETC *, tagSTGMEDIUM *, int);
  HRESULT (__stdcall *UpdateCache)(IOleCache2 *this, IDataObject *, unsigned int, void *);
  HRESULT (__stdcall *DiscardCache)(IOleCache2 *this, unsigned int);
};

/* 9387 */
struct __cppobj JfrStructVirtualSpace
{
};

/* 9388 */
struct _DOCINFOW
{
  int cbSize;
  const wchar_t *lpszDocName;
  const wchar_t *lpszOutput;
  const wchar_t *lpszDatatype;
  unsigned int fwType;
};

/* 9389 */
struct __cppobj ISynchronizeMutex : ISynchronize
{
};

/* 9390 */
struct /*VFT*/ ISynchronizeMutex_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Wait)(ISynchronize *this, unsigned int, unsigned int);
  HRESULT (__stdcall *Signal)(ISynchronize *this);
  HRESULT (__stdcall *Reset)(ISynchronize *this);
  HRESULT (__stdcall *ReleaseMutex)(ISynchronizeMutex *this);
};

/* 9391 */
struct __cppobj IDropSourceNotify : IUnknown
{
};

/* 9392 */
struct /*VFT*/ IDropSourceNotify_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *DragEnterTarget)(IDropSourceNotify *this, HWND__ *);
  HRESULT (__stdcall *DragLeaveTarget)(IDropSourceNotify *this);
};

/* 9393 */
struct HMIDI__
{
  int unused;
};

/* 9394 */
struct tagDELETEITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  HWND__ *hwndItem;
  unsigned int itemData;
};

/* 9395 */
struct tagHSZPAIR
{
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
};

/* 9396 */
struct __cppobj JfrEvent<EventLongFlagChanged>
{
};

/* 9397 */
struct _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  const _s__CatchableTypeArray *pCatchableTypeArray;
};

/* 9398 */
struct __declspec(align(4)) _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
  unsigned int LogPathLength;
  wchar_t LogPath[1];
};

/* 9399 */
struct __cppobj tagMONITORINFOEXW : tagMONITORINFO
{
  wchar_t szDevice[32];
};

/* 9400 */
union tagRPC_EXTENDED_ERROR_INFO::<unnamed_type_u>
{
  _SYSTEMTIME SystemTime;
  _FILETIME FileTime;
};

/* 9401 */
struct tagRPC_EXTENDED_ERROR_INFO
{
  unsigned int Version;
  wchar_t *ComputerName;
  unsigned int ProcessID;
  tagRPC_EXTENDED_ERROR_INFO::<unnamed_type_u> u;
  unsigned int GeneratingComponent;
  unsigned int Status;
  unsigned __int16 DetectionLocation;
  unsigned __int16 Flags;
  int NumberOfParameters;
  tagRPC_EE_INFO_PARAM Parameters[4];
};

/* 9402 */
struct BULK_SECURITY_TEST_DATA
{
  unsigned int DesiredAccess;
  unsigned int SecurityIds[1];
};

/* 9403 */
struct tagOleMenuGroupWidths
{
  int width[6];
};

/* 9404 */
struct __cppobj IOleInPlaceFrame : IOleInPlaceUIWindow
{
};

/* 9405 */
struct /*VFT*/ IOleInPlaceFrame_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
  HRESULT (__stdcall *GetBorder)(IOleInPlaceUIWindow *this, tagRECT *);
  HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceUIWindow *this, const tagRECT *);
  HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceUIWindow *this, const tagRECT *);
  HRESULT (__stdcall *SetActiveObject)(IOleInPlaceUIWindow *this, IOleInPlaceActiveObject *, const wchar_t *);
  HRESULT (__stdcall *InsertMenus)(IOleInPlaceFrame *this, HMENU__ *, tagOleMenuGroupWidths *);
  HRESULT (__stdcall *SetMenu)(IOleInPlaceFrame *this, HMENU__ *, void *, HWND__ *);
  HRESULT (__stdcall *RemoveMenus)(IOleInPlaceFrame *this, HMENU__ *);
  HRESULT (__stdcall *SetStatusText)(IOleInPlaceFrame *this, const wchar_t *);
  HRESULT (__stdcall *EnableModeless)(IOleInPlaceFrame *this, int);
  HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceFrame *this, tagMSG *, unsigned __int16);
};

/* 9406 */
struct _SYSTEM_POWER_POLICY
{
  unsigned int Revision;
  POWER_ACTION_POLICY PowerButton;
  POWER_ACTION_POLICY SleepButton;
  POWER_ACTION_POLICY LidClose;
  _SYSTEM_POWER_STATE LidOpenWake;
  unsigned int Reserved;
  POWER_ACTION_POLICY Idle;
  unsigned int IdleTimeout;
  unsigned __int8 IdleSensitivity;
  unsigned __int8 DynamicThrottle;
  unsigned __int8 Spare2[2];
  _SYSTEM_POWER_STATE MinSleep;
  _SYSTEM_POWER_STATE MaxSleep;
  _SYSTEM_POWER_STATE ReducedLatencySleep;
  unsigned int WinLogonFlags;
  unsigned int Spare3;
  unsigned int DozeS4Timeout;
  unsigned int BroadcastCapacityResolution;
  SYSTEM_POWER_LEVEL DischargePolicy[4];
  unsigned int VideoTimeout;
  unsigned __int8 VideoDimDisplay;
  unsigned int VideoReserved[3];
  unsigned int SpindownTimeout;
  unsigned __int8 OptimizeForPower;
  unsigned __int8 FanThrottleTolerance;
  unsigned __int8 ForcedThrottle;
  unsigned __int8 MinThrottle;
  POWER_ACTION_POLICY OverThrottled;
};

/* 9407 */
struct __cppobj JfrEvent<EventSafepointEnd>
{
};

/* 9408 */
struct __cppobj EventSafepointEnd : JfrEvent<EventSafepointEnd>
{
};

/* 9409 */
struct _IMAGE_RESOURCE_DIR_STRING_U
{
  unsigned __int16 Length;
  wchar_t NameString[1];
};

/* 9410 */
struct _TRANSACTION_LIST_INFORMATION
{
  unsigned int NumberOfTransactions;
  _TRANSACTION_LIST_ENTRY TransactionInformation[1];
};

/* 9411 */
struct tagEMRMASKBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int xMask;
  int yMask;
  unsigned int iUsageMask;
  unsigned int offBmiMask;
  unsigned int cbBmiMask;
  unsigned int offBitsMask;
  unsigned int cbBitsMask;
};

/* 9412 */
struct HMIXER__
{
  int unused;
};

/* 9413 */
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
  unsigned int dwReason;
  wchar_t *pszComment;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 9414 */
struct __cppobj IAdviseSink2 : IAdviseSink
{
};

/* 9415 */
struct /*VFT*/ IAdviseSink2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void (__stdcall *OnDataChange)(IAdviseSink *this, tagFORMATETC *, tagSTGMEDIUM *);
  void (__stdcall *OnViewChange)(IAdviseSink *this, unsigned int, int);
  void (__stdcall *OnRename)(IAdviseSink *this, IMoniker *);
  void (__stdcall *OnSave)(IAdviseSink *this);
  void (__stdcall *OnClose)(IAdviseSink *this);
  void (__stdcall *OnLinkSrcChange)(IAdviseSink2 *this, IMoniker *);
};

/* 9416 */
struct _APPLICATIONLAUNCH_SETTING_VALUE
{
  _LARGE_INTEGER ActivationTime;
  unsigned int Flags;
  unsigned int ButtonInstanceID;
};

/* 9417 */
struct __cppobj IOleAdviseHolder : IUnknown
{
};

/* 9418 */
struct /*VFT*/ IOleAdviseHolder_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Advise)(IOleAdviseHolder *this, IAdviseSink *, unsigned int *);
  HRESULT (__stdcall *Unadvise)(IOleAdviseHolder *this, unsigned int);
  HRESULT (__stdcall *EnumAdvise)(IOleAdviseHolder *this, IEnumSTATDATA **);
  HRESULT (__stdcall *SendOnRename)(IOleAdviseHolder *this, IMoniker *);
  HRESULT (__stdcall *SendOnSave)(IOleAdviseHolder *this);
  HRESULT (__stdcall *SendOnClose)(IOleAdviseHolder *this);
};

/* 9419 */
struct $006192E8E41FD8F2EA1B27D51D7CA475
{
  unsigned __int8 NoDomainAccounting : 1;
  unsigned __int8 IncreasePolicy : 2;
  unsigned __int8 DecreasePolicy : 2;
  unsigned __int8 Reserved : 3;
};

/* 9420 */
union PROCESSOR_PERFSTATE_POLICY::<unnamed_tag>::<unnamed_type_Flags>
{
  unsigned __int8 AsBYTE;
  $006192E8E41FD8F2EA1B27D51D7CA475 __s1;
};

/* 9421 */
union $187E7B969B681238DF8CAB42C9F767D9
{
  unsigned __int8 Spare;
  PROCESSOR_PERFSTATE_POLICY::<unnamed_tag>::<unnamed_type_Flags> Flags;
};

/* 9422 */
struct PROCESSOR_PERFSTATE_POLICY
{
  unsigned int Revision;
  unsigned __int8 MaxThrottle;
  unsigned __int8 MinThrottle;
  unsigned __int8 BusyAdjThreshold;
  $187E7B969B681238DF8CAB42C9F767D9 ___u4;
  unsigned int TimeCheck;
  unsigned int IncreaseTime;
  unsigned int DecreaseTime;
  unsigned int IncreasePercent;
  unsigned int DecreasePercent;
};

/* 9423 */
struct __cppobj EventMetaspaceChunkFreeListSummary : JfrEvent<EventMetaspaceChunkFreeListSummary>
{
};

/* 9424 */
struct _SERVICE_SID_INFO
{
  unsigned int dwServiceSidType;
};

/* 9425 */
struct BATTERY_REPORTING_SCALE
{
  unsigned int Granularity;
  unsigned int Capacity;
};

/* 9426 */
struct _complex
{
  long double x;
  long double y;
};

/* 9427 */
struct tagEMRPIXELFORMAT
{
  tagEMR emr;
  tagPIXELFORMATDESCRIPTOR pfd;
};

/* 9428 */
struct __declspec(align(4)) _jvmtiCompiledMethodLoadDummyRecord
{
  _jvmtiCompiledMethodLoadRecordHeader header;
  char message[50];
};

/* 9429 */
struct _SYSTEM_AUDIT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 9430 */
struct tagMCI_OVLY_RECT_PARMS
{
  unsigned int dwCallback;
  tagRECT rc;
};

/* 9431 */
struct tagMCI_RECORD_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 9432 */
struct __cppobj ITypeInfo2 : ITypeInfo
{
};

/* 9433 */
struct /*VFT*/ ITypeInfo2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *this, tagTYPEATTR **);
  HRESULT (__stdcall *GetTypeComp)(ITypeInfo *this, ITypeComp **);
  HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *this, unsigned int, tagFUNCDESC **);
  HRESULT (__stdcall *GetVarDesc)(ITypeInfo *this, unsigned int, tagVARDESC **);
  HRESULT (__stdcall *GetNames)(ITypeInfo *this, int, wchar_t **, unsigned int, unsigned int *);
  HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *this, unsigned int, unsigned int *);
  HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *this, unsigned int, int *);
  HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *this, wchar_t **, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *GetDocumentation)(ITypeInfo *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *GetDllEntry)(ITypeInfo *this, int, tagINVOKEKIND, wchar_t **, wchar_t **, unsigned __int16 *);
  HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *this, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *AddressOfMember)(ITypeInfo *this, int, tagINVOKEKIND, void **);
  HRESULT (__stdcall *CreateInstance)(ITypeInfo *this, IUnknown *, const _GUID *, void **);
  HRESULT (__stdcall *GetMops)(ITypeInfo *this, int, wchar_t **);
  HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *this, ITypeLib **, unsigned int *);
  void (__stdcall *ReleaseTypeAttr)(ITypeInfo *this, tagTYPEATTR *);
  void (__stdcall *ReleaseFuncDesc)(ITypeInfo *this, tagFUNCDESC *);
  void (__stdcall *ReleaseVarDesc)(ITypeInfo *this, tagVARDESC *);
  HRESULT (__stdcall *GetTypeKind)(ITypeInfo2 *this, tagTYPEKIND *);
  HRESULT (__stdcall *GetTypeFlags)(ITypeInfo2 *this, unsigned int *);
  HRESULT (__stdcall *GetFuncIndexOfMemId)(ITypeInfo2 *this, int, tagINVOKEKIND, unsigned int *);
  HRESULT (__stdcall *GetVarIndexOfMemId)(ITypeInfo2 *this, int, unsigned int *);
  HRESULT (__stdcall *GetCustData)(ITypeInfo2 *this, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetFuncCustData)(ITypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetParamCustData)(ITypeInfo2 *this, unsigned int, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetVarCustData)(ITypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetImplTypeCustData)(ITypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *GetDocumentation2)(ITypeInfo2 *this, int, unsigned int, wchar_t **, unsigned int *, wchar_t **);
  HRESULT (__stdcall *GetAllCustData)(ITypeInfo2 *this, tagCUSTDATA *);
  HRESULT (__stdcall *GetAllFuncCustData)(ITypeInfo2 *this, unsigned int, tagCUSTDATA *);
  HRESULT (__stdcall *GetAllParamCustData)(ITypeInfo2 *this, unsigned int, unsigned int, tagCUSTDATA *);
  HRESULT (__stdcall *GetAllVarCustData)(ITypeInfo2 *this, unsigned int, tagCUSTDATA *);
  HRESULT (__stdcall *GetAllImplTypeCustData)(ITypeInfo2 *this, unsigned int, tagCUSTDATA *);
};

/* 9434 */
struct SERVICE_STATUS_HANDLE__
{
  int unused;
};

/* 9435 */
struct tagMENUINFO
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int dwStyle;
  unsigned int cyMax;
  HBRUSH__ *hbrBack;
  unsigned int dwContextHelpID;
  unsigned int dwMenuData;
};

/* 9436 */
struct __declspec(align(8)) _REQUEST_RAW_ENCRYPTED_DATA
{
  __int64 FileOffset;
  unsigned int Length;
};

/* 9437 */
struct tagINTERFACEDATA
{
  tagMETHODDATA *pmethdata;
  unsigned int cMembers;
};

/* 9438 */
struct _SERVICE_TIMECHANGE_INFO
{
  _LARGE_INTEGER liNewTime;
  _LARGE_INTEGER liOldTime;
};

/* 9439 */
struct _ICONINFO
{
  int fIcon;
  unsigned int xHotspot;
  unsigned int yHotspot;
  HBITMAP__ *hbmMask;
  HBITMAP__ *hbmColor;
};

/* 9440 */
struct tagMCI_VD_PLAY_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
  unsigned int dwSpeed;
};

/* 9441 */
struct _DRIVER_INFO_1W
{
  wchar_t *pName;
};

/* 9442 */
struct _OBJECT_TYPE_LIST
{
  unsigned __int16 Level;
  unsigned __int16 Sbz;
  _GUID *ObjectType;
};

/* 9443 */
struct _SE_ACCESS_REQUEST
{
  unsigned int Size;
  _SE_SECURITY_DESCRIPTOR *SeSecurityDescriptor;
  unsigned int DesiredAccess;
  unsigned int PreviouslyGrantedAccess;
  void *PrincipalSelfSid;
  _GENERIC_MAPPING *GenericMapping;
  unsigned int ObjectTypeListCount;
  _OBJECT_TYPE_LIST *ObjectTypeList;
};

/* 9444 */
struct _CRYPTPROTECT_PROMPTSTRUCT
{
  unsigned int cbSize;
  unsigned int dwPromptFlags;
  HWND__ *hwndApp;
  const wchar_t *szPrompt;
};

/* 9445 */
struct __declspec(align(4)) NTFS_FILE_RECORD_OUTPUT_BUFFER
{
  _LARGE_INTEGER FileReferenceNumber;
  unsigned int FileRecordLength;
  unsigned __int8 FileRecordBuffer[1];
};

/* 9446 */
struct OPENCARDNAME_EXW
{
  unsigned int dwStructSize;
  unsigned int hSCardContext;
  HWND__ *hwndOwner;
  unsigned int dwFlags;
  const wchar_t *lpstrTitle;
  const wchar_t *lpstrSearchDesc;
  HICON__ *hIcon;
  OPENCARD_SEARCH_CRITERIAW *pOpenCardSearchCriteria;
  unsigned int (__stdcall *lpfnConnect)(unsigned int, wchar_t *, wchar_t *, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  wchar_t *lpstrRdr;
  unsigned int nMaxRdr;
  wchar_t *lpstrCard;
  unsigned int nMaxCard;
  unsigned int dwActiveProtocol;
  unsigned int hCardHandle;
};

/* 9447 */
struct __cppobj IExternalConnection : IUnknown
{
};

/* 9448 */
struct /*VFT*/ IExternalConnection_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *AddConnection)(IExternalConnection *this, unsigned int, unsigned int);
  unsigned int (__stdcall *ReleaseConnection)(IExternalConnection *this, unsigned int, unsigned int, int);
};

/* 9449 */
struct NTFS_FILE_RECORD_INPUT_BUFFER
{
  _LARGE_INTEGER FileReferenceNumber;
};

/* 9450 */
struct _exception
{
  int type;
  char *name;
  long double arg1;
  long double arg2;
  long double retval;
};

/* 9451 */
struct HWAVE__
{
  int unused;
};

/* 9452 */
struct _DRIVER_INFO_2A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
};

/* 9453 */
struct __declspec(align(4)) _cpinfo
{
  unsigned int MaxCharSize;
  unsigned __int8 DefaultChar[2];
  unsigned __int8 LeadByte[12];
};

/* 9454 */
struct _CRYPT_SEQUENCE_OF_ANY
{
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 9455 */
struct _CERT_QC_STATEMENTS_EXT_INFO
{
  unsigned int cStatement;
  _CERT_QC_STATEMENT *rgStatement;
};

/* 9456 */
struct SHELLHOOKINFO
{
  HWND__ *hwnd;
  tagRECT rc;
};

/* 9457 */
struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
  unsigned int cProviders;
  wchar_t **rgpszProviders;
};

/* 9458 */
struct __cppobj IMonikerProp : IUnknown
{
};

/* 9459 */
struct /*VFT*/ IMonikerProp_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *PutProperty)(IMonikerProp *this, __MIDL_IMonikerProp_0001, const wchar_t *);
};

/* 9460 */
struct _PSFEATURE_OUTPUT
{
  int bPageIndependent;
  int bSetPageDevice;
};

/* 9461 */
struct tagMIDIINCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwSupport;
};

/* 9462 */
struct __cppobj JfrEvent<EventGCHeapConfiguration>
{
};

/* 9463 */
struct __cppobj IEnumVARIANT : IUnknown
{
};

/* 9464 */
struct /*VFT*/ IEnumVARIANT_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Next)(IEnumVARIANT *this, unsigned int, tagVARIANT *, unsigned int *);
  HRESULT (__stdcall *Skip)(IEnumVARIANT *this, unsigned int);
  HRESULT (__stdcall *Reset)(IEnumVARIANT *this);
  HRESULT (__stdcall *Clone)(IEnumVARIANT *this, IEnumVARIANT **);
};

/* 9465 */
struct _PSAPI_WS_WATCH_INFORMATION_EX
{
  _PSAPI_WS_WATCH_INFORMATION BasicInfo;
  unsigned int FaultingThreadId;
  unsigned int Flags;
};

/* 9466 */
struct _SYSTEM_AUDIT_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 9467 */
struct tagMONCBSTRUCT
{
  unsigned int cb;
  unsigned int dwTime;
  void *hTask;
  unsigned int dwRet;
  unsigned int wType;
  unsigned int wFmt;
  HCONV__ *hConv;
  HSZ__ *hsz1;
  HSZ__ *hsz2;
  HDDEDATA__ *hData;
  unsigned int dwData1;
  unsigned int dwData2;
  tagCONVCONTEXT cc;
  unsigned int cbData;
  unsigned int Data[8];
};

/* 9468 */
struct netent
{
  char *n_name;
  char **n_aliases;
  __int16 n_addrtype;
  unsigned int n_net;
};

/* 9469 */
struct _CRYPT_PKCS8_IMPORT_PARAMS
{
  _CRYPTOAPI_BLOB PrivateKey;
  int (__stdcall *pResolvehCryptProvFunc)(_CRYPT_PRIVATE_KEY_INFO *, unsigned int *, void *);
  void *pVoidResolveFunc;
  int (__stdcall *pDecryptPrivateKeyFunc)(_CRYPT_ALGORITHM_IDENTIFIER, _CRYPTOAPI_BLOB, unsigned __int8 *, unsigned int *, void *);
  void *pVoidDecryptFunc;
};

/* 9470 */
struct __cppobj __vc_attributes::immediatebindAttribute
{
};

/* 9471 */
struct __cppobj __vc_attributes::inAttribute
{
};

/* 9472 */
struct __cppobj __vc_attributes::publicAttribute
{
};

/* 9473 */
struct __cppobj __vc_attributes::size_isAttribute
{
  const char *expression;
};

/* 9474 */
struct __cppobj __vc_attributes::exportAttribute
{
};

/* 9475 */
struct __cppobj __vc_attributes::controlAttribute
{
};

/* 9476 */
struct __cppobj __vc_attributes::helpstringcontextAttribute
{
  int contextid;
};

/* 9477 */
struct __cppobj __vc_attributes::rangeAttribute
{
  int low_val;
  int high_val;
};

/* 9478 */
struct __cppobj __vc_attributes::displaybindAttribute
{
};

/* 9479 */
struct __cppobj __vc_attributes::hookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 9480 */
struct __cppobj __vc_attributes::uidefaultAttribute
{
};

/* 9481 */
struct __cppobj __vc_attributes::defaultbindAttribute
{
};

/* 9482 */
struct __cppobj __vc_attributes::outAttribute
{
};

/* 9483 */
struct __cppobj __vc_attributes::defaultvalueAttribute
{
  const char *value;
};

/* 9484 */
struct __cppobj __vc_attributes::pointer_defaultAttribute
{
  __vc_attributes::pointer_defaultAttribute::type_e type;
};

/* 9485 */
struct __cppobj __vc_attributes::uuidAttribute
{
  const char *value;
};

/* 9486 */
struct __cppobj __vc_attributes::threadingAttribute
{
  __vc_attributes::threadingAttribute::threading_e value;
};

/* 9487 */
struct __cppobj __vc_attributes::localAttribute
{
};

/* 9488 */
struct __cppobj __vc_attributes::idAttribute
{
  int id_num;
};

/* 9489 */
struct __cppobj __vc_attributes::nonbrowsableAttribute
{
};

/* 9490 */
struct __cppobj __vc_attributes::importlibAttribute
{
  const char *tlb_file;
};

/* 9491 */
struct __cppobj __vc_attributes::call_asAttribute
{
  void *local_proc;
};

/* 9492 */
struct __cppobj __vc_attributes::dispinterfaceAttribute
{
};

/* 9493 */
struct __cppobj __vc_attributes::dualAttribute
{
};

/* 9494 */
struct __cppobj __vc_attributes::switch_typeAttribute
{
  const char *switch_type_specifier;
};

/* 9495 */
struct __cppobj __declspec(align(4)) __vc_attributes::idl_moduleAttribute
{
  const char *name;
  const char *dllname;
  const char *version;
  const char *uuid;
  const char *helpstring;
  int helpstringcontext;
  int helpcontext;
  bool hidden;
  bool restricted;
};

/* 9496 */
struct __cppobj __vc_attributes::coclassAttribute
{
};

/* 9497 */
struct __cppobj __vc_attributes::defaultAttribute
{
  const char *value;
};

/* 9498 */
struct __cppobj __vc_attributes::requesteditAttribute
{
};

/* 9499 */
struct __cppobj __vc_attributes::providerAttribute
{
  const char *name;
  const char *uuid;
  int cookies;
};

/* 9500 */
struct __cppobj __vc_attributes::max_isAttribute
{
  const char *expression;
};

/* 9501 */
struct __cppobj __vc_attributes::importAttribute
{
  const char *idl_file;
};

/* 9502 */
struct __cppobj __vc_attributes::satypeAttribute
{
  const char *type;
};

/* 9503 */
struct __cppobj __vc_attributes::propgetAttribute
{
};

/* 9504 */
struct __cppobj __vc_attributes::propputAttribute
{
};

/* 9505 */
struct __cppobj __declspec(align(4)) __vc_attributes::event_receiverAttribute
{
  __vc_attributes::event_receiverAttribute::type_e type;
  bool layout_dependent;
};

/* 9506 */
struct __cppobj __vc_attributes::async_uuidAttribute
{
  const char *uuid;
};

/* 9507 */
struct __cppobj __vc_attributes::idl_quoteAttribute
{
  const char *text;
};

/* 9508 */
struct __cppobj __vc_attributes::usesgetlasterrorAttribute
{
};

/* 9509 */
struct __cppobj __vc_attributes::unhookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 9510 */
struct __cppobj __vc_attributes::nonextensibleAttribute
{
};

/* 9511 */
struct __cppobj __vc_attributes::objectAttribute
{
};

/* 9512 */
struct __cppobj __vc_attributes::aggregatableAttribute
{
  __vc_attributes::aggregatableAttribute::type_e type;
};

/* 9513 */
struct __cppobj __vc_attributes::iid_isAttribute
{
  const char *limited_expression;
};

/* 9514 */
struct __cppobj __vc_attributes::progidAttribute
{
  const char *name;
};

/* 9515 */
struct __cppobj __vc_attributes::readonlyAttribute
{
};

/* 9516 */
struct __cppobj __vc_attributes::wire_marshalAttribute
{
  const char *wire_type;
};

/* 9517 */
struct __cppobj __vc_attributes::pragmaAttribute
{
  const char *token_sequence;
};

/* 9518 */
struct __cppobj __vc_attributes::propputrefAttribute
{
};

/* 9519 */
struct __cppobj __vc_attributes::vi_progidAttribute
{
  const char *value;
};

/* 9520 */
struct __cppobj __vc_attributes::odlAttribute
{
};

/* 9521 */
struct __cppobj __vc_attributes::bindableAttribute
{
};

/* 9522 */
struct __cppobj __vc_attributes::oleautomationAttribute
{
};

/* 9523 */
struct __cppobj __vc_attributes::helpstringdllAttribute
{
  const char *dllname;
};

/* 9524 */
struct __cppobj __vc_attributes::defaultcollelemAttribute
{
};

/* 9525 */
struct __cppobj __vc_attributes::retvalAttribute
{
};

/* 9526 */
struct __cppobj __vc_attributes::length_isAttribute
{
  const char *expression;
};

/* 9527 */
struct __cppobj __vc_attributes::atl::db_commandAttribute
{
  const char *command;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bindings;
  const char *bulk_fetch;
};

/* 9528 */
struct __cppobj __vc_attributes::atl::db_sourceAttribute
{
  const char *source;
  const char *name;
  const char *hresult;
};

/* 9529 */
struct __cppobj __vc_attributes::atl::db_columnAttribute
{
  const char *ordinal;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 9530 */
struct __cppobj __vc_attributes::atl::soap_namespaceAttribute
{
  const char *value;
};

/* 9531 */
struct __cppobj __vc_attributes::atl::db_tableAttribute
{
  const char *table;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bulk_fetch;
};

/* 9532 */
struct __cppobj __vc_attributes::atl::implements_categoryAttribute
{
  const char *value;
};

/* 9533 */
struct __cppobj __vc_attributes::atl::aggregatesAttribute
{
  const char *clsid;
};

/* 9534 */
struct __cppobj __declspec(align(2)) __vc_attributes::atl::soap_headerAttribute
{
  const char *value;
  bool required;
  bool in;
  bool out;
};

/* 9535 */
struct __cppobj __vc_attributes::atl::requires_categoryAttribute
{
  const char *value;
};

/* 9536 */
struct __cppobj __vc_attributes::atl::perf_objectAttribute
{
  int name_res;
  int help_res;
  const char *namestring;
  const char *helpstring;
  int detail;
  bool no_instances;
  const char *class_;
  int maxinstnamelen;
};

/* 9537 */
struct __cppobj __vc_attributes::atl::rdxAttribute
{
  const char *key;
  const char *valuename;
  const char *regtype;
};

/* 9538 */
struct __cppobj __declspec(align(4)) __vc_attributes::atl::perfmonAttribute
{
  const char *name;
  bool register;
};

/* 9539 */
struct __cppobj __declspec(align(4)) __vc_attributes::atl::db_accessorAttribute
{
  int id;
  bool auto_;
};

/* 9540 */
struct __cppobj __vc_attributes::atl::soap_handlerAttribute
{
  const char *name;
  const char *namespace;
  const char *protocol;
  const char *style;
  const char *use;
};

/* 9541 */
struct __cppobj __vc_attributes::atl::support_error_infoAttribute
{
  const char *error_interface;
};

/* 9542 */
struct __cppobj __vc_attributes::atl::tag_nameAttribute
{
  const char *name;
  const char *parse_func;
};

/* 9543 */
struct __cppobj __vc_attributes::atl::com_interface_entryAttribute
{
  const char *value;
};

/* 9544 */
struct __cppobj __vc_attributes::atl::db_paramAttribute
{
  const char *ordinal;
  const char *paramtype;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 9545 */
struct __cppobj __vc_attributes::atl::perf_counterAttribute
{
  const char *namestring;
  const char *helpstring;
  int name_res;
  int help_res;
  int countertype;
  int defscale;
  bool default_counter;
  int detail;
  int max_counter_size;
  const char *countertype_string;
};

/* 9546 */
struct __cppobj __vc_attributes::atl::soap_methodAttribute
{
  const char *name;
};

/* 9547 */
struct __cppobj __vc_attributes::atl::request_handlerAttribute
{
  const char *name;
  const char *sdl;
};

/* 9548 */
struct __cppobj __vc_attributes::atl::synchronizeAttribute
{
};

/* 9549 */
struct __cppobj __vc_attributes::atl::registration_scriptAttribute
{
  const char *script;
};

/* 9550 */
struct __cppobj __vc_attributes::no_injected_textAttribute
{
  bool value;
};

/* 9551 */
struct __cppobj __vc_attributes::caseAttribute
{
  int value;
};

/* 9552 */
struct __cppobj __vc_attributes::helpstringAttribute
{
  const char *help_text_string;
};

/* 9553 */
struct __cppobj __vc_attributes::entryAttribute
{
  const char *entry_id;
};

/* 9554 */
struct __cppobj __vc_attributes::defaultvtableAttribute
{
  const char *value;
};

/* 9555 */
struct __cppobj __declspec(align(4)) __vc_attributes::emitidlAttribute
{
  int value;
  bool defaultimports;
};

/* 9556 */
struct __cppobj __vc_attributes::stringAttribute
{
};

/* 9557 */
struct __cppobj __vc_attributes::varargAttribute
{
};

/* 9558 */
struct __cppobj __declspec(align(4)) __vc_attributes::event_sourceAttribute
{
  __vc_attributes::event_sourceAttribute::type_e type;
  __vc_attributes::event_sourceAttribute::optimize_e optimize;
  bool decorate;
};

/* 9559 */
struct __cppobj __vc_attributes::includeAttribute
{
  const char *include_file;
};

/* 9560 */
struct __cppobj __vc_attributes::implementsAttribute
{
  const char *interfaces;
  const char *dispinterfaces;
};

/* 9561 */
struct __cppobj __vc_attributes::moduleAttribute
{
  __vc_attributes::moduleAttribute::type_e type;
  const char *name;
  const char *version;
  const char *uuid;
  int lcid;
  bool control;
  const char *helpstring;
  int helpstringcontext;
  const char *helpstringdll;
  const char *helpfile;
  int helpcontext;
  bool hidden;
  bool restricted;
  const char *custom;
  const char *resource_name;
};

/* 9562 */
struct __cppobj __vc_attributes::last_isAttribute
{
  const char *expression;
};

/* 9563 */
struct __cppobj __vc_attributes::ptrAttribute
{
};

/* 9564 */
struct __cppobj __vc_attributes::helper_attributes::v1_earlyAttribute
{
};

/* 9565 */
struct __cppobj __declspec(align(4)) __vc_attributes::helper_attributes::source_annotation_attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
};

/* 9566 */
struct __cppobj __vc_attributes::helper_attributes::requires_valueAttribute
{
};

/* 9567 */
struct __cppobj __vc_attributes::helper_attributes::as_stringAttribute
{
};

/* 9568 */
struct __cppobj __vc_attributes::helper_attributes::usageAttribute
{
  unsigned int value;
};

/* 9569 */
struct __cppobj __vc_attributes::helper_attributes::multi_valueAttribute
{
};

/* 9570 */
struct __cppobj __vc_attributes::helper_attributes::repeatableAttribute
{
};

/* 9571 */
struct __cppobj __vc_attributes::helper_attributes::notify_atlprovAttribute
{
};

/* 9572 */
struct __cppobj __declspec(align(4)) __vc_attributes::helper_attributes::attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
  bool Inherited;
};

/* 9573 */
struct __cppobj __vc_attributes::helper_attributes::v1_alttypeAttribute
{
  __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

/* 9574 */
struct __cppobj __vc_attributes::helper_attributes::process_earlyAttribute
{
};

/* 9575 */
struct __cppobj __vc_attributes::helper_attributes::help_stringAttribute
{
  const char *value;
};

/* 9576 */
struct __cppobj __vc_attributes::helper_attributes::v1_nameAttribute
{
  const char *name;
};

/* 9577 */
struct __cppobj __vc_attributes::helper_attributes::default_valueAttribute
{
  void *value;
};

/* 9578 */
struct __cppobj __vc_attributes::first_isAttribute
{
  const char *value;
};

/* 9579 */
struct __cppobj __vc_attributes::noncreatableAttribute
{
};

/* 9580 */
struct __cppobj __vc_attributes::appobjectAttribute
{
};

/* 9581 */
struct __cppobj __vc_attributes::restrictedAttribute
{
  const char *value;
};

/* 9582 */
struct __cppobj __vc_attributes::importidlAttribute
{
  const char *value;
};

/* 9583 */
struct __cppobj __vc_attributes::cpp_quoteAttribute
{
  const char *string;
};

/* 9584 */
struct __cppobj __vc_attributes::v1_enumAttribute
{
};

/* 9585 */
struct __cppobj __vc_attributes::refAttribute
{
};

/* 9586 */
struct __cppobj __vc_attributes::licensedAttribute
{
};

/* 9587 */
struct __cppobj __vc_attributes::lcidAttribute
{
};

/* 9588 */
struct __cppobj __vc_attributes::versionAttribute
{
  const char *value;
};

/* 9589 */
struct __cppobj __vc_attributes::helpcontextAttribute
{
  const char *helpcontext_value;
};

/* 9590 */
struct __cppobj __vc_attributes::helpfileAttribute
{
  const char *filename;
};

/* 9591 */
struct __cppobj __vc_attributes::sourceAttribute
{
  const char *value;
};

/* 9592 */
struct __cppobj __vc_attributes::transmit_asAttribute
{
  const char *xmit_type;
};

/* 9593 */
struct __cppobj __vc_attributes::hiddenAttribute
{
};

/* 9594 */
struct __cppobj __vc_attributes::library_blockAttribute
{
};

/* 9595 */
struct __cppobj __vc_attributes::customAttribute
{
  char *value;
};

/* 9596 */
struct __cppobj __vc_attributes::switch_isAttribute
{
  const char *limited_expression;
};

/* 9597 */
struct __cppobj __vc_attributes::ms_unionAttribute
{
};

/* 9598 */
struct __cppobj __vc_attributes::uniqueAttribute
{
};

/* 9599 */
struct __cppobj __vc_attributes::includelibAttribute
{
  const char *value;
};

/* 9600 */
struct __cppobj __vc_attributes::optionalAttribute
{
};

/* 9601 */
struct __cppobj vc_attributes::PostRangeAttribute
{
  unsigned int Deref;
  const char *MinVal;
  const char *MaxVal;
};

/* 9602 */
struct __cppobj vc_attributes::PreAttribute
{
  unsigned int Deref;
  vc_attributes::YesNoMaybe Valid;
  vc_attributes::YesNoMaybe Null;
  vc_attributes::YesNoMaybe Tainted;
  vc_attributes::AccessType Access;
  unsigned int ValidElementsConst;
  unsigned int ValidBytesConst;
  const wchar_t *ValidElements;
  const wchar_t *ValidBytes;
  const wchar_t *ValidElementsLength;
  const wchar_t *ValidBytesLength;
  unsigned int WritableElementsConst;
  unsigned int WritableBytesConst;
  const wchar_t *WritableElements;
  const wchar_t *WritableBytes;
  const wchar_t *WritableElementsLength;
  const wchar_t *WritableBytesLength;
  unsigned int ElementSizeConst;
  const wchar_t *ElementSize;
  vc_attributes::YesNoMaybe NullTerminated;
  const wchar_t *Condition;
};

/* 9603 */
struct __cppobj vc_attributes::InvalidCheckAttribute
{
  int Value;
};

/* 9604 */
struct __cppobj vc_attributes::PostAttribute
{
  unsigned int Deref;
  vc_attributes::YesNoMaybe Valid;
  vc_attributes::YesNoMaybe Null;
  vc_attributes::YesNoMaybe Tainted;
  vc_attributes::AccessType Access;
  unsigned int ValidElementsConst;
  unsigned int ValidBytesConst;
  const wchar_t *ValidElements;
  const wchar_t *ValidBytes;
  const wchar_t *ValidElementsLength;
  const wchar_t *ValidBytesLength;
  unsigned int WritableElementsConst;
  unsigned int WritableBytesConst;
  const wchar_t *WritableElements;
  const wchar_t *WritableBytes;
  const wchar_t *WritableElementsLength;
  const wchar_t *WritableBytesLength;
  unsigned int ElementSizeConst;
  const wchar_t *ElementSize;
  vc_attributes::YesNoMaybe NullTerminated;
  vc_attributes::YesNoMaybe MustCheck;
  const wchar_t *Condition;
};

/* 9605 */
struct __cppobj vc_attributes::FormatStringAttribute
{
  const wchar_t *Style;
  const wchar_t *UnformattedAlternative;
};

/* 9606 */
struct __cppobj vc_attributes::PostBoundAttribute
{
  unsigned int Deref;
};

/* 9607 */
struct __cppobj vc_attributes::PreRangeAttribute
{
  unsigned int Deref;
  const char *MinVal;
  const char *MaxVal;
};

/* 9608 */
struct __declspec(align(4)) tagEMRGDICOMMENT
{
  tagEMR emr;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 9609 */
struct _BCRYPT_ALGORITHM_IDENTIFIER
{
  wchar_t *pszName;
  unsigned int dwClass;
  unsigned int dwFlags;
};

/* 9610 */
struct _CRYPT_ENCRYPT_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned int hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int dwFlags;
  unsigned int dwInnerContentType;
};

/* 9611 */
struct __cppobj EventCodeCacheFull : JfrEvent<EventCodeCacheFull>
{
};

/* 9612 */
struct __cppobj JfrEvent<EventJVMInformation>
{
};

/* 9613 */
struct __declspec(align(4)) tagCURSORSHAPE
{
  int xHotSpot;
  int yHotSpot;
  int cx;
  int cy;
  int cbWidth;
  unsigned __int8 Planes;
  unsigned __int8 BitsPixel;
};

/* 9614 */
struct MFT_ENUM_DATA
{
  unsigned __int64 StartFileReferenceNumber;
  __int64 LowUsn;
  __int64 HighUsn;
};

/* 9615 */
struct provider_info
{
  unsigned int (__cdecl *pi_R0_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R0_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R3_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R3_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int pi_flags;
  void *pi_key_context;
};

/* 9616 */
struct _CERT_SYSTEM_STORE_INFO
{
  unsigned int cbSize;
};

/* 9617 */
struct __cppobj AllocationContext : AllStatic
{
};

/* 9618 */
struct HCOLORSPACE__
{
  int unused;
};

/* 9619 */
struct __cppobj ICodeInstall : IWindowForBindingUI
{
};

/* 9620 */
struct /*VFT*/ ICodeInstall_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IWindowForBindingUI *this, const _GUID *, HWND__ **);
  HRESULT (__stdcall *OnCodeInstallProblem)(ICodeInstall *this, unsigned int, const wchar_t *, const wchar_t *, unsigned int);
};

/* 9621 */
struct /*VFT*/ XMLDOMDocumentEvents_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
};

/* 9622 */
struct __cppobj XMLDOMDocumentEvents : IDispatch
{
};

/* 9623 */
struct _TAPE_CREATE_PARTITION
{
  unsigned int Method;
  unsigned int Count;
  unsigned int Size;
};

/* 9624 */
struct tagEMRSETCOLORSPACE
{
  tagEMR emr;
  unsigned int ihCS;
};

/* 9625 */
struct joyinfo_tag
{
  unsigned int wXpos;
  unsigned int wYpos;
  unsigned int wZpos;
  unsigned int wButtons;
};

/* 9626 */
struct _JOB_INFO_2W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pNotifyName;
  wchar_t *pDatatype;
  wchar_t *pPrintProcessor;
  wchar_t *pParameters;
  wchar_t *pDriverName;
  _devicemodeW *pDevMode;
  wchar_t *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
};

/* 9627 */
struct __cppobj EventThreadContextSwitchRate : JfrEvent<EventThreadContextSwitchRate>
{
};

/* 9628 */
struct CREATE_USN_JOURNAL_DATA
{
  unsigned __int64 MaximumSize;
  unsigned __int64 AllocationDelta;
};

/* 9629 */
struct _FILE_ALLOCATED_RANGE_BUFFER
{
  _LARGE_INTEGER FileOffset;
  _LARGE_INTEGER Length;
};

/* 9630 */
struct PPM_IDLESTATE_EVENT
{
  unsigned int NewState;
  unsigned int OldState;
  unsigned __int64 Processors;
};

/* 9631 */
struct _NOTIFYICONIDENTIFIER
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  _GUID guidItem;
};

/* 9632 */
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION
{
  _CHANGER_ELEMENT StartingElement;
  unsigned int ActionCode;
  unsigned __int8 VolumeIDTemplate[40];
};

/* 9633 */
struct tagSOUNDSENTRYW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iFSTextEffect;
  unsigned int iFSTextEffectMSec;
  unsigned int iFSTextEffectColorBits;
  unsigned int iFSGrafEffect;
  unsigned int iFSGrafEffectMSec;
  unsigned int iFSGrafEffectColor;
  unsigned int iWindowsEffect;
  unsigned int iWindowsEffectMSec;
  wchar_t *lpszWindowsEffectDLL;
  unsigned int iWindowsEffectOrdinal;
};

/* 9634 */
struct tagMCI_SET_PARMS
{
  unsigned int dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
};

/* 9635 */
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA
{
  HKEY__ *hKeyBase;
  wchar_t *pwszRegPath;
};

/* 9636 */
struct __cppobj IDummyHICONIncluder : IUnknown
{
};

/* 9637 */
struct /*VFT*/ IDummyHICONIncluder_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Dummy)(IDummyHICONIncluder *this, HICON__ *, HDC__ *);
};

/* 9638 */
struct __cppobj JfrEvent<EventExecuteVMOperation>
{
};

/* 9639 */
struct PPM_THERMALCHANGE_EVENT
{
  unsigned int ThermalConstraint;
  unsigned __int64 Processors;
};

/* 9640 */
struct tagENUMLOGFONTW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
};

/* 9641 */
struct _PRINTER_INFO_3
{
  void *pSecurityDescriptor;
};

/* 9642 */
struct __cppobj IRpcHelper : IUnknown
{
};

/* 9643 */
struct /*VFT*/ IRpcHelper_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetDCOMProtocolVersion)(IRpcHelper *this, unsigned int *);
  HRESULT (__stdcall *GetIIDFromOBJREF)(IRpcHelper *this, void *, _GUID **);
};

/* 9644 */
struct __cppobj JfrEvent<EventThreadPark>
{
};

/* 9645 */
struct __cppobj EventThreadPark : JfrEvent<EventThreadPark>
{
};

/* 9646 */
struct _TOKEN_AUDIT_POLICY
{
  unsigned __int8 PerUserPolicy[27];
};

/* 9647 */
union _IMAGE_SECTION_HEADER::<unnamed_type_Misc>
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 9648 */
struct _CONSOLE_FONT_INFO
{
  unsigned int nFont;
  _COORD dwFontSize;
};

/* 9649 */
struct tagSTGOPTIONS
{
  unsigned __int16 usVersion;
  unsigned __int16 reserved;
  unsigned int ulSectorSize;
  const wchar_t *pwcsTemplateFile;
};

/* 9650 */
struct __declspec(align(8)) _finddata32i64_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  __int64 size;
  char name[260];
};

/* 9651 */
struct _DISCDLGSTRUCTW
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  wchar_t *lpLocalName;
  wchar_t *lpRemoteName;
  unsigned int dwFlags;
};

/* 9652 */
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
  unsigned int NumberOfAssignedProcesses;
  unsigned int NumberOfProcessIdsInList;
  unsigned int ProcessIdList[1];
};

/* 9653 */
struct __cppobj IMalloc : IUnknown
{
};

/* 9654 */
struct /*VFT*/ IMalloc_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void *(__stdcall *Alloc)(IMalloc *this, unsigned int);
  void *(__stdcall *Realloc)(IMalloc *this, void *, unsigned int);
  void (__stdcall *Free)(IMalloc *this, void *);
  unsigned int (__stdcall *GetSize)(IMalloc *this, void *);
  int (__stdcall *DidAlloc)(IMalloc *this, void *);
  void (__stdcall *HeapMinimize)(IMalloc *this);
};

/* 9655 */
struct __declspec(align(4)) _FILE_NOTIFY_INFORMATION
{
  unsigned int NextEntryOffset;
  unsigned int Action;
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 9656 */
struct NOTIFY_USER_POWER_SETTING
{
  _GUID Guid;
};

/* 9657 */
struct __cppobj EventClassLoad : JfrEvent<EventClassLoad>
{
};

/* 9658 */
struct _SERVICE_TRIGGER_INFO
{
  unsigned int cTriggers;
  _SERVICE_TRIGGER *pTriggers;
  unsigned __int8 *pReserved;
};

/* 9659 */
struct type_info
{
  void *vfptr;
  int _M_data;
  char _M_d_name[];
};

/* 9660 */
struct /*VFT*/ type_info_vtbl
{
  void (__thiscall *~type_info)(type_info *this);
};

/* 9661 */
struct NUMPARSE
{
  int cDig;
  unsigned int dwInFlags;
  unsigned int dwOutFlags;
  int cchUsed;
  int nBaseShift;
  int nPwr10;
};

/* 9662 */
struct /*VFT*/ StoreNKlassNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  int (__thiscall *store_Opcode)(MemNode *this);
  BasicType (__thiscall *memory_type)(MemNode *this);
  int (__thiscall *memory_size)(MemNode *this);
};

/* 9663 */
struct __cppobj StoreNKlassNode : StoreNNode
{
};

/* 9664 */
struct _OCSP_SIGNED_REQUEST_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _OCSP_SIGNATURE_INFO *pOptionalSignatureInfo;
};

/* 9665 */
struct __cppobj JfrEvent<EventCodeSweeperStatistics>
{
};

/* 9666 */
struct _IMAGE_RESOURCE_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int16 NumberOfNamedEntries;
  unsigned __int16 NumberOfIdEntries;
};

/* 9667 */
struct _PERF_OBJECT_TYPE
{
  unsigned int TotalByteLength;
  unsigned int DefinitionLength;
  unsigned int HeaderLength;
  unsigned int ObjectNameTitleIndex;
  wchar_t *ObjectNameTitle;
  unsigned int ObjectHelpTitleIndex;
  wchar_t *ObjectHelpTitle;
  unsigned int DetailLevel;
  unsigned int NumCounters;
  int DefaultCounter;
  int NumInstances;
  unsigned int CodePage;
  _LARGE_INTEGER PerfTime;
  _LARGE_INTEGER PerfFreq;
};

/* 9668 */
struct tagCOMPOSITIONFORM
{
  unsigned int dwStyle;
  tagPOINT ptCurrentPos;
  tagRECT rcArea;
};

/* 9669 */
struct __cppobj IForegroundTransfer : IUnknown
{
};

/* 9670 */
struct /*VFT*/ IForegroundTransfer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *AllowForegroundTransfer)(IForegroundTransfer *this, void *);
};

/* 9671 */
struct __cppobj EventG1MMU : JfrEvent<EventG1MMU>
{
};

/* 9672 */
struct _CONTEXT_EX
{
  _CONTEXT_CHUNK All;
  _CONTEXT_CHUNK Legacy;
  _CONTEXT_CHUNK XState;
};

/* 9673 */
struct __cppobj JfrEvent<EventZThreadPhase>
{
};

/* 9674 */
struct /*VFT*/ MarkDeadObjectsClosure_vtbl
{
  unsigned int (__thiscall *do_blk)(BlkClosure *this, HeapWord *);
};

/* 9675 */
struct __cppobj MarkDeadObjectsClosure : BlkClosure
{
  const CMSCollector *_collector;
  const CompactibleFreeListSpace *_sp;
  CMSBitMap *_live_bit_map;
  CMSBitMap *_dead_bit_map;
};

/* 9676 */
struct _tagPROTOCOLFILTERDATA
{
  unsigned int cbSize;
  IInternetProtocolSink *pProtocolSink;
  IInternetProtocol *pProtocol;
  IUnknown *pUnk;
  unsigned int dwFilterFlags;
};

/* 9677 */
struct __cppobj CompileTaskWrapper : StackObj
{
};

/* 9678 */
struct _BCRYPT_DH_PARAMETER_HEADER
{
  unsigned int cbLength;
  unsigned int dwMagic;
  unsigned int cbKeyLength;
};

/* 9679 */
struct _SERVICE_DESCRIPTIONW
{
  wchar_t *lpDescription;
};

/* 9680 */
union $E38888FFFF2E8047BDBD55C921E86469
{
  unsigned int FiberData;
  unsigned int Version;
};

/* 9681 */
struct _NT_TIB32
{
  unsigned int ExceptionList;
  unsigned int StackBase;
  unsigned int StackLimit;
  unsigned int SubSystemTib;
  $E38888FFFF2E8047BDBD55C921E86469 ___u4;
  unsigned int ArbitraryUserPointer;
  unsigned int Self;
};

/* 9682 */
struct _IMAGE_NT_HEADERS64
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 9683 */
struct _BCRYPT_DH_KEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
};

/* 9684 */
struct __declspec(align(4)) _STORAGE_DEVICE_ID_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int NumberOfIdentifiers;
  unsigned __int8 Identifiers[1];
};

/* 9685 */
struct __cppobj JfrEvent<EventCompilationFailure>
{
};

/* 9686 */
struct __cppobj EventCompilationFailure : JfrEvent<EventCompilationFailure>
{
};

/* 9687 */
struct _IMAGE_TLS_DIRECTORY64
{
  unsigned __int64 StartAddressOfRawData;
  unsigned __int64 EndAddressOfRawData;
  unsigned __int64 AddressOfIndex;
  unsigned __int64 AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 9688 */
struct _CERT_EXTENSIONS
{
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 9689 */
struct _CMC_DATA_INFO
{
  unsigned int cTaggedAttribute;
  _CMC_TAGGED_ATTRIBUTE *rgTaggedAttribute;
  unsigned int cTaggedRequest;
  _CMC_TAGGED_REQUEST *rgTaggedRequest;
  unsigned int cTaggedContentInfo;
  _CMC_TAGGED_CONTENT_INFO *rgTaggedContentInfo;
  unsigned int cTaggedOtherMsg;
  _CMC_TAGGED_OTHER_MSG *rgTaggedOtherMsg;
};

/* 9690 */
struct __cppobj LIR_OprRefList : LIR_OprRefArray
{
  int _size;
};

/* 9691 */
struct HWAVEOUT__
{
  int unused;
};

/* 9692 */
struct tagOIFI
{
  unsigned int cb;
  int fMDIApp;
  HWND__ *hwndFrame;
  HACCEL__ *haccel;
  unsigned int cAccelEntries;
};

/* 9693 */
struct tagEMRGRADIENTFILL
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nVer;
  unsigned int nTri;
  unsigned int ulMode;
  _TRIVERTEX Ver[1];
};

/* 9694 */
struct DDEDATA
{
  unsigned __int16 unused : 12;
  unsigned __int16 fResponse : 1;
  unsigned __int16 fRelease : 1;
  unsigned __int16 reserved : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
  unsigned __int8 Value[1];
};

/* 9695 */
struct _CRYPT_DECODE_PARA
{
  unsigned int cbSize;
  void *(__stdcall *pfnAlloc)(unsigned int);
  void (__stdcall *pfnFree)(void *);
};

/* 9696 */
union $85D0B371A435246904D5B041A70A067D
{
  HWND__ *hwndOwner;
  unsigned int cMultipleItems;
};

/* 9697 */
struct tMIXERCONTROLDETAILS
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int cChannels;
  $85D0B371A435246904D5B041A70A067D ___u3;
  unsigned int cbDetails;
  void *paDetails;
};

/* 9698 */
struct _SE_IMPERSONATION_STATE
{
  void *Token;
  unsigned __int8 CopyOnOpen;
  unsigned __int8 EffectiveOnly;
  _SECURITY_IMPERSONATION_LEVEL Level;
};

/* 9699 */
struct __cppobj JfrEvent<EventOldObjectSample>
{
};

/* 9700 */
struct tagEMREXTFLOODFILL
{
  tagEMR emr;
  _POINTL ptlStart;
  unsigned int crColor;
  unsigned int iMode;
};

/* 9701 */
struct __cppobj JfrStructMetaspaceSizes
{
};

/* 9702 */
struct __cppobj JfrEvent<EventIntFlagChanged>
{
};

/* 9703 */
struct __cppobj EventIntFlagChanged : JfrEvent<EventIntFlagChanged>
{
};

/* 9704 */
struct _ACCESS_ALLOWED_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 9705 */
struct _EVENTLOG_FULL_INFORMATION
{
  unsigned int dwFull;
};

/* 9706 */
struct tagWAVEINCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 9707 */
struct __cppobj JfrEvent<EventUnsignedIntFlag>
{
};

/* 9708 */
struct __cppobj JfrEvent<EventMetaspaceSummary>
{
};

/* 9709 */
struct tagCBT_CREATEWNDA
{
  tagCREATESTRUCTA *lpcs;
  HWND__ *hwndInsertAfter;
};

/* 9710 */
struct __cppobj EventEvacuationInformation : JfrEvent<EventEvacuationInformation>
{
};

/* 9711 */
struct __cppobj AsyncIAdviseSink : IUnknown
{
};

/* 9712 */
struct /*VFT*/ AsyncIAdviseSink_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void (__stdcall *Begin_OnDataChange)(AsyncIAdviseSink *this, tagFORMATETC *, tagSTGMEDIUM *);
  void (__stdcall *Finish_OnDataChange)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnViewChange)(AsyncIAdviseSink *this, unsigned int, int);
  void (__stdcall *Finish_OnViewChange)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnRename)(AsyncIAdviseSink *this, IMoniker *);
  void (__stdcall *Finish_OnRename)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnSave)(AsyncIAdviseSink *this);
  void (__stdcall *Finish_OnSave)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnClose)(AsyncIAdviseSink *this);
  void (__stdcall *Finish_OnClose)(AsyncIAdviseSink *this);
};

/* 9713 */
struct __cppobj AsyncIAdviseSink2 : AsyncIAdviseSink
{
};

/* 9714 */
struct /*VFT*/ AsyncIAdviseSink2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  void (__stdcall *Begin_OnDataChange)(AsyncIAdviseSink *this, tagFORMATETC *, tagSTGMEDIUM *);
  void (__stdcall *Finish_OnDataChange)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnViewChange)(AsyncIAdviseSink *this, unsigned int, int);
  void (__stdcall *Finish_OnViewChange)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnRename)(AsyncIAdviseSink *this, IMoniker *);
  void (__stdcall *Finish_OnRename)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnSave)(AsyncIAdviseSink *this);
  void (__stdcall *Finish_OnSave)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnClose)(AsyncIAdviseSink *this);
  void (__stdcall *Finish_OnClose)(AsyncIAdviseSink *this);
  void (__stdcall *Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *this, IMoniker *);
  void (__stdcall *Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *this);
};

/* 9715 */
struct HHOOK__
{
  int unused;
};

/* 9716 */
struct __cppobj ILockBytes : IUnknown
{
};

/* 9717 */
struct /*VFT*/ ILockBytes_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ReadAt)(ILockBytes *this, _ULARGE_INTEGER, void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *WriteAt)(ILockBytes *this, _ULARGE_INTEGER, const void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Flush)(ILockBytes *this);
  HRESULT (__stdcall *SetSize)(ILockBytes *this, _ULARGE_INTEGER);
  HRESULT (__stdcall *LockRegion)(ILockBytes *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__stdcall *UnlockRegion)(ILockBytes *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__stdcall *Stat)(ILockBytes *this, tagSTATSTG *, unsigned int);
};

/* 9718 */
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  int fCommercial;
};

/* 9719 */
struct _REPARSE_GUID_DATA_BUFFER::<unnamed_type_GenericReparseBuffer>
{
  unsigned __int8 DataBuffer[1];
};

/* 9720 */
struct __declspec(align(4)) _REPARSE_GUID_DATA_BUFFER
{
  unsigned int ReparseTag;
  unsigned __int16 ReparseDataLength;
  unsigned __int16 Reserved;
  _GUID ReparseGuid;
  _REPARSE_GUID_DATA_BUFFER::<unnamed_type_GenericReparseBuffer> GenericReparseBuffer;
};

/* 9721 */
struct __cppobj NativeReturnX : NativeInstruction
{
};

/* 9722 */
struct _SECURITY_DESCRIPTOR
{
  unsigned __int8 Revision;
  unsigned __int8 Sbz1;
  unsigned __int16 Control;
  void *Owner;
  void *Group;
  _ACL *Sacl;
  _ACL *Dacl;
};

/* 9723 */
struct _WIN32_FIND_STREAM_DATA
{
  _LARGE_INTEGER StreamSize;
  wchar_t cStreamName[296];
};

/* 9724 */
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedPrivateKey;
};

/* 9725 */
struct _USER_MARSHAL_CB
{
  unsigned int Flags;
  _MIDL_STUB_MESSAGE *pStubMsg;
  const unsigned __int8 *pReserve;
  unsigned int Signature;
  _USER_MARSHAL_CB_TYPE CBType;
  const unsigned __int8 *pFormat;
  const unsigned __int8 *pTypeFormat;
};

/* 9726 */
struct HSPRITE__
{
  int unused;
};

/* 9727 */
struct tagTTPOLYCURVE
{
  unsigned __int16 wType;
  unsigned __int16 cpfx;
  tagPOINTFX apfx[1];
};

/* 9728 */
struct OPENCARDNAMEA
{
  unsigned int dwStructSize;
  HWND__ *hwndOwner;
  unsigned int hSCardContext;
  char *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  char *lpstrCardNames;
  unsigned int nMaxCardNames;
  const _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  char *lpstrRdr;
  unsigned int nMaxRdr;
  char *lpstrCard;
  unsigned int nMaxCard;
  const char *lpstrTitle;
  unsigned int dwFlags;
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  unsigned int dwActiveProtocol;
  unsigned int (__stdcall *lpfnConnect)(unsigned int, char *, char *, void *);
  int (__stdcall *lpfnCheck)(unsigned int, unsigned int, void *);
  void (__stdcall *lpfnDisconnect)(unsigned int, unsigned int, void *);
  unsigned int hCardHandle;
};

/* 9729 */
struct _CRYPT_PKCS12_PBE_PARAMS
{
  int iIterations;
  unsigned int cbSalt;
};

/* 9730 */
struct __declspec(align(4)) tagHW_PROFILE_INFOW
{
  unsigned int dwDockInfo;
  wchar_t szHwProfileGuid[39];
  wchar_t szHwProfileName[80];
};

/* 9731 */
struct _PERF_COUNTER_BLOCK
{
  unsigned int ByteLength;
};

/* 9732 */
struct __NCRYPT_UI_POLICY
{
  unsigned int dwVersion;
  unsigned int dwFlags;
  const wchar_t *pszCreationTitle;
  const wchar_t *pszFriendlyName;
  const wchar_t *pszDescription;
};

/* 9733 */
struct __cppobj JfrEvent<EventGCPhasePauseLevel2>
{
};

/* 9734 */
struct __declspec(align(4)) _TAPE_PREPARE
{
  unsigned int Operation;
  unsigned __int8 Immediate;
};

/* 9735 */
union _CHAR_INFO::<unnamed_type_Char>
{
  wchar_t UnicodeChar;
  char AsciiChar;
};

/* 9736 */
struct _CHAR_INFO
{
  _CHAR_INFO::<unnamed_type_Char> Char;
  unsigned __int16 Attributes;
};

/* 9737 */
union $898C438DAFF485445F2E42D3847C554B
{
  SCARD_T0_COMMAND CmdBytes;
  unsigned __int8 rgbHeader[5];
};

/* 9738 */
struct __declspec(align(2)) SCARD_T0_REQUEST
{
  _SCARD_IO_REQUEST ioRequest;
  unsigned __int8 bSw1;
  unsigned __int8 bSw2;
  $898C438DAFF485445F2E42D3847C554B ___u3;
};

/* 9739 */
struct __cppobj ICatalogFileInfo : IUnknown
{
};

/* 9740 */
struct /*VFT*/ ICatalogFileInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetCatalogFile)(ICatalogFileInfo *this, char **);
  HRESULT (__stdcall *GetJavaTrust)(ICatalogFileInfo *this, void **);
};

/* 9741 */
struct __cppobj JfrEvent<EventBooleanFlagChanged>
{
};

/* 9742 */
struct __cppobj EventBooleanFlagChanged : JfrEvent<EventBooleanFlagChanged>
{
};

/* 9743 */
struct __cppobj JfrEvent<EventCodeSweeperConfiguration>
{
};

/* 9744 */
struct __cppobj EventCodeSweeperConfiguration : JfrEvent<EventCodeSweeperConfiguration>
{
};

/* 9745 */
struct __cppobj EventG1HeapRegionInformation : JfrEvent<EventG1HeapRegionInformation>
{
};

/* 9746 */
struct __cppobj EventCompilerInlining : JfrEvent<EventCompilerInlining>
{
};

/* 9747 */
struct __cppobj FreeRegionListIterator : StackObj
{
  FreeRegionList *_list;
  HeapRegion *_curr;
};

/* 9748 */
struct tagEMRCREATEPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
  tagLOGPALETTE lgpl;
};

/* 9749 */
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
  unsigned int UIRestrictionsClass;
};

/* 9750 */
struct __cppobj NativeTstRegMem : NativeInstruction
{
};

/* 9751 */
struct PPM_WMI_IDLE_STATES_EX
{
  unsigned int Type;
  unsigned int Count;
  unsigned int TargetState;
  unsigned int OldState;
  void *TargetProcessors;
  PPM_WMI_IDLE_STATE State[1];
};

/* 9752 */
struct __cppobj CodeEmitInfoList : CodeEmitInfoArray
{
  int _size;
};

/* 9753 */
struct RPC_CLIENT_INFORMATION1
{
  unsigned __int8 *UserName;
  unsigned __int8 *ComputerName;
  unsigned __int16 Privilege;
  unsigned int AuthFlags;
};

/* 9754 */
struct __cppobj IBlockingLock : IUnknown
{
};

/* 9755 */
struct /*VFT*/ IBlockingLock_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Lock)(IBlockingLock *this, unsigned int);
  HRESULT (__stdcall *Unlock)(IBlockingLock *this);
};

/* 9756 */
struct __cppobj EventSweepCodeCache : JfrEvent<EventSweepCodeCache>
{
};

/* 9757 */
struct __cppobj JfrEvent<EventSafepointCleanupTask>
{
};

/* 9758 */
struct __cppobj EventSafepointCleanupTask : JfrEvent<EventSafepointCleanupTask>
{
};

/* 9759 */
struct LIST_ENTRY64
{
  unsigned __int64 Flink;
  unsigned __int64 Blink;
};

/* 9760 */
struct HPEN__
{
  int unused;
};

/* 9761 */
struct __declspec(align(4)) _CHANGER_SET_POSITION
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Destination;
  unsigned __int8 Flip;
};

/* 9762 */
struct __cppobj JfrEvent<EventCompilerPhase>
{
};

/* 9763 */
struct __cppobj ITimeAndNoticeControl : IUnknown
{
};

/* 9764 */
struct /*VFT*/ ITimeAndNoticeControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SuppressChanges)(ITimeAndNoticeControl *this, unsigned int, unsigned int);
};

/* 9765 */
struct __cppobj EventExecuteVMOperation : JfrEvent<EventExecuteVMOperation>
{
};

/* 9766 */
struct tagDRAWITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  unsigned int itemAction;
  unsigned int itemState;
  HWND__ *hwndItem;
  HDC__ *hDC;
  tagRECT rcItem;
  unsigned int itemData;
};

/* 9767 */
struct tagI_RpcProxyCallbackInterface
{
  int (__stdcall *IsValidMachineFn)(unsigned __int16 *, unsigned __int16 *, unsigned int);
  int (__stdcall *GetClientAddressFn)(void *, char *, unsigned int *);
  int (__stdcall *GetConnectionTimeoutFn)(unsigned int *);
};

/* 9768 */
struct _tagStartParam
{
  _GUID iid;
  IBindCtx *pIBindCtx;
  IUnknown *pItf;
};

/* 9769 */
struct __cppobj EventReservedStackActivation : JfrEvent<EventReservedStackActivation>
{
};

/* 9770 */
struct __cppobj JfrEvent<EventJavaThreadStatistics>
{
};

/* 9771 */
struct __cppobj JfrEvent<EventIntFlag>
{
};

/* 9772 */
struct __cppobj EventIntFlag : JfrEvent<EventIntFlag>
{
};

/* 9773 */
struct tagPDEXW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned int Flags2;
  unsigned int ExclusionFlags;
  unsigned int nPageRanges;
  unsigned int nMaxPageRanges;
  tagPRINTPAGERANGE *lpPageRanges;
  unsigned int nMinPage;
  unsigned int nMaxPage;
  unsigned int nCopies;
  HINSTANCE__ *hInstance;
  const wchar_t *lpPrintTemplateName;
  IUnknown *lpCallback;
  unsigned int nPropertyPages;
  _PSP **lphPropertyPages;
  unsigned int nStartPage;
  unsigned int dwResultAction;
};

/* 9774 */
struct __cppobj AsyncIUnknown : IUnknown
{
};

/* 9775 */
struct /*VFT*/ AsyncIUnknown_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Begin_QueryInterface)(AsyncIUnknown *this, const _GUID *);
  HRESULT (__stdcall *Finish_QueryInterface)(AsyncIUnknown *this, void **);
  HRESULT (__stdcall *Begin_AddRef)(AsyncIUnknown *this);
  unsigned int (__stdcall *Finish_AddRef)(AsyncIUnknown *this);
  HRESULT (__stdcall *Begin_Release)(AsyncIUnknown *this);
  unsigned int (__stdcall *Finish_Release)(AsyncIUnknown *this);
};

/* 9776 */
struct __cppobj JfrEvent<EventCodeCacheStatistics>
{
};

/* 9777 */
struct /*VFT*/ FalseBitMapClosure_vtbl
{
  bool (__thiscall *do_bit)(BitMapClosure *this, unsigned int);
};

/* 9778 */
struct __cppobj FalseBitMapClosure : BitMapClosure
{
};

/* 9779 */
struct _tagCODEBASEHOLD
{
  unsigned int cbSize;
  wchar_t *szDistUnit;
  wchar_t *szCodeBase;
  unsigned int dwVersionMS;
  unsigned int dwVersionLS;
  unsigned int dwStyle;
};

/* 9780 */
struct _PRINTER_INFO_2W
{
  wchar_t *pServerName;
  wchar_t *pPrinterName;
  wchar_t *pShareName;
  wchar_t *pPortName;
  wchar_t *pDriverName;
  wchar_t *pComment;
  wchar_t *pLocation;
  _devicemodeW *pDevMode;
  wchar_t *pSepFile;
  wchar_t *pPrintProcessor;
  wchar_t *pDatatype;
  wchar_t *pParameters;
  void *pSecurityDescriptor;
  unsigned int Attributes;
  unsigned int Priority;
  unsigned int DefaultPriority;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int Status;
  unsigned int cJobs;
  unsigned int AveragePPM;
};

/* 9781 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_10
{
  const void *pVFTable;
  void *spare;
  char name[10];
};

/* 9782 */
struct _CRYPT_URL_INFO
{
  unsigned int cbSize;
  unsigned int dwSyncDeltaTime;
  unsigned int cGroup;
  unsigned int *rgcGroupEntry;
};

/* 9783 */
struct __cppobj JfrStructStackFrame
{
};

/* 9784 */
struct __cppobj EventBooleanFlag : JfrEvent<EventBooleanFlag>
{
};

/* 9785 */
struct _TAPE_GET_DRIVE_PARAMETERS
{
  unsigned __int8 ECC;
  unsigned __int8 Compression;
  unsigned __int8 DataPadding;
  unsigned __int8 ReportSetmarks;
  unsigned int DefaultBlockSize;
  unsigned int MaximumBlockSize;
  unsigned int MinimumBlockSize;
  unsigned int MaximumPartitionCount;
  unsigned int FeaturesLow;
  unsigned int FeaturesHigh;
  unsigned int EOTWarningZoneSize;
};

/* 9786 */
struct __cppobj IProcessLock : IUnknown
{
};

/* 9787 */
struct /*VFT*/ IProcessLock_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  unsigned int (__stdcall *AddRefOnProcess)(IProcessLock *this);
  unsigned int (__stdcall *ReleaseRefOnProcess)(IProcessLock *this);
};

/* 9788 */
struct __cppobj ISurrogateService : IUnknown
{
};

/* 9789 */
struct /*VFT*/ ISurrogateService_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Init)(ISurrogateService *this, const _GUID *, IProcessLock *, int *);
  HRESULT (__stdcall *ApplicationLaunch)(ISurrogateService *this, const _GUID *, tagApplicationType);
  HRESULT (__stdcall *ApplicationFree)(ISurrogateService *this, const _GUID *);
  HRESULT (__stdcall *CatalogRefresh)(ISurrogateService *this, unsigned int);
  HRESULT (__stdcall *ProcessShutdown)(ISurrogateService *this, tagShutdownType);
};

/* 9790 */
struct ANON_OBJECT_HEADER_V2
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
  unsigned int Flags;
  unsigned int MetaDataSize;
  unsigned int MetaDataOffset;
};

/* 9791 */
struct tagMONLINKSTRUCT
{
  unsigned int cb;
  unsigned int dwTime;
  void *hTask;
  int fEstablished;
  int fNoData;
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
  HSZ__ *hszItem;
  unsigned int wFmt;
  int fServer;
  HCONV__ *hConvServer;
  HCONV__ *hConvClient;
};

/* 9792 */
struct RPC_IF_ID_VECTOR
{
  unsigned int Count;
  _RPC_IF_ID *IfId[1];
};

/* 9793 */
struct _RPC_CLIENT_INTERFACE
{
  unsigned int Length;
  _RPC_SYNTAX_IDENTIFIER InterfaceId;
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  unsigned int RpcProtseqEndpointCount;
  _RPC_PROTSEQ_ENDPOINT *RpcProtseqEndpoint;
  unsigned int Reserved;
  const void *InterpreterInfo;
  unsigned int Flags;
};

/* 9794 */
struct _AppBarData
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uCallbackMessage;
  unsigned int uEdge;
  tagRECT rc;
  int lParam;
};

/* 9795 */
struct _CTL_USAGE_MATCH
{
  unsigned int dwType;
  _CTL_USAGE Usage;
};

/* 9796 */
struct READ_USN_JOURNAL_DATA
{
  __int64 StartUsn;
  unsigned int ReasonMask;
  unsigned int ReturnOnlyOnClose;
  unsigned __int64 Timeout;
  unsigned __int64 BytesToWaitFor;
  unsigned __int64 UsnJournalID;
};

/* 9797 */
struct _TAPE_SET_MEDIA_PARAMETERS
{
  unsigned int BlockSize;
};

/* 9798 */
struct _finddata32_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  unsigned int size;
  char name[260];
};

/* 9799 */
struct __cppobj JfrEvent<EventTenuringDistribution>
{
};

/* 9800 */
struct DDEACK
{
  unsigned __int16 bAppReturnCode : 8;
  unsigned __int16 reserved : 6;
  unsigned __int16 fBusy : 1;
  unsigned __int16 fAck : 1;
};

/* 9801 */
struct _RPC_BINDING_VECTOR
{
  unsigned int Count;
  void *BindingH[1];
};

/* 9802 */
struct RPC_IMPORT_CONTEXT_P
{
  void *LookupContext;
  void *ProposedHandle;
  _RPC_BINDING_VECTOR *Bindings;
};

/* 9803 */
struct __declspec(align(2)) _STORAGE_WRITE_CACHE_PROPERTY
{
  unsigned int Version;
  unsigned int Size;
  _WRITE_CACHE_TYPE WriteCacheType;
  _WRITE_CACHE_ENABLE WriteCacheEnabled;
  _WRITE_CACHE_CHANGE WriteCacheChangeable;
  _WRITE_THROUGH WriteThroughSupported;
  unsigned __int8 FlushCacheSupported;
  unsigned __int8 UserDefinedPowerProtection;
  unsigned __int8 NVCacheEnabled;
};

/* 9804 */
struct __cppobj EventJVMInformation : JfrEvent<EventJVMInformation>
{
};

/* 9805 */
struct /*VFT*/ ciArrayData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 9806 */
struct __cppobj ciArrayData : ArrayData
{
};

/* 9807 */
struct __cppobj JfrEvent<EventClassUnload>
{
};

/* 9808 */
struct PPM_WMI_LEGACY_PERFSTATE
{
  unsigned int Frequency;
  unsigned int Flags;
  unsigned int PercentFrequency;
};

/* 9809 */
struct $_TypeDescriptor$_extraBytes_40
{
  const void *pVFTable;
  void *spare;
  char name[40];
};

/* 9810 */
struct tagMDICREATESTRUCTW
{
  const wchar_t *szClass;
  const wchar_t *szTitle;
  void *hOwner;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int style;
  int lParam;
};

/* 9811 */
struct tagMCI_ANIM_PLAY_PARMS
{
  unsigned int dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
  unsigned int dwSpeed;
};

/* 9812 */
struct _NCryptAlgorithmName
{
  wchar_t *pszName;
  unsigned int dwClass;
  unsigned int dwAlgOperations;
  unsigned int dwFlags;
};

/* 9813 */
struct __cppobj EventInitialSystemProperty : JfrEvent<EventInitialSystemProperty>
{
};

/* 9814 */
struct _CONSOLE_SELECTION_INFO
{
  unsigned int dwFlags;
  _COORD dwSelectionAnchor;
  _SMALL_RECT srSelection;
};

/* 9815 */
struct SYSTEM_POWER_CAPABILITIES
{
  unsigned __int8 PowerButtonPresent;
  unsigned __int8 SleepButtonPresent;
  unsigned __int8 LidPresent;
  unsigned __int8 SystemS1;
  unsigned __int8 SystemS2;
  unsigned __int8 SystemS3;
  unsigned __int8 SystemS4;
  unsigned __int8 SystemS5;
  unsigned __int8 HiberFilePresent;
  unsigned __int8 FullWake;
  unsigned __int8 VideoDimPresent;
  unsigned __int8 ApmPresent;
  unsigned __int8 UpsPresent;
  unsigned __int8 ThermalControl;
  unsigned __int8 ProcessorThrottle;
  unsigned __int8 ProcessorMinThrottle;
  unsigned __int8 ProcessorMaxThrottle;
  unsigned __int8 FastSystemS4;
  unsigned __int8 spare2[3];
  unsigned __int8 DiskSpinDown;
  unsigned __int8 spare3[8];
  unsigned __int8 SystemBatteriesPresent;
  unsigned __int8 BatteriesAreShortTerm;
  BATTERY_REPORTING_SCALE BatteryScale[3];
  _SYSTEM_POWER_STATE AcOnLineWake;
  _SYSTEM_POWER_STATE SoftLidWake;
  _SYSTEM_POWER_STATE RtcWake;
  _SYSTEM_POWER_STATE MinDeviceWakeState;
  _SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

/* 9816 */
struct __cppobj EventObjectAllocationOutsideTLAB : JfrEvent<EventObjectAllocationOutsideTLAB>
{
};

/* 9817 */
struct __cppobj JfrEvent<EventPromoteObjectInNewPLAB>
{
};

/* 9818 */
struct __cppobj IGlobalInterfaceTable : IUnknown
{
};

/* 9819 */
struct /*VFT*/ IGlobalInterfaceTable_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *this, IUnknown *, const _GUID *, unsigned int *);
  HRESULT (__stdcall *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *this, unsigned int);
  HRESULT (__stdcall *GetInterfaceFromGlobal)(IGlobalInterfaceTable *this, unsigned int, const _GUID *, void **);
};

/* 9820 */
struct __cppobj IDirectWriterLock : IUnknown
{
};

/* 9821 */
struct /*VFT*/ IDirectWriterLock_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *WaitForWriteAccess)(IDirectWriterLock *this, unsigned int);
  HRESULT (__stdcall *ReleaseWriteAccess)(IDirectWriterLock *this);
  HRESULT (__stdcall *HaveWriteAccess)(IDirectWriterLock *this);
};

/* 9822 */
struct SCARD_READERSTATEW
{
  const wchar_t *szReader;
  void *pvUserData;
  unsigned int dwCurrentState;
  unsigned int dwEventState;
  unsigned int cbAtr;
  unsigned __int8 rgbAtr[36];
};

/* 9823 */
struct __unaligned __declspec(align(4)) _REASSIGN_BLOCKS_EX
{
  unsigned __int16 Reserved;
  unsigned __int16 Count;
  _LARGE_INTEGER BlockNumber[1];
};

/* 9824 */
struct __declspec(align(4)) tagEMRGLSBOUNDEDRECORD
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbData;
  unsigned __int8 Data[1];
};

/* 9825 */
struct _CRYPT_AES_256_KEY_STATE
{
  unsigned __int8 Key[32];
  unsigned __int8 IV[16];
  unsigned __int8 EncryptionState[15][16];
  unsigned __int8 DecryptionState[15][16];
  unsigned __int8 Feedback[16];
};

/* 9826 */
union $980F6A28C67C8F3640106D01D4C85A6A
{
  unsigned int Characteristics;
  unsigned int OriginalFirstThunk;
};

/* 9827 */
struct _IMAGE_IMPORT_DESCRIPTOR
{
  $980F6A28C67C8F3640106D01D4C85A6A ___u0;
  unsigned int TimeDateStamp;
  unsigned int ForwarderChain;
  unsigned int Name;
  unsigned int FirstThunk;
};

/* 9828 */
struct __cppobj ILayoutStorage : IUnknown
{
};

/* 9829 */
struct /*VFT*/ ILayoutStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *LayoutScript)(ILayoutStorage *this, tagStorageLayout *, unsigned int, unsigned int);
  HRESULT (__stdcall *BeginMonitor)(ILayoutStorage *this);
  HRESULT (__stdcall *EndMonitor)(ILayoutStorage *this);
  HRESULT (__stdcall *ReLayoutDocfile)(ILayoutStorage *this, wchar_t *);
  HRESULT (__stdcall *ReLayoutDocfileOnILockBytes)(ILayoutStorage *this, ILockBytes *);
};

/* 9830 */
struct _DRAWPATRECT
{
  tagPOINT ptPosition;
  tagPOINT ptSize;
  unsigned __int16 wStyle;
  unsigned __int16 wPattern;
};

/* 9831 */
struct tagEMRBITBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
};

/* 9832 */
struct _SERVICE_FAILURE_ACTIONSW
{
  unsigned int dwResetPeriod;
  wchar_t *lpRebootMsg;
  wchar_t *lpCommand;
  unsigned int cActions;
  _SC_ACTION *lpsaActions;
};

/* 9833 */
struct __cppobj JfrEvent<EventG1EvacuationYoungStatistics>
{
};

/* 9834 */
struct tagEMRSETMAPPERFLAGS
{
  tagEMR emr;
  unsigned int dwFlags;
};

/* 9835 */
struct _CRT_FLOAT
{
  float f;
};

/* 9836 */
struct tagMDINEXTMENU
{
  HMENU__ *hmenuIn;
  HMENU__ *hmenuNext;
  HWND__ *hwndNext;
};

/* 9837 */
struct __cppobj EventClassUnload : JfrEvent<EventClassUnload>
{
};

/* 9838 */
struct __cppobj IXMLElement : IDispatch
{
};

/* 9839 */
struct /*VFT*/ IXMLElement_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_tagName)(IXMLElement *this, wchar_t **);
  HRESULT (__stdcall *put_tagName)(IXMLElement *this, wchar_t *);
  HRESULT (__stdcall *get_parent)(IXMLElement *this, IXMLElement **);
  HRESULT (__stdcall *setAttribute)(IXMLElement *this, wchar_t *, tagVARIANT);
  HRESULT (__stdcall *getAttribute)(IXMLElement *this, wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *removeAttribute)(IXMLElement *this, wchar_t *);
  HRESULT (__stdcall *get_children)(IXMLElement *this, IXMLElementCollection **);
  HRESULT (__stdcall *get_type)(IXMLElement *this, int *);
  HRESULT (__stdcall *get_text)(IXMLElement *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLElement *this, wchar_t *);
  HRESULT (__stdcall *addChild)(IXMLElement *this, IXMLElement *, int, int);
  HRESULT (__stdcall *removeChild)(IXMLElement *this, IXMLElement *);
};

/* 9840 */
struct __cppobj IXMLDocument : IDispatch
{
};

/* 9841 */
struct /*VFT*/ IXMLDocument_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_root)(IXMLDocument *this, IXMLElement **);
  HRESULT (__stdcall *get_fileSize)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_fileModifiedDate)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_fileUpdatedDate)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_URL)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *put_URL)(IXMLDocument *this, wchar_t *);
  HRESULT (__stdcall *get_mimeType)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_readyState)(IXMLDocument *this, int *);
  HRESULT (__stdcall *get_charset)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *put_charset)(IXMLDocument *this, wchar_t *);
  HRESULT (__stdcall *get_version)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_doctype)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *get_dtdURL)(IXMLDocument *this, wchar_t **);
  HRESULT (__stdcall *createElement)(IXMLDocument *this, tagVARIANT, tagVARIANT, IXMLElement **);
};

/* 9842 */
struct UDATE
{
  _SYSTEMTIME st;
  unsigned __int16 wDayOfYear;
};

/* 9843 */
struct _DISK_LOGGING
{
  unsigned __int8 Function;
  void *BufferAddress;
  unsigned int BufferSize;
};

/* 9844 */
struct _wfinddata32_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  unsigned int size;
  wchar_t name[260];
};

/* 9845 */
struct __cppobj EventGCPhasePauseLevel2 : JfrEvent<EventGCPhasePauseLevel2>
{
};

/* 9846 */
struct _LDOUBLE
{
  unsigned __int8 ld[10];
};

/* 9847 */
struct __cppobj EventUnsignedLongFlag : JfrEvent<EventUnsignedLongFlag>
{
};

/* 9848 */
struct tagEMRSETPALETTEENTRIES
{
  tagEMR emr;
  unsigned int ihPal;
  unsigned int iStart;
  unsigned int cEntries;
  tagPALETTEENTRY aPalEntries[1];
};

/* 9849 */
struct ip_mreq
{
  in_addr imr_multiaddr;
  in_addr imr_interface;
};

/* 9850 */
struct __cppobj ciReturnTypeEntry : ReturnTypeEntry, ciTypeEntries
{
};

/* 9851 */
struct CONFIRMSAFETY
{
  _GUID clsid;
  IUnknown *pUnk;
  unsigned int dwFlags;
};

/* 9852 */
struct __cppobj JfrEvent<EventG1GarbageCollection>
{
};

/* 9853 */
struct _EXCEPTION_RECORD64
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned __int64 ExceptionRecord;
  unsigned __int64 ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int __unusedAlignment;
  unsigned __int64 ExceptionInformation[15];
};

/* 9854 */
struct __cppobj CompositeElapsedCounterSource
{
};

/* 9855 */
struct __cppobj IXMLDocument2 : IDispatch
{
};

/* 9856 */
struct /*VFT*/ IXMLDocument2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_root)(IXMLDocument2 *this, IXMLElement2 **);
  HRESULT (__stdcall *get_fileSize)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_fileModifiedDate)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_fileUpdatedDate)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_URL)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *put_URL)(IXMLDocument2 *this, wchar_t *);
  HRESULT (__stdcall *get_mimeType)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_readyState)(IXMLDocument2 *this, int *);
  HRESULT (__stdcall *get_charset)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *put_charset)(IXMLDocument2 *this, wchar_t *);
  HRESULT (__stdcall *get_version)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_doctype)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *get_dtdURL)(IXMLDocument2 *this, wchar_t **);
  HRESULT (__stdcall *createElement)(IXMLDocument2 *this, tagVARIANT, tagVARIANT, IXMLElement2 **);
  HRESULT (__stdcall *get_async)(IXMLDocument2 *this, __int16 *);
  HRESULT (__stdcall *put_async)(IXMLDocument2 *this, __int16);
};

/* 9857 */
struct tagEMRRESIZEPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
  unsigned int cEntries;
};

/* 9858 */
struct __cppobj ICreateTypeInfo2 : ICreateTypeInfo
{
};

/* 9859 */
struct /*VFT*/ ICreateTypeInfo2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetGuid)(ICreateTypeInfo *this, const _GUID *);
  HRESULT (__stdcall *SetTypeFlags)(ICreateTypeInfo *this, unsigned int);
  HRESULT (__stdcall *SetDocString)(ICreateTypeInfo *this, wchar_t *);
  HRESULT (__stdcall *SetHelpContext)(ICreateTypeInfo *this, unsigned int);
  HRESULT (__stdcall *SetVersion)(ICreateTypeInfo *this, unsigned __int16, unsigned __int16);
  HRESULT (__stdcall *AddRefTypeInfo)(ICreateTypeInfo *this, ITypeInfo *, unsigned int *);
  HRESULT (__stdcall *AddFuncDesc)(ICreateTypeInfo *this, unsigned int, tagFUNCDESC *);
  HRESULT (__stdcall *AddImplType)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetImplTypeFlags)(ICreateTypeInfo *this, unsigned int, int);
  HRESULT (__stdcall *SetAlignment)(ICreateTypeInfo *this, unsigned __int16);
  HRESULT (__stdcall *SetSchema)(ICreateTypeInfo *this, wchar_t *);
  HRESULT (__stdcall *AddVarDesc)(ICreateTypeInfo *this, unsigned int, tagVARDESC *);
  HRESULT (__stdcall *SetFuncAndParamNames)(ICreateTypeInfo *this, unsigned int, wchar_t **, unsigned int);
  HRESULT (__stdcall *SetVarName)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetTypeDescAlias)(ICreateTypeInfo *this, tagTYPEDESC *);
  HRESULT (__stdcall *DefineFuncAsDllEntry)(ICreateTypeInfo *this, unsigned int, wchar_t *, wchar_t *);
  HRESULT (__stdcall *SetFuncDocString)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetVarDocString)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetFuncHelpContext)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetVarHelpContext)(ICreateTypeInfo *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetMops)(ICreateTypeInfo *this, unsigned int, wchar_t *);
  HRESULT (__stdcall *SetTypeIdldesc)(ICreateTypeInfo *this, tagIDLDESC *);
  HRESULT (__stdcall *LayOut)(ICreateTypeInfo *this);
  HRESULT (__stdcall *DeleteFuncDesc)(ICreateTypeInfo2 *this, unsigned int);
  HRESULT (__stdcall *DeleteFuncDescByMemId)(ICreateTypeInfo2 *this, int, tagINVOKEKIND);
  HRESULT (__stdcall *DeleteVarDesc)(ICreateTypeInfo2 *this, unsigned int);
  HRESULT (__stdcall *DeleteVarDescByMemId)(ICreateTypeInfo2 *this, int);
  HRESULT (__stdcall *DeleteImplType)(ICreateTypeInfo2 *this, unsigned int);
  HRESULT (__stdcall *SetCustData)(ICreateTypeInfo2 *this, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetFuncCustData)(ICreateTypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetParamCustData)(ICreateTypeInfo2 *this, unsigned int, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetVarCustData)(ICreateTypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetImplTypeCustData)(ICreateTypeInfo2 *this, unsigned int, const _GUID *, tagVARIANT *);
  HRESULT (__stdcall *SetHelpStringContext)(ICreateTypeInfo2 *this, unsigned int);
  HRESULT (__stdcall *SetFuncHelpStringContext)(ICreateTypeInfo2 *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetVarHelpStringContext)(ICreateTypeInfo2 *this, unsigned int, unsigned int);
  HRESULT (__stdcall *Invalidate)(ICreateTypeInfo2 *this);
  HRESULT (__stdcall *SetName)(ICreateTypeInfo2 *this, wchar_t *);
};

/* 9860 */
struct __cppobj EventOldObjectSample : JfrEvent<EventOldObjectSample>
{
};

/* 9861 */
struct _CERT_POLICY95_QUALIFIER1
{
  wchar_t *pszPracticesReference;
  char *pszNoticeIdentifier;
  char *pszNSINoticeIdentifier;
  unsigned int cCPSURLs;
  _CPS_URLS *rgCPSURLs;
};

/* 9862 */
struct __cppobj JfrEvent<EventStringFlag>
{
};

/* 9863 */
struct __cppobj EventStringFlag : JfrEvent<EventStringFlag>
{
};

/* 9864 */
struct __cppobj JfrEvent<EventBiasedLockSelfRevocation>
{
};

/* 9865 */
struct __cppobj EventBiasedLockSelfRevocation : JfrEvent<EventBiasedLockSelfRevocation>
{
};

/* 9866 */
struct __cppobj EventGCPhasePauseLevel1 : JfrEvent<EventGCPhasePauseLevel1>
{
};

/* 9867 */
struct /*VFT*/ ciMultiBranchData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 9868 */
struct __cppobj ciMultiBranchData : MultiBranchData
{
};

/* 9869 */
struct __cppobj EventCompilerConfiguration : JfrEvent<EventCompilerConfiguration>
{
};

/* 9870 */
struct /*VFT*/ LoadReturnPCNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 9871 */
struct __cppobj LoadReturnPCNode : Node
{
};

/* 9872 */
struct _DISK_GROW_PARTITION
{
  unsigned int PartitionNumber;
  _LARGE_INTEGER BytesToGrow;
};

/* 9873 */
struct tagTPMPARAMS
{
  unsigned int cbSize;
  tagRECT rcExclude;
};

/* 9874 */
struct pvalueW
{
  wchar_t *pv_valuename;
  int pv_valuelen;
  void *pv_value_context;
  unsigned int pv_type;
};

/* 9875 */
struct tagMCI_INFO_PARMSA
{
  unsigned int dwCallback;
  char *lpstrReturn;
  unsigned int dwRetSize;
};

/* 9876 */
struct __cppobj JfrEvent<EventInitialEnvironmentVariable>
{
};

/* 9877 */
struct __cppobj EventInitialEnvironmentVariable : JfrEvent<EventInitialEnvironmentVariable>
{
};

/* 9878 */
struct __cppobj JfrStructObjectSpace
{
};

/* 9879 */
struct __cppobj EventG1GarbageCollection : JfrEvent<EventG1GarbageCollection>
{
};

/* 9880 */
struct __cppobj ar_ext_msg : FormatBuffer<256>
{
};

/* 9881 */
struct __cppobj IFillLockBytes : IUnknown
{
};

/* 9882 */
struct /*VFT*/ IFillLockBytes_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *FillAppend)(IFillLockBytes *this, const void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *FillAt)(IFillLockBytes *this, _ULARGE_INTEGER, const void *, unsigned int, unsigned int *);
  HRESULT (__stdcall *SetFillSize)(IFillLockBytes *this, _ULARGE_INTEGER);
  HRESULT (__stdcall *Terminate)(IFillLockBytes *this, int);
};

/* 9883 */
struct __cppobj JfrEvent<EventNativeLibrary>
{
};

/* 9884 */
struct __cppobj EventNativeLibrary : JfrEvent<EventNativeLibrary>
{
};

/* 9885 */
struct __cppobj JfrEvent<EventThreadAllocationStatistics>
{
};

/* 9886 */
struct __cppobj EventThreadAllocationStatistics : JfrEvent<EventThreadAllocationStatistics>
{
};

/* 9887 */
struct __unaligned __declspec(align(4)) _SHQUERYRBINFO
{
  unsigned int cbSize;
  __int64 i64Size;
  __int64 i64NumItems;
};

/* 9888 */
struct __cppobj EventG1HeapSummary : JfrEvent<EventG1HeapSummary>
{
};

/* 9889 */
struct _CRT_DOUBLE
{
  long double x;
};

/* 9890 */
struct __cppobj TimeHelper
{
};

/* 9891 */
struct PPM_THERMAL_POLICY_EVENT
{
  unsigned __int8 Mode;
  unsigned __int64 Processors;
};

/* 9892 */
union $4194258ED3858597E4224C8F66A3D030
{
  HKEY__ *hKeyBase;
  void *pvBase;
};

/* 9893 */
union $9AD97B11DC562691EDED97C604BFB552
{
  void *pvSystemStore;
  const char *pszSystemStore;
  const wchar_t *pwszSystemStore;
};

/* 9894 */
struct _CERT_SYSTEM_STORE_RELOCATE_PARA
{
  $4194258ED3858597E4224C8F66A3D030 ___u0;
  $9AD97B11DC562691EDED97C604BFB552 ___u1;
};

/* 9895 */
struct __cppobj IInternetSession : IUnknown
{
};

/* 9896 */
struct /*VFT*/ IInternetSession_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *RegisterNameSpace)(IInternetSession *this, IClassFactory *, const _GUID *, const wchar_t *, unsigned int, const wchar_t *const *, unsigned int);
  HRESULT (__stdcall *UnregisterNameSpace)(IInternetSession *this, IClassFactory *, const wchar_t *);
  HRESULT (__stdcall *RegisterMimeFilter)(IInternetSession *this, IClassFactory *, const _GUID *, const wchar_t *);
  HRESULT (__stdcall *UnregisterMimeFilter)(IInternetSession *this, IClassFactory *, const wchar_t *);
  HRESULT (__stdcall *CreateBinding)(IInternetSession *this, IBindCtx *, const wchar_t *, IUnknown *, IUnknown **, IInternetProtocol **, unsigned int);
  HRESULT (__stdcall *SetSessionOption)(IInternetSession *this, unsigned int, void *, unsigned int, unsigned int);
  HRESULT (__stdcall *GetSessionOption)(IInternetSession *this, unsigned int, void *, unsigned int *, unsigned int);
};

/* 9897 */
struct /*VFT*/ TypeVectD_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 9898 */
struct __cppobj TypeVectD : TypeVect
{
};

/* 9899 */
union $B70361A81284D7584135041D350CE94B
{
  _CRYPTOAPI_BLOB ByNameResponderId;
  _CRYPTOAPI_BLOB ByKeyResponderId;
};

/* 9900 */
struct _OCSP_BASIC_RESPONSE_INFO
{
  unsigned int dwVersion;
  unsigned int dwResponderIdChoice;
  $B70361A81284D7584135041D350CE94B ___u2;
  _FILETIME ProducedAt;
  unsigned int cResponseEntry;
  _OCSP_BASIC_RESPONSE_ENTRY *rgResponseEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 9901 */
struct /*VFT*/ ciCounterData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 9902 */
struct __cppobj ciCounterData : CounterData
{
};

/* 9903 */
struct __cppobj CompilerPhaseTypeHelper
{
};

/* 9904 */
struct __cppobj JfrEvent<EventThreadDump>
{
};

/* 9905 */
struct tagSOLE_AUTHENTICATION_LIST
{
  unsigned int cAuthInfo;
  tagSOLE_AUTHENTICATION_INFO *aAuthInfo;
};

/* 9906 */
struct /*VFT*/ ciBitData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 9907 */
struct __cppobj ciBitData : BitData
{
};

/* 9908 */
struct __declspec(align(8)) _DISK_PERFORMANCE
{
  _LARGE_INTEGER BytesRead;
  _LARGE_INTEGER BytesWritten;
  _LARGE_INTEGER ReadTime;
  _LARGE_INTEGER WriteTime;
  _LARGE_INTEGER IdleTime;
  unsigned int ReadCount;
  unsigned int WriteCount;
  unsigned int QueueDepth;
  unsigned int SplitCount;
  _LARGE_INTEGER QueryTime;
  unsigned int StorageDeviceNumber;
  wchar_t StorageManagerName[8];
};

/* 9909 */
struct _PSFEATURE_CUSTPAPER
{
  int lOrientation;
  int lWidth;
  int lHeight;
  int lWidthOffset;
  int lHeightOffset;
};

/* 9910 */
struct __cppobj RTMLockingNamedCounter : NamedCounter
{
  RTMLockingCounters _counters;
};

/* 9911 */
struct _MIDL_SERVER_INFO_
{
  const _MIDL_STUB_DESC *pStubDesc;
  int (__stdcall *const *DispatchTable)();
  const unsigned __int8 *ProcString;
  const unsigned __int16 *FmtStringOffset;
  void (__stdcall *const *ThunkTable)(_MIDL_STUB_MESSAGE *);
  _RPC_SYNTAX_IDENTIFIER *pTransferSyntax;
  unsigned int nCount;
  _MIDL_SYNTAX_INFO *pSyntaxInfo;
};

/* 9912 */
union _IMAGE_THUNK_DATA64::<unnamed_type_u1>
{
  unsigned __int64 ForwarderString;
  unsigned __int64 Function;
  unsigned __int64 Ordinal;
  unsigned __int64 AddressOfData;
};

/* 9913 */
struct _IMAGE_THUNK_DATA64
{
  _IMAGE_THUNK_DATA64::<unnamed_type_u1> u1;
};

/* 9914 */
struct __cppobj IProgressNotify : IUnknown
{
};

/* 9915 */
struct /*VFT*/ IProgressNotify_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *OnProgress)(IProgressNotify *this, unsigned int, unsigned int, int, int);
};

/* 9916 */
struct _xml_error
{
  unsigned int _nLine;
  wchar_t *_pchBuf;
  unsigned int _cchBuf;
  unsigned int _ich;
  wchar_t *_pszFound;
  wchar_t *_pszExpected;
  unsigned int _reserved1;
  unsigned int _reserved2;
};

/* 9917 */
struct __cppobj EventJavaThreadStatistics : JfrEvent<EventJavaThreadStatistics>
{
};

/* 9918 */
struct __declspec(align(4)) protoent
{
  char *p_name;
  char **p_aliases;
  __int16 p_proto;
};

/* 9919 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_29
{
  const void *pVFTable;
  void *spare;
  char name[29];
};

/* 9920 */
struct __declspec(align(4)) tagRemSNB
{
  unsigned int ulCntStr;
  unsigned int ulCntChar;
  wchar_t rgString[1];
};

/* 9921 */
struct _PUBLICKEYSTRUC
{
  unsigned __int8 bType;
  unsigned __int8 bVersion;
  unsigned __int16 reserved;
  unsigned int aiKeyAlg;
};

/* 9922 */
struct __cppobj IOleInPlaceSite : IOleWindow
{
};

/* 9923 */
struct /*VFT*/ IOleInPlaceSite_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IOleWindow *this, HWND__ **);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *this, int);
  HRESULT (__stdcall *CanInPlaceActivate)(IOleInPlaceSite *this);
  HRESULT (__stdcall *OnInPlaceActivate)(IOleInPlaceSite *this);
  HRESULT (__stdcall *OnUIActivate)(IOleInPlaceSite *this);
  HRESULT (__stdcall *GetWindowContext)(IOleInPlaceSite *this, IOleInPlaceFrame **, IOleInPlaceUIWindow **, tagRECT *, tagRECT *, tagOIFI *);
  HRESULT (__stdcall *Scroll)(IOleInPlaceSite *this, tagSIZE);
  HRESULT (__stdcall *OnUIDeactivate)(IOleInPlaceSite *this, int);
  HRESULT (__stdcall *OnInPlaceDeactivate)(IOleInPlaceSite *this);
  HRESULT (__stdcall *DiscardUndoState)(IOleInPlaceSite *this);
  HRESULT (__stdcall *DeactivateAndUndo)(IOleInPlaceSite *this);
  HRESULT (__stdcall *OnPosRectChange)(IOleInPlaceSite *this, const tagRECT *);
};

/* 9924 */
struct __cppobj IRpcChannelBuffer2 : IRpcChannelBuffer
{
};

/* 9925 */
struct /*VFT*/ IRpcChannelBuffer2_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, const _GUID *);
  HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *);
  HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer *this, unsigned int *, void **);
  HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer *this);
  HRESULT (__stdcall *GetProtocolVersion)(IRpcChannelBuffer2 *this, unsigned int *);
};

/* 9926 */
struct __cppobj AsyncIPipeByte : IUnknown
{
};

/* 9927 */
struct /*VFT*/ AsyncIPipeByte_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Begin_Pull)(AsyncIPipeByte *this, unsigned int);
  HRESULT (__stdcall *Finish_Pull)(AsyncIPipeByte *this, unsigned __int8 *, unsigned int *);
  HRESULT (__stdcall *Begin_Push)(AsyncIPipeByte *this, unsigned __int8 *, unsigned int);
  HRESULT (__stdcall *Finish_Push)(AsyncIPipeByte *this);
};

/* 9928 */
struct ANON_OBJECT_HEADER_BIGOBJ
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
  unsigned int Flags;
  unsigned int MetaDataSize;
  unsigned int MetaDataOffset;
  unsigned int NumberOfSections;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
};

/* 9929 */
struct __cppobj IOplockStorage : IUnknown
{
};

/* 9930 */
struct /*VFT*/ IOplockStorage_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateStorageEx)(IOplockStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, const _GUID *, void **);
  HRESULT (__stdcall *OpenStorageEx)(IOplockStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, const _GUID *, void **);
};

/* 9931 */
struct /*VFT*/ FalseMemRegionClosure_vtbl
{
  void (__thiscall *do_MemRegion)(MemRegionClosure *this, MemRegion);
};

/* 9932 */
struct __cppobj FalseMemRegionClosure : MemRegionClosure
{
};

/* 9933 */
struct __cppobj JfrEvent<EventNativeMethodSample>
{
};

/* 9934 */
struct __cppobj InstructionMark : StackObj
{
  Compilation *_compilation;
  Instruction *_previous;
};

/* 9935 */
struct tagGCP_RESULTSW
{
  unsigned int lStructSize;
  wchar_t *lpOutString;
  unsigned int *lpOrder;
  int *lpDx;
  int *lpCaretPos;
  char *lpClass;
  wchar_t *lpGlyphs;
  unsigned int nGlyphs;
  int nMaxFit;
};

/* 9936 */
struct tagHARDWAREHOOKSTRUCT
{
  HWND__ *hwnd;
  unsigned int message;
  unsigned int wParam;
  int lParam;
};

/* 9937 */
struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA
{
  unsigned __int16 Reserved;
  unsigned __int16 SerialNumberLength;
  unsigned __int8 SerialNumber[];
};

/* 9938 */
struct __cppobj IInitializeSpy : IUnknown
{
};

/* 9939 */
struct /*VFT*/ IInitializeSpy_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *PreInitialize)(IInitializeSpy *this, unsigned int, unsigned int);
  HRESULT (__stdcall *PostInitialize)(IInitializeSpy *this, HRESULT, unsigned int, unsigned int);
  HRESULT (__stdcall *PreUninitialize)(IInitializeSpy *this, unsigned int);
  HRESULT (__stdcall *PostUninitialize)(IInitializeSpy *this, unsigned int);
};

/* 9940 */
struct __cppobj IPrintDialogCallback : IUnknown
{
};

/* 9941 */
struct /*VFT*/ IPrintDialogCallback_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *InitDone)(IPrintDialogCallback *this);
  HRESULT (__stdcall *SelectionChange)(IPrintDialogCallback *this);
  HRESULT (__stdcall *HandleMessage)(IPrintDialogCallback *this, HWND__ *, unsigned int, unsigned int, int, int *);
};

/* 9942 */
struct _QUOTA_LIMITS_EX
{
  unsigned int PagedPoolLimit;
  unsigned int NonPagedPoolLimit;
  unsigned int MinimumWorkingSetSize;
  unsigned int MaximumWorkingSetSize;
  unsigned int PagefileLimit;
  _LARGE_INTEGER TimeLimit;
  unsigned int WorkingSetLimit;
  unsigned int Reserved2;
  unsigned int Reserved3;
  unsigned int Reserved4;
  unsigned int Flags;
  _RATE_QUOTA_LIMIT CpuRateLimit;
};

/* 9943 */
struct __declspec(align(2)) _IMAGE_IMPORT_BY_NAME
{
  unsigned __int16 Hint;
  unsigned __int8 Name[1];
};

/* 9944 */
struct __cppobj EventOldGarbageCollection : JfrEvent<EventOldGarbageCollection>
{
};

/* 9945 */
struct RPC_STATS_VECTOR
{
  unsigned int Count;
  unsigned int Stats[1];
};

/* 9946 */
struct __cppobj IRpcChannelBuffer3 : IRpcChannelBuffer2
{
};

/* 9947 */
struct /*VFT*/ IRpcChannelBuffer3_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, const _GUID *);
  HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *);
  HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer *this, unsigned int *, void **);
  HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer *this);
  HRESULT (__stdcall *GetProtocolVersion)(IRpcChannelBuffer2 *this, unsigned int *);
  HRESULT (__stdcall *Send)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *Receive)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Cancel)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *);
  HRESULT (__stdcall *GetCallContext)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, const _GUID *, void **);
  HRESULT (__stdcall *GetDestCtxEx)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, unsigned int *, void **);
  HRESULT (__stdcall *GetState)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *RegisterAsync)(IRpcChannelBuffer3 *this, tagRPCOLEMESSAGE *, IAsyncManager *);
};

/* 9948 */
struct __declspec(align(4)) tagSERIALIZEDPROPERTYVALUE
{
  unsigned int dwType;
  unsigned __int8 rgb[1];
};

/* 9949 */
struct __cppobj IPipeByte : IUnknown
{
};

/* 9950 */
struct /*VFT*/ IPipeByte_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Pull)(IPipeByte *this, unsigned __int8 *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Push)(IPipeByte *this, unsigned __int8 *, unsigned int);
};

/* 9951 */
struct __cppobj IHttpNegotiate3 : IHttpNegotiate2
{
};

/* 9952 */
struct /*VFT*/ IHttpNegotiate3_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *BeginningTransaction)(IHttpNegotiate *this, const wchar_t *, const wchar_t *, unsigned int, wchar_t **);
  HRESULT (__stdcall *OnResponse)(IHttpNegotiate *this, unsigned int, const wchar_t *, const wchar_t *, wchar_t **);
  HRESULT (__stdcall *GetRootSecurityId)(IHttpNegotiate2 *this, unsigned __int8 *, unsigned int *, unsigned int);
  HRESULT (__stdcall *GetSerializedClientCertContext)(IHttpNegotiate3 *this, unsigned __int8 **, unsigned int *);
};

/* 9953 */
struct __cppobj JfrEvent<EventMetaspaceGCThreshold>
{
};

/* 9954 */
struct __cppobj EventMetaspaceGCThreshold : JfrEvent<EventMetaspaceGCThreshold>
{
};

/* 9955 */
struct __cppobj IAddrTrackingControl : IUnknown
{
};

/* 9956 */
struct /*VFT*/ IAddrTrackingControl_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *EnableCOMDynamicAddrTracking)(IAddrTrackingControl *this);
  HRESULT (__stdcall *DisableCOMDynamicAddrTracking)(IAddrTrackingControl *this);
};

/* 9957 */
struct __cppobj IXTLRuntime : IXMLDOMNode
{
};

/* 9958 */
struct /*VFT*/ IXTLRuntime_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *uniqueID)(IXTLRuntime *this, IXMLDOMNode *, int *);
  HRESULT (__stdcall *depth)(IXTLRuntime *this, IXMLDOMNode *, int *);
  HRESULT (__stdcall *childNumber)(IXTLRuntime *this, IXMLDOMNode *, int *);
  HRESULT (__stdcall *ancestorChildNumber)(IXTLRuntime *this, wchar_t *, IXMLDOMNode *, int *);
  HRESULT (__stdcall *absoluteChildNumber)(IXTLRuntime *this, IXMLDOMNode *, int *);
  HRESULT (__stdcall *formatIndex)(IXTLRuntime *this, int, wchar_t *, wchar_t **);
  HRESULT (__stdcall *formatNumber)(IXTLRuntime *this, long double, wchar_t *, wchar_t **);
  HRESULT (__stdcall *formatDate)(IXTLRuntime *this, tagVARIANT, wchar_t *, tagVARIANT, wchar_t **);
  HRESULT (__stdcall *formatTime)(IXTLRuntime *this, tagVARIANT, wchar_t *, tagVARIANT, wchar_t **);
};

/* 9959 */
struct DDELN
{
  unsigned __int16 unused : 13;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fDeferUpd : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
};

/* 9960 */
struct _LDBL12
{
  unsigned __int8 ld12[12];
};

/* 9961 */
struct MENUITEMTEMPLATE
{
  unsigned __int16 mtOption;
  unsigned __int16 mtID;
  wchar_t mtString[1];
};

/* 9962 */
struct DDEPOKE
{
  unsigned __int16 unused : 13;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fReserved : 2;
  __int16 cfFormat;
  unsigned __int8 Value[1];
};

/* 9963 */
struct DDEUP
{
  unsigned __int16 unused : 12;
  unsigned __int16 fAck : 1;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fReserved : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
  unsigned __int8 rgb[1];
};

/* 9964 */
struct NTFS_VOLUME_DATA_BUFFER
{
  _LARGE_INTEGER VolumeSerialNumber;
  _LARGE_INTEGER NumberSectors;
  _LARGE_INTEGER TotalClusters;
  _LARGE_INTEGER FreeClusters;
  _LARGE_INTEGER TotalReserved;
  unsigned int BytesPerSector;
  unsigned int BytesPerCluster;
  unsigned int BytesPerFileRecordSegment;
  unsigned int ClustersPerFileRecordSegment;
  _LARGE_INTEGER MftValidDataLength;
  _LARGE_INTEGER MftStartLcn;
  _LARGE_INTEGER Mft2StartLcn;
  _LARGE_INTEGER MftZoneStart;
  _LARGE_INTEGER MftZoneEnd;
};

/* 9965 */
struct MOVE_FILE_RECORD_DATA
{
  void *FileHandle;
  _LARGE_INTEGER SourceFileRecord;
  _LARGE_INTEGER TargetFileRecord;
};

/* 9966 */
struct __cppobj IRpcSyntaxNegotiate : IUnknown
{
};

/* 9967 */
struct /*VFT*/ IRpcSyntaxNegotiate_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *NegotiateSyntax)(IRpcSyntaxNegotiate *this, tagRPCOLEMESSAGE *);
};

/* 9968 */
struct __cppobj ISynchronizeContainer : IUnknown
{
};

/* 9969 */
struct /*VFT*/ ISynchronizeContainer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *AddSynchronize)(ISynchronizeContainer *this, ISynchronize *);
  HRESULT (__stdcall *WaitMultiple)(ISynchronizeContainer *this, unsigned int, unsigned int, ISynchronize **);
};

/* 9970 */
struct /*VFT*/ StoreLConditionalNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 9971 */
struct __cppobj StoreLConditionalNode : LoadStoreConditionalNode
{
};

/* 9972 */
struct _CRYPT_CONTEXTS
{
  unsigned int cContexts;
  wchar_t **rgpszContexts;
};

/* 9973 */
struct __cppobj IHttpSecurity : IWindowForBindingUI
{
};

/* 9974 */
struct /*VFT*/ IHttpSecurity_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetWindow)(IWindowForBindingUI *this, const _GUID *, HWND__ **);
  HRESULT (__stdcall *OnSecurityProblem)(IHttpSecurity *this, unsigned int);
};

/* 9975 */
struct __cppobj DeoptimizationMarker : StackObj
{
};

/* 9976 */
struct __cppobj EventShutdown : JfrEvent<EventShutdown>
{
};

/* 9977 */
struct __cppobj EventCodeSweeperStatistics : JfrEvent<EventCodeSweeperStatistics>
{
};

/* 9978 */
struct __cppobj JfrEvent<EventGCReferenceStatistics>
{
};

/* 9979 */
struct __cppobj JfrEvent<EventDoubleFlagChanged>
{
};

/* 9980 */
struct _BCRYPT_PKCS1_PADDING_INFO
{
  const wchar_t *pszAlgId;
};

/* 9981 */
struct __s_GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 9982 */
struct tagMCI_ANIM_UPDATE_PARMS
{
  unsigned int dwCallback;
  tagRECT rc;
  HDC__ *hDC;
};

/* 9983 */
struct __cppobj EventLongFlagChanged : JfrEvent<EventLongFlagChanged>
{
};

/* 9984 */
struct /*VFT*/ ciRetData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 9985 */
struct __cppobj ciRetData : RetData
{
};

/* 9986 */
struct __cppobj IXMLDOMNotation : IXMLDOMNode
{
};

/* 9987 */
struct /*VFT*/ IXMLDOMNotation_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_publicId)(IXMLDOMNotation *this, tagVARIANT *);
  HRESULT (__stdcall *get_systemId)(IXMLDOMNotation *this, tagVARIANT *);
};

/* 9988 */
struct /*VFT*/ AtanDNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
};

/* 9989 */
struct __cppobj AtanDNode : Node
{
};

/* 9990 */
struct __cppobj IXMLDOMEntity : IXMLDOMNode
{
};

/* 9991 */
struct /*VFT*/ IXMLDOMEntity_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_publicId)(IXMLDOMEntity *this, tagVARIANT *);
  HRESULT (__stdcall *get_systemId)(IXMLDOMEntity *this, tagVARIANT *);
  HRESULT (__stdcall *get_notationName)(IXMLDOMEntity *this, wchar_t **);
};

/* 9992 */
struct __cppobj EventTenuringDistribution : JfrEvent<EventTenuringDistribution>
{
};

/* 9993 */
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned int hCryptProv;
};

/* 9994 */
struct __cppobj JfrEvent<EventBiasedLockClassRevocation>
{
};

/* 9995 */
struct __cppobj EventBiasedLockClassRevocation : JfrEvent<EventBiasedLockClassRevocation>
{
};

/* 9996 */
struct __cppobj EventEvacuationFailed : JfrEvent<EventEvacuationFailed>
{
};

/* 9997 */
struct __cppobj IWinInetFileStream : IUnknown
{
};

/* 9998 */
struct /*VFT*/ IWinInetFileStream_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetHandleForUnlock)(IWinInetFileStream *this, unsigned int, unsigned int);
  HRESULT (__stdcall *SetDeleteFile)(IWinInetFileStream *this, unsigned int);
};

/* 9999 */
struct __cppobj IAsyncRpcChannelBuffer : IRpcChannelBuffer2
{
};

/* 10000 */
struct /*VFT*/ IAsyncRpcChannelBuffer_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, const _GUID *);
  HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer *this, tagRPCOLEMESSAGE *);
  HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer *this, unsigned int *, void **);
  HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer *this);
  HRESULT (__stdcall *GetProtocolVersion)(IRpcChannelBuffer2 *this, unsigned int *);
  HRESULT (__stdcall *Send)(IAsyncRpcChannelBuffer *this, tagRPCOLEMESSAGE *, ISynchronize *, unsigned int *);
  HRESULT (__stdcall *Receive)(IAsyncRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *);
  HRESULT (__stdcall *GetDestCtxEx)(IAsyncRpcChannelBuffer *this, tagRPCOLEMESSAGE *, unsigned int *, void **);
};

/* 10001 */
struct _BCRYPT_PROVIDER_NAME
{
  wchar_t *pszProviderName;
};

/* 10002 */
struct __cppobj IThumbnailExtractor : IUnknown
{
};

/* 10003 */
struct /*VFT*/ IThumbnailExtractor_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ExtractThumbnail)(IThumbnailExtractor *this, IStorage *, unsigned int, unsigned int, unsigned int *, unsigned int *, HBITMAP__ **);
  HRESULT (__stdcall *OnFileUpdated)(IThumbnailExtractor *this, IStorage *);
};

/* 10004 */
struct _stat32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};

/* 10005 */
struct __cppobj EventParallelOldGarbageCollection : JfrEvent<EventParallelOldGarbageCollection>
{
};

/* 10006 */
struct _CERT_CHAIN_ENGINE_CONFIG
{
  unsigned int cbSize;
  void *hRestrictedRoot;
  void *hRestrictedTrust;
  void *hRestrictedOther;
  unsigned int cAdditionalStore;
  void **rghAdditionalStore;
  unsigned int dwFlags;
  unsigned int dwUrlRetrievalTimeout;
  unsigned int MaximumCachedCertificates;
  unsigned int CycleDetectionModulus;
};

/* 10007 */
struct __cppobj EventCodeCacheConfiguration : JfrEvent<EventCodeCacheConfiguration>
{
};

/* 10008 */
struct __cppobj JfrEvent<EventYoungGarbageCollection>
{
};

/* 10009 */
struct __cppobj EventYoungGarbageCollection : JfrEvent<EventYoungGarbageCollection>
{
};

/* 10010 */
struct __declspec(align(8)) __finddata64_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  __int64 size;
  char name[260];
};

/* 10011 */
struct __cppobj AsyncIPipeLong : IUnknown
{
};

/* 10012 */
struct /*VFT*/ AsyncIPipeLong_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Begin_Pull)(AsyncIPipeLong *this, unsigned int);
  HRESULT (__stdcall *Finish_Pull)(AsyncIPipeLong *this, int *, unsigned int *);
  HRESULT (__stdcall *Begin_Push)(AsyncIPipeLong *this, int *, unsigned int);
  HRESULT (__stdcall *Finish_Push)(AsyncIPipeLong *this);
};

/* 10013 */
struct __cppobj ITypeFactory : IUnknown
{
};

/* 10014 */
struct /*VFT*/ ITypeFactory_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *CreateFromTypeInfo)(ITypeFactory *this, ITypeInfo *, const _GUID *, IUnknown **);
};

/* 10015 */
struct __cppobj NativeIllegalInstruction : NativeInstruction
{
};

/* 10016 */
struct NCryptKeyName
{
  wchar_t *pszName;
  wchar_t *pszAlgid;
  unsigned int dwLegacyKeySpec;
  unsigned int dwFlags;
};

/* 10017 */
struct __cppobj IInternetHostSecurityManager : IUnknown
{
};

/* 10018 */
struct /*VFT*/ IInternetHostSecurityManager_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetSecurityId)(IInternetHostSecurityManager *this, unsigned __int8 *, unsigned int *, unsigned int);
  HRESULT (__stdcall *ProcessUrlAction)(IInternetHostSecurityManager *this, unsigned int, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int, unsigned int, unsigned int);
  HRESULT (__stdcall *QueryCustomPolicy)(IInternetHostSecurityManager *this, const _GUID *, unsigned __int8 **, unsigned int *, unsigned __int8 *, unsigned int, unsigned int);
};

/* 10019 */
struct _PROPSHEETPAGEA_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $EBE87E7C02BA0FA6B43ABECE118F3C84 ___u3;
  $196C3329479FA964FD47E623CF5615B3 ___u4;
  const char *pszTitle;
  int (__stdcall *pfnDlgProc)(HWND__ *, unsigned int, unsigned int, int);
  int lParam;
  unsigned int (__stdcall *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
  const char *pszHeaderTitle;
  const char *pszHeaderSubTitle;
};

/* 10020 */
struct __cppobj JfrEvent<EventAllocationRequiringGC>
{
};

/* 10021 */
struct __cppobj EventAllocationRequiringGC : JfrEvent<EventAllocationRequiringGC>
{
};

/* 10022 */
struct __cppobj JfrEvent<EventNetworkUtilization>
{
};

/* 10023 */
union _GDI_NONREMOTE::__MIDL_IWinTypes_0002
{
  int hInproc;
  _DWORD_BLOB *hRemote;
};

/* 10024 */
struct _GDI_NONREMOTE
{
  int fContext;
  _GDI_NONREMOTE::__MIDL_IWinTypes_0002 u;
};

/* 10025 */
struct __cppobj EventPSHeapSummary : JfrEvent<EventPSHeapSummary>
{
};

/* 10026 */
struct __cppobj ICreateErrorInfo : IUnknown
{
};

/* 10027 */
struct /*VFT*/ ICreateErrorInfo_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *SetGUID)(ICreateErrorInfo *this, const _GUID *);
  HRESULT (__stdcall *SetSource)(ICreateErrorInfo *this, wchar_t *);
  HRESULT (__stdcall *SetDescription)(ICreateErrorInfo *this, wchar_t *);
  HRESULT (__stdcall *SetHelpFile)(ICreateErrorInfo *this, wchar_t *);
  HRESULT (__stdcall *SetHelpContext)(ICreateErrorInfo *this, unsigned int);
};

/* 10028 */
struct __cppobj EventSafepointBegin : JfrEvent<EventSafepointBegin>
{
};

/* 10029 */
struct __cppobj JfrEvent<EventG1AdaptiveIHOP>
{
};

/* 10030 */
struct __cppobj EventUnsignedIntFlag : JfrEvent<EventUnsignedIntFlag>
{
};

/* 10031 */
struct __cppobj EventMetaspaceSummary : JfrEvent<EventMetaspaceSummary>
{
};

/* 10032 */
struct __cppobj EventThreadEnd : JfrEvent<EventThreadEnd>
{
};

/* 10033 */
struct __cppobj FastUnorderedElapsedCounterSource
{
};

/* 10034 */
struct HSTR__
{
  int unused;
};

/* 10035 */
struct __cppobj EventPromoteObjectInNewPLAB : JfrEvent<EventPromoteObjectInNewPLAB>
{
};

/* 10036 */
struct __cppobj EventGCHeapConfiguration : JfrEvent<EventGCHeapConfiguration>
{
};

/* 10037 */
struct __cppobj EventGCSurvivorConfiguration : JfrEvent<EventGCSurvivorConfiguration>
{
};

/* 10038 */
struct /*VFT*/ TypeVectY_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 10039 */
struct __cppobj TypeVectY : TypeVect
{
};

/* 10040 */
struct _BCRYPT_RSAKEY_BLOB
{
  unsigned int Magic;
  unsigned int BitLength;
  unsigned int cbPublicExp;
  unsigned int cbModulus;
  unsigned int cbPrime1;
  unsigned int cbPrime2;
};

/* 10041 */
struct __cppobj EventGCReferenceStatistics : JfrEvent<EventGCReferenceStatistics>
{
};

/* 10042 */
struct __cppobj EventThreadDump : JfrEvent<EventThreadDump>
{
};

/* 10043 */
struct __cppobj JfrEvent<EventG1HeapRegionTypeChange>
{
};

/* 10044 */
struct _ACL_REVISION_INFORMATION
{
  unsigned int AclRevision;
};

/* 10045 */
struct __cppobj IInternalUnknown : IUnknown
{
};

/* 10046 */
struct /*VFT*/ IInternalUnknown_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *QueryInternalInterface)(IInternalUnknown *this, const _GUID *, void **);
};

/* 10047 */
struct __cppobj EventJavaMonitorWait : JfrEvent<EventJavaMonitorWait>
{
};

/* 10048 */
struct __cppobj EventDoubleFlagChanged : JfrEvent<EventDoubleFlagChanged>
{
};

/* 10049 */
struct _wfinddata32i64_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  __int64 size;
  wchar_t name[260];
};

/* 10050 */
struct __cppobj EventZThreadPhase : JfrEvent<EventZThreadPhase>
{
};

/* 10051 */
struct __cppobj IROTData : IUnknown
{
};

/* 10052 */
struct /*VFT*/ IROTData_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetComparisonData)(IROTData *this, unsigned __int8 *, unsigned int, unsigned int *);
};

/* 10053 */
struct __cppobj JfrEvent<EventGCHeapSummary>
{
};

/* 10054 */
struct __cppobj EventGCHeapSummary : JfrEvent<EventGCHeapSummary>
{
};

/* 10055 */
struct __cppobj EventG1HeapRegionTypeChange : JfrEvent<EventG1HeapRegionTypeChange>
{
};

/* 10056 */
struct __cppobj EventCodeCacheStatistics : JfrEvent<EventCodeCacheStatistics>
{
};

/* 10057 */
struct HMIXEROBJ__
{
  int unused;
};

/* 10058 */
struct __cppobj EventThreadSleep : JfrEvent<EventThreadSleep>
{
};

/* 10059 */
struct /*VFT*/ CmpNNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  const Type *(__thiscall *sub)(SubNode *this, const Type *, const Type *);
  const Type *(__thiscall *add_id)(SubNode *this);
};

/* 10060 */
struct __cppobj CmpNNode : CmpNode
{
};

/* 10061 */
struct __cppobj EventNetworkUtilization : JfrEvent<EventNetworkUtilization>
{
};

/* 10062 */
struct /*VFT*/ ciBranchData_vtbl
{
  int (__thiscall *cell_count)(ProfileData *this);
  bool (__thiscall *is_BitData)(ProfileData *this);
  bool (__thiscall *is_CounterData)(ProfileData *this);
  bool (__thiscall *is_JumpData)(ProfileData *this);
  bool (__thiscall *is_ReceiverTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallData)(ProfileData *this);
  bool (__thiscall *is_RetData)(ProfileData *this);
  bool (__thiscall *is_BranchData)(ProfileData *this);
  bool (__thiscall *is_ArrayData)(ProfileData *this);
  bool (__thiscall *is_MultiBranchData)(ProfileData *this);
  bool (__thiscall *is_ArgInfoData)(ProfileData *this);
  bool (__thiscall *is_CallTypeData)(ProfileData *this);
  bool (__thiscall *is_VirtualCallTypeData)(ProfileData *this);
  bool (__thiscall *is_ParametersTypeData)(ProfileData *this);
  bool (__thiscall *is_SpeculativeTrapData)(ProfileData *this);
  void (__thiscall *post_initialize)(ProfileData *this, BytecodeStream *, MethodData *);
  void (__thiscall *clean_weak_klass_links)(ProfileData *this, BoolObjectClosure *);
  void (__thiscall *clean_weak_method_links)(ProfileData *this);
  void (__thiscall *translate_from)(ProfileData *this, const ProfileData *);
  void (__thiscall *print_data_on)(ProfileData *this, outputStream *, const char *);
};

/* 10063 */
struct __cppobj ciBranchData : BranchData
{
};

/* 10064 */
struct __cppobj IXMLError : IUnknown
{
};

/* 10065 */
struct /*VFT*/ IXMLError_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetErrorInfo)(IXMLError *this, _xml_error *);
};

/* 10066 */
struct __cppobj EventCPUTimeStampCounter : JfrEvent<EventCPUTimeStampCounter>
{
};

/* 10067 */
struct __cppobj EventGCTLABConfiguration : JfrEvent<EventGCTLABConfiguration>
{
};

/* 10068 */
struct __cppobj EventMetaspaceAllocationFailure : JfrEvent<EventMetaspaceAllocationFailure>
{
};

/* 10069 */
struct __cppobj ISoftDistExt : IUnknown
{
};

/* 10070 */
struct /*VFT*/ ISoftDistExt_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *ProcessSoftDist)(ISoftDistExt *this, const wchar_t *, IXMLElement *, _tagSOFTDISTINFO *);
  HRESULT (__stdcall *GetFirstCodeBase)(ISoftDistExt *this, wchar_t **, unsigned int *);
  HRESULT (__stdcall *GetNextCodeBase)(ISoftDistExt *this, wchar_t **, unsigned int *);
  HRESULT (__stdcall *AsyncInstallDistributionUnit)(ISoftDistExt *this, IBindCtx *, void *, unsigned int, _tagCODEBASEHOLD *);
};

/* 10071 */
struct __cppobj EventNativeMethodSample : JfrEvent<EventNativeMethodSample>
{
};

/* 10072 */
struct __cppobj IXMLAttribute : IDispatch
{
};

/* 10073 */
struct /*VFT*/ IXMLAttribute_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_name)(IXMLAttribute *this, wchar_t **);
  HRESULT (__stdcall *get_value)(IXMLAttribute *this, wchar_t **);
};

/* 10074 */
struct __cppobj IPipeLong : IUnknown
{
};

/* 10075 */
struct /*VFT*/ IPipeLong_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Pull)(IPipeLong *this, int *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Push)(IPipeLong *this, int *, unsigned int);
};

/* 10076 */
struct __cppobj ConcreteRegisterImpl : AbstractRegisterImpl
{
};

/* 10077 */
struct /*VFT*/ TypeVectX_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
};

/* 10078 */
struct __cppobj TypeVectX : TypeVect
{
};

/* 10079 */
struct __cppobj NativePopReg : NativeInstruction
{
};

/* 10080 */
struct __cppobj EventThreadStart : JfrEvent<EventThreadStart>
{
};

/* 10081 */
struct __cppobj EventG1AdaptiveIHOP : JfrEvent<EventG1AdaptiveIHOP>
{
};

/* 10082 */
struct __cppobj EventCompilerPhase : JfrEvent<EventCompilerPhase>
{
};

/* 10083 */
struct __cppobj EventG1EvacuationYoungStatistics : JfrEvent<EventG1EvacuationYoungStatistics>
{
};

/* 10084 */
struct __cppobj CMSExpansionCause : AllStatic
{
};

/* 10085 */
struct __cppobj IPipeDouble : IUnknown
{
};

/* 10086 */
struct /*VFT*/ IPipeDouble_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *Pull)(IPipeDouble *this, long double *, unsigned int, unsigned int *);
  HRESULT (__stdcall *Push)(IPipeDouble *this, long double *, unsigned int);
};

/* 10087 */
struct __cppobj EventObjectCountAfterGC : JfrEvent<EventObjectCountAfterGC>
{
};

/* 10088 */
struct TypeDescriptor
{
  unsigned int hash;
  void *spare;
  char name[];
};

/* 10089 */
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 10090 */
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 10091 */
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  const _s_CatchableType *arrayOfCatchableTypes[];
};

/* 10092 */
struct _s_ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  const _s_CatchableTypeArray *pCatchableTypeArray;
};

/* 10093 */
struct EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  const _s_ThrowInfo *pThrowInfo;
};

/* 10094 */
struct EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 10095 */
struct __type_info_node
{
  void *_MemPtr;
  __type_info_node *_Next;
};

/* 10096 */
struct __cppobj <CrtImplementationDetails>::NativeDll
{
};

/* 10097 */
struct $8C32E5D3ED1763EA38B94549972C5F20
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 10098 */
union $A3999B23C5BB4D623CF43E98662959F4
{
  unsigned int Flags;
  $8C32E5D3ED1763EA38B94549972C5F20 s;
};

/* 10099 */
union FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 10100 */
union __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  char m128_i8[16];
  __int16 m128_i16[8];
  int m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned int m128_u32[4];
};

/* 10101 */
union __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  char m64_i8[8];
  __int16 m64_i16[4];
  int m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned int m64_u32[2];
};

/* 10102 */
struct _TEB_ACTIVE_FRAME_CONTEXT
{
  unsigned int Flags;
  const char *FrameName;
};

/* 10103 */
struct _PEB_FREE_BLOCK
{
  _PEB_FREE_BLOCK *Next;
  unsigned int Size;
};

/* 10104 */
struct __declspec(align(4)) _Wx86ThreadState
{
  unsigned int *CallBx86Eip;
  void *DeallocationCpu;
  unsigned __int8 UseKnownWx86Dll;
  char OleStubInvoked;
};

/* 10105 */
struct _TEB_ACTIVE_FRAME
{
  unsigned int Flags;
  _TEB_ACTIVE_FRAME *Previous;
  const _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

/* 10106 */
struct _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  unsigned __int16 *Buffer;
};

/* 10107 */
struct _ACTIVATION_CONTEXT_STACK
{
  unsigned int Flags;
  unsigned int NextCookieSequenceNumber;
  _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
  _LIST_ENTRY FrameListCache;
};

/* 10108 */
struct _PEB_LDR_DATA
{
  unsigned int Length;
  unsigned __int8 Initialized;
  void *SsHandle;
  _LIST_ENTRY InLoadOrderModuleList;
  _LIST_ENTRY InMemoryOrderModuleList;
  _LIST_ENTRY InInitializationOrderModuleList;
  void *EntryInProgress;
};

/* 10109 */
struct _CLIENT_ID
{
  void *UniqueProcess;
  void *UniqueThread;
};

/* 10110 */
struct _KSYSTEM_TIME
{
  unsigned int LowPart;
  int High1Time;
  int High2Time;
};

/* 10111 */
struct _GDI_TEB_BATCH
{
  unsigned int Offset;
  unsigned int HDC;
  unsigned int Buffer[310];
};

/* 10112 */
union __unaligned __declspec(align(4)) $6E34C4DE0EF5E9AEE8F1181D473025D5
{
  volatile _KSYSTEM_TIME TickCount;
  volatile unsigned __int64 TickCountQuad;
};

/* 10113 */
struct __declspec(align(8)) _KUSER_SHARED_DATA
{
  unsigned int TickCountLowDeprecated;
  unsigned int TickCountMultiplier;
  volatile _KSYSTEM_TIME InterruptTime;
  volatile _KSYSTEM_TIME SystemTime;
  volatile _KSYSTEM_TIME TimeZoneBias;
  unsigned __int16 ImageNumberLow;
  unsigned __int16 ImageNumberHigh;
  wchar_t NtSystemRoot[260];
  unsigned int MaxStackTraceDepth;
  unsigned int CryptoExponent;
  unsigned int TimeZoneId;
  unsigned int LargePageMinimum;
  unsigned int Reserved2[7];
  _NT_PRODUCT_TYPE NtProductType;
  unsigned __int8 ProductTypeIsValid;
  unsigned int NtMajorVersion;
  unsigned int NtMinorVersion;
  unsigned __int8 ProcessorFeatures[64];
  unsigned int Reserved1;
  unsigned int Reserved3;
  volatile unsigned int TimeSlip;
  _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  _LARGE_INTEGER SystemExpirationDate;
  unsigned int SuiteMask;
  unsigned __int8 KdDebuggerEnabled;
  volatile unsigned int ActiveConsoleId;
  volatile unsigned int DismountCount;
  unsigned int ComPlusPackage;
  unsigned int LastSystemRITEventTickCount;
  unsigned int NumberOfPhysicalPages;
  unsigned __int8 SafeBootMode;
  unsigned int TraceLogging;
  unsigned __int64 Fill0;
  unsigned __int64 SystemCall[4];
  $6E34C4DE0EF5E9AEE8F1181D473025D5 ___u34;
};

/* 10114 */
struct _PEB
{
  unsigned __int8 InheritedAddressSpace;
  unsigned __int8 ReadImageFileExecOptions;
  unsigned __int8 BeingDebugged;
  unsigned __int8 SpareBool;
  void *Mutant;
  void *ImageBaseAddress;
  _PEB_LDR_DATA *Ldr;
  _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
  void *SubSystemData;
  void *ProcessHeap;
  _RTL_CRITICAL_SECTION *FastPebLock;
  void *SparePtr1;
  void *SparePtr2;
  unsigned int EnvironmentUpdateCount;
  void *KernelCallbackTable;
  unsigned int SystemReserved[1];
  unsigned __int32 ExecuteOptions : 2;
  unsigned __int32 SpareBits : 30;
  _PEB_FREE_BLOCK *FreeList;
  unsigned int TlsExpansionCounter;
  void *TlsBitmap;
  unsigned int TlsBitmapBits[2];
  void *ReadOnlySharedMemoryBase;
  void *ReadOnlySharedMemoryHeap;
  void **ReadOnlyStaticServerData;
  void *AnsiCodePageData;
  void *OemCodePageData;
  void *UnicodeCaseTableData;
  unsigned int NumberOfProcessors;
  unsigned int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  unsigned int HeapSegmentReserve;
  unsigned int HeapSegmentCommit;
  unsigned int HeapDeCommitTotalFreeThreshold;
  unsigned int HeapDeCommitFreeBlockThreshold;
  unsigned int NumberOfHeaps;
  unsigned int MaximumNumberOfHeaps;
  void **ProcessHeaps;
  void *GdiSharedHandleTable;
  void *ProcessStarterHelper;
  unsigned int GdiDCAttributeList;
  _RTL_CRITICAL_SECTION *LoaderLock;
  unsigned int OSMajorVersion;
  unsigned int OSMinorVersion;
  unsigned __int16 OSBuildNumber;
  unsigned __int16 OSCSDVersion;
  unsigned int OSPlatformId;
  unsigned int ImageSubsystem;
  unsigned int ImageSubsystemMajorVersion;
  unsigned int ImageSubsystemMinorVersion;
  unsigned int ImageProcessAffinityMask;
  unsigned int GdiHandleBuffer[34];
  void (__cdecl *PostProcessInitRoutine)();
  void *TlsExpansionBitmap;
  unsigned int TlsExpansionBitmapBits[32];
  unsigned int SessionId;
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  void *pShimData;
  void *AppCompatInfo;
  _UNICODE_STRING CSDVersion;
  const _ACTIVATION_CONTEXT_DATA *ActivationContextData;
  _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
  const _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
  _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
  unsigned int MinimumStackCommit;
  void **FlsCallback;
  _LIST_ENTRY FlsListHead;
  void *FlsBitmap;
  unsigned int FlsBitmapBits[4];
  unsigned int FlsHighIndex;
};

/* 10115 */
struct _TEB
{
  _NT_TIB NtTib;
  void *EnvironmentPointer;
  _CLIENT_ID ClientId;
  void *ActiveRpcHandle;
  void *ThreadLocalStoragePointer;
  _PEB *ProcessEnvironmentBlock;
  unsigned int LastErrorValue;
  unsigned int CountOfOwnedCriticalSections;
  void *CsrClientThread;
  void *Win32ThreadInfo;
  unsigned int User32Reserved[26];
  unsigned int UserReserved[5];
  void *WOW32Reserved;
  unsigned int CurrentLocale;
  unsigned int FpSoftwareStatusRegister;
  void *SystemReserved1[54];
  int ExceptionCode;
  _ACTIVATION_CONTEXT_STACK ActivationContextStack;
  unsigned __int8 SpareBytes1[24];
  _GDI_TEB_BATCH GdiTebBatch;
  _CLIENT_ID RealClientId;
  void *GdiCachedProcessHandle;
  unsigned int GdiClientPID;
  unsigned int GdiClientTID;
  void *GdiThreadLocalInfo;
  unsigned int Win32ClientInfo[62];
  void *glDispatchTable[233];
  unsigned int glReserved1[29];
  void *glReserved2;
  void *glSectionInfo;
  void *glSection;
  void *glTable;
  void *glCurrentRC;
  void *glContext;
  unsigned int LastStatusValue;
  _UNICODE_STRING StaticUnicodeString;
  wchar_t StaticUnicodeBuffer[261];
  void *DeallocationStack;
  void *TlsSlots[64];
  _LIST_ENTRY TlsLinks;
  void *Vdm;
  void *ReservedForNtRpc;
  void *DbgSsReserved[2];
  unsigned int HardErrorMode;
  void *Instrumentation[16];
  void *WinSockData;
  unsigned int GdiBatchCount;
  unsigned __int8 InDbgPrint;
  unsigned __int8 FreeStackOnTermination;
  unsigned __int8 HasFiberData;
  unsigned __int8 IdealProcessor;
  unsigned int Spare3;
  void *ReservedForPerf;
  void *ReservedForOle;
  unsigned int WaitingOnLoaderLock;
  _Wx86ThreadState Wx86Thread;
  void **TlsExpansionSlots;
  unsigned int ImpersonationLocale;
  unsigned int IsImpersonating;
  void *NlsCache;
  void *pShimData;
  unsigned int HeapVirtualAffinity;
  void *CurrentTransactionHandle;
  _TEB_ACTIVE_FRAME *ActiveFrame;
  void *FlsData;
};

/* 10116 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32_2
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int *SecurityCookie;
  void **SEHandlerTable;
  unsigned int SEHandlerCount;
};

/* 10117 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW;

/* 10118 */
typedef void (__stdcall *abort_hook_t)();

/* 10119 */
typedef tagMSGBOXPARAMSW *PMSGBOXPARAMSW;

/* 10120 */
typedef _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;

/* 10121 */
typedef void (__stdcall *WAITORTIMERCALLBACKFUNC)(void *, unsigned __int8);

/* 10122 */
typedef HDC__ *HDC;

/* 10123 */
typedef tagMODULEENTRY32 *PMODULEENTRY32;

/* 10124 */
typedef tagAUXCAPS2A *NPAUXCAPS2A;

/* 10125 */
typedef tagMIXERCAPSA *PMIXERCAPS;

/* 10126 */
typedef tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;

/* 10127 */
typedef tagAUXCAPS2A *LPAUXCAPS2A;

/* 10128 */
typedef _PORT_INFO_1W *LPPORT_INFO_1W;

/* 10129 */
typedef _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;

/* 10130 */
typedef _PORT_INFO_3W *LPPORT_INFO_3W;

/* 10131 */
typedef _PRINTER_INFO_1A *LPPRINTER_INFO_1A;

/* 10132 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(void *, const _CERT_STORE_PROV_FIND_INFO *, const _CERT_CONTEXT *, unsigned int, void **, const _CERT_CONTEXT **);

/* 10133 */
typedef _PORT_INFO_2W *LPPORT_INFO_2W;

/* 10134 */
typedef _CTL_ENTRY *PCTL_ENTRY;

/* 10135 */
typedef tagAUXCAPS2W *LPAUXCAPS2W;

/* 10136 */
typedef _DOC_INFO_3A *PDOC_INFO_3A;

/* 10137 */
typedef tagEVENTMSG *PEVENTMSGMSG;

/* 10139 */
typedef tagAUXCAPS2W *NPAUXCAPS2W;

/* 10140 */
typedef PPM_THERMAL_POLICY_EVENT *PPPM_THERMAL_POLICY_EVENT;

/* 10141 */
typedef unsigned __int8 *LPBYTE;

/* 10142 */
typedef IUnknown *LPUNKNOWN;

/* 10143 */
typedef _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO;

/* 10144 */
typedef _PDH_COUNTER_PATH_ELEMENTS_A *PPDH_COUNTER_PATH_ELEMENTS_A;

/* 10145 */
typedef tagMIXERCAPS2A *PMIXERCAPS2;

/* 10146 */
typedef const TypeFunc *(__cdecl *TypeFunc_generator)();

/* 10147 */
typedef _TRANSACTION_LIST_ENTRY *PTRANSACTION_LIST_ENTRY;

/* 10148 */
typedef void __stdcall RPCNOTIFICATION_ROUTINE(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);

/* 10149 */
typedef unsigned int HCRYPTHASH;

/* 10150 */
typedef unsigned int (__stdcall *LPOFNHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 10151 */
typedef SCARD_READERSTATEA *LPSCARD_READERSTATEA;

/* 10152 */
typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

/* 10153 */
typedef _PRINTER_INFO_1W *LPPRINTER_INFO_1W;

/* 10154 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFO;

/* 10155 */
typedef unsigned int bm_word_t;

/* 10156 */
typedef sockaddr *PSOCKADDR;

/* 10157 */
typedef void (__stdcall *ZipClose_t)(void **);

/* 10158 */
typedef _TRANSACTION_NOTIFICATION *PTRANSACTION_NOTIFICATION;

/* 10159 */
typedef tagEMRLINETO *PEMRLINETO;

/* 10160 */
typedef _CRYPT_MASK_GEN_ALGORITHM *PCRYPT_MASK_GEN_ALGORITHM;

/* 10161 */
typedef tagEVENTMSG *PEVENTMSG;

/* 10162 */
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;

/* 10163 */
typedef HKEY__ **PHKEY;

/* 10164 */
typedef tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;

/* 10165 */
typedef _DISK_GEOMETRY *PDISK_GEOMETRY;

/* 10166 */
typedef const char *LPCTCH;

/* 10167 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRASTA;

/* 10168 */
typedef unsigned __int16 PROPVAR_PAD2;

/* 10169 */
typedef _jobject *jthreadGroup;

/* 10170 */
typedef _RIP_INFO *LPRIP_INFO;

/* 10171 */
typedef tagKERNINGPAIR *LPKERNINGPAIR;

/* 10172 */
typedef _CRYPTNET_URL_CACHE_FLUSH_INFO *PCRYPTNET_URL_CACHE_FLUSH_INFO;

/* 10173 */
typedef _OSVERSIONINFOW *POSVERSIONINFOW;

/* 10174 */
typedef tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMS;

/* 10175 */
typedef tagVARDESC *LPVARDESC;

/* 10176 */
typedef tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;

/* 10177 */
typedef int *LPFXPT16DOT16;

/* 10178 */
typedef _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;

/* 10179 */
typedef _DOC_INFO_2A *PDOC_INFO_2A;

/* 10180 */
typedef void (__stdcall *jvmtiStartFunction)(_jvmtiEnv *, JNIEnv_ *, void *);

/* 10181 */
typedef _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W;

/* 10182 */
typedef _PORT_INFO_3A *PPORT_INFO_3;

/* 10183 */
typedef _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;

/* 10184 */
typedef tagHIGHCONTRASTW *LPHIGHCONTRASTW;

/* 10185 */
typedef tagRAWHID *PRAWHID;

/* 10186 */
typedef tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;

/* 10187 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIER;

/* 10188 */
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

/* 10189 */
typedef HWINSTA__ *HWINSTA;

/* 10190 */
typedef _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;

/* 10191 */
typedef _OSVERSIONINFOA *POSVERSIONINFOA;

/* 10192 */
typedef unsigned __int64 *PDWORDLONG;

/* 10193 */
typedef _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;

/* 10194 */
typedef tagMINMAXINFO *LPMINMAXINFO;

/* 10195 */
typedef _currencyfmtA *LPCURRENCYFMTA;

/* 10196 */
typedef _ADDJOB_INFO_1A *LPADDJOB_INFO_1;

/* 10197 */
typedef _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;

/* 10198 */
typedef ITypeLib2 *LPTYPELIB2;

/* 10199 */
typedef tagMIXERCAPSA *PMIXERCAPSA;

/* 10200 */
typedef tagMIXERLINEA *LPMIXERLINEA;

/* 10201 */
typedef tagAUXCAPS2A *NPAUXCAPS2;

/* 10202 */
typedef tagEMREXTFLOODFILL *PEMREXTFLOODFILL;

/* 10203 */
typedef tagAUXCAPS2A *LPAUXCAPS2;

/* 10204 */
typedef _FILEMUIINFO *PFILEMUIINFO;

/* 10205 */
typedef _BIDI_RESPONSE_CONTAINER *PBIDI_RESPONSE_CONTAINER;

/* 10206 */
typedef _TRIVERTEX *PTRIVERTEX;

/* 10207 */
typedef _BIN_RANGE *PBIN_RANGE;

/* 10208 */
typedef tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;

/* 10209 */
typedef _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;

/* 10210 */
typedef void *LOCALHANDLE;

/* 10211 */
typedef _PRINTER_INFO_1A *LPPRINTER_INFO_1;

/* 10212 */
typedef unsigned int DUIterator;

/* 10213 */
typedef int (__stdcall *FARPROC)();

/* 10214 */
typedef _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;

/* 10215 */
typedef int s4;

/* 10216 */
typedef tagMIXERCAPSW *PMIXERCAPSW;

/* 10217 */
typedef _DOC_INFO_1A *PDOC_INFO_1A;

/* 10218 */
typedef _PEB_LDR_DATA *PPEB_LDR_DATA;

/* 10219 */
typedef _BINARY_CONTAINER *PBINARY_CONTAINER;

/* 10220 */
typedef _SYSTEM_INFO *LPSYSTEM_INFO;

/* 10221 */
typedef tagMODULEENTRY32W *PMODULEENTRY32W;

/* 10222 */
typedef jvmtiIterationControl (__stdcall *jvmtiObjectReferenceCallback)(jvmtiObjectReferenceKind, __int64, __int64, __int64 *, __int64, int, void *);

/* 10223 */
typedef DLGTEMPLATE *LPDLGTEMPLATEA;

/* 10224 */
typedef _EXCEPTION_RECORD *LPEXCEPTION_RECORD;

/* 10225 */
typedef unsigned int u4;

/* 10226 */
typedef _BIDI_RESPONSE_CONTAINER *LPBIDI_RESPONSE_CONTAINER;

/* 10227 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;

/* 10228 */
typedef tagOLERENDER *LPOLERENDER;

/* 10229 */
typedef tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;

/* 10230 */
typedef POWER_ACTION *PPOWER_ACTION;

/* 10231 */
typedef tagGUITHREADINFO *LPGUITHREADINFO;

/* 10232 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRAST;

/* 10233 */
typedef _PORT_INFO_3W *PPORT_INFO_3W;

/* 10234 */
typedef _PRINTER_INFO_8A *PPRINTER_INFO_8;

/* 10235 */
typedef _PRINTER_INFO_9A *PPRINTER_INFO_9;

/* 10236 */
typedef _PRINTER_INFO_6 *PPRINTER_INFO_6;

/* 10237 */
typedef void *HCERTSTOREPROV;

/* 10238 */
typedef _PRINTER_INFO_7A *PPRINTER_INFO_7;

/* 10239 */
typedef _PRINTER_INFO_4A *PPRINTER_INFO_4;

/* 10240 */
typedef _PRINTER_INFO_5A *PPRINTER_INFO_5;

/* 10241 */
typedef _PRINTER_INFO_2A *PPRINTER_INFO_2;

/* 10242 */
typedef _PRINTER_INFO_3 *PPRINTER_INFO_3;

/* 10243 */
typedef tagGCP_RESULTSW *LPGCP_RESULTSW;

/* 10244 */
typedef _UMS_CREATE_THREAD_ATTRIBUTES *PUMS_CREATE_THREAD_ATTRIBUTES;

/* 10245 */
typedef tagHELPINFO *LPHELPINFO;

/* 10246 */
typedef _PRINTER_INFO_1A *PPRINTER_INFO_1;

/* 10247 */
typedef char *PTCH;

/* 10248 */
typedef tagCANDIDATELIST *PCANDIDATELIST;

/* 10249 */
typedef _NCB *PNCB;

/* 10250 */
typedef _STARTUPINFOA *LPSTARTUPINFOA;

/* 10251 */
typedef _PORT_INFO_3A *PPORT_INFO_3A;

/* 10252 */
typedef unsigned int NOTIFICATION_MASK;

/* 10253 */
typedef tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMS;

/* 10254 */
typedef char *(__cdecl *to_c_string_fn_t)(JNIEnv_ *, _jstring *, unsigned __int8 *);

/* 10255 */
typedef unsigned __int64 *PUINT64;

/* 10256 */
typedef tagBITMAP *NPBITMAP;

/* 10257 */
typedef int (__cdecl *OSThreadStartFunc)(void *);

/* 10258 */
typedef tagBITMAP *LPBITMAP;

/* 10259 */
typedef unsigned __int8 (__stdcall *PREGISTERCLASSNAMEW)(const wchar_t *);

/* 10260 */
typedef tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;

/* 10261 */
typedef _OSVERSIONINFOA *POSVERSIONINFO;

/* 10262 */
typedef tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;

/* 10263 */
typedef int (__stdcall *DRIVERPROC)(unsigned int, HDRVR__ *, unsigned int, int, int);

/* 10264 */
typedef unsigned int uintx;

/* 10265 */
typedef void *HGDIOBJ;

/* 10266 */
typedef __int64 jlocation;

/* 10267 */
typedef tagINPUT *PINPUT;

/* 10268 */
typedef void *(__cdecl *decode_func)(void *, void *, void *(__cdecl *)(void *, const char *, void *), void *, int (*)(void *, const char *, ...), void *, const char *);

/* 10269 */
typedef _userHMETAFILE *wireHMETAFILE;

/* 10270 */
typedef void *BCRYPT_KEY_HANDLE;

/* 10271 */
typedef _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;

/* 10272 */
typedef tagRAWKEYBOARD *LPRAWKEYBOARD;

/* 10273 */
typedef PPM_IDLE_STATE_BUCKET_EX *PPPM_IDLE_STATE_BUCKET_EX;

/* 10274 */
typedef _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;

/* 10275 */
typedef unsigned int NCRYPT_KEY_HANDLE;

/* 10276 */
typedef _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;

/* 10277 */
typedef tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;

/* 10278 */
typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

/* 10279 */
typedef tagAXISINFOA *PAXISINFOA;

/* 10280 */
typedef tagMIXERCAPS2A *LPMIXERCAPS2;

/* 10281 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEX;

/* 10282 */
typedef _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;

/* 10283 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(void *, const _CTL_CONTEXT *, void *, unsigned int);

/* 10284 */
typedef tagSCROLLBARINFO *PSCROLLBARINFO;

/* 10285 */
typedef IInternetProtocol *LPIINTERNETPROTOCOL;

/* 10286 */
typedef _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;

/* 10287 */
typedef fd_set *PFD_SET;

/* 10288 */
typedef _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;

/* 10289 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRIC;

/* 10290 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;

/* 10291 */
typedef _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;

/* 10292 */
typedef _MONITOR_INFO_2W *LPMONITOR_INFO_2W;

/* 10293 */
typedef unsigned int __stdcall PM_QUERY_PROC(unsigned int *, void **, unsigned int *, unsigned int *);

/* 10294 */
typedef _STORAGE_PRIORITY_HINT_SUPPORT *PSTORAGE_PRIORITY_HINT_SUPPORT;

/* 10295 */
typedef void (__stdcall *jvmtiEventGarbageCollectionStart)(_jvmtiEnv *);

/* 10296 */
typedef HMIXEROBJ__ **LPHMIXEROBJ;

/* 10297 */
typedef _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;

/* 10298 */
typedef unsigned int *PULONG32;

/* 10299 */
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(unsigned int, wchar_t **);

/* 10300 */
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;

/* 10301 */
typedef _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

/* 10302 */
typedef unsigned int NET_IFINDEX;

/* 10303 */
typedef tagPARAMDESC *LPPARAMDESC;

/* 10304 */
typedef IErrorLog *LPERRORLOG;

/* 10305 */
typedef HCONV__ *HCONV;

/* 10306 */
typedef tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;

/* 10307 */
typedef tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;

/* 10308 */
typedef tagEMRTEXT *PEMRTEXT;

/* 10309 */
typedef int *PBOOL;

/* 10310 */
typedef _MONITOR_INFO_2A *LPMONITOR_INFO_2A;

/* 10311 */
typedef ARRAY_INFO *PARRAY_INFO;

/* 10312 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFO;

/* 10313 */
typedef HICON__ *HCURSOR;

/* 10314 */
typedef tagPOINT *PPOINT;

/* 10315 */
typedef _IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

/* 10316 */
typedef protoent *LPPROTOENT;

/* 10317 */
typedef float FLOAT;

/* 10318 */
typedef bool _Bool;

/* 10319 */
typedef _PERF_BIN *PPERF_BIN;

/* 10320 */
typedef _TOKEN_ORIGIN *PTOKEN_ORIGIN;

/* 10321 */
typedef _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;

/* 10322 */
typedef tagVARIANT *LPVARIANT;

/* 10323 */
typedef _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;

/* 10324 */
typedef unsigned __int8 uint8;

/* 10325 */
typedef unsigned __int8 UINT8;

/* 10326 */
typedef RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;

/* 10327 */
typedef unsigned int SAVEPOINT_ID;

/* 10328 */
typedef unsigned __int64 julong;

/* 10329 */
typedef char *PINT8;

/* 10330 */
typedef tagMIXERCAPS2W *LPMIXERCAPS2W;

/* 10331 */
typedef _OSVERSIONINFOEXW *POSVERSIONINFOEXW;

/* 10332 */
typedef void (__stdcall *PFN_RPCNOTIFICATION_ROUTINE)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);

/* 10333 */
typedef unsigned int (__stdcall *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);

/* 10334 */
typedef int jint;

/* 10335 */
typedef _CRL_ENTRY *PCRL_ENTRY;

/* 10336 */
typedef void (__stdcall *exit_hook_t)(int);

/* 10337 */
typedef tagHEAPLIST32 *PHEAPLIST32;

/* 10338 */
typedef void (__stdcall *jvmtiEventMonitorContendedEnter)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *);

/* 10339 */
typedef float jfloat;

/* 10340 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

/* 10341 */
typedef IClassFactory *LPCLASSFACTORY;

/* 10342 */
typedef _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;

/* 10343 */
typedef tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;

/* 10344 */
typedef _OCSP_BASIC_RESPONSE_INFO *POCSP_BASIC_RESPONSE_INFO;

/* 10345 */
typedef tagMIXERCAPS2A *LPMIXERCAPS2A;

/* 10346 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEXA;

/* 10347 */
typedef tagEMRGRADIENTFILL *PEMRGRADIENTFILL;

/* 10348 */
typedef _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;

/* 10349 */
typedef float *PFLOAT;

/* 10350 */
typedef unsigned int uint;

/* 10351 */
typedef unsigned int UINT;

/* 10352 */
typedef void (__stdcall *LPDRVCALLBACK)(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 10353 */
typedef PPM_WMI_PERF_STATES *PPPM_WMI_PERF_STATES;

/* 10354 */
typedef unsigned int *PULONG;

/* 10355 */
typedef tagLOCALESIGNATURE *PLOCALESIGNATURE;

/* 10356 */
typedef _BCryptBufferDesc *PBCryptBufferDesc;

/* 10357 */
typedef unsigned __int16 BAD_TRACK_NUMBER;

/* 10358 */
typedef _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;

/* 10359 */
typedef int *PINT;

/* 10360 */
typedef _PSAPI_WORKING_SET_INFORMATION *PPSAPI_WORKING_SET_INFORMATION;

/* 10361 */
typedef _RATE_QUOTA_LIMIT *PRATE_QUOTA_LIMIT;

/* 10362 */
typedef tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;

/* 10363 */
typedef _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;

/* 10364 */
typedef char __C_ASSERT__[1];

/* 10365 */
typedef tagEMRPOLYLINE *PEMRPOLYLINE;

/* 10366 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;

/* 10367 */
typedef tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;

/* 10368 */
typedef hostent *LPHOSTENT;

/* 10369 */
typedef _EFS_HASH_BLOB *PEFS_HASH_BLOB;

/* 10370 */
typedef _GLYPHMETRICS *LPGLYPHMETRICS;

/* 10371 */
typedef long double jdouble;

/* 10372 */
typedef _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;

/* 10373 */
typedef tagPOINTS *PPOINTS;

/* 10374 */
typedef _TP_TIMER *PTP_TIMER;

/* 10375 */
typedef HRGN__ *HRGN;

/* 10376 */
typedef unsigned int EXECUTION_STATE;

/* 10377 */
typedef unsigned int RPC_LENGTH;

/* 10378 */
typedef _GET_LENGTH_INFORMATION *PGET_LENGTH_INFORMATION;

/* 10379 */
typedef _MONITOR_INFO_2A *LPMONITOR_INFO_2;

/* 10380 */
typedef _POINTL *PPOINTL;

/* 10381 */
typedef tagWNDCLASSEXW *PWNDCLASSEXW;

/* 10382 */
typedef _BCRYPT_INTERFACE_VERSION *PBCRYPT_INTERFACE_VERSION;

/* 10383 */
typedef tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;

/* 10384 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(void *, unsigned int, unsigned int, const void *);

/* 10385 */
typedef _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;

/* 10386 */
typedef _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1;

/* 10387 */
typedef unsigned int HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;

/* 10388 */
typedef _numberfmtW *LPNUMBERFMTW;

/* 10389 */
typedef tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;

/* 10390 */
typedef _PROCESSOR_GROUP_INFO *PPROCESSOR_GROUP_INFO;

/* 10391 */
typedef unsigned int FOURCC;

/* 10392 */
typedef midihdr_tag *LPMIDIHDR;

/* 10393 */
typedef _FLOAT128 *PFLOAT128;

/* 10394 */
typedef _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;

/* 10395 */
typedef _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;

/* 10396 */
typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA;

/* 10397 */
typedef _CHANGER_DEVICE_PROBLEM_TYPE *PCHANGER_DEVICE_PROBLEM_TYPE;

/* 10398 */
typedef midihdr_tag *NPMIDIHDR;

/* 10399 */
typedef int *LPFXPT2DOT30;

/* 10400 */
typedef HMONITOR__ *HMONITOR;

/* 10401 */
typedef tagHELPWININFOA *PHELPWININFOA;

/* 10402 */
typedef HBRUSH__ *HBRUSH;

/* 10403 */
typedef _RGNDATAHEADER *PRGNDATAHEADER;

/* 10404 */
typedef tagIMECHARPOSITION *PIMECHARPOSITION;

/* 10405 */
typedef _TEB_ACTIVE_FRAME *PTEB_ACTIVE_FRAME;

/* 10406 */
typedef PPM_WMI_LEGACY_PERFSTATE *PPPM_WMI_LEGACY_PERFSTATE;

/* 10407 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUS;

/* 10408 */
typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

/* 10409 */
typedef jzentry *(__stdcall *GetNextEntry_t)(void **, int);

/* 10410 */
typedef _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO;

/* 10411 */
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;

/* 10412 */
typedef _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;

/* 10413 */
typedef tagMETAHEADER *PMETAHEADER;

/* 10414 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;

/* 10415 */
typedef int LCSCSTYPE;

/* 10416 */
typedef _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

/* 10417 */
typedef int (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC)(unsigned int, _CRYPT_PRIVATE_KEY_INFO *, unsigned int, void *);

/* 10418 */
typedef tagHELPWININFOW *PHELPWININFOW;

/* 10419 */
typedef _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2;

/* 10420 */
typedef int LCSGAMUTMATCH;

/* 10421 */
typedef tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;

/* 10422 */
typedef int (__stdcall *HOOKPROC)(int, unsigned int, int);

/* 10423 */
typedef _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;

/* 10424 */
typedef tagEMRFILLRGN *PEMRFILLRGN;

/* 10425 */
typedef HLSURF__ *HLSURF;

/* 10426 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRICA;

/* 10427 */
typedef _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;

/* 10428 */
typedef RPC_DISPATCH_TABLE *PRPC_DISPATCH_TABLE;

/* 10429 */
typedef _COMMCONFIG *LPCOMMCONFIG;

/* 10430 */
typedef tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;

/* 10431 */
typedef unsigned __int16 PROPVAR_PAD3;

/* 10432 */
typedef _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1;

/* 10433 */
typedef _CERT_NAME_VALUE *PCERT_NAME_VALUE;

/* 10434 */
typedef _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;

/* 10435 */
typedef int __stdcall RPC_IF_CALLBACK_FN(void *, void *);

/* 10436 */
typedef _OCSP_BASIC_SIGNED_RESPONSE_INFO *POCSP_BASIC_SIGNED_RESPONSE_INFO;

/* 10437 */
typedef _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;

/* 10438 */
typedef _RGNDATA *LPRGNDATA;

/* 10439 */
typedef _RGNDATA *NPRGNDATA;

/* 10440 */
typedef _PORT_INFO_2A *PPORT_INFO_2;

/* 10441 */
typedef unsigned int *LPSCARDCONTEXT;

/* 10442 */
typedef tagNEWTEXTMETRICW *PNEWTEXTMETRICW;

/* 10443 */
typedef _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION;

/* 10444 */
typedef ICreateErrorInfo *LPCREATEERRORINFO;

/* 10445 */
typedef IParseDisplayName *LPPARSEDISPLAYNAME;

/* 10446 */
typedef _RTL_UMS_SCHEDULER_REASON *PRTL_UMS_SCHEDULER_REASON;

/* 10447 */
typedef tagMONCONVSTRUCT *PMONCONVSTRUCT;

/* 10448 */
typedef tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;

/* 10449 */
typedef unsigned int COLORREF;

/* 10450 */
typedef void *(__stdcall *GENERIC_BINDING_ROUTINE)(void *);

/* 10451 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(void *, const _CTL_CONTEXT *, unsigned int);

/* 10452 */
typedef wchar_t *PWCHAR;

/* 10453 */
typedef _CERT_CONTEXT *PCERT_CONTEXT;

/* 10454 */
typedef ICodeInstall *LPCODEINSTALL;

/* 10455 */
typedef tagMULTIKEYHELPW *PMULTIKEYHELPW;

/* 10456 */
typedef void (*dll_func)(...);

/* 10457 */
typedef tagHELPWININFOA *PHELPWININFO;

/* 10458 */
typedef _PROCESS_MEMORY_COUNTERS_EX *PPROCESS_MEMORY_COUNTERS_EX;

/* 10459 */
typedef OPENCARDNAMEW *POPENCARDNAMEW;

/* 10460 */
typedef tagEMRPIXELFORMAT *PEMRPIXELFORMAT;

/* 10461 */
typedef _currencyfmtA *LPCURRENCYFMT;

/* 10462 */
typedef _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;

/* 10463 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 10464 */
typedef _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W;

/* 10465 */
typedef _WGLSWAP *LPWGLSWAP;

/* 10466 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(void *, const _CRL_CONTEXT *, unsigned int, const _CRL_CONTEXT **);

/* 10467 */
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);

/* 10468 */
typedef _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;

/* 10469 */
typedef unsigned __int64 _ULonglong;

/* 10470 */
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION;

/* 10471 */
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, unsigned __int8 *, void *);

/* 10472 */
typedef _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A;

/* 10473 */
typedef unsigned __int64 *PULONGLONG;

/* 10474 */
typedef tagSAFEARRAY *LPSAFEARRAY;

/* 10475 */
typedef IPersistFile *LPPERSISTFILE;

/* 10476 */
typedef int (__cdecl *CmpKey)(const void *, const void *);

/* 10477 */
typedef DLGTEMPLATE *LPDLGTEMPLATE;

/* 10478 */
typedef IAuthenticateEx *LPAUTHENTICATIONEX;

/* 10479 */
typedef _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;

/* 10480 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRIC;

/* 10481 */
typedef unsigned __int8 (__cdecl *verifier_fn_t)(JNIEnv_ *, _jclass *, char *, int);

/* 10482 */
typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

/* 10483 */
typedef void (__stdcall *jvmtiEventClassLoad)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jclass *);

/* 10484 */
typedef _PORT_INFO_2W *PPORT_INFO_2W;

/* 10485 */
typedef const _ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

/* 10486 */
typedef _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;

/* 10487 */
typedef tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMS;

/* 10488 */
typedef void (__stdcall *PFN_SC_NOTIFY_CALLBACK)(void *);

/* 10489 */
typedef tagACTCTXW *PACTCTXW;

/* 10490 */
typedef unsigned __int16 jushort;

/* 10491 */
typedef SET_POWER_SETTING_VALUE *PSET_POWER_SETTING_VALUE;

/* 10492 */
typedef tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;

/* 10493 */
typedef _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;

/* 10494 */
typedef unsigned __int16 *PUSHORT;

/* 10495 */
typedef _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;

/* 10496 */
typedef _ACL *PACL;

/* 10497 */
typedef tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;

/* 10498 */
typedef _PORT_INFO_2A *PPORT_INFO_2A;

/* 10499 */
typedef void (__stdcall *WAITORTIMERCALLBACK)(void *, unsigned __int8);

/* 10500 */
typedef tagTEXTMETRICA *PTEXTMETRICA;

/* 10501 */
typedef tagEMRGDICOMMENT *PEMRGDICOMMENT;

/* 10502 */
typedef int (__stdcall *ICMENUMPROCA)(char *, int);

/* 10503 */
typedef IOleContainer *LPOLECONTAINER;

/* 10504 */
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;

/* 10505 */
typedef _STARTUPINFOA *LPSTARTUPINFO;

/* 10506 */
typedef tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;

/* 10507 */
typedef _SCARD_ATRMASK *PSCARD_ATRMASK;

/* 10508 */
typedef const tagRAWINPUTDEVICE *PCRAWINPUTDEVICE;

/* 10509 */
typedef __int16 INT16;

/* 10510 */
typedef HMIXEROBJ__ *HMIXEROBJ;

/* 10511 */
typedef void (__stdcall *jvmtiEventResourceExhausted)(_jvmtiEnv *, JNIEnv_ *, int, const void *, const char *);

/* 10512 */
typedef const tagMENUITEMINFOW *LPCMENUITEMINFOW;

/* 10513 */
typedef unsigned int __stdcall PM_COLLECT_PROC(wchar_t *, void **, unsigned int *, unsigned int *);

/* 10514 */
typedef unsigned int *PSECURITY_INFORMATION;

/* 10515 */
typedef joyinfoex_tag *LPJOYINFOEX;

/* 10516 */
typedef int _off_t;

/* 10517 */
typedef joyinfoex_tag *NPJOYINFOEX;

/* 10518 */
typedef _PARTITION_INFORMATION_GPT *PPARTITION_INFORMATION_GPT;

/* 10519 */
typedef FloatRegisterImpl *FloatRegister;

/* 10520 */
typedef tagHANDLETABLE *LPHANDLETABLE;

/* 10521 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(void *, const _CTL_CONTEXT *, unsigned int, const _CTL_CONTEXT **);

/* 10522 */
typedef _CMS_KEY_INFO *PCMS_KEY_INFO;

/* 10523 */
typedef _jstring *jstring;

/* 10524 */
typedef tagAXISINFOA *PAXISINFO;

/* 10525 */
typedef _INPUT_RECORD *PINPUT_RECORD;

/* 10526 */
typedef tagRAWINPUTDEVICE *PRAWINPUTDEVICE;

/* 10527 */
typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

/* 10528 */
typedef int LRESULT;

/* 10529 */
typedef _userSTGMEDIUM *wireASYNC_STGMEDIUM;

/* 10531 */
typedef VOLUME_BITMAP_BUFFER *PVOLUME_BITMAP_BUFFER;

/* 10532 */
typedef unsigned int *PKAFFINITY;

/* 10533 */
typedef tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;

/* 10534 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCT;

/* 10535 */
typedef int GEOID;

/* 10536 */
typedef _DRAGINFOA *LPDRAGINFOA;

/* 10537 */
typedef tagBIND_OPTS *LPBIND_OPTS;

/* 10538 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;

/* 10539 */
typedef int (__stdcall *CODEPAGE_ENUMPROCW)(wchar_t *);

/* 10540 */
typedef _DRIVE_LAYOUT_INFORMATION_GPT *PDRIVE_LAYOUT_INFORMATION_GPT;

/* 10541 */
typedef _DRAGINFOW *LPDRAGINFOW;

/* 10542 */
typedef int (__stdcall *jvmtiPrimitiveFieldCallback)(jvmtiHeapReferenceKind, const _jvmtiHeapReferenceInfo *, __int64, __int64 *, jvalue, jvmtiPrimitiveType, void *);

/* 10543 */
typedef _SENDCMDINPARAMS *PSENDCMDINPARAMS;

/* 10544 */
typedef unsigned int *PDWORD;

/* 10545 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;

/* 10546 */
typedef LIST_ENTRY32 *PLIST_ENTRY32;

/* 10547 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;

/* 10548 */
typedef void *(__cdecl *decode_func_virtual)(unsigned int, unsigned int, unsigned __int8 *, unsigned int, void *(__cdecl *)(void *, const char *, void *), void *, int (*)(void *, const char *, ...), void *, const char *, int);

/* 10549 */
typedef unsigned int LCTYPE;

/* 10550 */
typedef int (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *, unsigned int, void *, unsigned int *);

/* 10551 */
typedef wchar_t *PUNZWCH;

/* 10552 */
typedef waveformat_tag *PWAVEFORMAT;

/* 10553 */
typedef _DISK_DETECTION_INFO *PDISK_DETECTION_INFO;

/* 10554 */
typedef char *PUNZTCH;

/* 10555 */
typedef unsigned int *PDWORD32;

/* 10556 */
typedef int (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(const _CERT_CONTEXT *, void *);

/* 10557 */
typedef tagINTERFACEDATA *LPINTERFACEDATA;

/* 10558 */
typedef unsigned int uintptr_t;

/* 10559 */
typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(void *, void *);

/* 10560 */
typedef tagRECONVERTSTRING *PRECONVERTSTRING;

/* 10561 */
typedef _DRIVERSTATUS *PDRIVERSTATUS;

/* 10562 */
typedef tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;

/* 10563 */
typedef _NAME_BUFFER *PNAME_BUFFER;

/* 10564 */
typedef __int64 LONG64;

/* 10565 */
typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 10566 */
typedef const _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 10567 */
typedef _tagADDRESS *LPADDRESS;

/* 10568 */
typedef USN_JOURNAL_DATA *PUSN_JOURNAL_DATA;

/* 10569 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRIC;

/* 10570 */
typedef tagWINDOWPLACEMENT *LPWINDOWPLACEMENT;

/* 10571 */
typedef _XSAVE_AREA_HEADER *PXSAVE_AREA_HEADER;

/* 10572 */
typedef tagLOGBRUSH *LPPATTERN;

/* 10573 */
typedef const _CRL_CONTEXT *PCCRL_CONTEXT;

/* 10574 */
typedef tagLOGBRUSH *NPPATTERN;

/* 10575 */
typedef _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;

/* 10576 */
typedef tagCURSORSHAPE *LPCURSORSHAPE;

/* 10577 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PCRITICAL_SECTION_DEBUG;

/* 10578 */
typedef void (__stdcall *CS_TYPE_TO_NETCS_ROUTINE)(void *, unsigned int, void *, unsigned int, unsigned __int8 *, unsigned int *, unsigned int *);

/* 10579 */
typedef void (__stdcall *PRTL_UMS_SCHEDULER_ENTRY_POINT)(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);

/* 10580 */
typedef _RECTL *PRECTL;

/* 10581 */
typedef unsigned int RPCOLEDATAREP;

/* 10582 */
typedef FIND_BY_SID_OUTPUT *PFIND_BY_SID_OUTPUT;

/* 10583 */
typedef _DRAGINFOA *LPDRAGINFO;

/* 10584 */
typedef void (__stdcall *WORKERCALLBACKFUNC)(void *);

/* 10585 */
typedef const _CERT_CHAIN_ELEMENT *PCCERT_CHAIN_ELEMENT;

/* 10586 */
typedef unsigned int *PEXECUTION_STATE;

/* 10587 */
typedef tagMONITORINFOEXW *LPMONITORINFOEXW;

/* 10588 */
typedef tagDEVNAMES *LPDEVNAMES;

/* 10589 */
typedef tagEXTLOGFONTA *PEXTLOGFONT;

/* 10590 */
typedef IDispatch *LPDISPATCH;

/* 10591 */
typedef tagJOYCAPS2W *PJOYCAPS2W;

/* 10592 */
typedef _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;

/* 10593 */
typedef _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB;

/* 10594 */
typedef IOleClientSite *LPOLECLIENTSITE;

/* 10595 */
typedef void *PDH_HQUERY;

/* 10596 */
typedef SCARD_T0_COMMAND *LPSCARD_T0_COMMAND;

/* 10597 */
typedef char *va_list;

/* 10598 */
typedef void (__stdcall *WINEVENTPROC)(HWINEVENTHOOK__ *, unsigned int, HWND__ *, int, int, unsigned int, unsigned int);

/* 10599 */
typedef _DATATYPES_INFO_1A *PDATATYPES_INFO_1;

/* 10600 */
typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 10601 */
typedef _PSAPI_WS_WATCH_INFORMATION_EX *PPSAPI_WS_WATCH_INFORMATION_EX;

/* 10602 */
typedef _DOCINFOW *LPDOCINFOW;

/* 10603 */
typedef char *PNZCH;

/* 10604 */
typedef PROCESSOR_IDLESTATE_POLICY *PPROCESSOR_IDLESTATE_POLICY;

/* 10605 */
typedef tagBLOB *LPBLOB;

/* 10606 */
typedef _nlsversioninfoex *LPNLSVERSIONINFOEX;

/* 10607 */
typedef int WordSize;

/* 10608 */
typedef __int16 HALF_PTR;

/* 10609 */
typedef tagWINDOWPOS *LPWINDOWPOS;

/* 10610 */
typedef tagRGBTRIPLE *NPRGBTRIPLE;

/* 10611 */
typedef _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;

/* 10612 */
typedef tagRGBTRIPLE *LPRGBTRIPLE;

/* 10613 */
typedef tagBITMAPINFOHEADER *PBITMAPINFOHEADER;

/* 10614 */
typedef tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMS;

/* 10615 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;

/* 10616 */
typedef _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1;

/* 10617 */
typedef PPM_PERFSTATE_EVENT *PPPM_PERFSTATE_EVENT;

/* 10618 */
typedef _BIDI_REQUEST_DATA *PBIDI_REQUEST_DATA;

/* 10619 */
typedef _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;

/* 10620 */
typedef tagPOLYTEXTW *PPOLYTEXTW;

/* 10621 */
typedef _CRYPT_PROVIDER_REG *PCRYPT_PROVIDER_REG;

/* 10622 */
typedef _CRYPT_PROVIDER_REF *PCRYPT_PROVIDER_REF;

/* 10623 */
typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;

/* 10624 */
typedef int (__stdcall *Crc32_t)(int, const char *, int);

/* 10625 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRY;

/* 10626 */
typedef _TOKEN_ELEVATION *PTOKEN_ELEVATION;

/* 10627 */
typedef HACCEL__ *HACCEL;

/* 10628 */
typedef tagICEXYZTRIPLE *LPCIEXYZTRIPLE;

/* 10629 */
typedef MultiCounterQueryS *MultiCounterQueryP;

/* 10630 */
typedef IWinInetHttpInfo *LPWININETHTTPINFO;

/* 10631 */
typedef _PROPSHEETHEADERW_V2 *LPPROPSHEETHEADERW;

/* 10632 */
typedef tagSIZE *LPSIZE;

/* 10633 */
typedef unsigned int (__stdcall *LPFNPSPCALLBACKW)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);

/* 10634 */
typedef void (__stdcall *CS_TYPE_FROM_NETCS_ROUTINE)(void *, unsigned int, unsigned __int8 *, unsigned int, unsigned int, void *, unsigned int *, unsigned int *);

/* 10635 */
typedef void (__stdcall *jvmtiEventFieldModification)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jclass *, _jobject *, struct _jfieldID *, char, jvalue);

/* 10636 */
typedef _PORT_INFO_1A *PPORT_INFO_1;

/* 10637 */
typedef tagLOGFONTA *NPLOGFONTA;

/* 10638 */
typedef _RPC_SECURITY_QOS_V2_W *PRPC_SECURITY_QOS_V2_W;

/* 10639 */
typedef tagLOGFONTA *LPLOGFONTA;

/* 10640 */
typedef _LDT_ENTRY *LPLDT_ENTRY;

/* 10641 */
typedef tagMIXERCONTROLA *LPMIXERCONTROL;

/* 10642 */
typedef void *handle_t;

/* 10643 */
typedef char *PTCHAR;

/* 10644 */
typedef tagABORTPATH *PEMRBEGINPATH;

/* 10645 */
typedef unsigned int implicit_null_entry;

/* 10646 */
typedef tagABORTPATH *PEMRFLATTENPATH;

/* 10647 */
typedef _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];

/* 10648 */
typedef const char *PCZZSTR;

/* 10649 */
typedef tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;

/* 10650 */
typedef _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR;

/* 10651 */
typedef _STORAGE_PROPERTY_QUERY *PSTORAGE_PROPERTY_QUERY;

/* 10652 */
typedef tagAUXCAPSA *LPAUXCAPS;

/* 10653 */
typedef ITypeLib *LPTYPELIB;

/* 10654 */
typedef tagAUXCAPSA *NPAUXCAPS;

/* 10655 */
typedef IViewObject2 *LPVIEWOBJECT2;

/* 10656 */
typedef _TRANSMIT_FILE_BUFFERS *PTRANSMIT_FILE_BUFFERS;

/* 10657 */
typedef _IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

/* 10658 */
typedef tagABORTPATH *PEMRWIDENPATH;

/* 10659 */
typedef _OCSP_SIGNATURE_INFO *POCSP_SIGNATURE_INFO;

/* 10660 */
typedef _PRINTER_INFO_3 *LPPRINTER_INFO_3;

/* 10661 */
typedef _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;

/* 10662 */
typedef _PRINTER_INFO_9A *PPRINTER_INFO_9A;

/* 10663 */
typedef _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;

/* 10664 */
typedef _STORAGE_PROPERTY_ID *PSTORAGE_PROPERTY_ID;

/* 10665 */
typedef _IMAGE_SYMBOL *PIMAGE_SYMBOL;

/* 10666 */
typedef _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;

/* 10667 */
typedef tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;

/* 10668 */
typedef _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;

/* 10669 */
typedef _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO;

/* 10670 */
typedef void (__stdcall *PRPC_RUNDOWN)(void *);

/* 10671 */
typedef _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;

/* 10672 */
typedef _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;

/* 10673 */
typedef IViewObject *LPVIEWOBJECT;

/* 10674 */
typedef tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;

/* 10675 */
typedef _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;

/* 10676 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 10677 */
typedef _TRANSACTIONMANAGER_OLDEST_INFORMATION *PTRANSACTIONMANAGER_OLDEST_INFORMATION;

/* 10678 */
typedef POWER_ACTION_POLICY *PPOWER_ACTION_POLICY;

/* 10679 */
typedef tagWCRANGE *LPWCRANGE;

/* 10680 */
typedef objArrayOopDesc *objArrayOop;

/* 10681 */
typedef tagMIXERCONTROLW *LPMIXERCONTROLW;

/* 10682 */
typedef tagRAWINPUTDEVICE *LPRAWINPUTDEVICE;

/* 10683 */
typedef tagSIZE *LPSIZEL;

/* 10684 */
typedef _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;

/* 10685 */
typedef _PORT_INFO_1W *PPORT_INFO_1W;

/* 10686 */
typedef _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO;

/* 10687 */
typedef unsigned int (__stdcall *PRTL_RUN_ONCE_INIT_FN)(_RTL_RUN_ONCE *, void *, void **);

/* 10688 */
typedef tagEMRINVERTRGN *PEMRINVERTRGN;

/* 10689 */
typedef _PRINTER_INFO_8A *PPRINTER_INFO_8A;

/* 10690 */
typedef void (__stdcall *NDR_NOTIFY2_ROUTINE)(unsigned __int8);

/* 10691 */
typedef IPersist *LPPERSIST;

/* 10692 */
typedef _PORT_INFO_1A *PPORT_INFO_1A;

/* 10693 */
typedef const _GUID *LPCGUID;

/* 10694 */
typedef unsigned __int64 LocationValidType;

/* 10695 */
typedef tagMIXERCONTROLA *LPMIXERCONTROLA;

/* 10696 */
typedef _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;

/* 10697 */
typedef _BIDI_RESPONSE_DATA *PBIDI_RESPONSE_DATA;

/* 10698 */
typedef unsigned int *LPCOLORREF;

/* 10699 */
typedef PROCESSOR_IDLESTATE_INFO *PPROCESSOR_IDLESTATE_INFO;

/* 10700 */
typedef tagMENUBARINFO *LPMENUBARINFO;

/* 10701 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDV;

/* 10702 */
typedef void (__stdcall *MSGBOXCALLBACK)(tagHELPINFO *);

/* 10703 */
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;

/* 10704 */
typedef SCARD_READERSTATEA *PSCARD_READERSTATEA;

/* 10705 */
typedef _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;

/* 10706 */
typedef int FXPT16DOT16;

/* 10707 */
typedef tagRGBTRIPLE *PRGBTRIPLE;

/* 10708 */
typedef tagMIDIINCAPS2A *LPMIDIINCAPS2;

/* 10709 */
typedef tagMIDIINCAPS2A *NPMIDIINCAPS2;

/* 10710 */
typedef _STORAGE_MINIPORT_DESCRIPTOR *PSTORAGE_MINIPORT_DESCRIPTOR;

/* 10711 */
typedef tagWINDOWPOS *PWINDOWPOS;

/* 10712 */
typedef SCARD_READERSTATEW *PSCARD_READERSTATEW;

/* 10713 */
typedef int (__stdcall *PGET_MODULE_HANDLE_EXA)(unsigned int, const char *, HINSTANCE__ **);

/* 10714 */
typedef unsigned __int8 BYTE;

/* 10715 */
typedef unsigned __int8 byte;

/* 10716 */
typedef void (__stdcall *LPFIBER_START_ROUTINE)(void *);

/* 10717 */
typedef _DRIVER_INFO_8A *PDRIVER_INFO_8;

/* 10718 */
typedef SHELLHOOKINFO *LPSHELLHOOKINFO;

/* 10719 */
typedef unsigned int (__stdcall *LPPAGEPAINTHOOK)(HWND__ *, unsigned int, unsigned int, int);

/* 10720 */
typedef tagMIDIINCAPSA *NPMIDIINCAPS;

/* 10721 */
typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND__ *, unsigned int, int);

/* 10722 */
typedef tagMIDIINCAPSA *LPMIDIINCAPS;

/* 10723 */
typedef ProcessQueryS *ProcessQueryP;

/* 10724 */
typedef _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;

/* 10725 */
typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

/* 10726 */
typedef _RTL_SRWLOCK *PRTL_SRWLOCK;

/* 10727 */
typedef _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;

/* 10728 */
typedef tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;

/* 10729 */
typedef tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMS;

/* 10730 */
typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 10731 */
typedef _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;

/* 10732 */
typedef tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;

/* 10733 */
typedef HMIXER__ **LPHMIXER;

/* 10734 */
typedef HPEN__ *HPEN;

/* 10735 */
typedef unsigned int *PSID_HASH_ENTRY;

/* 10736 */
typedef _IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;

/* 10737 */
typedef IMessageFilter *LPMESSAGEFILTER;

/* 10738 */
typedef void (__stdcall *jvmtiEventCompiledMethodUnload)(_jvmtiEnv *, struct _jmethodID *, const void *);

/* 10739 */
typedef _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH;

/* 10740 */
typedef _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;

/* 10741 */
typedef _CERT_OTHER_NAME *PCERT_OTHER_NAME;

/* 10742 */
typedef void *PVOID;

/* 10743 */
typedef _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;

/* 10744 */
typedef _TRANSACTIONMANAGER_RECOVERY_INFORMATION *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

/* 10745 */
typedef _DRIVER_INFO_8W *PDRIVER_INFO_8W;

/* 10746 */
typedef void (__stdcall *GENERIC_UNBIND_ROUTINE)(void *, unsigned __int8 *);

/* 10747 */
typedef _FILE_PREFETCH *PFILE_PREFETCH;

/* 10748 */
typedef _userHGLOBAL *wireHGLOBAL;

/* 10749 */
typedef SCARD_READERSTATEA *PSCARD_READERSTATE;

/* 10750 */
typedef unsigned int uint32;

/* 10751 */
typedef unsigned int UINT32;

/* 10752 */
typedef tagMOUSEINPUT *PMOUSEINPUT;

/* 10753 */
typedef tagMIDIINCAPSW *LPMIDIINCAPSW;

/* 10754 */
typedef BITMAPV4HEADER *PBITMAPV4HEADER;

/* 10755 */
typedef tagMIDIINCAPSW *NPMIDIINCAPSW;

/* 10756 */
typedef BITMAPV5HEADER *PBITMAPV5HEADER;

/* 10757 */
typedef int *PINT32;

/* 10758 */
typedef tagWAVEINCAPS2W *NPWAVEINCAPS2W;

/* 10759 */
typedef _FAT_STATISTICS *PFAT_STATISTICS;

/* 10760 */
typedef tagWAVEINCAPS2W *LPWAVEINCAPS2W;

/* 10761 */
typedef _SERVICE_PRESHUTDOWN_INFO *LPSERVICE_PRESHUTDOWN_INFO;

/* 10762 */
typedef _CMSG_CNG_CONTENT_DECRYPT_INFO *PCMSG_CNG_CONTENT_DECRYPT_INFO;

/* 10763 */
typedef _CERT_EXTENSION *PCERT_EXTENSION;

/* 10764 */
typedef _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;

/* 10765 */
typedef tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;

/* 10766 */
typedef _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;

/* 10767 */
typedef IMonikerProp *LPMONIKERPROP;

/* 10768 */
typedef tagTHREADENTRY32 *PTHREADENTRY32;

/* 10769 */
typedef _DRIVER_INFO_8A *PDRIVER_INFO_8A;

/* 10770 */
typedef int (__stdcall *EDITWORDBREAKPROC)(char *, int, int, int);

/* 10771 */
typedef int (__stdcall *ENHMFENUMPROC)(HDC__ *, tagHANDLETABLE *, const tagENHMETARECORD *, int, int);

/* 10772 */
typedef unsigned int MCIERROR;

/* 10773 */
typedef tagEMRSELECTCLIPPATH *PEMRSETICMMODE;

/* 10774 */
typedef tagMIDIINCAPSA *NPMIDIINCAPSA;

/* 10775 */
typedef _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;

/* 10776 */
typedef tagMIDIINCAPSA *LPMIDIINCAPSA;

/* 10777 */
typedef _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;

/* 10778 */
typedef _VIDEOPARAMETERS *LPVIDEOPARAMETERS;

/* 10779 */
typedef _CMC_DATA_INFO *PCMC_DATA_INFO;

/* 10780 */
typedef _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;

/* 10781 */
typedef _MODULEINFO *LPMODULEINFO;

/* 10782 */
typedef int (__stdcall *MFENUMPROC)(HDC__ *, tagHANDLETABLE *, tagMETARECORD *, int, int);

/* 10783 */
typedef _jobjectArray *jobjectArray;

/* 10784 */
typedef const wchar_t *LPCUWSTR;

/* 10785 */
typedef const tagDEVNAMES *PCDEVNAMES;

/* 10786 */
typedef tagCWPSTRUCT *PCWPSTRUCT;

/* 10787 */
typedef PPM_IDLE_STATE_ACCOUNTING *PPPM_IDLE_STATE_ACCOUNTING;

/* 10788 */
typedef const char *LPCUTSTR;

/* 10789 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;

/* 10790 */
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

/* 10791 */
typedef midiproptimediv_tag *LPMIDIPROPTIMEDIV;

/* 10792 */
typedef _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;

/* 10793 */
typedef tagEMRPOLYLINE16 *PEMRPOLYGON16;

/* 10794 */
typedef unsigned __int8 (__stdcall *ReadMappedEntry_t)(void **, jzentry *, unsigned __int8 **, char *);

/* 10795 */
typedef PPM_WMI_IDLE_STATES_EX *PPPM_WMI_IDLE_STATES_EX;

/* 10796 */
typedef _DRIVE_LAYOUT_INFORMATION_MBR *PDRIVE_LAYOUT_INFORMATION_MBR;

/* 10797 */
typedef void (__stdcall *LINEDDAPROC)(int, int, int);

/* 10798 */
typedef _CRYPT_IMAGE_REF *PCRYPT_IMAGE_REF;

/* 10799 */
typedef _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;

/* 10800 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;

/* 10801 */
typedef _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;

/* 10802 */
typedef tagFONTSIGNATURE *PFONTSIGNATURE;

/* 10803 */
typedef const char **PZPCSTR;

/* 10804 */
typedef _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;

/* 10805 */
typedef _PRINTER_INFO_2A *LPPRINTER_INFO_2A;

/* 10806 */
typedef tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;

/* 10807 */
typedef DRVCONFIGINFOEX *PDRVCONFIGINFOEX;

/* 10808 */
typedef int (__stdcall *DATEFMT_ENUMPROCA)(char *);

/* 10809 */
typedef IBindHost *LPBINDHOST;

/* 10810 */
typedef _TOKEN_TYPE *PTOKEN_TYPE;

/* 10811 */
typedef void (__stdcall *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);

/* 10812 */
typedef _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

/* 10813 */
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)(HWND__ *, const wchar_t *);

/* 10814 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;

/* 10815 */
typedef int (__stdcall *DATEFMT_ENUMPROCW)(wchar_t *);

/* 10816 */
typedef tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;

/* 10817 */
typedef _PRINTER_INFO_2W *LPPRINTER_INFO_2W;

/* 10818 */
typedef OPENCARDNAMEA *LPOPENCARDNAME;

/* 10819 */
typedef _PRINTER_INFO_2A *PPRINTER_INFO_2A;

/* 10820 */
typedef const wchar_t *LPCWCH;

/* 10821 */
typedef unsigned __int16 PROPVAR_PAD1;

/* 10822 */
typedef void (__stdcall *jvmtiEventReserved)();

/* 10823 */
typedef tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;

/* 10824 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRYA;

/* 10825 */
typedef unsigned int __cdecl QUERYHANDLER(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 10826 */
typedef _SERVICE_TRIGGER *PSERVICE_TRIGGER;

/* 10827 */
typedef int DISPID;

/* 10828 */
typedef int (__stdcall *RPC_NEW_HTTP_PROXY_CHANNEL)(unsigned __int16 *, unsigned __int16 *, unsigned __int8 *, unsigned __int16 **);

/* 10829 */
typedef unsigned __int8 *PUCHAR;

/* 10830 */
typedef unsigned int _Uint32t;

/* 10831 */
typedef tagLOGFONTA *NPLOGFONT;

/* 10832 */
typedef tagLOGFONTA *LPLOGFONT;

/* 10833 */
typedef NTFS_VOLUME_DATA_BUFFER *PNTFS_VOLUME_DATA_BUFFER;

/* 10834 */
typedef tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD;

/* 10835 */
typedef _CHANGER_ELEMENT_STATUS_EX *PCHANGER_ELEMENT_STATUS_EX;

/* 10836 */
typedef tagEXTLOGPEN *LPEXTLOGPEN;

/* 10837 */
typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

/* 10838 */
typedef tagEXTLOGPEN *NPEXTLOGPEN;

/* 10839 */
typedef unsigned __int64 DWORDLONG;

/* 10840 */
typedef _PRINTER_INFO_1A *PPRINTER_INFO_1A;

/* 10841 */
typedef int (__stdcall *PFN_CMSG_STREAM_OUTPUT)(const void *, unsigned __int8 *, unsigned int, int);

/* 10842 */
typedef int (__cdecl *SafeFetch32Stub)(int *, int);

/* 10843 */
typedef OPENCARDNAMEW *LPOPENCARDNAMEW;

/* 10844 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(void *, const _CRL_CONTEXT *, unsigned int, unsigned int, const void *);

/* 10845 */
typedef _PRINTER_INFO_2A *LPPRINTER_INFO_2;

/* 10846 */
typedef tagAUXCAPSA *LPAUXCAPSA;

/* 10847 */
typedef _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;

/* 10848 */
typedef int (__stdcall *LOCALE_ENUMPROCA)(char *);

/* 10849 */
typedef tagAUXCAPSA *NPAUXCAPSA;

/* 10850 */
typedef tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;

/* 10851 */
typedef _WOW64_DESCRIPTOR_TABLE_ENTRY *PWOW64_DESCRIPTOR_TABLE_ENTRY;

/* 10852 */
typedef _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;

/* 10853 */
typedef const _CERT_CONTEXT *PCCERT_CONTEXT;

/* 10854 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCT;

/* 10855 */
typedef _ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

/* 10856 */
typedef _GROUP_RELATIONSHIP *PGROUP_RELATIONSHIP;

/* 10857 */
typedef OPENCARDNAMEA *LPOPENCARDNAMEA;

/* 10858 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(void *, const _CRL_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 10859 */
typedef tagMIXERCAPS2A *PMIXERCAPS2A;

/* 10860 */
typedef int (__stdcall *jvmtiHeapIterationCallback)(__int64, __int64, __int64 *, int, void *);

/* 10861 */
typedef _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;

/* 10862 */
typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 10863 */
typedef int LPARAM;

/* 10864 */
typedef _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;

/* 10865 */
typedef _jthrowable *jthrowable;

/* 10866 */
typedef const void *LPCVOID;

/* 10867 */
typedef unsigned int (__cdecl *PQUERYHANDLER)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 10868 */
typedef pvalueA *PPVALUEA;

/* 10869 */
typedef wchar_t *PWCH;

/* 10870 */
typedef tagELEMDESC *LPELEMDESC;

/* 10871 */
typedef int *LPINT;

/* 10872 */
typedef _SYSTEMTIME *LPSYSTEMTIME;

/* 10873 */
typedef tagPAINTSTRUCT *NPPAINTSTRUCT;

/* 10874 */
typedef tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;

/* 10875 */
typedef tagPAINTSTRUCT *LPPAINTSTRUCT;

/* 10876 */
typedef _DOC_INFO_3A *PDOC_INFO_3;

/* 10877 */
typedef _DOC_INFO_2A *PDOC_INFO_2;

/* 10878 */
typedef void *(__stdcall *PFN_CMSG_ALLOC)(unsigned int);

/* 10879 */
typedef _SERVICE_FAILURE_ACTIONS_FLAG *LPSERVICE_FAILURE_ACTIONS_FLAG;

/* 10880 */
typedef _DOC_INFO_1A *PDOC_INFO_1;

/* 10881 */
typedef unsigned int WPARAM;

/* 10882 */
typedef _BCryptBuffer *PNCryptBuffer;

/* 10883 */
typedef tagPOLYTEXTW *LPPOLYTEXTW;

/* 10884 */
typedef _PRINTER_INFO_7A *PPRINTER_INFO_7A;

/* 10885 */
typedef tagPOLYTEXTW *NPPOLYTEXTW;

/* 10886 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

/* 10887 */
typedef SYSTEM_POWER_CAPABILITIES *PSYSTEM_POWER_CAPABILITIES;

/* 10888 */
typedef int int32;

/* 10889 */
typedef int INT32;

/* 10890 */
typedef tagMIDIINCAPS2A *LPMIDIINCAPS2A;

/* 10891 */
typedef tagMIDIINCAPS2A *NPMIDIINCAPS2A;

/* 10892 */
typedef _KDHELP *PKDHELP;

/* 10893 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;

/* 10894 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFO;

/* 10895 */
typedef tagWAVEINCAPSW *PWAVEINCAPSW;

/* 10896 */
typedef tagWAVEOUTCAPS2W *PWAVEOUTCAPS2W;

/* 10897 */
typedef ISurrogate *LPSURROGATE;

/* 10898 */
typedef _CREATE_DISK *PCREATE_DISK;

/* 10899 */
typedef _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;

/* 10900 */
typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

/* 10901 */
typedef tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMS;

/* 10902 */
typedef unsigned int GEOCLASS;

/* 10903 */
typedef tagPOLYTEXTA *NPPOLYTEXTA;

/* 10904 */
typedef tagPOLYTEXTA *LPPOLYTEXTA;

/* 10905 */
typedef tagMIXERCAPSA *LPMIXERCAPSA;

/* 10906 */
typedef tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;

/* 10907 */
typedef _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;

/* 10908 */
typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;

/* 10909 */
typedef value_entA *PVALENTA;

/* 10910 */
typedef tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;

/* 10911 */
typedef tagEMRARC *PEMRPIE;

/* 10912 */
typedef _PDH_FMT_COUNTERVALUE *PPDH_FMT_COUNTERVALUE;

/* 10913 */
typedef _MONITOR_INFO_1W *LPMONITOR_INFO_1W;

/* 10914 */
typedef tagAXESLISTW *LPAXESLISTW;

/* 10915 */
typedef _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;

/* 10916 */
typedef const _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

/* 10917 */
typedef float float32;

/* 10918 */
typedef unsigned int MMVERSION;

/* 10919 */
typedef tagRGBQUAD *LPRGBQUAD;

/* 10920 */
typedef pcmwaveformat_tag *PPCMWAVEFORMAT;

/* 10921 */
typedef tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;

/* 10922 */
typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;

/* 10923 */
typedef _MONITOR_INFO_1A *LPMONITOR_INFO_1A;

/* 10924 */
typedef _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;

/* 10925 */
typedef tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;

/* 10926 */
typedef _CERT_LOGOTYPE_IMAGE *PCERT_LOGOTYPE_IMAGE;

/* 10927 */
typedef tagIMECHARPOSITION *NPIMECHARPOSITION;

/* 10928 */
typedef _RTL_RUN_ONCE *PRTL_RUN_ONCE;

/* 10929 */
typedef tagSCROLLBARINFO *LPSCROLLBARINFO;

/* 10930 */
typedef tagIMECHARPOSITION *LPIMECHARPOSITION;

/* 10931 */
typedef void (__stdcall *CS_TYPE_NET_SIZE_ROUTINE)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);

/* 10932 */
typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;

/* 10933 */
typedef _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;

/* 10934 */
typedef tagAXESLISTA *LPAXESLISTA;

/* 10935 */
typedef _CERT_LOGOTYPE_EXT_INFO *PCERT_LOGOTYPE_EXT_INFO;

/* 10936 */
typedef _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;

/* 10937 */
typedef _STORAGE_ADAPTER_DESCRIPTOR *PSTORAGE_ADAPTER_DESCRIPTOR;

/* 10938 */
typedef IRecordInfo *LPRECORDINFO;

/* 10939 */
typedef _PRINTER_INFO_5A *PPRINTER_INFO_5A;

/* 10940 */
typedef tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;

/* 10941 */
typedef _MMCKINFO *NPMMCKINFO;

/* 10942 */
typedef _MMCKINFO *LPMMCKINFO;

/* 10943 */
typedef unsigned __int8 jboolean;

/* 10944 */
typedef int (__stdcall *DESKTOPENUMPROC)(char *, int);

/* 10945 */
typedef int NTSTATUS;

/* 10946 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;

/* 10947 */
typedef int (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(unsigned int, unsigned int, char *, unsigned int, void *, _CERT_PUBLIC_KEY_INFO *, unsigned int *);

/* 10948 */
typedef void (__stdcall *PAPCFUNC)(unsigned int);

/* 10949 */
typedef const _PROPSHEETPAGEW *LPCPROPSHEETPAGEW_LATEST;

/* 10950 */
typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

/* 10951 */
typedef int (__stdcall *NEARPROC)();

/* 10952 */
typedef unsigned __int8 *PBOOLEAN;

/* 10953 */
typedef const tagRECT *LPCBORDERWIDTHS;

/* 10954 */
typedef _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;

/* 10955 */
typedef tagPOLYTEXTA *NPPOLYTEXT;

/* 10956 */
typedef unsigned int SCARDCONTEXT;

/* 10957 */
typedef tagDIBSECTION *LPDIBSECTION;

/* 10958 */
typedef tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;

/* 10959 */
typedef _OCSP_BASIC_REVOKED_INFO *POCSP_BASIC_REVOKED_INFO;

/* 10960 */
typedef tagPOLYTEXTA *LPPOLYTEXT;

/* 10961 */
typedef _DISK_LOGGING *PDISK_LOGGING;

/* 10962 */
typedef tagPOINTFX *LPPOINTFX;

/* 10963 */
typedef _HMAC_Info *PHMAC_INFO;

/* 10964 */
typedef PPM_IDLE_ACCOUNTING_EX *PPPM_IDLE_ACCOUNTING_EX;

/* 10965 */
typedef const _PROPSHEETPAGEA *LPCPROPSHEETPAGEA_LATEST;

/* 10966 */
typedef int (__stdcall *EDITWORDBREAKPROCA)(char *, int, int, int);

/* 10967 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

/* 10968 */
typedef tagCWPSTRUCT *NPCWPSTRUCT;

/* 10969 */
typedef void *SC_LOCK;

/* 10970 */
typedef tagCWPSTRUCT *LPCWPSTRUCT;

/* 10971 */
typedef tagICONMETRICSW *LPICONMETRICSW;

/* 10972 */
typedef tagDRVCONFIGINFO *PDRVCONFIGINFO;

/* 10973 */
typedef _PRINTER_INFO_4A *PPRINTER_INFO_4A;

/* 10974 */
typedef _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;

/* 10975 */
typedef _CHANGER_ELEMENT *PCHANGER_ELEMENT;

/* 10976 */
typedef tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMS;

/* 10977 */
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;

/* 10978 */
typedef void (__cdecl *RPCLT_PDU_FILTER_FUNC)(void *, unsigned int, int);

/* 10979 */
typedef void *HQUERY;

/* 10980 */
typedef tagLOGPEN *PLOGPEN;

/* 10981 */
typedef int (__stdcall *PFNDACOMPARECONST)(const void *, const void *, int);

/* 10982 */
typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;

/* 10983 */
typedef _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;

/* 10984 */
typedef _GRADIENT_RECT *PGRADIENT_RECT;

/* 10985 */
typedef IDataFilter *LPDATAFILTER;

/* 10986 */
typedef IInternetPriority *LPIINTERNETPRIORITY;

/* 10987 */
typedef _CERT_LOGOTYPE_AUDIO_INFO *PCERT_LOGOTYPE_AUDIO_INFO;

/* 10988 */
typedef _MONITOR_INFO_1A *LPMONITOR_INFO_1;

/* 10989 */
typedef tagACCESSTIMEOUT *LPACCESSTIMEOUT;

/* 10990 */
typedef _RemotableHandle *wireHFONT;

/* 10991 */
typedef _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;

/* 10992 */
typedef int (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, unsigned int, void *);

/* 10993 */
typedef _WOW64_LDT_ENTRY *PWOW64_LDT_ENTRY;

/* 10994 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;

/* 10995 */
typedef _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

/* 10996 */
typedef unsigned int *LPUINT;

/* 10997 */
typedef _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFO;

/* 10998 */
typedef tagMCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;

/* 10999 */
typedef tagAXESLISTA *LPAXESLIST;

/* 11000 */
typedef _CRYPT_IMAGE_REG *PCRYPT_IMAGE_REG;

/* 11001 */
typedef __int64 LONGLONG;

/* 11002 */
typedef _DOCINFOA *LPDOCINFOA;

/* 11003 */
typedef int (__stdcall *DRAWSTATEPROC)(HDC__ *, int, unsigned int, int, int);

/* 11004 */
typedef const _MMCKINFO *LPCMMCKINFO;

/* 11005 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;

/* 11006 */
typedef _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION;

/* 11007 */
typedef _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES;

/* 11008 */
typedef _PRINTER_INFO_5A *LPPRINTER_INFO_5A;

/* 11009 */
typedef _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;

/* 11010 */
typedef tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;

/* 11011 */
typedef _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;

/* 11012 */
typedef void (__cdecl *value_fn_t)();

/* 11013 */
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

/* 11014 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;

/* 11015 */
typedef unsigned __int8 *PTBYTE;

/* 11016 */
typedef HMIDI__ **LPHMIDI;

/* 11017 */
typedef _jarray *jarray;

/* 11018 */
typedef _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;

/* 11019 */
typedef _TRANSACTION_PROPERTIES_INFORMATION *PTRANSACTION_PROPERTIES_INFORMATION;

/* 11020 */
typedef sockaddr *LPSOCKADDR;

/* 11021 */
typedef unsigned __int16 *PARAM_OFFSETTABLE;

/* 11022 */
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;

/* 11023 */
typedef int (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *, _CMSG_KEY_AGREE_ENCRYPT_INFO *, unsigned int, void *);

/* 11024 */
typedef char *PZZSTR;

/* 11025 */
typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

/* 11026 */
typedef _TAPE_GET_POSITION *PTAPE_GET_POSITION;

/* 11027 */
typedef unsigned int (__stdcall *LPFNDEVMODE)(HWND__ *, HINSTANCE__ *, _devicemodeA *, char *, char *, _devicemodeA *, char *, unsigned int);

/* 11028 */
typedef tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;

/* 11029 */
typedef _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;

/* 11030 */
typedef tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;

/* 11031 */
typedef int (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC)(unsigned int, unsigned int, char *, unsigned int, void *, _CRYPT_PRIVATE_KEY_INFO *, unsigned int *);

/* 11032 */
typedef tagFUNCDESC *LPFUNCDESC;

/* 11033 */
typedef _PSP *HPROPSHEETPAGE;

/* 11034 */
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 11035 */
typedef _PRINTER_INFO_5W *LPPRINTER_INFO_5W;

/* 11036 */
typedef tagPOLYTEXTA *PPOLYTEXTA;

/* 11037 */
typedef unsigned __int16 ADDRESS_FAMILY;

/* 11038 */
typedef tagHANDLETABLE *PHANDLETABLE;

/* 11039 */
typedef tagLOGPEN *NPLOGPEN;

/* 11040 */
typedef unsigned int (__stdcall *pfn_SymSetOptions)(unsigned int);

/* 11041 */
typedef tagLOGPEN *LPLOGPEN;

/* 11042 */
typedef _PROPSHEETHEADERA_V2 *LPPROPSHEETHEADERA;

/* 11043 */
typedef int (__stdcall *WNDENUMPROC)(HWND__ *, int);

/* 11044 */
typedef _FORM_INFO_1A *PFORM_INFO_1;

/* 11045 */
typedef _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;

/* 11046 */
typedef HWAVEIN__ *HWAVEIN;

/* 11047 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(void *, const _CERT_CONTEXT *, unsigned int);

/* 11048 */
typedef unsigned int (__stdcall *LPFNPSPCALLBACKA)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);

/* 11049 */
typedef tagSTICKYKEYS *LPSTICKYKEYS;

/* 11050 */
typedef _DEVICE_DSM_NOTIFICATION_PARAMETERS *PDEVICE_DSM_NOTIFICATION_PARAMETERS;

/* 11051 */
typedef _CERT_LOGOTYPE_DETAILS *PCERT_LOGOTYPE_DETAILS;

/* 11052 */
typedef tagLOGFONTW *LPLOGFONTW;

/* 11053 */
typedef _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 11054 */
typedef tagLOGFONTA *PLOGFONT;

/* 11055 */
typedef tagLOGFONTW *NPLOGFONTW;

/* 11056 */
typedef _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;

/* 11057 */
typedef _RPC_SECURITY_QOS_V2_A *PRPC_SECURITY_QOS_V2_A;

/* 11058 */
typedef tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;

/* 11059 */
typedef unsigned __int64 traceid;

/* 11060 */
typedef _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;

/* 11061 */
typedef tagHEAPENTRY32 *PHEAPENTRY32;

/* 11062 */
typedef int (__cdecl *RPC_BLOCKING_FN)(void *, void *, void *);

/* 11063 */
typedef _STORAGE_PORT_CODE_SET *PSTORAGE_PORT_CODE_SET;

/* 11064 */
typedef _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

/* 11065 */
typedef unsigned int idx_t;

/* 11066 */
typedef int (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(_CRYPT_PRIVATE_KEY_INFO *, unsigned int *, void *);

/* 11067 */
typedef _PRINTER_INFO_5A *LPPRINTER_INFO_5;

/* 11068 */
typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;

/* 11069 */
typedef _PROCESS_MEMORY_COUNTERS *PPROCESS_MEMORY_COUNTERS;

/* 11070 */
typedef _PRINTER_INFO_9W *PPRINTER_INFO_9W;

/* 11071 */
typedef _POWER_REQUEST_TYPE *PPOWER_REQUEST_TYPE;

/* 11072 */
typedef _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;

/* 11073 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMS;

/* 11074 */
typedef __int64 *PLONGLONG;

/* 11075 */
typedef tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;

/* 11076 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

/* 11077 */
typedef _CRYPT_OID_INFO *PCRYPT_OID_INFO;

/* 11078 */
typedef tWAVEFORMATEX *NPWAVEFORMATEX;

/* 11079 */
typedef unsigned __int64 ULONGLONG;

/* 11080 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 11081 */
typedef _AppBarData *PAPPBARDATA;

/* 11082 */
typedef void (__cdecl *_purecall_handler)();

/* 11083 */
typedef _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;

/* 11084 */
typedef _SID_AND_ATTRIBUTES (*PSID_AND_ATTRIBUTES_ARRAY)[1];

/* 11085 */
typedef __int64 _Longlong;

/* 11086 */
typedef void (__cdecl *ThreadFunction)(JavaThread *, Thread *);

/* 11087 */
typedef int (__stdcall *CALINFO_ENUMPROCA)(char *);

/* 11088 */
typedef _TRANSACTION_BASIC_INFORMATION *PTRANSACTION_BASIC_INFORMATION;

/* 11089 */
typedef tagEVENTMSG *NPEVENTMSG;

/* 11090 */
typedef _CRYPT_SMART_CARD_ROOT_INFO *PCRYPT_SMART_CARD_ROOT_INFO;

/* 11091 */
typedef tagMSG *PMSG;

/* 11092 */
typedef _GUID *LPIID;

/* 11093 */
typedef tagLOGFONTW *PLOGFONTW;

/* 11094 */
typedef tagEVENTMSG *LPEVENTMSG;

/* 11095 */
typedef _RemotableHandle *wireHACCEL;

/* 11096 */
typedef _NUMA_NODE_RELATIONSHIP *PNUMA_NODE_RELATIONSHIP;

/* 11097 */
typedef int jsize;

/* 11098 */
typedef HMIDIIN__ **LPHMIDIIN;

/* 11099 */
typedef _FORM_INFO_1A *PFORM_INFO_1A;

/* 11100 */
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

/* 11101 */
typedef HMIDI__ *HMIDI;

/* 11102 */
typedef unsigned int HANDLE_PTR;

/* 11103 */
typedef _KCRM_MARSHAL_HEADER *PKCRM_MARSHAL_HEADER;

/* 11104 */
typedef _TRANSACTIONMANAGER_BASIC_INFORMATION *PTRANSACTIONMANAGER_BASIC_INFORMATION;

/* 11105 */
typedef _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;

/* 11106 */
typedef tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;

/* 11107 */
typedef char *LPCH;

/* 11108 */
typedef _PRINTER_INFO_8W *PPRINTER_INFO_8W;

/* 11109 */
typedef _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE;

/* 11110 */
typedef _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;

/* 11111 */
typedef int (__cdecl *canonicalize_fn_t)(JNIEnv_ *, char *, char *, int);

/* 11112 */
typedef _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;

/* 11113 */
typedef tagLOGFONTA *PLOGFONTA;

/* 11114 */
typedef _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;

/* 11115 */
typedef tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;

/* 11116 */
typedef NTFS_EXTENDED_VOLUME_DATA *PNTFS_EXTENDED_VOLUME_DATA;

/* 11117 */
typedef void (__stdcall *jvmtiEventDynamicCodeGenerated)(_jvmtiEnv *, const char *, const void *, int);

/* 11118 */
typedef int (__stdcall *CALINFO_ENUMPROCW)(wchar_t *);

/* 11119 */
typedef _IMAGELIST *HIMAGELIST;

/* 11120 */
typedef void **PHDEVNOTIFY;

/* 11121 */
typedef _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;

/* 11122 */
typedef _EV_EXTRA_CERT_CHAIN_POLICY_PARA *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 11123 */
typedef int (__stdcall *jvmtiHeapReferenceCallback)(jvmtiHeapReferenceKind, const _jvmtiHeapReferenceInfo *, __int64, __int64, __int64, __int64 *, __int64 *, int, void *);

/* 11124 */
typedef tagSIZE *PSIZE;

/* 11125 */
typedef unsigned int SECURITY_INFORMATION;

/* 11126 */
typedef _FORM_INFO_1W *PFORM_INFO_1W;

/* 11127 */
typedef tagWAVEOUTCAPS2A *PWAVEOUTCAPS2;

/* 11128 */
typedef _CRYPT_AES_128_KEY_STATE *PCRYPT_AES_128_KEY_STATE;

/* 11129 */
typedef void *HGLOBAL;

/* 11130 */
typedef IDropSource *LPDROPSOURCE;

/* 11131 */
typedef void **LPHANDLE;

/* 11132 */
typedef unsigned int dev_t;

/* 11133 */
typedef tagFONTSIGNATURE *LPFONTSIGNATURE;

/* 11134 */
typedef void *HCRYPTDEFAULTCONTEXT;

/* 11135 */
typedef _IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

/* 11136 */
typedef void *BCRYPT_ALG_HANDLE;

/* 11137 */
typedef int (__stdcall *FloatToIntBitsFn)(JNIEnv_ *, _jclass *, float);

/* 11138 */
typedef unsigned __int16 wint_t;

/* 11139 */
typedef CREATE_USN_JOURNAL_DATA *PCREATE_USN_JOURNAL_DATA;

/* 11140 */
typedef _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

/* 11141 */
typedef tagEMRARC *PEMRARCTO;

/* 11142 */
typedef tagWAVEOUTCAPSA *PWAVEOUTCAPS;

/* 11143 */
typedef int (__stdcall *PGET_MODULE_HANDLE_EXW)(unsigned int, const wchar_t *, HINSTANCE__ **);

/* 11144 */
typedef _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO;

/* 11145 */
typedef _WOW64_CONTEXT *PWOW64_CONTEXT;

/* 11146 */
typedef _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW;

/* 11147 */
typedef tagHEAPENTRY32 *LPHEAPENTRY32;

/* 11148 */
typedef tagDRVCONFIGINFO *LPDRVCONFIGINFO;

/* 11149 */
typedef tagEXTLOGFONTA *LPEXTLOGFONT;

/* 11150 */
typedef tagDRVCONFIGINFO *NPDRVCONFIGINFO;

/* 11151 */
typedef _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;

/* 11152 */
typedef void **SPHANDLE;

/* 11153 */
typedef tagEXTLOGFONTA *NPEXTLOGFONT;

/* 11154 */
typedef unsigned int __stdcall PM_CLOSE_PROC();

/* 11155 */
typedef _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;

/* 11156 */
typedef _CRYPTOAPI_BLOB *PCERT_BLOB;

/* 11157 */
typedef jvmtiIterationControl (__stdcall *jvmtiHeapRootCallback)(jvmtiHeapRootKind, __int64, __int64, __int64 *, void *);

/* 11158 */
typedef unsigned __int8 (__stdcall *ReadEntry_t)(void **, jzentry *, unsigned __int8 *, char *);

/* 11159 */
typedef tagEMRSELECTOBJECT *PEMRDELETEOBJECT;

/* 11160 */
typedef tagGLYPHSET *PGLYPHSET;

/* 11161 */
typedef void (__stdcall *RPC_DISPATCH_FUNCTION)(_RPC_MESSAGE *);

/* 11162 */
typedef _OCSP_CERT_ID *POCSP_CERT_ID;

/* 11163 */
typedef _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;

/* 11164 */
typedef IWinInetInfo *LPWININETINFO;

/* 11165 */
typedef _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;

/* 11166 */
typedef void *__ptr64 PVOID64;

/* 11167 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRIC;

/* 11168 */
typedef _SE_ACCESS_REPLY *PSE_ACCESS_REPLY;

/* 11169 */
typedef tagEXCEPINFO *LPEXCEPINFO;

/* 11170 */
typedef void (__stdcall *jvmtiEventThreadStart)(_jvmtiEnv *, JNIEnv_ *, _jobject *);

/* 11171 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;

/* 11172 */
typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;

/* 11173 */
typedef unsigned int ACCESS_REASON;

/* 11174 */
typedef void (__stdcall *TIMERPROC)(HWND__ *, unsigned int, unsigned int, unsigned int);

/* 11175 */
typedef LIST_ENTRY64 *PLIST_ENTRY64;

/* 11176 */
typedef _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;

/* 11177 */
typedef OPENCARD_SEARCH_CRITERIAA *LPOPENCARD_SEARCH_CRITERIA;

/* 11178 */
typedef tagEMREXTCREATEPEN *PEMREXTCREATEPEN;

/* 11179 */
typedef tagEMRCREATEPALETTE *PEMRCREATEPALETTE;

/* 11180 */
typedef tagWAVEOUTCAPSW *PWAVEOUTCAPSW;

/* 11181 */
typedef unsigned int IFTYPE;

/* 11182 */
typedef _KCRM_MARSHAL_HEADER *PRKCRM_MARSHAL_HEADER;

/* 11183 */
typedef __int64 *PINT64;

/* 11184 */
typedef unsigned __int64 uint64;

/* 11185 */
typedef unsigned __int64 UINT64;

/* 11186 */
typedef tagEXTLOGFONTW *NPEXTLOGFONTW;

/* 11187 */
typedef tagWAVEINCAPS2A *LPWAVEINCAPS2A;

/* 11188 */
typedef IMultiQI *LPMULTIQI;

/* 11189 */
typedef tagEXTLOGFONTW *LPEXTLOGFONTW;

/* 11190 */
typedef tagWAVEINCAPS2A *NPWAVEINCAPS2A;

/* 11191 */
typedef _CREATE_DISK_MBR *PCREATE_DISK_MBR;

/* 11192 */
typedef _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;

/* 11193 */
typedef tagWAVEOUTCAPSA *PWAVEOUTCAPSA;

/* 11194 */
typedef tagNMHDR *LPNMHDR;

/* 11195 */
typedef tagWINDOWINFO *LPWINDOWINFO;

/* 11196 */
typedef _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST;

/* 11197 */
typedef _IDEREGS *LPIDEREGS;

/* 11198 */
typedef tagHARDWAREINPUT *LPHARDWAREINPUT;

/* 11199 */
typedef tagEXTLOGFONTA *LPEXTLOGFONTA;

/* 11200 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRIC;

/* 11201 */
typedef tagEXTLOGFONTA *NPEXTLOGFONTA;

/* 11202 */
typedef void (__stdcall *jvmtiEventThreadEnd)(_jvmtiEnv *, JNIEnv_ *, _jobject *);

/* 11203 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRIC;

/* 11204 */
typedef joyinfo_tag *LPJOYINFO;

/* 11205 */
typedef _CRYPT_RSAES_OAEP_PARAMETERS *PCRYPT_RSAES_OAEP_PARAMETERS;

/* 11206 */
typedef const wchar_t *PCUNZWCH;

/* 11207 */
typedef joyinfo_tag *NPJOYINFO;

/* 11208 */
typedef _STORAGE_IDENTIFIER *PSTORAGE_IDENTIFIER;

/* 11209 */
typedef IErrorInfo *LPERRORINFO;

/* 11210 */
typedef _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;

/* 11211 */
typedef _BIDI_REQUEST_DATA *LPBIDI_REQUEST_DATA;

/* 11212 */
typedef Node **DUIterator_Last;

/* 11213 */
typedef _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;

/* 11214 */
typedef _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;

/* 11215 */
typedef tagICONMETRICSA *LPICONMETRICS;

/* 11216 */
typedef _OFSTRUCT *LPOFSTRUCT;

/* 11217 */
typedef _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;

/* 11218 */
typedef OPENCARD_SEARCH_CRITERIAW *LPOPENCARD_SEARCH_CRITERIAW;

/* 11219 */
typedef unsigned __int16 ATOM;

/* 11220 */
typedef char __static_assert_t[1];

/* 11221 */
typedef _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER;

/* 11222 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;

/* 11223 */
typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;

/* 11224 */
typedef _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCT;

/* 11225 */
typedef OPENCARD_SEARCH_CRITERIAA *LPOPENCARD_SEARCH_CRITERIAA;

/* 11226 */
typedef tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;

/* 11227 */
typedef _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;

/* 11228 */
typedef threadmbcinfostruct *pthreadmbcinfo;

/* 11229 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;

/* 11230 */
typedef int (__stdcall *LPMMIOPROC)(char *, unsigned int, int, int);

/* 11231 */
typedef _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;

/* 11232 */
typedef tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;

/* 11233 */
typedef _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;

/* 11234 */
typedef _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;

/* 11235 */
typedef unsigned int (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_W)(wchar_t *, unsigned int);

/* 11236 */
typedef tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;

/* 11237 */
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 11238 */
typedef unsigned int (__stdcall *LPSETUPHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 11239 */
typedef tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;

/* 11240 */
typedef _DOCINFOA *LPDOCINFO;

/* 11241 */
typedef _EFS_RPC_BLOB *PEFS_RPC_BLOB;

/* 11242 */
typedef _PRINTER_INFO_4A *LPPRINTER_INFO_4A;

/* 11243 */
typedef HDROP__ *HDROP;

/* 11244 */
typedef _NOTIFYICONDATAA *PNOTIFYICONDATA;

/* 11245 */
typedef _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;

/* 11246 */
typedef _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;

/* 11247 */
typedef _CONSOLE_FONT_INFOEX *PCONSOLE_FONT_INFOEX;

/* 11248 */
typedef tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMS;

/* 11249 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(void *, const _CTL_CONTEXT *, unsigned int);

/* 11250 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 11251 */
typedef tagPROCESSENTRY32W *LPPROCESSENTRY32W;

/* 11252 */
typedef unsigned __int8 jubyte;

/* 11253 */
typedef tagPOLYTEXTA *PPOLYTEXT;

/* 11254 */
typedef const _CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;

/* 11255 */
typedef unsigned int (__stdcall *PGET_SYSTEM_WOW64_DIRECTORY_A)(char *, unsigned int);

/* 11256 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(void *, const _CRL_CONTEXT *, unsigned int);

/* 11257 */
typedef mmtime_tag *NPMMTIME;

/* 11258 */
typedef jvmtiIterationControl (__stdcall *jvmtiStackReferenceCallback)(jvmtiHeapRootKind, __int64, __int64, __int64 *, __int64, int, struct _jmethodID *, int, void *);

/* 11259 */
typedef mmtime_tag *LPMMTIME;

/* 11260 */
typedef _TAPE_STATISTICS *PTAPE_STATISTICS;

/* 11261 */
typedef _PRINTER_INFO_4W *LPPRINTER_INFO_4W;

/* 11262 */
typedef _LDT_ENTRY *PLDT_ENTRY;

/* 11263 */
typedef void (__stdcall *PTP_WORK_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_WORK *);

/* 11264 */
typedef int (__cdecl *_sort_Fn)(const void *, const void *);

/* 11265 */
typedef tagENHMETAHEADER *PENHMETAHEADER;

/* 11266 */
typedef const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 11267 */
typedef tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;

/* 11268 */
typedef _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;

/* 11269 */
typedef _POINTFLOAT *PPOINTFLOAT;

/* 11270 */
typedef _PRINTER_INFO_2W *PPRINTER_INFO_2W;

/* 11271 */
typedef _CERT_LOGOTYPE_IMAGE_INFO *PCERT_LOGOTYPE_IMAGE_INFO;

/* 11272 */
typedef BATTERY_REPORTING_SCALE *PBATTERY_REPORTING_SCALE;

/* 11273 */
typedef tagEMRELLIPSE *PEMRELLIPSE;

/* 11274 */
typedef void (__stdcall *PTIMERAPCROUTINE)(void *, unsigned int, unsigned int);

/* 11275 */
typedef tagSOUNDSENTRYW *LPSOUNDSENTRYW;

/* 11276 */
typedef _TRIVERTEX *LPTRIVERTEX;

/* 11277 */
typedef _OCSP_REQUEST_ENTRY *POCSP_REQUEST_ENTRY;

/* 11278 */
typedef tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA;

/* 11279 */
typedef void (__stdcall *jvmtiEventSingleStep)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64);

/* 11280 */
typedef _CRYPTOAPI_BLOB *PDATA_BLOB;

/* 11281 */
typedef _MMCKINFO *PMMCKINFO;

/* 11282 */
typedef PPM_IDLESTATE_EVENT *PPPM_IDLESTATE_EVENT;

/* 11283 */
typedef _HARDWARE_COUNTER_DATA *PHARDWARE_COUNTER_DATA;

/* 11284 */
typedef unsigned int *LPSCARDHANDLE;

/* 11285 */
typedef int *PSCODE;

/* 11286 */
typedef char *PZZTSTR;

/* 11287 */
typedef void (__stdcall *APC_CALLBACK_FUNCTION)(unsigned int, void *, void *);

/* 11288 */
typedef int NativeType;

/* 11289 */
typedef tagKEYBDINPUT *LPKEYBDINPUT;

/* 11290 */
typedef __int16 *PSHORT;

/* 11291 */
typedef tagPROCESSENTRY32 *LPPROCESSENTRY32;

/* 11292 */
typedef unsigned __int16 WORD;

/* 11293 */
typedef _TAPE_PREPARE *PTAPE_PREPARE;

/* 11294 */
typedef _PRINTER_INFO_1W *PPRINTER_INFO_1W;

/* 11295 */
typedef unsigned __int16 USHORT;

/* 11296 */
typedef tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;

/* 11297 */
typedef _CERT_ECC_SIGNATURE *PCERT_ECC_SIGNATURE;

/* 11298 */
typedef _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

/* 11299 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(void *, const _CTL_CONTEXT *, unsigned int, unsigned int, const void *);

/* 11300 */
typedef _PRINTER_INFO_4A *LPPRINTER_INFO_4;

/* 11301 */
typedef int (__stdcall *LOCALE_ENUMPROCW)(wchar_t *);

/* 11302 */
typedef tagAUXCAPSW *NPAUXCAPSW;

/* 11303 */
typedef _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;

/* 11304 */
typedef void *HCOUNTER;

/* 11305 */
typedef tagAUXCAPSW *LPAUXCAPSW;

/* 11306 */
typedef _RPC_MESSAGE *PRPC_MESSAGE;

/* 11307 */
typedef tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;

/* 11308 */
typedef tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;

/* 11309 */
typedef char s1;

/* 11310 */
typedef tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;

/* 11311 */
typedef unsigned __int16 FSHORT;

/* 11312 */
typedef _EV_EXTRA_CERT_CHAIN_POLICY_STATUS *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;

/* 11313 */
typedef unsigned __int8 u1;

/* 11314 */
typedef __int16 jshort;

/* 11315 */
typedef tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;

/* 11316 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATA;

/* 11317 */
typedef const _CTL_USAGE *PCCERT_ENHKEY_USAGE;

/* 11318 */
typedef in_addr *PIN_ADDR;

/* 11319 */
typedef char in_cset_state_t;

/* 11320 */
typedef tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;

/* 11321 */
typedef tagMIXERCAPS2W *PMIXERCAPS2W;

/* 11322 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(void *, const _CTL_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 11323 */
typedef char **PZPSTR;

/* 11324 */
typedef tagWINDOWPLACEMENT *PWINDOWPLACEMENT;

/* 11325 */
typedef int (__stdcall *SERVER_ROUTINE)();

/* 11326 */
typedef __int16 _Null_type;

/* 11327 */
typedef _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;

/* 11328 */
typedef tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;

/* 11329 */
typedef PROCESSOR_PERFSTATE_POLICY *PPROCESSOR_PERFSTATE_POLICY;

/* 11330 */
typedef pvalueW *PPVALUEW;

/* 11331 */
typedef tagCY *LPCY;

/* 11332 */
typedef _CERT_LOGOTYPE_AUDIO *PCERT_LOGOTYPE_AUDIO;

/* 11333 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 11334 */
typedef servent *PSERVENT;

/* 11335 */
typedef _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO;

/* 11336 */
typedef tagRECONVERTSTRING *NPRECONVERTSTRING;

/* 11337 */
typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

/* 11338 */
typedef tagRECONVERTSTRING *LPRECONVERTSTRING;

/* 11339 */
typedef void *HCRYPTASYNC;

/* 11340 */
typedef _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;

/* 11341 */
typedef void *(__stdcall *PFNDPAMERGE)(unsigned int, void *, void *, int);

/* 11342 */
typedef _XSAVE_FORMAT *PXSAVE_FORMAT;

/* 11343 */
typedef unsigned int *PUINT32;

/* 11344 */
typedef provider_info *PPROVIDER;

/* 11345 */
typedef void (__stdcall *jvmtiEventVMInit)(_jvmtiEnv *, JNIEnv_ *, _jobject *);

/* 11346 */
typedef tagWAVEINCAPSW *LPWAVEINCAPSW;

/* 11347 */
typedef _OSVERSIONINFOW *LPOSVERSIONINFOW;

/* 11348 */
typedef _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;

/* 11349 */
typedef _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;

/* 11350 */
typedef tagWAVEINCAPSW *NPWAVEINCAPSW;

/* 11351 */
typedef _PRINTER_INFO_7W *PPRINTER_INFO_7W;

/* 11352 */
typedef void **PPVOID;

/* 11353 */
typedef IAdviseSink2 *LPADVISESINK2;

/* 11354 */
typedef tagMIDIINCAPS2W *NPMIDIINCAPS2W;

/* 11355 */
typedef const tagCHOOSEFONTA *PCCHOOSEFONTA;

/* 11356 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(void *, const _CERT_CONTEXT *, void *, unsigned int);

/* 11357 */
typedef tagMIDIINCAPS2W *LPMIDIINCAPS2W;

/* 11358 */
typedef _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;

/* 11359 */
typedef _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;

/* 11360 */
typedef tagCUSTDATAITEM *LPCUSTDATAITEM;

/* 11361 */
typedef tagWAVEOUTCAPS2A *PWAVEOUTCAPS2A;

/* 11362 */
typedef tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;

/* 11363 */
typedef _CTL_USAGE *PCERT_ENHKEY_USAGE;

/* 11364 */
typedef tagWAVEINCAPSA *PWAVEINCAPSA;

/* 11365 */
typedef tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;

/* 11366 */
typedef int MEMBERID;

/* 11367 */
typedef int __stdcall RPC_FORWARD_FUNCTION(_GUID *, _RPC_VERSION *, _GUID *, unsigned __int8 *, void **);

/* 11368 */
typedef _CRYPTOAPI_BLOB *PCRL_BLOB;

/* 11369 */
typedef const tagCHOOSEFONTW *PCCHOOSEFONTW;

/* 11370 */
typedef tagWAVEINCAPSA *NPWAVEINCAPSA;

/* 11371 */
typedef __int16 nullptr_t;

/* 11372 */
typedef IAdviseSink *LPADVISESINK;

/* 11373 */
typedef _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;

/* 11374 */
typedef tagWAVEINCAPSA *LPWAVEINCAPSA;

/* 11375 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *LPPROC_THREAD_ATTRIBUTE_LIST;

/* 11376 */
typedef void *LPVOID;

/* 11377 */
typedef WSAData *LPWSADATA;

/* 11378 */
typedef int (__stdcall *jvmtiReservedCallback)();

/* 11379 */
typedef int SHANDLE_PTR;

/* 11380 */
typedef tagMIXERCAPSW *LPMIXERCAPSW;

/* 11381 */
typedef tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;

/* 11382 */
typedef tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMS;

/* 11383 */
typedef int off_t;

/* 11384 */
typedef _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;

/* 11385 */
typedef HMIDIOUT__ *HMIDIOUT;

/* 11386 */
typedef _cpinfo *LPCPINFO;

/* 11387 */
typedef value_entW *PVALENTW;

/* 11388 */
typedef unsigned __int16 *LPWORD;

/* 11389 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;

/* 11390 */
typedef _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;

/* 11391 */
typedef tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;

/* 11392 */
typedef _COORD *PCOORD;

/* 11393 */
typedef tagEMRSELECTOBJECT *PEMRSELECTOBJECT;

/* 11394 */
typedef tagCUSTDATA *LPCUSTDATA;

/* 11395 */
typedef tagMENUITEMINFOA *LPMENUITEMINFOA;

/* 11396 */
typedef _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;

/* 11397 */
typedef _REASSIGN_BLOCKS_EX *PREASSIGN_BLOCKS_EX;

/* 11398 */
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 11399 */
typedef ITypeComp *LPTYPECOMP;

/* 11400 */
typedef tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;

/* 11401 */
typedef tagEMRFILLPATH *PEMRFILLPATH;

/* 11402 */
typedef tagDESIGNVECTOR *PDESIGNVECTOR;

/* 11403 */
typedef tagMENUITEMINFOW *LPMENUITEMINFOW;

/* 11404 */
typedef _SERVICE_TRIGGER_INFO *PSERVICE_TRIGGER_INFO;

/* 11405 */
typedef HFONT__ *HFONT;

/* 11406 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;

/* 11407 */
typedef tagEMREOF *PEMREOF;

/* 11408 */
typedef _PSAPI_WORKING_SET_EX_BLOCK *PPSAPI_WORKING_SET_EX_BLOCK;

/* 11409 */
typedef _PERFORMANCE_INFORMATION *PPERFORMACE_INFORMATION;

/* 11410 */
typedef ICreateTypeLib2 *LPCREATETYPELIB2;

/* 11411 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUS;

/* 11412 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;

/* 11413 */
typedef _PRINTER_INFO_5W *PPRINTER_INFO_5W;

/* 11414 */
typedef int LONG;

/* 11415 */
typedef const tagCHOOSEFONTA *PCCHOOSEFONT;

/* 11416 */
typedef tagWAVEINCAPS2A *LPWAVEINCAPS2;

/* 11417 */
typedef int *LPLONG;

/* 11418 */
typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 11419 */
typedef tagWAVEINCAPS2A *NPWAVEINCAPS2;

/* 11420 */
typedef tagMENUINFO *LPMENUINFO;

/* 11421 */
typedef unsigned __int16 *PPARAM_OFFSETTABLE;

/* 11422 */
typedef unsigned int CALID;

/* 11423 */
typedef tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMS;

/* 11424 */
typedef void (__stdcall *jvmtiEventException)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jobject *, struct _jmethodID *, __int64);

/* 11425 */
typedef int (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(const char *, unsigned int, unsigned int, unsigned int, const void *, void *, _CERT_STORE_PROV_INFO *);

/* 11426 */
typedef tagWAVEINCAPSA *NPWAVEINCAPS;

/* 11427 */
typedef jvmtiError (*jvmtiExtensionFunction)(_jvmtiEnv *, ...);

/* 11428 */
typedef tagWAVEINCAPSA *LPWAVEINCAPS;

/* 11429 */
typedef tagEMRLINETO *PEMRMOVETOEX;

/* 11430 */
typedef unsigned int HCRYPTPROV_LEGACY;

/* 11431 */
typedef PPM_WMI_PERF_STATES_EX *PPPM_WMI_PERF_STATES_EX;

/* 11432 */
typedef bool (__thiscall *Predicate)(SimpleThresholdPolicy *this, int, int, CompLevel);

/* 11433 */
typedef _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;

/* 11434 */
typedef int (__stdcall *EDITWORDBREAKPROCW)(wchar_t *, int, int, int);

/* 11435 */
typedef IExternalConnection *LPEXTERNALCONNECTION;

/* 11436 */
typedef int ByteSize;

/* 11437 */
typedef const tagPRINTPAGERANGE *PCPRINTPAGERANGE;

/* 11438 */
typedef void (__stdcall *jvmtiEventDataDumpRequest)(_jvmtiEnv *);

/* 11439 */
typedef tagICONMETRICSA *LPICONMETRICSA;

/* 11440 */
typedef _PRINTER_INFO_4W *PPRINTER_INFO_4W;

/* 11441 */
typedef _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO;

/* 11442 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;

/* 11443 */
typedef _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO;

/* 11444 */
typedef Set *(__cdecl *Set_Constructor)(Arena *);

/* 11445 */
typedef tagMENUITEMINFOA *LPMENUITEMINFO;

/* 11446 */
typedef _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;

/* 11447 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIERTO;

/* 11448 */
typedef tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

/* 11449 */
typedef __int64 time_t;

/* 11450 */
typedef tagCURSORINFO *PCURSORINFO;

/* 11451 */
typedef _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;

/* 11452 */
typedef _TOKEN_GROUPS *PTOKEN_GROUPS;

/* 11453 */
typedef void (__stdcall *LPTIMECALLBACK)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 11454 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 11455 */
typedef IMarshal2 *LPMARSHAL2;

/* 11456 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXT;

/* 11457 */
typedef unsigned __int16 SECURITY_DESCRIPTOR_CONTROL;

/* 11458 */
typedef tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;

/* 11459 */
typedef VMRegImpl *VMReg;

/* 11460 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA;

/* 11461 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMSA;

/* 11462 */
typedef tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;

/* 11463 */
typedef _PORT_INFO_3A *LPPORT_INFO_3A;

/* 11464 */
typedef _PORT_INFO_2A *LPPORT_INFO_2A;

/* 11465 */
typedef _PORT_INFO_1A *LPPORT_INFO_1A;

/* 11466 */
typedef _PRINTER_INFO_7A *LPPRINTER_INFO_7A;

/* 11467 */
typedef _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;

/* 11468 */
typedef unsigned __int64 *PULONG64;

/* 11469 */
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;

/* 11470 */
typedef IEnumString *LPENUMSTRING;

/* 11471 */
typedef _DOC_INFO_3W *PDOC_INFO_3W;

/* 11472 */
typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

/* 11473 */
typedef _FILETIME *LPFILETIME;

/* 11474 */
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

/* 11475 */
typedef SCARD_READERSTATEW *LPSCARD_READERSTATEW;

/* 11476 */
typedef _PRINTER_INFO_7W *LPPRINTER_INFO_7W;

/* 11477 */
typedef timeval *PTIMEVAL;

/* 11478 */
typedef _STORAGE_QUERY_TYPE *PSTORAGE_QUERY_TYPE;

/* 11479 */
typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

/* 11480 */
typedef char CHAR;

/* 11481 */
typedef tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST;

/* 11482 */
typedef _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;

/* 11483 */
typedef tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;

/* 11484 */
typedef tagINPUT *LPINPUT;

/* 11485 */
typedef _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;

/* 11486 */
typedef _OCSP_RESPONSE_INFO *POCSP_RESPONSE_INFO;

/* 11487 */
typedef int (__stdcall *WINSTAENUMPROC)(char *, int);

/* 11488 */
typedef IBinding *LPBINDING;

/* 11489 */
typedef _RTL_SRWLOCK *PSRWLOCK;

/* 11490 */
typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 11491 */
typedef unsigned int __stdcall RTL_RUN_ONCE_INIT_FN(_RTL_RUN_ONCE *, void *, void **);

/* 11492 */
typedef _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;

/* 11493 */
typedef _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;

/* 11494 */
typedef _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;

/* 11495 */
typedef _DOC_INFO_2W *PDOC_INFO_2W;

/* 11496 */
typedef _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A;

/* 11497 */
typedef _MODEMDEVCAPS *LPMODEMDEVCAPS;

/* 11498 */
typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);

/* 11499 */
typedef _COMMPROP *LPCOMMPROP;

/* 11500 */
typedef tagSTYLESTRUCT *LPSTYLESTRUCT;

/* 11501 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELP;

/* 11502 */
typedef _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO;

/* 11503 */
typedef void **PHANDLE;

/* 11504 */
typedef _QUOTA_LIMITS *PQUOTA_LIMITS;

/* 11505 */
typedef _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;

/* 11506 */
typedef tagPAINTSTRUCT *PPAINTSTRUCT;

/* 11507 */
typedef _userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

/* 11508 */
typedef wchar_t *PZZWSTR;

/* 11509 */
typedef _currencyfmtW *LPCURRENCYFMTW;

/* 11510 */
typedef tagMIXERLINEW *LPMIXERLINEW;

/* 11511 */
typedef _RemotableHandle *wireHDC;

/* 11512 */
typedef IRootStorage *LPROOTSTORAGE;

/* 11513 */
typedef unsigned int *PTP_VERSION;

/* 11514 */
typedef tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;

/* 11515 */
typedef _CRYPT_URL_INFO *PCRYPT_URL_INFO;

/* 11516 */
typedef _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;

/* 11517 */
typedef HKL__ **LPHKL;

/* 11518 */
typedef _PRINTER_INFO_7A *LPPRINTER_INFO_7;

/* 11519 */
typedef OPENCARDNAMEA *POPENCARDNAME;

/* 11520 */
typedef _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;

/* 11521 */
typedef tagFILTERKEYS *LPFILTERKEYS;

/* 11522 */
typedef _DOC_INFO_1W *PDOC_INFO_1W;

/* 11523 */
typedef __int16 s2;

/* 11524 */
typedef unsigned __int16 u2;

/* 11525 */
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

/* 11526 */
typedef tagEMREXTESCAPE *PEMREXTESCAPE;

/* 11527 */
typedef tagBITMAPFILEHEADER *PBITMAPFILEHEADER;

/* 11528 */
typedef _CERT_LOGOTYPE_DATA *PCERT_LOGOTYPE_DATA;

/* 11529 */
typedef int (__stdcall *MINIDUMP_CALLBACK_ROUTINE)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);

/* 11530 */
typedef tagHSZPAIR *PHSZPAIR;

/* 11531 */
typedef _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;

/* 11532 */
typedef void __stdcall RPC_SECURITY_CALLBACK_FN(void *);

/* 11533 */
typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY;

/* 11534 */
typedef tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;

/* 11535 */
typedef int (__cdecl *SafeFetchNStub)(int *, int);

/* 11536 */
typedef unsigned int (__stdcall *LPHANDLER_FUNCTION_EX)(unsigned int, unsigned int, void *, void *);

/* 11537 */
typedef tagEMRGLSRECORD *PEMRGLSRECORD;

/* 11538 */
typedef _BCRYPT_ECCKEY_BLOB *PBCRYPT_ECCKEY_BLOB;

/* 11539 */
typedef _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE;

/* 11540 */
typedef tagABORTPATH *PEMRCLOSEFIGURE;

/* 11541 */
typedef tagCONVINFO *PCONVINFO;

/* 11542 */
typedef int (__stdcall *WINSTAENUMPROCA)(char *, int);

/* 11543 */
typedef tagGCP_RESULTSA *LPGCP_RESULTSA;

/* 11544 */
typedef _STORAGE_ALLOCATE_BC_STREAM_OUTPUT *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;

/* 11545 */
typedef tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;

/* 11546 */
typedef unsigned int *PUINT;

/* 11547 */
typedef int (__stdcall *LANGUAGEGROUP_ENUMPROCA)(unsigned int, char *, char *, unsigned int, int);

/* 11548 */
typedef _STARTUPINFOW *LPSTARTUPINFOW;

/* 11549 */
typedef unsigned __int16 ShenandoahLiveData;

/* 11550 */
typedef tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;

/* 11551 */
typedef _STORAGE_GET_BC_PROPERTIES_OUTPUT *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;

/* 11552 */
typedef int (__stdcall *PFNDACOMPARE)(void *, void *, int);

/* 11553 */
typedef _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;

/* 11554 */
typedef void (*jvmtiExtensionEvent)(_jvmtiEnv *, ...);

/* 11555 */
typedef unsigned int juint;

/* 11556 */
typedef GenerationSpec *GenerationSpecPtr;

/* 11557 */
typedef _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;

/* 11558 */
typedef _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;

/* 11559 */
typedef _KCRM_PROTOCOL_BLOB *PKCRM_PROTOCOL_BLOB;

/* 11560 */
typedef tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMS;

/* 11561 */
typedef HMIDIOUT__ **LPHMIDIOUT;

/* 11562 */
typedef tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;

/* 11563 */
typedef int (__stdcall *LANGUAGEGROUP_ENUMPROCW)(unsigned int, wchar_t *, wchar_t *, unsigned int, int);

/* 11564 */
typedef tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

/* 11565 */
typedef _MINIDUMP_CALLBACK_INFORMATION *PMINIDUMP_CALLBACK_INFORMATION;

/* 11566 */
typedef int (__stdcall *WINSTAENUMPROCW)(wchar_t *, int);

/* 11567 */
typedef _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

/* 11568 */
typedef tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;

/* 11569 */
typedef tagPOINTS *LPPOINTS;

/* 11570 */
typedef tagWAVEINCAPS2A *PWAVEINCAPS2;

/* 11571 */
typedef __int64 INT64;

/* 11572 */
typedef __int64 int64;

/* 11573 */
typedef _TAPE_SET_POSITION *PTAPE_SET_POSITION;

/* 11574 */
typedef tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;

/* 11575 */
typedef tagBITMAPCOREINFO *PBITMAPCOREINFO;

/* 11576 */
typedef _NETINFOSTRUCT *LPNETINFOSTRUCT;

/* 11577 */
typedef _STORAGE_WRITE_CACHE_PROPERTY *PSTORAGE_WRITE_CACHE_PROPERTY;

/* 11578 */
typedef tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;

/* 11579 */
typedef tagCHOOSEFONTW *LPCHOOSEFONTW;

/* 11580 */
typedef HCONVLIST__ *HCONVLIST;

/* 11581 */
typedef _PSAPI_WORKING_SET_BLOCK *PPSAPI_WORKING_SET_BLOCK;

/* 11582 */
typedef tagXFORM *PXFORM;

/* 11583 */
typedef tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;

/* 11584 */
typedef tagAXISINFOW *PAXISINFOW;

/* 11585 */
typedef unsigned __int16 FILEOP_FLAGS;

/* 11586 */
typedef unsigned __int16 *LPCLIPFORMAT;

/* 11587 */
typedef CM_Power_Data_s *PCM_POWER_DATA;

/* 11588 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

/* 11589 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(void *, const _CRL_CONTEXT *, void *, unsigned int);

/* 11590 */
typedef tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;

/* 11591 */
typedef _NT_TIB *PNT_TIB;

/* 11592 */
typedef tagCHOOSEFONTA *LPCHOOSEFONTA;

/* 11593 */
typedef tagEMRFORMAT *PEMRFORMAT;

/* 11594 */
typedef tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;

/* 11595 */
typedef int (__stdcall *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 11596 */
typedef _CERT_OR_CRL_BUNDLE *PCERT_OR_CRL_BUNDLE;

/* 11597 */
typedef tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;

/* 11598 */
typedef tagSTATDATA *LPSTATDATA;

/* 11599 */
typedef IPropertyBag *LPPROPERTYBAG;

/* 11600 */
typedef int (__stdcall *GEO_ENUMPROC)(int);

/* 11601 */
typedef _RemotableHandle *wireHRGN;

/* 11602 */
typedef _PACKEDEVENTINFO *PPACKEDEVENTINFO;

/* 11603 */
typedef _CERT_BIOMETRIC_DATA *PCERT_BIOMETRIC_DATA;

/* 11604 */
typedef long double float64;

/* 11605 */
typedef int (__stdcall *PROPENUMPROCEXW)(HWND__ *, wchar_t *, void *, unsigned int);

/* 11606 */
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(unsigned int, char **);

/* 11607 */
typedef tagJOYCAPSA *PJOYCAPSA;

/* 11608 */
typedef _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO;

/* 11609 */
typedef IEnumOLEVERB *LPENUMOLEVERB;

/* 11610 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;

/* 11611 */
typedef _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST;

/* 11612 */
typedef unsigned __int16 *PUHALF_PTR;

/* 11613 */
typedef midihdr_tag *PMIDIHDR;

/* 11614 */
typedef char (*_Yes)[2];

/* 11615 */
typedef tagJOYCAPSW *PJOYCAPSW;

/* 11616 */
typedef _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO;

/* 11617 */
typedef int (__cdecl *EnumModulesCallbackFunc)(int, char *, unsigned __int8 *, unsigned int, void *);

/* 11618 */
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, unsigned __int8 *, void *);

/* 11619 */
typedef int (__stdcall *PROPENUMPROCEXA)(HWND__ *, char *, void *, unsigned int);

/* 11620 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;

/* 11621 */
typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION;

/* 11622 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;

/* 11623 */
typedef tagWAVEINCAPS2A *PWAVEINCAPS2A;

/* 11624 */
typedef tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMS;

/* 11625 */
typedef HMETAFILE__ *HMETAFILE;

/* 11626 */
typedef tagPRINTPAGERANGE *LPPRINTPAGERANGE;

/* 11627 */
typedef MOVE_FILE_DATA *PMOVE_FILE_DATA;

/* 11628 */
typedef _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;

/* 11629 */
typedef BITMAPV4HEADER *LPBITMAPV4HEADER;

/* 11630 */
typedef int (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *, unsigned int, const wchar_t *, _CERT_PHYSICAL_STORE_INFO *, void *, void *);

/* 11631 */
typedef unsigned __int16 UINT16;

/* 11632 */
typedef _OLESTREAMVTBL *LPOLESTREAMVTBL;

/* 11633 */
typedef void *RPC_AUTH_IDENTITY_HANDLE;

/* 11634 */
typedef _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;

/* 11635 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;

/* 11636 */
typedef __int16 *PINT16;

/* 11637 */
typedef _CERT_POLICY_ID *PCERT_POLICY_ID;

/* 11638 */
typedef void *PMIDL_XMIT_TYPE;

/* 11639 */
typedef tagIDLDESC *LPIDLDESC;

/* 11640 */
typedef unsigned int __stdcall PM_OPEN_PROC(wchar_t *);

/* 11641 */
typedef IServiceProvider *LPSERVICEPROVIDER;

/* 11642 */
typedef unsigned int KSPIN_LOCK;

/* 11643 */
typedef tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;

/* 11644 */
typedef PPM_IDLE_ACCOUNTING *PPPM_IDLE_ACCOUNTING;

/* 11645 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;

/* 11646 */
typedef int (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *, unsigned int, void *, unsigned int *);

/* 11647 */
typedef _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;

/* 11648 */
typedef tagWAVEINCAPS2W *PWAVEINCAPS2W;

/* 11649 */
typedef _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

/* 11650 */
typedef unsigned int TP_VERSION;

/* 11651 */
typedef tagCHOOSEFONTA *LPCHOOSEFONT;

/* 11652 */
typedef _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;

/* 11653 */
typedef _BIDI_REQUEST_CONTAINER *LPBIDI_REQUEST_CONTAINER;

/* 11654 */
typedef _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;

/* 11655 */
typedef tagEMRMASKBLT *PEMRMASKBLT;

/* 11656 */
typedef void (__stdcall *RPC_AUTH_KEY_RETRIEVAL_FN)(void *, unsigned __int16 *, unsigned int, void **, int *);

/* 11657 */
typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;

/* 11658 */
typedef _SERVICE_DELAYED_AUTO_START_INFO *LPSERVICE_DELAYED_AUTO_START_INFO;

/* 11659 */
typedef _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;

/* 11660 */
typedef _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;

/* 11661 */
typedef _IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

/* 11662 */
typedef sockaddr_in *LPSOCKADDR_IN;

/* 11663 */
typedef _DISK_EX_INT13_INFO *PDISK_EX_INT13_INFO;

/* 11664 */
typedef tagJOYCAPSA *PJOYCAPS;

/* 11665 */
typedef _SESSION_HEADER *PSESSION_HEADER;

/* 11666 */
typedef _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;

/* 11667 */
typedef void (__cdecl *java_call_t)(JavaValue *, methodHandle *, JavaCallArguments *, Thread *);

/* 11668 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINE16;

/* 11669 */
typedef _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;

/* 11670 */
typedef _EFS_KEY_INFO *PEFS_KEY_INFO;

/* 11671 */
typedef long double DOUBLE;

/* 11672 */
typedef tagFORMATETC *LPFORMATETC;

/* 11673 */
typedef tagWNDCLASSEXA *PWNDCLASSEXA;

/* 11674 */
typedef const _SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

/* 11675 */
typedef tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;

/* 11676 */
typedef void (__cdecl *NFunc)(Node *, void *);

/* 11677 */
typedef _MODEMSETTINGS *PMODEMSETTINGS;

/* 11678 */
typedef _TOKEN_LINKED_TOKEN *PTOKEN_LINKED_TOKEN;

/* 11679 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;

/* 11680 */
typedef _numberfmtA *LPNUMBERFMTA;

/* 11681 */
typedef int (__stdcall *PROPENUMPROCEX)(HWND__ *, char *, void *, unsigned int);

/* 11682 */
typedef tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMS;

/* 11683 */
typedef tagJOYCAPS2A *PJOYCAPS2;

/* 11684 */
typedef char *PSZ;

/* 11685 */
typedef _PORT_INFO_3A *LPPORT_INFO_3;

/* 11686 */
typedef const _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 11687 */
typedef _PORT_INFO_2A *LPPORT_INFO_2;

/* 11688 */
typedef _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;

/* 11689 */
typedef _PORT_INFO_1A *LPPORT_INFO_1;

/* 11690 */
typedef struct _jfieldID *jfieldID;

/* 11691 */
typedef _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;

/* 11692 */
typedef _PERFORMANCE_INFORMATION *PPERFORMANCE_INFORMATION;

/* 11693 */
typedef wchar_t **PZPWSTR;

/* 11694 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMS;

/* 11695 */
typedef _TOKEN_USER *PTOKEN_USER;

/* 11696 */
typedef _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;

/* 11697 */
typedef char *PCH;

/* 11698 */
typedef __int64 USN;

/* 11699 */
typedef _DISK_PARTITION_INFO *PDISK_PARTITION_INFO;

/* 11700 */
typedef _MINIDUMP_EXCEPTION_INFORMATION *PMINIDUMP_EXCEPTION_INFORMATION;

/* 11701 */
typedef IStorage *LPSTORAGE;

/* 11702 */
typedef HSZ__ *HSZ;

/* 11703 */
typedef unsigned int HELPPOLY;

/* 11704 */
typedef _CTL_INFO *PCTL_INFO;

/* 11705 */
typedef int (__stdcall *LPOCNCHKPROC)(unsigned int, unsigned int, void *);

/* 11706 */
typedef HDDEDATA__ *HDDEDATA;

/* 11707 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;

/* 11708 */
typedef tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;

/* 11709 */
typedef unsigned int SIZE_T;

/* 11710 */
typedef unsigned int size_t;

/* 11711 */
typedef tagTOGGLEKEYS *LPTOGGLEKEYS;

/* 11712 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;

/* 11713 */
typedef _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;

/* 11714 */
typedef tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;

/* 11715 */
typedef _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;

/* 11716 */
typedef RPC_IMPORT_CONTEXT_P *PRPC_IMPORT_CONTEXT_P;

/* 11717 */
typedef tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;

/* 11718 */
typedef _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;

/* 11719 */
typedef _LUID_AND_ATTRIBUTES (*PLUID_AND_ATTRIBUTES_ARRAY)[1];

/* 11720 */
typedef _TOKEN_MANDATORY_POLICY *PTOKEN_MANDATORY_POLICY;

/* 11721 */
typedef _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;

/* 11722 */
typedef _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;

/* 11723 */
typedef unsigned __int16 *LPPATCHARRAY;

/* 11724 */
typedef joyinfo_tag *PJOYINFO;

/* 11725 */
typedef _CLASS_MEDIA_CHANGE_CONTEXT *PCLASS_MEDIA_CHANGE_CONTEXT;

/* 11726 */
typedef tagRID_DEVICE_INFO *LPRID_DEVICE_INFO;

/* 11727 */
typedef tagABORTPATH *PEMRSAVEDC;

/* 11728 */
typedef _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;

/* 11729 */
typedef _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1;

/* 11730 */
typedef _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;

/* 11731 */
typedef _STORAGE_DEVICE_ID_DESCRIPTOR *PSTORAGE_DEVICE_ID_DESCRIPTOR;

/* 11732 */
typedef _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUES;

/* 11733 */
typedef tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;

/* 11734 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(void *, const _CRL_CONTEXT *, unsigned int);

/* 11735 */
typedef tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;

/* 11736 */
typedef _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2;

/* 11737 */
typedef int MemoryCounterType;

/* 11738 */
typedef void (__stdcall *jvmtiEventClassPrepare)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jclass *);

/* 11739 */
typedef __int16 VARIANT_BOOL;

/* 11740 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELPA;

/* 11741 */
typedef tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;

/* 11742 */
typedef void (__cdecl *unexpected_function)();

/* 11743 */
typedef OPENCARDNAMEA *POPENCARDNAMEA;

/* 11744 */
typedef _RemotableHandle *wireHBRUSH;

/* 11745 */
typedef _COMMTIMEOUTS *LPCOMMTIMEOUTS;

/* 11746 */
typedef _PRINTER_INFO_6 *LPPRINTER_INFO_6;

/* 11747 */
typedef tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;

/* 11748 */
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;

/* 11749 */
typedef _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;

/* 11750 */
typedef _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;

/* 11751 */
typedef _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;

/* 11752 */
typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX;

/* 11753 */
typedef _FILETIME *PFILETIME;

/* 11754 */
typedef void *PDH_HCOUNTER;

/* 11755 */
typedef _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;

/* 11756 */
typedef void __stdcall TIMECALLBACK(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 11757 */
typedef _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;

/* 11758 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIG;

/* 11759 */
typedef _CRYPT_CONTEXT_FUNCTIONS *PCRYPT_CONTEXT_FUNCTIONS;

/* 11760 */
typedef tagGCP_RESULTSA *LPGCP_RESULTS;

/* 11761 */
typedef void (__stdcall *PTP_WAIT_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_WAIT *, unsigned int);

/* 11762 */
typedef int HFILE;

/* 11763 */
typedef _CERT_OTHER_LOGOTYPE_INFO *PCERT_OTHER_LOGOTYPE_INFO;

/* 11764 */
typedef _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;

/* 11765 */
typedef tagACTCTXA *PACTCTXA;

/* 11766 */
typedef unsigned __int64 *PDWORD64;

/* 11767 */
typedef void (__stdcall *XMIT_HELPER_ROUTINE)(_MIDL_STUB_MESSAGE *);

/* 11768 */
typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

/* 11769 */
typedef unsigned int *PUINT_PTR;

/* 11770 */
typedef tagEMRSELECTCLIPPATH *PEMRSETROP2;

/* 11771 */
typedef tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;

/* 11772 */
typedef FLASHWINFO *PFLASHWINFO;

/* 11773 */
typedef int (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *, unsigned int, void *);

/* 11774 */
typedef const char *PCCH;

/* 11775 */
typedef fd_set *LPFD_SET;

/* 11776 */
typedef tagTEXTMETRICW *PTEXTMETRICW;

/* 11777 */
typedef int (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY)(unsigned int, unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, _CRYPT_ALGORITHM_IDENTIFIER *, unsigned __int8 *, unsigned int, unsigned int *);

/* 11778 */
typedef int (__stdcall *ICMENUMPROCW)(wchar_t *, int);

/* 11779 */
typedef void __stdcall RPC_OBJECT_INQ_FN(_GUID *, _GUID *, int *);

/* 11780 */
typedef int (__cdecl *Hash)(const void *);

/* 11781 */
typedef unsigned __int16 *PUINT16;

/* 11782 */
typedef _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;

/* 11783 */
typedef int (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY)(unsigned int *, _CRYPT_ALGORITHM_IDENTIFIER *, void *, _CERT_PUBLIC_KEY_INFO *, void *(__stdcall *)(unsigned int), unsigned int *, unsigned __int8 **, unsigned int *);

/* 11784 */
typedef _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;

/* 11785 */
typedef const tagMENUITEMINFOA *LPCMENUITEMINFOA;

/* 11786 */
typedef int (__stdcall *FONTENUMPROC)(const tagLOGFONTA *, const tagTEXTMETRICA *, unsigned int, int);

/* 11787 */
typedef unsigned __int8 SECURITY_CONTEXT_TRACKING_MODE;

/* 11788 */
typedef tagLOGBRUSH *NPLOGBRUSH;

/* 11789 */
typedef _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO;

/* 11790 */
typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

/* 11791 */
typedef tagLOGBRUSH *LPLOGBRUSH;

/* 11792 */
typedef tagLC_ID *LPLC_ID;

/* 11793 */
typedef _CONTEXT *LPCONTEXT;

/* 11794 */
typedef _STORAGE_IDENTIFIER_TYPE *PSTORAGE_IDENTIFIER_TYPE;

/* 11795 */
typedef _PARTITION_INFORMATION_EX *PPARTITION_INFORMATION_EX;

/* 11796 */
typedef IMoniker *LPMONIKER;

/* 11797 */
typedef tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;

/* 11798 */
typedef tagEMRSELECTCLIPPATH *PEMRSETBKMODE;

/* 11799 */
typedef _CRYPT_ECC_CMS_SHARED_INFO *PCRYPT_ECC_CMS_SHARED_INFO;

/* 11800 */
typedef _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;

/* 11801 */
typedef _wireSAFEARRAY *wireSAFEARRAY;

/* 11802 */
typedef void (__stdcall *jvmtiEventBreakpoint)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64);

/* 11803 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFO;

/* 11804 */
typedef tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;

/* 11805 */
typedef tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;

/* 11806 */
typedef HIMC__ *HIMC;

/* 11807 */
typedef _RTL_UMS_THREAD_INFO_CLASS *PRTL_UMS_THREAD_INFO_CLASS;

/* 11808 */
typedef int RegNr;

/* 11809 */
typedef __int16 SHORT;

/* 11810 */
typedef tagPARAMDATA *LPPARAMDATA;

/* 11811 */
typedef _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;

/* 11812 */
typedef void (__stdcall *PFIBER_START_ROUTINE)(void *);

/* 11813 */
typedef tagEXTLOGPEN *PEXTLOGPEN;

/* 11814 */
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;

/* 11815 */
typedef _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

/* 11816 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;

/* 11817 */
typedef tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;

/* 11818 */
typedef wavehdr_tag *LPWAVEHDR;

/* 11819 */
typedef tagMETARECORD *LPMETARECORD;

/* 11820 */
typedef int (__stdcall *CODEPAGE_ENUMPROCA)(char *);

/* 11821 */
typedef wavehdr_tag *NPWAVEHDR;

/* 11822 */
typedef int (__stdcall *PHANDLER_ROUTINE)(unsigned int);

/* 11823 */
typedef _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;

/* 11824 */
typedef _DEVICE_TRIM_DESCRIPTOR *PDEVICE_TRIM_DESCRIPTOR;

/* 11825 */
typedef _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;

/* 11826 */
typedef _DEVICE_WRITE_AGGREGATION_DESCRIPTOR *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;

/* 11827 */
typedef _BIDI_DATA *LPBIDI_DATA;

/* 11828 */
typedef int (__stdcall *SetSecurityDescriptorControlFnPtr)(void *, unsigned __int16, unsigned __int16);

/* 11829 */
typedef unsigned int REGSAM;

/* 11830 */
typedef tagENHMETAHEADER *LPENHMETAHEADER;

/* 11831 */
typedef _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;

/* 11832 */
typedef void (__stdcall *jvmtiEventVMObjectAlloc)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, _jclass *, __int64);

/* 11833 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATE;

/* 11834 */
typedef const DLGTEMPLATE *PROPSHEETPAGE_RESOURCE;

/* 11835 */
typedef PcDesc *PcDescPtr;

/* 11836 */
typedef int (__stdcall *FONTENUMPROCA)(const tagLOGFONTA *, const tagTEXTMETRICA *, unsigned int, int);

/* 11837 */
typedef _OCSP_BASIC_RESPONSE_ENTRY *POCSP_BASIC_RESPONSE_ENTRY;

/* 11838 */
typedef const char *PCNZTCH;

/* 11839 */
typedef tagMETHODDATA *LPMETHODDATA;

/* 11840 */
typedef BITMAPV5HEADER *LPBITMAPV5HEADER;

/* 11841 */
typedef const wchar_t *PCNZWCH;

/* 11842 */
typedef wchar_t *const *PCZPWSTR;

/* 11843 */
typedef _tagADDRESS64 *LPADDRESS64;

/* 11844 */
typedef _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;

/* 11845 */
typedef _MMIOINFO *LPMMIOINFO;

/* 11846 */
typedef _MMIOINFO *NPMMIOINFO;

/* 11847 */
typedef int (__stdcall *IMCENUMPROC)(HIMC__ *, int);

/* 11848 */
typedef int (__stdcall *FONTENUMPROCW)(const tagLOGFONTW *, const tagTEXTMETRICW *, unsigned int, int);

/* 11849 */
typedef int LONG32;

/* 11850 */
typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

/* 11851 */
typedef void *RPC_BINDING_HANDLE;

/* 11852 */
typedef tagMCI_SET_PARMS *LPMCI_SET_PARMS;

/* 11853 */
typedef int (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(unsigned int, _CERT_PUBLIC_KEY_INFO *, _CRYPT_ALGORITHM_IDENTIFIER *, void *, const wchar_t *, const wchar_t *, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int);

/* 11854 */
typedef tagALTTABINFO *LPALTTABINFO;

/* 11855 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;

/* 11856 */
typedef int __stdcall MMIOPROC(char *, unsigned int, int, int);

/* 11857 */
typedef int (__stdcall *I_RpcProxyGetConnectionTimeoutFn)(unsigned int *);

/* 11858 */
typedef IInternetZoneManager *LPURLZONEMANAGER;

/* 11859 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;

/* 11860 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEX;

/* 11861 */
typedef _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;

/* 11862 */
typedef _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;

/* 11863 */
typedef _CRL_INFO *PCRL_INFO;

/* 11864 */
typedef const char *PCUNZTCH;

/* 11865 */
typedef tagEXTLOGPEN32 *PEXTLOGPEN32;

/* 11866 */
typedef IOleItemContainer *LPOLEITEMCONTAINER;

/* 11867 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

/* 11868 */
typedef const _CTL_CONTEXT *PCCTL_CONTEXT;

/* 11869 */
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;

/* 11870 */
typedef tagTITLEBARINFO *PTITLEBARINFO;

/* 11871 */
typedef tagMIDIINCAPSA *PMIDIINCAPS;

/* 11872 */
typedef CounterQueryS *CounterQueryP;

/* 11873 */
typedef _EVENTLOGRECORD *PEVENTLOGRECORD;

/* 11874 */
typedef void *HCERT_SERVER_OCSP_RESPONSE;

/* 11875 */
typedef HIMCC__ *HIMCC;

/* 11876 */
typedef _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;

/* 11877 */
typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

/* 11878 */
typedef _MANDATORY_LEVEL *PMANDATORY_LEVEL;

/* 11879 */
typedef tagEMRSELECTPALETTE *PEMRSELECTPALETTE;

/* 11880 */
typedef void *I_RPC_MUTEX;

/* 11881 */
typedef _SID_NAME_USE *PSID_NAME_USE;

/* 11882 */
typedef tagMONITORINFOEXA *LPMONITORINFOEXA;

/* 11883 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTION;

/* 11884 */
typedef _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;

/* 11885 */
typedef tagJOYCAPS2A *PJOYCAPS2A;

/* 11886 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

/* 11887 */
typedef IMarshal *LPMARSHAL;

/* 11888 */
typedef tagCANDIDATELIST *NPCANDIDATELIST;

/* 11889 */
typedef STORAGE_BREAK_RESERVATION_REQUEST *PSTORAGE_BREAK_RESERVATION_REQUEST;

/* 11890 */
typedef tagCANDIDATELIST *LPCANDIDATELIST;

/* 11891 */
typedef _DISK_INT13_INFO *PDISK_INT13_INFO;

/* 11892 */
typedef PPM_WMI_IDLE_STATES *PPPM_WMI_IDLE_STATES;

/* 11893 */
typedef _DATATYPES_INFO_1A *LPDATATYPES_INFO_1;

/* 11894 */
typedef tagLOGBRUSH32 *NPLOGBRUSH32;

/* 11895 */
typedef tagLOGBRUSH32 *LPLOGBRUSH32;

/* 11896 */
typedef unsigned __int16 KEYARRAY[128];

/* 11897 */
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC)(const char *, _CRYPT_BLOB_ARRAY *, void *);

/* 11898 */
typedef tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMS;

/* 11899 */
typedef tagEMRPOLYDRAW *PEMRPOLYDRAW;

/* 11900 */
typedef _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;

/* 11901 */
typedef int (__stdcall *GOBJENUMPROC)(void *, int);

/* 11902 */
typedef int (__stdcall *UILANGUAGE_ENUMPROCA)(char *, int);

/* 11903 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 *PIMAGE_LOAD_CONFIG_DIRECTORY64;

/* 11904 */
typedef _PRINTER_INFO_9A *LPPRINTER_INFO_9A;

/* 11905 */
typedef instanceOopDesc *instanceOop;

/* 11906 */
typedef _DRIVER_INFO_5A *LPDRIVER_INFO_5A;

/* 11907 */
typedef int (__cdecl *flush_icache_stub_t)(unsigned __int8 *, int, int);

/* 11908 */
typedef tagEMRANGLEARC *PEMRANGLEARC;

/* 11909 */
typedef tagEMRPLGBLT *PEMRPLGBLT;

/* 11910 */
typedef _SERVICE_NOTIFY_1 *PSERVICE_NOTIFY_1;

/* 11911 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2;

/* 11912 */
typedef unsigned int (__stdcall *LPOCNCONNPROCW)(unsigned int, wchar_t *, wchar_t *, void *);

/* 11913 */
typedef _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;

/* 11914 */
typedef BytecodeInterpreter *interpreterState;

/* 11915 */
typedef _CERT_EXTENSIONS *PCERT_EXTENSIONS;

/* 11916 */
typedef int RPC_STATUS;

/* 11917 */
typedef _PRINTER_INFO_9W *LPPRINTER_INFO_9W;

/* 11918 */
typedef tagTEXTMETRICA *PTEXTMETRIC;

/* 11919 */
typedef _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;

/* 11920 */
typedef _TOKEN_SOURCE *PTOKEN_SOURCE;

/* 11921 */
typedef int (__stdcall *ENUMRESTYPEPROCA)(HINSTANCE__ *, char *, int);

/* 11922 */
typedef _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;

/* 11923 */
typedef _ACCESS_REASONS *PACCESS_REASONS;

/* 11924 */
typedef tagJOYCAPSA *LPJOYCAPSA;

/* 11925 */
typedef int (__stdcall *TIMEFMT_ENUMPROCA)(char *);

/* 11926 */
typedef tagJOYCAPSA *NPJOYCAPSA;

/* 11927 */
typedef IInternetSession *LPIINTERNETSESSION;

/* 11928 */
typedef DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;

/* 11929 */
typedef tagWNDCLASSA *LPWNDCLASS;

/* 11930 */
typedef _SET_PARTITION_INFORMATION_EX *PSET_PARTITION_INFORMATION_EX;

/* 11931 */
typedef value_entA *PVALENT;

/* 11932 */
typedef DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;

/* 11933 */
typedef tagWNDCLASSA *NPWNDCLASS;

/* 11934 */
typedef _GRADIENT_RECT *LPGRADIENT_RECT;

/* 11935 */
typedef tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2;

/* 11936 */
typedef _DRIVER_INFO_4A *LPDRIVER_INFO_4A;

/* 11937 */
typedef tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2;

/* 11938 */
typedef _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;

/* 11939 */
typedef const _CERT_CONTEXT *(__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *, unsigned int, _CERT_INFO *, void *);

/* 11940 */
typedef RPC_CLIENT_INFORMATION1 *PRPC_CLIENT_INFORMATION1;

/* 11941 */
typedef int (__stdcall *TIMEFMT_ENUMPROCW)(wchar_t *);

/* 11942 */
typedef _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY;

/* 11943 */
typedef MMXRegisterImpl *MMXRegister;

/* 11944 */
typedef tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;

/* 11945 */
typedef _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;

/* 11946 */
typedef _devicemodeA *NPDEVMODEA;

/* 11947 */
typedef _SINGLE_LIST_ENTRY *PSLIST_ENTRY32;

/* 11948 */
typedef tagABORTPATH *PEMRENDPATH;

/* 11949 */
typedef _devicemodeA *LPDEVMODEA;

/* 11950 */
typedef int (__stdcall *MONITORENUMPROC)(HMONITOR__ *, HDC__ *, tagRECT *, int);

/* 11951 */
typedef _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;

/* 11952 */
typedef wchar_t *NWPSTR;

/* 11953 */
typedef tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;

/* 11954 */
typedef void (__cdecl *_Prhand)(const std::exception *);

/* 11955 */
typedef char *const *PCZPSTR;

/* 11956 */
typedef const wchar_t *LPCOLESTR;

/* 11957 */
typedef int (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(const void *, unsigned int, _CERT_SYSTEM_STORE_INFO *, void *, void *);

/* 11958 */
typedef STARTING_VCN_INPUT_BUFFER *PSTARTING_VCN_INPUT_BUFFER;

/* 11959 */
typedef _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;

/* 11960 */
typedef int (__stdcall *ENUMRESLANGPROCW)(HINSTANCE__ *, const wchar_t *, const wchar_t *, unsigned __int16, int);

/* 11961 */
typedef _PRINTER_INFO_9A *LPPRINTER_INFO_9;

/* 11962 */
typedef LIR_OprDesc *LIR_Opr;

/* 11963 */
typedef sockaddr_in *PSOCKADDR_IN;

/* 11964 */
typedef tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE;

/* 11965 */
typedef tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;

/* 11966 */
typedef _CONSOLE_SCREEN_BUFFER_INFOEX *PCONSOLE_SCREEN_BUFFER_INFOEX;

/* 11967 */
typedef unsigned int UINT_PTR;

/* 11968 */
typedef tagABORTPATH *PEMRSETMETARGN;

/* 11969 */
typedef IInitializeSpy *LPINITIALIZESPY;

/* 11970 */
typedef IPersistStorage *LPPERSISTSTORAGE;

/* 11971 */
typedef int *PINT_PTR;

/* 11972 */
typedef unsigned int *PDWORD_PTR;

/* 11973 */
typedef int (__stdcall *PFNDAENUMCALLBACK)(void *, void *);

/* 11974 */
typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

/* 11975 */
typedef FreeIdSet *FreeIdSetPtr;

/* 11976 */
typedef tagCURSORINFO *LPCURSORINFO;

/* 11977 */
typedef sockaddr_in6 *PSOCKADDR_IN6;

/* 11978 */
typedef int (__stdcall *OnLoadEntry_t)(JavaVM_ *, char *, void *);

/* 11979 */
typedef PPM_PERFSTATE_DOMAIN_EVENT *PPPM_PERFSTATE_DOMAIN_EVENT;

/* 11980 */
typedef _CRYPT_CONTEXT_FUNCTION_PROVIDERS *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;

/* 11981 */
typedef DELETE_USN_JOURNAL_DATA *PDELETE_USN_JOURNAL_DATA;

/* 11982 */
typedef unsigned int SID_HASH_ENTRY;

/* 11983 */
typedef unsigned __int16 *LPKEYARRAY;

/* 11984 */
typedef HRAWINPUT__ *HRAWINPUT;

/* 11985 */
typedef _CERT_BIOMETRIC_EXT_INFO *PCERT_BIOMETRIC_EXT_INFO;

/* 11986 */
typedef int (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *, _CMSG_KEY_TRANS_ENCRYPT_INFO *, unsigned int, void *);

/* 11987 */
typedef tagWNDCLASSA *LPWNDCLASSA;

/* 11988 */
typedef tagDEC *LPDECIMAL;

/* 11989 */
typedef tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

/* 11990 */
typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA;

/* 11991 */
typedef tagWNDCLASSA *NPWNDCLASSA;

/* 11992 */
typedef void (__stdcall *jvmtiEventMonitorWaited)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, unsigned __int8);

/* 11993 */
typedef tagENHMETARECORD *PENHMETARECORD;

/* 11994 */
typedef tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2A;

/* 11995 */
typedef _CHAR_INFO *PCHAR_INFO;

/* 11996 */
typedef _DRIVER_INFO_6A *LPDRIVER_INFO_6A;

/* 11997 */
typedef tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2A;

/* 11998 */
typedef _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;

/* 11999 */
typedef _TRANSACTION_ENLISTMENT_PAIR *PTRANSACTION_ENLISTMENT_PAIR;

/* 12000 */
typedef _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;

/* 12001 */
typedef void (__cdecl *terminate_function)();

/* 12002 */
typedef _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;

/* 12003 */
typedef tagSIZE *PSIZEL;

/* 12004 */
typedef _tagCODEBASEHOLD *LPCODEBASEHOLD;

/* 12005 */
typedef tagEMRINVERTRGN *PEMRPAINTRGN;

/* 12006 */
typedef tagMIDIOUTCAPS2W *NPMIDIOUTCAPS2W;

/* 12007 */
typedef _M128A *PM128A;

/* 12008 */
typedef unsigned int *PACCESS_MASK;

/* 12009 */
typedef tagMIDIOUTCAPS2W *LPMIDIOUTCAPS2W;

/* 12010 */
typedef OPENCARD_SEARCH_CRITERIAA *POPENCARD_SEARCH_CRITERIAA;

/* 12011 */
typedef tagWNDCLASSW *NPWNDCLASSW;

/* 12012 */
typedef int (__stdcall *I_RpcProxyGetClientAddressFn)(void *, char *, unsigned int *);

/* 12013 */
typedef tagWNDCLASSW *LPWNDCLASSW;

/* 12014 */
typedef _MINIDUMP_USER_STREAM_INFORMATION *PMINIDUMP_USER_STREAM_INFORMATION;

/* 12015 */
typedef tagRAWINPUT *PRAWINPUT;

/* 12016 */
typedef _RemotableHandle *wireHWND;

/* 12017 */
typedef int (__stdcall *PQUERYACTCTXW_FUNC)(unsigned int, void *, void *, unsigned int, void *, unsigned int, unsigned int *);

/* 12018 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATA;

/* 12019 */
typedef __int64 __cdecl cmpxchg_long_func_t(__int64, volatile __int64 *, __int64);

/* 12020 */
typedef tagWNDCLASSEXA *NPWNDCLASSEXA;

/* 12021 */
typedef tagWNDCLASSEXA *LPWNDCLASSEXA;

/* 12022 */
typedef _DRIVER_INFO_1A *LPDRIVER_INFO_1A;

/* 12023 */
typedef tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;

/* 12024 */
typedef _tagSOFTDISTINFO *LPSOFTDISTINFO;

/* 12025 */
typedef void (__stdcall *LPHANDLER_FUNCTION)(unsigned int);

/* 12026 */
typedef _ENLISTMENT_CRM_INFORMATION *PENLISTMENT_CRM_INFORMATION;

/* 12027 */
typedef tagENUMLOGFONTA *LPENUMLOGFONT;

/* 12028 */
typedef int (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(const _CRYPTOAPI_BLOB *, unsigned int, void *, void *, unsigned int, unsigned int *, void **, unsigned int *);

/* 12029 */
typedef tagWNDCLASSEXW *LPWNDCLASSEXW;

/* 12030 */
typedef _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;

/* 12031 */
typedef tagWNDCLASSEXW *NPWNDCLASSEXW;

/* 12032 */
typedef tagKEYBDINPUT *PKEYBDINPUT;

/* 12033 */
typedef int (__stdcall *pfn_SymInitialize)(void *, const char *, int);

/* 12034 */
typedef _DRIVER_INFO_2A *PDRIVER_INFO_2;

/* 12035 */
typedef char int8;

/* 12036 */
typedef char INT8;

/* 12037 */
typedef tagREGISTERWORDA *PREGISTERWORDA;

/* 12038 */
typedef unsigned int CALTYPE;

/* 12039 */
typedef _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;

/* 12040 */
typedef _MONITOR_INFO_1A *PMONITOR_INFO_1;

/* 12041 */
typedef void (__cdecl *_PVFV)();

/* 12042 */
typedef int intx;

/* 12043 */
typedef _MONITOR_INFO_2A *PMONITOR_INFO_2;

/* 12044 */
typedef tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;

/* 12045 */
typedef tagPROPVARIANT *LPPROPVARIANT;

/* 12046 */
typedef NOTIFY_USER_POWER_SETTING *PNOTIFY_USER_POWER_SETTING;

/* 12047 */
typedef _SI_COPYFILE *PSI_COPYFILE;

/* 12048 */
typedef tagENHMETARECORD *LPENHMETARECORD;

/* 12049 */
typedef _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;

/* 12050 */
typedef _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;

/* 12051 */
typedef protoent *PPROTOENT;

/* 12052 */
typedef IStdMarshalInfo *LPSTDMARSHALINFO;

/* 12053 */
typedef _MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;

/* 12054 */
typedef IPersistStream *LPPERSISTSTREAM;

/* 12055 */
typedef tagWNDCLASSA *PWNDCLASSA;

/* 12056 */
typedef tagEMREXTESCAPE *PEMRDRAWESCAPE;

/* 12057 */
typedef _SCARD_ATRMASK *LPSCARD_ATRMASK;

/* 12058 */
typedef _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;

/* 12059 */
typedef tagMONITORINFO *LPMONITORINFO;

/* 12060 */
typedef tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;

/* 12061 */
typedef BSMINFO *PBSMINFO;

/* 12062 */
typedef timecaps_tag *NPTIMECAPS;

/* 12063 */
typedef _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS;

/* 12064 */
typedef unsigned int DWORD;

/* 12065 */
typedef timecaps_tag *LPTIMECAPS;

/* 12066 */
typedef tagAUXCAPS2W *PAUXCAPS2W;

/* 12067 */
typedef int (__stdcall *NAMEENUMPROCA)(char *, int);

/* 12068 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

/* 12069 */
typedef int (__stdcall *PFNDAENUMCALLBACKCONST)(const void *, void *);

/* 12070 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(void *, const _CERT_CONTEXT *, unsigned int, unsigned int, const void *);

/* 12071 */
typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

/* 12072 */
typedef tagEMRARC *PEMRARC;

/* 12073 */
typedef unsigned int KAFFINITY;

/* 12074 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRICA;

/* 12075 */
typedef int (__stdcall *NAMEENUMPROCW)(wchar_t *, int);

/* 12076 */
typedef unsigned __int16 *PWORD;

/* 12077 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(void *, const _CERT_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 12078 */
typedef unsigned __int16 UWORD;

/* 12079 */
typedef _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;

/* 12080 */
typedef tagDEBUGHOOKINFO *PDEBUGHOOKINFO;

/* 12081 */
typedef _DRIVER_INFO_2W *PDRIVER_INFO_2W;

/* 12082 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;

/* 12083 */
typedef HGLRC__ *HGLRC;

/* 12084 */
typedef tagWNDCLASSEXA *NPWNDCLASSEX;

/* 12085 */
typedef void (__stdcall *jvmtiEventVMStart)(_jvmtiEnv *, JNIEnv_ *);

/* 12086 */
typedef _WGLSWAP *PWGLSWAP;

/* 12087 */
typedef tagWNDCLASSEXA *LPWNDCLASSEX;

/* 12088 */
typedef pcmwaveformat_tag *NPPCMWAVEFORMAT;

/* 12089 */
typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLS;

/* 12090 */
typedef pcmwaveformat_tag *LPPCMWAVEFORMAT;

/* 12091 */
typedef _DRIVER_INFO_3A *LPDRIVER_INFO_3A;

/* 12092 */
typedef void (__stdcall *PTP_TIMER_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_TIMER *);

/* 12093 */
typedef _NT_TIB64 *PNT_TIB64;

/* 12094 */
typedef _GUID *LPFMTID;

/* 12095 */
typedef _CERT_OR_CRL_BLOB *PCERT_OR_CRL_BLOB;

/* 12096 */
typedef _FIND_NAME_HEADER *PFIND_NAME_HEADER;

/* 12097 */
typedef _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;

/* 12098 */
typedef tagBIND_OPTS3 *LPBIND_OPTS3;

/* 12099 */
typedef _DRIVER_INFO_2A *PDRIVER_INFO_2A;

/* 12100 */
typedef _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;

/* 12101 */
typedef const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 12102 */
typedef tagUPDATELAYEREDWINDOWINFO *PUPDATELAYEREDWINDOWINFO;

/* 12103 */
typedef _PSHNOTIFY *LPPSHNOTIFY;

/* 12104 */
typedef HUMPD__ *HUMPD;

/* 12105 */
typedef _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;

/* 12106 */
typedef const _PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA;

/* 12107 */
typedef unsigned __int8 *RPC_CSTR;

/* 12108 */
typedef tagFINDREPLACEA *LPFINDREPLACEA;

/* 12109 */
typedef tagPROCESSENTRY32 *PPROCESSENTRY32;

/* 12110 */
typedef _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;

/* 12111 */
typedef const _PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

/* 12112 */
typedef MENUITEMTEMPLATE *PMENUITEMTEMPLATE;

/* 12113 */
typedef int (__stdcall *ABORTPROC)(HDC__ *, int);

/* 12114 */
typedef _DRIVER_INFO_2A *LPDRIVER_INFO_2A;

/* 12115 */
typedef tagEMRROUNDRECT *PEMRROUNDRECT;

/* 12116 */
typedef _TOKEN_STATISTICS *PTOKEN_STATISTICS;

/* 12117 */
typedef tagMIXERCAPSA *LPMIXERCAPS;

/* 12118 */
typedef const _PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW;

/* 12119 */
typedef _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;

/* 12120 */
typedef unsigned __int16 *RPC_WSTR;

/* 12121 */
typedef _OCSP_SIGNED_REQUEST_INFO *POCSP_SIGNED_REQUEST_INFO;

/* 12122 */
typedef unsigned int NCRYPT_PROV_HANDLE;

/* 12123 */
typedef tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;

/* 12124 */
typedef IRunnableObject *LPRUNNABLEOBJECT;

/* 12125 */
typedef void (__cdecl *RPC_SETFILTER_FUNC)(void (__cdecl *)(void *, unsigned int, int));

/* 12126 */
typedef _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;

/* 12127 */
typedef const _PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

/* 12128 */
typedef HINSTANCE__ *HMODULE;

/* 12129 */
typedef _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;

/* 12130 */
typedef unsigned int region_sz_t;

/* 12131 */
typedef _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;

/* 12132 */
typedef localeinfo_struct *_locale_t;

/* 12133 */
typedef int (__stdcall *ENUMRESNAMEPROCW)(HINSTANCE__ *, const wchar_t *, wchar_t *, int);

/* 12134 */
typedef tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;

/* 12135 */
typedef tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;

/* 12136 */
typedef _PRINTER_INFO_8A *LPPRINTER_INFO_8A;

/* 12137 */
typedef tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;

/* 12138 */
typedef timeval *LPTIMEVAL;

/* 12139 */
typedef _ADDJOB_INFO_1A *PADDJOB_INFO_1A;

/* 12140 */
typedef _PROPSHEETPAGEA_V1 *LPPROPSHEETPAGEA_V1;

/* 12141 */
typedef IAuthenticate *LPAUTHENTICATION;

/* 12142 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA_V3;

/* 12143 */
typedef unsigned int (__stdcall *LPTHREAD_START_ROUTINE)(void *);

/* 12144 */
typedef _PROPSHEETPAGEA_V2 *LPPROPSHEETPAGEA_V2;

/* 12145 */
typedef tagEMRARC *PEMRCHORD;

/* 12146 */
typedef tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;

/* 12147 */
typedef _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;

/* 12148 */
typedef tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;

/* 12149 */
typedef _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;

/* 12150 */
typedef unsigned __int16 (__stdcall *GetCharField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 12151 */
typedef _ADDJOB_INFO_1W *PADDJOB_INFO_1W;

/* 12152 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2A;

/* 12153 */
typedef _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;

/* 12154 */
typedef void (__cdecl *generator)(int);

/* 12155 */
typedef _PRINTER_INFO_8W *LPPRINTER_INFO_8W;

/* 12156 */
typedef const char *ccstr;

/* 12157 */
typedef _ROOT_INFO_LUID *PROOT_INFO_LUID;

/* 12158 */
typedef tagPSDA *LPPAGESETUPDLG;

/* 12159 */
typedef linger *LPLINGER;

/* 12160 */
typedef _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;

/* 12161 */
typedef tagJOYCAPSA *LPJOYCAPS;

/* 12162 */
typedef tagJOYCAPSA *NPJOYCAPS;

/* 12163 */
typedef _jbyteArray *jbyteArray;

/* 12164 */
typedef int *_Bool_type;

/* 12165 */
typedef unsigned int *PULONG_PTR;

/* 12166 */
typedef _JOB_INFO_2W *PJOB_INFO_2W;

/* 12167 */
typedef tagCOMPOSITIONFORM *PCOMPOSITIONFORM;

/* 12168 */
typedef _PLEX_READ_DATA_REQUEST *PPLEX_READ_DATA_REQUEST;

/* 12169 */
typedef const char *PCSTR;

/* 12170 */
typedef _FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;

/* 12171 */
typedef _devicemodeA *NPDEVMODE;

/* 12172 */
typedef unsigned int *PLCID;

/* 12173 */
typedef _devicemodeA *LPDEVMODE;

/* 12174 */
typedef _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;

/* 12175 */
typedef char s_char;

/* 12176 */
typedef _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE;

/* 12177 */
typedef _TP_WAIT *PTP_WAIT;

/* 12178 */
typedef unsigned __int8 u_char;

/* 12179 */
typedef tagRAWINPUTHEADER *LPRAWINPUTHEADER;

/* 12180 */
typedef void *RPC_NS_HANDLE;

/* 12181 */
typedef _CERT_POLICY_INFO *PCERT_POLICY_INFO;

/* 12182 */
typedef tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;

/* 12183 */
typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_SUBJECT_INFO_ACCESS;

/* 12184 */
typedef char **CardArr;

/* 12185 */
typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

/* 12186 */
typedef _DRIVERSTATUS *LPDRIVERSTATUS;

/* 12187 */
typedef _PRINTER_INFO_8A *LPPRINTER_INFO_8;

/* 12188 */
typedef _ADDJOB_INFO_1A *PADDJOB_INFO_1;

/* 12189 */
typedef tagMONHSZSTRUCTW *PMONHSZSTRUCTW;

/* 12190 */
typedef _JOB_INFO_1W *PJOB_INFO_1W;

/* 12191 */
typedef _SMALL_RECT *PSMALL_RECT;

/* 12192 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW;

/* 12193 */
typedef _STORAGE_DEVICE_DESCRIPTOR *PSTORAGE_DEVICE_DESCRIPTOR;

/* 12194 */
typedef _CERT_LOGOTYPE_INFO *PCERT_LOGOTYPE_INFO;

/* 12195 */
typedef _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;

/* 12196 */
typedef jzentry *(__stdcall *FindEntry_t)(void **, const char *, int *, int *);

/* 12197 */
typedef _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;

/* 12198 */
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;

/* 12199 */
typedef tagCHARSETINFO *PCHARSETINFO;

/* 12200 */
typedef _jstring *(__cdecl *to_java_string_fn_t)(JNIEnv_ *, char *);

/* 12201 */
typedef int (__stdcall *LANGGROUPLOCALE_ENUMPROCW)(unsigned int, unsigned int, wchar_t *, int);

/* 12202 */
typedef tagPSDA *LPPAGESETUPDLGA;

/* 12203 */
typedef unsigned __int8 TBYTE;

/* 12204 */
typedef _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;

/* 12205 */
typedef IHttpSecurity *LPHTTPSECURITY;

/* 12206 */
typedef unsigned __int8 *PBYTE;

/* 12207 */
typedef tagEMRELLIPSE *PEMRRECTANGLE;

/* 12208 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;

/* 12209 */
typedef unsigned __int16 UHALF_PTR;

/* 12210 */
typedef IPersistMoniker *LPPERSISTMONIKER;

/* 12211 */
typedef _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;

/* 12212 */
typedef tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;

/* 12213 */
typedef _GUID *LPCLSID;

/* 12214 */
typedef unsigned int NCRYPT_HANDLE;

/* 12215 */
typedef OPENCARD_SEARCH_CRITERIAA *POPENCARD_SEARCH_CRITERIA;

/* 12216 */
typedef char jbyte;

/* 12217 */
typedef __int16 *PHALF_PTR;

/* 12218 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

/* 12219 */
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 12220 */
typedef tagLOGBRUSH *PPATTERN;

/* 12221 */
typedef tagEMRFRAMERGN *PEMRFRAMERGN;

/* 12222 */
typedef int (__stdcall *vfprintf_hook_t)(_iobuf *, const char *, char *);

/* 12223 */
typedef _PARTITION_INFORMATION *PPARTITION_INFORMATION;

/* 12224 */
typedef _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

/* 12225 */
typedef unsigned __int16 uint16_t;

/* 12226 */
typedef int (__stdcall *LANGGROUPLOCALE_ENUMPROCA)(unsigned int, unsigned int, char *, int);

/* 12227 */
typedef void *BCRYPT_HANDLE;

/* 12228 */
typedef tagPSDW *LPPAGESETUPDLGW;

/* 12229 */
typedef int (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(unsigned int, void *);

/* 12230 */
typedef __int64 OpaqueProbes;

/* 12231 */
typedef _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;

/* 12232 */
typedef tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;

/* 12233 */
typedef _CRYPT_AES_256_KEY_STATE *PCRYPT_AES_256_KEY_STATE;

/* 12234 */
typedef tagDROPSTRUCT *LPDROPSTRUCT;

/* 12235 */
typedef _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;

/* 12236 */
typedef tagENUMLOGFONTA *LPENUMLOGFONTA;

/* 12237 */
typedef _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;

/* 12238 */
typedef unsigned int *LPDWORD;

/* 12239 */
typedef _PROPSHEETHEADERA_V1 *LPPROPSHEETHEADERA_V1;

/* 12240 */
typedef _LIST_ENTRY *PLIST_ENTRY;

/* 12241 */
typedef _PROPSHEETHEADERA_V2 *LPPROPSHEETHEADERA_V2;

/* 12242 */
typedef _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;

/* 12243 */
typedef tagREGISTERWORDA *PREGISTERWORD;

/* 12244 */
typedef tagEXTLOGPEN32 *LPEXTLOGPEN32;

/* 12245 */
typedef _CERT_REVOCATION_CHAIN_PARA *PCERT_REVOCATION_CHAIN_PARA;

/* 12246 */
typedef HCOLORSPACE__ *HCOLORSPACE;

/* 12247 */
typedef tagEXTLOGPEN32 *NPEXTLOGPEN32;

/* 12248 */
typedef _DRIVER_INFO_3A *PDRIVER_INFO_3;

/* 12249 */
typedef int LSTATUS;

/* 12250 */
typedef _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;

/* 12251 */
typedef unsigned __int8 *address;

/* 12252 */
typedef _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;

/* 12253 */
typedef _GROUP_AFFINITY *PGROUP_AFFINITY;

/* 12254 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

/* 12255 */
typedef _DRIVER_INFO_8A *LPDRIVER_INFO_8A;

/* 12256 */
typedef int Name;

/* 12257 */
typedef _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;

/* 12258 */
typedef tagICONMETRICSA *PICONMETRICS;

/* 12259 */
typedef OPENCARDNAME_EXA *POPENCARDNAME_EX;

/* 12260 */
typedef _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;

/* 12261 */
typedef unsigned __int64 ULONG64;

/* 12262 */
typedef unsigned int DWORD_PTR;

/* 12263 */
typedef _TRANSACTION_LIST_INFORMATION *PTRANSACTION_LIST_INFORMATION;

/* 12264 */
typedef __int64 *PLONG64;

/* 12265 */
typedef tagWNDCLASSA *PWNDCLASS;

/* 12266 */
typedef tagTPMPARAMS *LPTPMPARAMS;

/* 12267 */
typedef volatile int ShenandoahLivenessData;

/* 12268 */
typedef _DRIVE_LAYOUT_INFORMATION_EX *PDRIVE_LAYOUT_INFORMATION_EX;

/* 12269 */
typedef SCARD_READERSTATEA *LPSCARD_READERSTATE;

/* 12270 */
typedef _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;

/* 12271 */
typedef tagBITMAPINFO *LPBITMAPINFO;

/* 12272 */
typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/* 12273 */
typedef _BYTE_BLOB *UP_BYTE_BLOB;

/* 12274 */
typedef mmtime_tag *PMMTIME;

/* 12275 */
typedef void **RPC_EP_INQ_HANDLE;

/* 12276 */
typedef _RemotableHandle *wireHMENU;

/* 12277 */
typedef void (__stdcall *CS_TAG_GETTING_ROUTINE)(void *, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 12278 */
typedef tagPELARRAY *PPELARRAY;

/* 12279 */
typedef int (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY)(unsigned int, unsigned int, _CERT_PUBLIC_KEY_INFO *, unsigned __int8 *, unsigned int *);

/* 12280 */
typedef _DRIVER_INFO_3W *PDRIVER_INFO_3W;

/* 12281 */
typedef tagEMRSETPIXELV *PEMRSETPIXELV;

/* 12282 */
typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(char *, void *);

/* 12283 */
typedef _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;

/* 12284 */
typedef _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;

/* 12285 */
typedef _jintArray *jintArray;

/* 12286 */
typedef void (__cdecl *PPS_POST_PROCESS_INIT_ROUTINE)();

/* 12287 */
typedef _FLAGGED_WORD_BLOB *wireBSTR;

/* 12288 */
typedef _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY;

/* 12289 */
typedef tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID;

/* 12290 */
typedef tagBIND_OPTS2 *LPBIND_OPTS2;

/* 12291 */
typedef void *(__stdcall *PFN_CRYPT_ALLOC)(unsigned int);

/* 12292 */
typedef _DRIVER_INFO_3A *PDRIVER_INFO_3A;

/* 12293 */
typedef _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;

/* 12294 */
typedef _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX;

/* 12295 */
typedef tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;

/* 12296 */
typedef Instruction *Value;

/* 12297 */
typedef __int64 int64_t;

/* 12298 */
typedef _SE_SECURITY_DESCRIPTOR *PSE_SECURITY_DESCRIPTOR;

/* 12299 */
typedef _wireBRECORD *wireBRECORD;

/* 12300 */
typedef tagFINDREPLACEA *LPFINDREPLACE;

/* 12301 */
typedef tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;

/* 12302 */
typedef int (__cdecl *AttachOperationFunction)(AttachOperation *, outputStream *);

/* 12303 */
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;

/* 12304 */
typedef tagBITMAPCOREINFO *LPBITMAPCOREINFO;

/* 12305 */
typedef int __time32_t;

/* 12306 */
typedef tagICONMETRICSA *PICONMETRICSA;

/* 12307 */
typedef OPENCARDNAME_EXA *POPENCARDNAME_EXA;

/* 12308 */
typedef const _PROPSHEETPAGEA *LPCPROPSHEETPAGEA_V3;

/* 12309 */
typedef _RPC_POLICY *PRPC_POLICY;

/* 12310 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO64;

/* 12311 */
typedef _CRYPT_PROVIDER_REFS *PCRYPT_PROVIDER_REFS;

/* 12312 */
typedef _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;

/* 12313 */
typedef HMMIO__ *HMMIO;

/* 12314 */
typedef void (__stdcall *jvmtiEventNativeMethodBind)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, void *, void **);

/* 12315 */
typedef tagMIXERLINEA *LPMIXERLINE;

/* 12316 */
typedef tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;

/* 12317 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;

/* 12318 */
typedef int (__stdcall *pfn_SymGetSearchPath)(void *, char *, int);

/* 12319 */
typedef _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];

/* 12320 */
typedef _JOB_INFO_4W *PJOB_INFO_4W;

/* 12321 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;

/* 12322 */
typedef _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;

/* 12323 */
typedef _OCSP_REQUEST_INFO *POCSP_REQUEST_INFO;

/* 12324 */
typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/* 12325 */
typedef __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;

/* 12326 */
typedef _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;

/* 12327 */
typedef _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32;

/* 12328 */
typedef _MINIDUMP_CALLBACK_INPUT *PMINIDUMP_CALLBACK_INPUT;

/* 12329 */
typedef _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG;

/* 12330 */
typedef tagICONMETRICSW *PICONMETRICSW;

/* 12331 */
typedef unsigned int (__stdcall *LPPRINTHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 12332 */
typedef OPENCARDNAME_EXW *POPENCARDNAME_EXW;

/* 12333 */
typedef const _PROPSHEETPAGEW *LPCPROPSHEETPAGEW_V3;

/* 12334 */
typedef unsigned int *PSCARDCONTEXT;

/* 12335 */
typedef _SESSION_BUFFER *PSESSION_BUFFER;

/* 12336 */
typedef tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;

/* 12337 */
typedef _APPLICATIONLAUNCH_SETTING_VALUE *PAPPLICATIONLAUNCH_SETTING_VALUE;

/* 12338 */
typedef tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;

/* 12339 */
typedef _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;

/* 12340 */
typedef _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;

/* 12341 */
typedef _jobject *jthread;

/* 12342 */
typedef _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT;

/* 12343 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;

/* 12344 */
typedef _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;

/* 12345 */
typedef tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;

/* 12346 */
typedef int INT;

/* 12347 */
typedef _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;

/* 12348 */
typedef _MINIDUMP_CALLBACK_OUTPUT *PMINIDUMP_CALLBACK_OUTPUT;

/* 12349 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESS;

/* 12350 */
typedef wchar_t **SNB;

/* 12351 */
typedef tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMS;

/* 12352 */
typedef char (*_No)[1];

/* 12353 */
typedef unsigned __int8 (__stdcall *PSECURE_MEMORY_CACHE_CALLBACK)(void *, unsigned int);

/* 12354 */
typedef _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;

/* 12355 */
typedef tagEMRPOLYLINE *PEMRPOLYGON;

/* 12356 */
typedef _NOTIFYICONDATAW *PNOTIFYICONDATAW;

/* 12357 */
typedef linger *PLINGER;

/* 12358 */
typedef tagMETAFILEPICT *LPMETAFILEPICT;

/* 12359 */
typedef midiproptempo_tag *LPMIDIPROPTEMPO;

/* 12360 */
typedef _MINIDUMP_USER_STREAM *PMINIDUMP_USER_STREAM;

/* 12361 */
typedef unsigned int LCID;

/* 12362 */
typedef HICON__ *HICON;

/* 12363 */
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

/* 12364 */
typedef _IMAGEHLP_SYMBOL64 *PIMAGEHLP_SYMBOL64;

/* 12365 */
typedef tagACCEL *LPACCEL;

/* 12366 */
typedef char *HPSTR;

/* 12367 */
typedef tagMIDIOUTCAPSA *NPMIDIOUTCAPS;

/* 12368 */
typedef char *LPSTR;

/* 12369 */
typedef tagBITMAP *PBITMAP;

/* 12370 */
typedef tagMIDIOUTCAPSA *LPMIDIOUTCAPS;

/* 12371 */
typedef char *NPSTR;

/* 12372 */
typedef MARK_HANDLE_INFO *PMARK_HANDLE_INFO;

/* 12373 */
typedef _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;

/* 12374 */
typedef HWINEVENTHOOK__ *HWINEVENTHOOK;

/* 12375 */
typedef _PROCESSOR_RELATIONSHIP *PPROCESSOR_RELATIONSHIP;

/* 12376 */
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;

/* 12377 */
typedef tagMONLINKSTRUCT *PMONLINKSTRUCT;

/* 12378 */
typedef HBITMAP__ *HBITMAP;

/* 12379 */
typedef char ShenandoahSharedValue;

/* 12380 */
typedef int (__stdcall *jvmtiArrayPrimitiveValueCallback)(__int64, __int64, __int64 *, int, jvmtiPrimitiveType, const void *, void *);

/* 12381 */
typedef void *PSID;

/* 12382 */
typedef _ELEMENT_TYPE *PELEMENT_TYPE;

/* 12383 */
typedef _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;

/* 12384 */
typedef _TP_IO *PTP_IO;

/* 12385 */
typedef IMalloc *LPMALLOC;

/* 12386 */
typedef IMallocSpy *LPMALLOCSPY;

/* 12387 */
typedef _JOB_SET_ARRAY *PJOB_SET_ARRAY;

/* 12388 */
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;

/* 12389 */
typedef _nlsversioninfo *LPNLSVERSIONINFO;

/* 12390 */
typedef _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;

/* 12391 */
typedef _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUES;

/* 12392 */
typedef _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO;

/* 12393 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILE;

/* 12394 */
typedef _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;

/* 12395 */
typedef IStream *LPSTREAM;

/* 12396 */
typedef tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;

/* 12397 */
typedef _jobject *jobject;

/* 12398 */
typedef const unsigned __int16 *RPC_CWSTR;

/* 12399 */
typedef int (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(unsigned int, const char *, const char *, unsigned int, const unsigned int *, const wchar_t *const *, const unsigned __int8 *const *, const unsigned int *, void *);

/* 12400 */
typedef unsigned int TP_WAIT_RESULT;

/* 12401 */
typedef tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;

/* 12402 */
typedef _CRYPT_CONTEXT_CONFIG *PCRYPT_CONTEXT_CONFIG;

/* 12403 */
typedef tagRAWKEYBOARD *PRAWKEYBOARD;

/* 12404 */
typedef unsigned int (__stdcall *PFE_IMPORT_FUNC)(unsigned __int8 *, void *, unsigned int *);

/* 12405 */
typedef _NETRESOURCEW *LPNETRESOURCEW;

/* 12406 */
typedef _RTL_CRITICAL_SECTION_DEBUG *LPCRITICAL_SECTION_DEBUG;

/* 12407 */
typedef tagRAWHID *LPRAWHID;

/* 12408 */
typedef _RGNDATA *PRGNDATA;

/* 12409 */
typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

/* 12410 */
typedef void __stdcall MIDICALLBACK(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 12411 */
typedef _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;

/* 12412 */
typedef void (__stdcall *CS_TYPE_LOCAL_SIZE_ROUTINE)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);

/* 12413 */
typedef HMIXER__ *HMIXER;

/* 12414 */
typedef tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;

/* 12415 */
typedef _CACHE_DESCRIPTOR *PCACHE_DESCRIPTOR;

/* 12416 */
typedef tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;

/* 12417 */
typedef tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;

/* 12418 */
typedef tagAXESLISTW *PAXESLISTW;

/* 12419 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;

/* 12420 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW_LATEST;

/* 12421 */
typedef wchar_t *LPOLESTR;

/* 12422 */
typedef _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE;

/* 12423 */
typedef _jdoubleArray *jdoubleArray;

/* 12424 */
typedef tagTHREADENTRY32 *LPTHREADENTRY32;

/* 12425 */
typedef _DISK_WRITE_CACHE_STATE *PDISK_WRITE_CACHE_STATE;

/* 12426 */
typedef _SERVICE_PREFERRED_NODE_INFO *LPSERVICE_PREFERRED_NODE_INFO;

/* 12427 */
typedef _CRYPTNET_URL_CACHE_RESPONSE_INFO *PCRYPTNET_URL_CACHE_RESPONSE_INFO;

/* 12428 */
typedef unsigned int (__stdcall *LPCCHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 12429 */
typedef tagEXTLOGFONTA *PEXTLOGFONTA;

/* 12430 */
typedef tagHELPWININFOW *LPHELPWININFOW;

/* 12431 */
typedef const unsigned __int8 *LPCBYTE;

/* 12432 */
typedef _EXCEPTION_DISPOSITION __stdcall EXCEPTION_ROUTINE(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 12433 */
typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

/* 12434 */
typedef tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;

/* 12435 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;

/* 12436 */
typedef _CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;

/* 12437 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;

/* 12438 */
typedef _STORAGE_READ_CAPACITY *PSTORAGE_READ_CAPACITY;

/* 12439 */
typedef tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;

/* 12440 */
typedef _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;

/* 12441 */
typedef IOleLink *LPOLELINK;

/* 12442 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCT;

/* 12443 */
typedef void *jzfile;

/* 12444 */
typedef void (__stdcall *NDR_RUNDOWN)(void *);

/* 12445 */
typedef _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;

/* 12446 */
typedef tagMIDIINCAPSW *PMIDIINCAPSW;

/* 12447 */
typedef _WORD_BLOB *UP_WORD_BLOB;

/* 12448 */
typedef _BIN_COUNT *PBIN_COUNT;

/* 12449 */
typedef tagMIDIOUTCAPS2W *PMIDIOUTCAPS2W;

/* 12450 */
typedef long double DATE;

/* 12451 */
typedef void (__stdcall *EXPR_EVAL)(_MIDL_STUB_MESSAGE *);

/* 12452 */
typedef tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;

/* 12453 */
typedef tagWCRANGE *PWCRANGE;

/* 12454 */
typedef tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;

/* 12455 */
typedef XMMRegisterImpl *XMMRegister;

/* 12456 */
typedef tagCWPRETSTRUCT *PCWPRETSTRUCT;

/* 12457 */
typedef tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;

/* 12458 */
typedef unsigned int (__stdcall *PTHREAD_START_ROUTINE)(void *);

/* 12459 */
typedef _SYSTEMTIME *PSYSTEMTIME;

/* 12460 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

/* 12461 */
typedef _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;

/* 12462 */
typedef tagSTYLEBUFA *NPSTYLEBUF;

/* 12463 */
typedef _CREATE_DISK_GPT *PCREATE_DISK_GPT;

/* 12464 */
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);

/* 12465 */
typedef _JOB_INFO_4A *LPJOB_INFO_4;

/* 12466 */
typedef tagSTYLEBUFA *LPSTYLEBUF;

/* 12467 */
typedef int (__stdcall *DESKTOPENUMPROCA)(char *, int);

/* 12468 */
typedef float (__stdcall *IntBitsToFloatFn)(JNIEnv_ *, _jclass *, int);

/* 12469 */
typedef int (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *, unsigned int, void *, unsigned int *);

/* 12470 */
typedef void *HCRYPTMSG;

/* 12471 */
typedef unsigned int thread_id_t;

/* 12472 */
typedef _CTL_USAGE *PCTL_USAGE;

/* 12473 */
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;

/* 12474 */
typedef tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;

/* 12475 */
typedef tagOFNA *LPOPENFILENAME;

/* 12476 */
typedef void (__cdecl *jdk_version_info_fn_t)(jdk_version_info *, unsigned int);

/* 12477 */
typedef HHOOK__ *HHOOK;

/* 12478 */
typedef void (__stdcall *PDRVCALLBACK)(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 12479 */
typedef tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;

/* 12480 */
typedef unsigned int STGFMT;

/* 12481 */
typedef tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;

/* 12482 */
typedef NTFS_FILE_RECORD_OUTPUT_BUFFER *PNTFS_FILE_RECORD_OUTPUT_BUFFER;

/* 12483 */
typedef _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;

/* 12484 */
typedef int SCODE;

/* 12485 */
typedef wchar_t *PUWSTR;

/* 12486 */
typedef _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE;

/* 12487 */
typedef _userHMETAFILEPICT *wireHMETAFILEPICT;

/* 12488 */
typedef tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;

/* 12489 */
typedef __int64 fpos_t;

/* 12490 */
typedef IOleCacheControl *LPOLECACHECONTROL;

/* 12491 */
typedef tagEMR *PEMR;

/* 12492 */
typedef _TRANSACTION_BIND_INFORMATION *PTRANSACTION_BIND_INFORMATION;

/* 12493 */
typedef _jbooleanArray *jbooleanArray;

/* 12494 */
typedef int (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 12495 */
typedef void (__stdcall *LPMIDICALLBACK)(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 12496 */
typedef _PROCESSOR_NUMBER *PPROCESSOR_NUMBER;

/* 12497 */
typedef tagMIXERLINECONTROLSA *PMIXERLINECONTROLS;

/* 12498 */
typedef const _CTL_USAGE *PCCTL_USAGE;

/* 12499 */
typedef tagCHOOSECOLORW *LPCHOOSECOLORW;

/* 12500 */
typedef pvalueA *PPVALUE;

/* 12501 */
typedef _CERT_INFO *PCERT_INFO;

/* 12502 */
typedef tagSTYLEBUFW *LPSTYLEBUFW;

/* 12503 */
typedef _JOB_INFO_4W *LPJOB_INFO_4W;

/* 12504 */
typedef tagSTYLEBUFW *NPSTYLEBUFW;

/* 12505 */
typedef _LANA_ENUM *PLANA_ENUM;

/* 12506 */
typedef tagANIMATIONINFO *LPANIMATIONINFO;

/* 12507 */
typedef tagCWPRETSTRUCT *NPCWPRETSTRUCT;

/* 12508 */
typedef _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

/* 12509 */
typedef tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;

/* 12510 */
typedef unsigned __int8 *(__cdecl *Action)(methodHandle, Thread *);

/* 12511 */
typedef tagCWPRETSTRUCT *LPCWPRETSTRUCT;

/* 12512 */
typedef _VIDEOPARAMETERS *PVIDEOPARAMETERS;

/* 12513 */
typedef const tagMENUINFO *LPCMENUINFO;

/* 12514 */
typedef tagMCI_INFO_PARMSA *LPMCI_INFO_PARMS;

/* 12515 */
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

/* 12516 */
typedef _STORAGE_ID_NAA_FORMAT *PSTORAGE_ID_NAA_FORMAT;

/* 12517 */
typedef char *PUTSTR;

/* 12518 */
typedef tagSTYLEBUFA *NPSTYLEBUFA;

/* 12519 */
typedef unsigned int u_long;

/* 12520 */
typedef tagSTYLEBUFA *LPSTYLEBUFA;

/* 12521 */
typedef _JOB_INFO_4A *LPJOB_INFO_4A;

/* 12522 */
typedef _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;

/* 12523 */
typedef int (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(unsigned int, _CERT_PUBLIC_KEY_INFO *, unsigned int, void *, void **);

/* 12524 */
typedef void (__stdcall *NDR_NOTIFY_ROUTINE)();

/* 12525 */
typedef tagCOMBOBOXINFO *LPCOMBOBOXINFO;

/* 12526 */
typedef _jobject *jweak;

/* 12527 */
typedef tagOFNA *LPOPENFILENAMEA;

/* 12528 */
typedef unsigned __int8 cs_byte;

/* 12529 */
typedef void *HCONTEXT;

/* 12530 */
typedef _ABCFLOAT *NPABCFLOAT;

/* 12531 */
typedef tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;

/* 12532 */
typedef unsigned int *PSCARDHANDLE;

/* 12533 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/* 12534 */
typedef _ABCFLOAT *LPABCFLOAT;

/* 12535 */
typedef struct _jrawMonitorID *jrawMonitorID;

/* 12536 */
typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;

/* 12537 */
typedef unsigned int _dev_t;

/* 12538 */
typedef _ABCFLOAT *PABCFLOAT;

/* 12539 */
typedef ITypeInfo *LPTYPEINFO;

/* 12540 */
typedef tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;

/* 12541 */
typedef _CONTEXT *PCONTEXT;

/* 12542 */
typedef tagOFNW *LPOPENFILENAMEW;

/* 12543 */
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;

/* 12544 */
typedef tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMS;

/* 12545 */
typedef _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO;

/* 12546 */
typedef _XSTATE_FEATURE *PXSTATE_FEATURE;

/* 12547 */
typedef OPENCARDNAME_EXW *LPOPENCARDNAME_EXW;

/* 12548 */
typedef tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;

/* 12549 */
typedef SYSTEM_POWER_LEVEL *PSYSTEM_POWER_LEVEL;

/* 12550 */
typedef ITypeInfo2 *LPTYPEINFO2;

/* 12551 */
typedef void *HDWP;

/* 12552 */
typedef tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;

/* 12553 */
typedef _ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

/* 12554 */
typedef _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;

/* 12555 */
typedef int (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *, unsigned int, void *);

/* 12556 */
typedef _BCRYPT_DSA_KEY_BLOB *PBCRYPT_DSA_KEY_BLOB;

/* 12557 */
typedef tagOFN_NT4A *LPOPENFILENAME_NT4A;

/* 12558 */
typedef tagPELARRAY *LPPELARRAY;

/* 12559 */
typedef unsigned int DEVICE_DATA_MANAGEMENT_SET_ACTION;

/* 12560 */
typedef int (__cdecl *_onexit_t)();

/* 12561 */
typedef tagPELARRAY *NPPELARRAY;

/* 12562 */
typedef tagMOUSEKEYS *LPMOUSEKEYS;

/* 12563 */
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(void *, unsigned int, const char *, char *, void *);

/* 12564 */
typedef HRESULT (__stdcall *LPFNCANUNLOADNOW)();

/* 12565 */
typedef IEnumVARIANT *LPENUMVARIANT;

/* 12566 */
typedef int (__stdcall *I_RpcProxyIsValidMachineFn)(unsigned __int16 *, unsigned __int16 *, unsigned int);

/* 12567 */
typedef tagTEXTMETRICA *NPTEXTMETRIC;

/* 12568 */
typedef tagOFN_NT4W *LPOPENFILENAME_NT4W;

/* 12569 */
typedef int (__stdcall *RPC_MGMT_AUTHORIZATION_FN)(void *, unsigned int, int *);

/* 12570 */
typedef tagTEXTMETRICA *LPTEXTMETRIC;

/* 12571 */
typedef _XSTATE_CONTEXT *PXSTATE_CONTEXT;

/* 12572 */
typedef tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;

/* 12573 */
typedef int CardIdx_t;

/* 12574 */
typedef _DPA *HDPA;

/* 12575 */
typedef tagMETAHEADER *LPMETAHEADER;

/* 12576 */
typedef _TRANSACTIONMANAGER_LOG_INFORMATION *PTRANSACTIONMANAGER_LOG_INFORMATION;

/* 12577 */
typedef HSPRITE__ *HSPRITE;

/* 12578 */
typedef tagXFORM *LPXFORM;

/* 12579 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;

/* 12580 */
typedef STARTING_LCN_INPUT_BUFFER *PSTARTING_LCN_INPUT_BUFFER;

/* 12581 */
typedef unsigned int rsize_t;

/* 12582 */
typedef int ssize_t;

/* 12583 */
typedef int SSIZE_T;

/* 12584 */
typedef unsigned int *PSIZE_T;

/* 12585 */
typedef _OFSTRUCT *POFSTRUCT;

/* 12586 */
typedef tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;

/* 12587 */
typedef tagMINMAXINFO *PMINMAXINFO;

/* 12588 */
typedef tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;

/* 12589 */
typedef tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;

/* 12590 */
typedef tagSERIALKEYSW *LPSERIALKEYSW;

/* 12591 */
typedef tagPDEXA *LPPRINTDLGEX;

/* 12592 */
typedef tagRECT *LPBORDERWIDTHS;

/* 12593 */
typedef tagJOYCAPS2A *NPJOYCAPS2;

/* 12594 */
typedef _LIST_ENTRY *PRLIST_ENTRY;

/* 12595 */
typedef _HARDWARE_COUNTER_TYPE *PHARDWARE_COUNTER_TYPE;

/* 12596 */
typedef tagJOYCAPS2A *LPJOYCAPS2;

/* 12597 */
typedef int csize_t;

/* 12598 */
typedef _DISK_RECORD *PDISK_RECORD;

/* 12599 */
typedef _RTL_CONDITION_VARIABLE *PRTL_CONDITION_VARIABLE;

/* 12600 */
typedef void *PACCESS_TOKEN;

/* 12601 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;

/* 12602 */
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

/* 12603 */
typedef tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMS;

/* 12604 */
typedef tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;

/* 12605 */
typedef _CRYPT_PROVIDERS *PCRYPT_PROVIDERS;

/* 12606 */
typedef tagSERIALKEYSA *LPSERIALKEYSA;

/* 12607 */
typedef tagMDINEXTMENU *PMDINEXTMENU;

/* 12608 */
typedef int (__stdcall *DATEFMT_ENUMPROCEXA)(char *, unsigned int);

/* 12609 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;

/* 12610 */
typedef _TP_WORK *PTP_WORK;

/* 12611 */
typedef _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;

/* 12612 */
typedef _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;

/* 12613 */
typedef tagTEXTMETRICW *LPTEXTMETRICW;

/* 12614 */
typedef _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;

/* 12615 */
typedef unsigned int node_idx_t;

/* 12616 */
typedef tagTEXTMETRICW *NPTEXTMETRICW;

/* 12617 */
typedef tagMIXERCONTROLW *PMIXERCONTROLW;

/* 12618 */
typedef tagOFN_NT4A *LPOPENFILENAME_NT4;

/* 12619 */
typedef markOopDesc *markOop;

/* 12620 */
typedef void *__stdcall RPC_CLIENT_ALLOC(unsigned int);

/* 12621 */
typedef tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;

/* 12622 */
typedef _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;

/* 12623 */
typedef tagTITLEBARINFO *LPTITLEBARINFO;

/* 12624 */
typedef unsigned __int16 VARTYPE;

/* 12625 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;

/* 12626 */
typedef tagTEXTMETRICA *NPTEXTMETRICA;

/* 12627 */
typedef tagEMRCREATEPEN *PEMRCREATEPEN;

/* 12628 */
typedef tagOLEUPDATE *POLEUPDATE;

/* 12629 */
typedef tagTEXTMETRICA *LPTEXTMETRICA;

/* 12630 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;

/* 12631 */
typedef void (__cdecl *__exit_proc)();

/* 12632 */
typedef tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;

/* 12633 */
typedef int (__stdcall *DATEFMT_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 12634 */
typedef int (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(_CMSG_CONTENT_ENCRYPT_INFO *, unsigned int, void *);

/* 12635 */
typedef _MEDIA_TYPE *PMEDIA_TYPE;

/* 12636 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(void *, const _CERT_CONTEXT *, unsigned int);

/* 12637 */
typedef tagBSTRBLOB *LPBSTRBLOB;

/* 12638 */
typedef void __stdcall DRVCALLBACK(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 12639 */
typedef _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;

/* 12640 */
typedef void (__stdcall *LPOCNDSCPROC)(unsigned int, unsigned int, void *);

/* 12641 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;

/* 12642 */
typedef _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA;

/* 12643 */
typedef _BCRYPT_KEY_DATA_BLOB_HEADER *PBCRYPT_KEY_DATA_BLOB_HEADER;

/* 12644 */
typedef int (__cdecl *_PIFV)();

/* 12645 */
typedef HTASK__ *HTASK;

/* 12646 */
typedef struct _jmethodID *jmethodID;

/* 12647 */
typedef void (__stdcall *jvmtiEventExceptionCatch)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jobject *);

/* 12648 */
typedef _CRL_DIST_POINT *PCRL_DIST_POINT;

/* 12649 */
typedef tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;

/* 12650 */
typedef void (__cdecl *WeakOopsDo)(BoolObjectClosure *, OopClosure *);

/* 12651 */
typedef _SUPPORTED_OS_INFO *PSUPPORTED_OS_INFO;

/* 12652 */
typedef tagPDEXA *LPPRINTDLGEXA;

/* 12653 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFO;

/* 12654 */
typedef tagJOYCAPS2A *NPJOYCAPS2A;

/* 12655 */
typedef tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;

/* 12656 */
typedef tagJOYCAPS2A *LPJOYCAPS2A;

/* 12657 */
typedef _PRIVILEGE_SET *PPRIVILEGE_SET;

/* 12658 */
typedef tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;

/* 12659 */
typedef __int16 (__stdcall *GetShortField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 12660 */
typedef _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;

/* 12661 */
typedef _OLESTREAM *LPOLESTREAM;

/* 12662 */
typedef _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;

/* 12663 */
typedef _userCLIPFORMAT *wireCLIPFORMAT;

/* 12664 */
typedef int SECURITY_STATUS;

/* 12665 */
typedef PPM_WMI_PERF_STATE *PPPM_WMI_PERF_STATE;

/* 12666 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDV;

/* 12667 */
typedef unsigned __int16 u_short;

/* 12668 */
typedef void *RPC_AUTHZ_HANDLE;

/* 12669 */
typedef void *BCRYPT_SECRET_HANDLE;

/* 12670 */
typedef void *HDEVNOTIFY;

/* 12671 */
typedef Instruction *etype;

/* 12672 */
typedef unsigned __int64 uint64_t;

/* 12673 */
typedef tagJOYCAPS2W *LPJOYCAPS2W;

/* 12674 */
typedef tagRemFORMATETC *LPREMFORMATETC;

/* 12675 */
typedef int (__cdecl *ftype)(const void *, const void *);

/* 12676 */
typedef unsigned int NCRYPT_SECRET_HANDLE;

/* 12677 */
typedef _DSA *HDSA;

/* 12678 */
typedef tagJOYCAPS2W *NPJOYCAPS2W;

/* 12679 */
typedef tagPDEXW *LPPRINTDLGEXW;

/* 12680 */
typedef tagSERIALKEYSA *LPSERIALKEYS;

/* 12681 */
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;

/* 12682 */
typedef void (__cdecl *get_cpu_info_stub_t)(void *);

/* 12683 */
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;

/* 12684 */
typedef void **(__stdcall *ZipOpen_t)(const char *, char **);

/* 12685 */
typedef unsigned int char32_t;

/* 12686 */
typedef tagSTYLEBUFW *PSTYLEBUFW;

/* 12687 */
typedef tagPDA *LPPRINTDLGA;

/* 12688 */
typedef tagGUITHREADINFO *PGUITHREADINFO;

/* 12689 */
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(void *, unsigned int);

/* 12690 */
typedef unsigned __int16 *PBAD_TRACK_NUMBER;

/* 12691 */
typedef _SERVICE_STATUS *LPSERVICE_STATUS;

/* 12692 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFO;

/* 12693 */
typedef unsigned int _fsize_t;

/* 12694 */
typedef tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;

/* 12695 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFO;

/* 12696 */
typedef _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1;

/* 12697 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINETO16;

/* 12698 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXT;

/* 12699 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELPA;

/* 12700 */
typedef _PRINTER_DEFAULTSA *PPRINTER_DEFAULTS;

/* 12701 */
typedef _CONSOLE_HISTORY_INFO *PCONSOLE_HISTORY_INFO;

/* 12702 */
typedef tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;

/* 12703 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWND;

/* 12704 */
typedef _CRYPT_RSA_SSA_PSS_PARAMETERS *PCRYPT_RSA_SSA_PSS_PARAMETERS;

/* 12705 */
typedef tagPDW *LPPRINTDLGW;

/* 12706 */
typedef tagRPCOLEMESSAGE *PRPCOLEMESSAGE;

/* 12707 */
typedef _CERT_NAME_INFO *PCERT_NAME_INFO;

/* 12708 */
typedef IWinInetFileStream *LPWININETFILESTREAM;

/* 12709 */
typedef _CERT_LOGOTYPE_REFERENCE *PCERT_LOGOTYPE_REFERENCE;

/* 12710 */
typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;

/* 12711 */
typedef _DRIVER_INFO_1A *PDRIVER_INFO_1;

/* 12712 */
typedef tagVersionedStream *LPVERSIONEDSTREAM;

/* 12713 */
typedef int INT_PTR;

/* 12714 */
typedef tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;

/* 12715 */
typedef tagMULTIKEYHELPW *LPMULTIKEYHELPW;

/* 12716 */
typedef _DEBUG_EVENT *LPDEBUG_EVENT;

/* 12717 */
typedef servent *LPSERVENT;

/* 12718 */
typedef _SERVICE_TIMECHANGE_INFO *PSERVICE_TIMECHANGE_INFO;

/* 12719 */
typedef int (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, void **, wchar_t **);

/* 12720 */
typedef const _MIDL_STUB_DESC *PMIDL_STUB_DESC;

/* 12721 */
typedef _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;

/* 12722 */
typedef _DRIVER_INFO_1A *LPDRIVER_INFO_1;

/* 12723 */
typedef _DRIVER_INFO_2A *LPDRIVER_INFO_2;

/* 12724 */
typedef _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE;

/* 12725 */
typedef _COMSTAT *LPCOMSTAT;

/* 12726 */
typedef IEnumUnknown *LPENUMUNKNOWN;

/* 12727 */
typedef _DRIVER_INFO_3A *LPDRIVER_INFO_3;

/* 12728 */
typedef arrayOopDesc *arrayOop;

/* 12729 */
typedef _jfloatArray *jfloatArray;

/* 12730 */
typedef _DRIVER_INFO_4A *LPDRIVER_INFO_4;

/* 12731 */
typedef unsigned int ALG_ID;

/* 12732 */
typedef _DRIVER_INFO_5A *LPDRIVER_INFO_5;

/* 12733 */
typedef _DRIVER_INFO_6A *LPDRIVER_INFO_6;

/* 12734 */
typedef _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;

/* 12735 */
typedef _DRIVER_INFO_8A *LPDRIVER_INFO_8;

/* 12736 */
typedef __int64 (__stdcall *GetLongField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 12737 */
typedef _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;

/* 12738 */
typedef $3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;

/* 12739 */
typedef _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;

/* 12740 */
typedef tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;

/* 12741 */
typedef void (__cdecl *terminate_handler)();

/* 12742 */
typedef tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMS;

/* 12743 */
typedef tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;

/* 12744 */
typedef _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;

/* 12745 */
typedef _MONITOR_INFO_1A *PMONITOR_INFO_1A;

/* 12746 */
typedef _TOKEN_MANDATORY_LABEL *PTOKEN_MANDATORY_LABEL;

/* 12747 */
typedef _NTFS_STATISTICS *PNTFS_STATISTICS;

/* 12748 */
typedef _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;

/* 12749 */
typedef HPALETTE__ *HPALETTE;

/* 12750 */
typedef int FXPT2DOT30;

/* 12751 */
typedef tagMODULEENTRY32W *LPMODULEENTRY32W;

/* 12752 */
typedef _ENLISTMENT_BASIC_INFORMATION *PENLISTMENT_BASIC_INFORMATION;

/* 12753 */
typedef void *NDR_CCONTEXT;

/* 12754 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;

/* 12755 */
typedef unsigned int PROPID;

/* 12756 */
typedef void *RPC_SS_THREAD_HANDLE;

/* 12757 */
typedef unsigned int DWORD32;

/* 12758 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/* 12759 */
typedef _DRIVER_INFO_1W *PDRIVER_INFO_1W;

/* 12760 */
typedef IOleInPlaceSite *LPOLEINPLACESITE;

/* 12761 */
typedef int (__stdcall *OLDFONTENUMPROCW)(const tagLOGFONTW *, const tagTEXTMETRICW *, unsigned int, int);

/* 12762 */
typedef _STORAGE_DESCRIPTOR_HEADER *PSTORAGE_DESCRIPTOR_HEADER;

/* 12763 */
typedef tagPDA *LPPRINTDLG;

/* 12764 */
typedef _CERT_CHAIN *PCERT_CHAIN;

/* 12765 */
typedef wchar_t *PUZZWSTR;

/* 12766 */
typedef _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;

/* 12767 */
typedef _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;

/* 12768 */
typedef char *PUZZTSTR;

/* 12769 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;

/* 12770 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELP;

/* 12771 */
typedef unsigned int (__stdcall *LPFRHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 12772 */
typedef _userSTGMEDIUM *wireSTGMEDIUM;

/* 12773 */
typedef MFT_ENUM_DATA *PMFT_ENUM_DATA;

/* 12774 */
typedef _ACTION_HEADER *PACTION_HEADER;

/* 12775 */
typedef HENHMETAFILE__ *HENHMETAFILE;

/* 12776 */
typedef unsigned int error_status_t;

/* 12777 */
typedef _DRIVER_INFO_1A *PDRIVER_INFO_1A;

/* 12778 */
typedef void *HCERTCHAINENGINE;

/* 12779 */
typedef _MONITOR_INFO_2A *PMONITOR_INFO_2A;

/* 12780 */
typedef tagRAWINPUT *LPRAWINPUT;

/* 12781 */
typedef tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;

/* 12782 */
typedef tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;

/* 12783 */
typedef _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;

/* 12784 */
typedef tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;

/* 12785 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;

/* 12786 */
typedef _FORM_INFO_1W *LPFORM_INFO_1W;

/* 12787 */
typedef _LUID *PLUID;

/* 12788 */
typedef tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;

/* 12789 */
typedef HDESK__ *HDESK;

/* 12790 */
typedef int socklen_t;

/* 12791 */
typedef const _CERT_SIMPLE_CHAIN *PCCERT_SIMPLE_CHAIN;

/* 12792 */
typedef const _PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

/* 12793 */
typedef _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;

/* 12794 */
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;

/* 12795 */
typedef _CERT_PAIR *PCERT_PAIR;

/* 12796 */
typedef _MIB_IF_TABLE2 *PMIB_IF_TABLE2;

/* 12797 */
typedef tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;

/* 12798 */
typedef void (__stdcall *STUB_THUNK)(_MIDL_STUB_MESSAGE *);

/* 12799 */
typedef IBindProtocol *LPBINDPROTOCOL;

/* 12800 */
typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

/* 12801 */
typedef _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTS;

/* 12802 */
typedef IEnumSTATSTG *LPENUMSTATSTG;

/* 12803 */
typedef _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;

/* 12804 */
typedef MOVE_FILE_RECORD_DATA *PMOVE_FILE_RECORD_DATA;

/* 12805 */
typedef tagRAWMOUSE *LPRAWMOUSE;

/* 12806 */
typedef tagMONCBSTRUCT *PMONCBSTRUCT;

/* 12807 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICE;

/* 12808 */
typedef void (__cdecl *_PMFN)();

/* 12809 */
typedef const _PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

/* 12810 */
typedef const _RECTL *LPCRECTL;

/* 12811 */
typedef PPM_IDLE_STATE_ACCOUNTING_EX *PPPM_IDLE_STATE_ACCOUNTING_EX;

/* 12812 */
typedef tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;

/* 12813 */
typedef float (__stdcall *GetFloatField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 12814 */
typedef _DOC_INFO_3W *LPDOC_INFO_3W;

/* 12815 */
typedef _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;

/* 12816 */
typedef tagLOCALESIGNATURE *LPLOCALESIGNATURE;

/* 12817 */
typedef HDRVR__ *HDRVR;

/* 12818 */
typedef tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;

/* 12819 */
typedef _IO_COUNTERS *PIO_COUNTERS;

/* 12820 */
typedef _DOC_INFO_3A *LPDOC_INFO_3A;

/* 12821 */
typedef _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;

/* 12822 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;

/* 12823 */
typedef tagTTPOLYCURVE *LPTTPOLYCURVE;

/* 12824 */
typedef MENUITEMTEMPLATEHEADER *PMENUITEMTEMPLATEHEADER;

/* 12825 */
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;

/* 12826 */
typedef waveformat_tag *LPWAVEFORMAT;

/* 12827 */
typedef waveformat_tag *NPWAVEFORMAT;

/* 12828 */
typedef _EXFAT_STATISTICS *PEXFAT_STATISTICS;

/* 12829 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY;

/* 12830 */
typedef unsigned int narrowKlass;

/* 12831 */
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;

/* 12832 */
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;

/* 12833 */
typedef _NOTIFYICONDATAA *PNOTIFYICONDATAA;

/* 12834 */
typedef IEnumMoniker *LPENUMMONIKER;

/* 12835 */
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;

/* 12836 */
typedef tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;

/* 12837 */
typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

/* 12838 */
typedef _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER;

/* 12839 */
typedef void (__cdecl *CallStub)(unsigned __int8 *, int *, BasicType, Method *, unsigned __int8 *, int *, int, Thread *);

/* 12840 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY;

/* 12841 */
typedef _FILE_PREFETCH_EX *PFILE_PREFETCH_EX;

/* 12842 */
typedef HRESULT (__stdcall *LPFNGETCLASSOBJECT)(const _GUID *, const _GUID *, void **);

/* 12843 */
typedef _LARGE_INTEGER *PLARGE_INTEGER;

/* 12844 */
typedef int (__cdecl *PENUM_PAGE_FILE_CALLBACKW)(void *, _ENUM_PAGE_FILE_INFORMATION *, const wchar_t *);

/* 12845 */
typedef int (__stdcall *CALINFO_ENUMPROCEXA)(char *, unsigned int);

/* 12846 */
typedef void __stdcall WAVECALLBACK(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 12847 */
typedef __int64 (__stdcall *DoubleToLongBitsFn)(JNIEnv_ *, _jclass *, long double);

/* 12848 */
typedef _PERSISTENT_RESERVE_COMMAND *PPERSISTENT_RESERVE_COMMAND;

/* 12849 */
typedef HMIDISTRM__ **LPHMIDISTRM;

/* 12850 */
typedef _CACHE_RELATIONSHIP *PCACHE_RELATIONSHIP;

/* 12851 */
typedef int (__stdcall *CALINFO_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 12852 */
typedef int (__cdecl *PENUM_PAGE_FILE_CALLBACKA)(void *, _ENUM_PAGE_FILE_INFORMATION *, const char *);

/* 12853 */
typedef int (__stdcall *GRAYSTRINGPROC)(HDC__ *, int, int);

/* 12854 */
typedef unsigned int SOCKET;

/* 12855 */
typedef _devicemodeA *PDEVMODE;

/* 12856 */
typedef void *RPC_IF_HANDLE;

/* 12857 */
typedef _DISK_GROW_PARTITION *PDISK_GROW_PARTITION;

/* 12858 */
typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;

/* 12859 */
typedef tagMIXERCONTROLA *PMIXERCONTROL;

/* 12860 */
typedef void (__stdcall *jvmtiEventClassFileLoadHook)(_jvmtiEnv *, JNIEnv_ *, _jclass *, _jobject *, const char *, _jobject *, int, const unsigned __int8 *, int *, unsigned __int8 **);

/* 12861 */
typedef unsigned int NLS_FUNCTION;

/* 12862 */
typedef _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;

/* 12863 */
typedef const _PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

/* 12864 */
typedef __int64 s8;

/* 12865 */
typedef tagCIEXYZ *LPCIEXYZ;

/* 12866 */
typedef HDDEDATA__ *(__stdcall *PFNCALLBACK)(unsigned int, unsigned int, HCONV__ *, HSZ__ *, HSZ__ *, HDDEDATA__ *, unsigned int, unsigned int);

/* 12867 */
typedef _SERVICE_SID_INFO *LPSERVICE_SID_INFO;

/* 12868 */
typedef PPM_WMI_IDLE_STATE *PPPM_WMI_IDLE_STATE;

/* 12869 */
typedef _DOC_INFO_3A *LPDOC_INFO_3;

/* 12870 */
typedef tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

/* 12871 */
typedef void (__stdcall *jvmtiEventObjectFree)(_jvmtiEnv *, __int64);

/* 12872 */
typedef tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMS;

/* 12873 */
typedef _OVERLAPPED_ENTRY *LPOVERLAPPED_ENTRY;

/* 12874 */
typedef unsigned __int64 u8;

/* 12875 */
typedef _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;

/* 12876 */
typedef HINSTANCE__ *HINSTANCE;

/* 12877 */
typedef _DISK_PERFORMANCE *PDISK_PERFORMANCE;

/* 12878 */
typedef tagRemSNB *wireSNB;

/* 12879 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFO;

/* 12880 */
typedef _RemotableHandle *wireHICON;

/* 12881 */
typedef _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;

/* 12882 */
typedef _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;

/* 12883 */
typedef _NETRESOURCEA *LPNETRESOURCEA;

/* 12884 */
typedef const char *LPCTSTR;

/* 12885 */
typedef _CMC_PEND_INFO *PCMC_PEND_INFO;

/* 12886 */
typedef _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

/* 12887 */
typedef BULK_SECURITY_TEST_DATA *PBULK_SECURITY_TEST_DATA;

/* 12888 */
typedef _devicemodeW *PDEVMODEW;

/* 12889 */
typedef unsigned int u_int;

/* 12890 */
typedef tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;

/* 12891 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(void *, const _CERT_STORE_PROV_FIND_INFO *, const _CTL_CONTEXT *, unsigned int, void **, const _CTL_CONTEXT **);

/* 12892 */
typedef tagAXESLISTA *PAXESLISTA;

/* 12893 */
typedef const tWAVEFORMATEX *LPCWAVEFORMATEX;

/* 12894 */
typedef _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;

/* 12895 */
typedef tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;

/* 12896 */
typedef _userHBITMAP *wireHBITMAP;

/* 12897 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA_LATEST;

/* 12898 */
typedef _JOB_INFO_2A *PJOB_INFO_2;

/* 12899 */
typedef tagEXTLOGFONTW *PEXTLOGFONTW;

/* 12900 */
typedef tagHELPWININFOA *LPHELPWININFOA;

/* 12901 */
typedef unsigned int HCRYPTKEY;

/* 12902 */
typedef _JOB_INFO_3 *PJOB_INFO_3;

/* 12903 */
typedef _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;

/* 12904 */
typedef tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;

/* 12905 */
typedef _JOB_INFO_1A *PJOB_INFO_1;

/* 12906 */
typedef tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;

/* 12907 */
typedef tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;

/* 12908 */
typedef _devicemodeA *PDEVMODEA;

/* 12909 */
typedef _JOB_INFO_4A *PJOB_INFO_4;

/* 12910 */
typedef const wchar_t **PZPCWSTR;

/* 12911 */
typedef tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;

/* 12912 */
typedef tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;

/* 12913 */
typedef tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;

/* 12914 */
typedef IOleCache *LPOLECACHE;

/* 12915 */
typedef _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;

/* 12916 */
typedef int (__stdcall *pfn_SymGetSymFromAddr64)(void *, unsigned __int64, unsigned __int64 *, _IMAGEHLP_SYMBOL64 *);

/* 12917 */
typedef _PSAPI_WS_WATCH_INFORMATION *PPSAPI_WS_WATCH_INFORMATION;

/* 12918 */
typedef tagRAWINPUTHEADER *PRAWINPUTHEADER;

/* 12919 */
typedef unsigned int APARTMENTID;

/* 12920 */
typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600;

/* 12921 */
typedef int _Mbstatet;

/* 12922 */
typedef _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;

/* 12923 */
typedef _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;

/* 12924 */
typedef tagMIDIOUTCAPS2A *PMIDIOUTCAPS2A;

/* 12925 */
typedef unsigned int ACCESS_MASK;

/* 12926 */
typedef tagMIDIINCAPSA *PMIDIINCAPSA;

/* 12927 */
typedef int (__stdcall *GetIntField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 12928 */
typedef tagSTYLEBUFA *PSTYLEBUF;

/* 12929 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;

/* 12930 */
typedef _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;

/* 12931 */
typedef int (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(unsigned int, unsigned int, unsigned int, void *);

/* 12932 */
typedef unsigned __int16 PATCHARRAY[128];

/* 12933 */
typedef IOleCache2 *LPOLECACHE2;

/* 12934 */
typedef _DRIVER_INFO_6A *PDRIVER_INFO_6;

/* 12935 */
typedef _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;

/* 12936 */
typedef const char *PCNZCH;

/* 12937 */
typedef _SHQUERYRBINFO *LPSHQUERYRBINFO;

/* 12938 */
typedef tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;

/* 12939 */
typedef HWAVEOUT__ *HWAVEOUT;

/* 12940 */
typedef tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMS;

/* 12941 */
typedef _CMC_STATUS_INFO *PCMC_STATUS_INFO;

/* 12942 */
typedef _JOB_INFO_2A *LPJOB_INFO_2;

/* 12943 */
typedef tagHEAPLIST32 *LPHEAPLIST32;

/* 12944 */
typedef int (__stdcall *DESKTOPENUMPROCW)(wchar_t *, int);

/* 12945 */
typedef _STORAGE_ASSOCIATION_TYPE *PSTORAGE_ASSOCIATION_TYPE;

/* 12946 */
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

/* 12947 */
typedef _SLIST_HEADER *PSLIST_HEADER;

/* 12948 */
typedef _CONSOLE_READCONSOLE_CONTROL *PCONSOLE_READCONSOLE_CONTROL;

/* 12949 */
typedef int *PLONG32;

/* 12950 */
typedef _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;

/* 12951 */
typedef _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

/* 12952 */
typedef _STORAGE_IDENTIFIER_CODE_SET *PSTORAGE_IDENTIFIER_CODE_SET;

/* 12953 */
typedef unsigned int (__stdcall *YIELDPROC)(unsigned int, unsigned int);

/* 12954 */
typedef _TOKEN_ACCESS_INFORMATION *PTOKEN_ACCESS_INFORMATION;

/* 12955 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(void *, const _CERT_STORE_PROV_FIND_INFO *, const _CRL_CONTEXT *, unsigned int, void **, const _CRL_CONTEXT **);

/* 12956 */
typedef unsigned int ULONG32;

/* 12957 */
typedef tagVARIANT *LPVARIANTARG;

/* 12958 */
typedef _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

/* 12959 */
typedef unsigned __int16 ino_t;

/* 12960 */
typedef _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;

/* 12961 */
typedef _TOKEN_OWNER *PTOKEN_OWNER;

/* 12962 */
typedef tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;

/* 12963 */
typedef IPropertyStorage *LPPROPERTYSTORAGE;

/* 12964 */
typedef _STORAGE_HOTPLUG_INFO *PSTORAGE_HOTPLUG_INFO;

/* 12965 */
typedef const wchar_t *PCWSTR;

/* 12966 */
typedef _KCRM_TRANSACTION_BLOB *PKCRM_TRANSACTION_BLOB;

/* 12967 */
typedef _CERT_RDN *PCERT_RDN;

/* 12968 */
typedef tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;

/* 12969 */
typedef void (__fastcall *PCOOKIE_CHECK)(unsigned int);

/* 12970 */
typedef _CRYPTNET_URL_CACHE_PRE_FETCH_INFO *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;

/* 12971 */
typedef _DRIVER_INFO_6W *PDRIVER_INFO_6W;

/* 12972 */
typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *);

/* 12973 */
typedef _TRANSACTION_ENLISTMENTS_INFORMATION *PTRANSACTION_ENLISTMENTS_INFORMATION;

/* 12974 */
typedef char int8_t;

/* 12975 */
typedef _RASTERIZER_STATUS *LPRASTERIZER_STATUS;

/* 12976 */
typedef tagCHOOSECOLORA *LPCHOOSECOLORA;

/* 12977 */
typedef _CRYPT_ATTRIBUTES *PCMSG_ATTR;

/* 12978 */
typedef unsigned __int16 COLOR16;

/* 12979 */
typedef _JOB_INFO_2W *LPJOB_INFO_2W;

/* 12980 */
typedef tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;

/* 12981 */
typedef _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

/* 12982 */
typedef _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;

/* 12983 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICS;

/* 12984 */
typedef _XSTATE_CONFIGURATION *PXSTATE_CONFIGURATION;

/* 12985 */
typedef _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT;

/* 12986 */
typedef int RegionIdx_t;

/* 12987 */
typedef unsigned int TraceAddress;

/* 12988 */
typedef int (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(_CRYPT_ALGORITHM_IDENTIFIER *, _CRYPTOAPI_BLOB *, unsigned __int8 *, unsigned int *, void *);

/* 12989 */
typedef _ACE_HEADER *PACE_HEADER;

/* 12990 */
typedef _FORM_INFO_1A *LPFORM_INFO_1;

/* 12991 */
typedef _DRIVER_INFO_6A *PDRIVER_INFO_6A;

/* 12992 */
typedef const char *PCTSTR;

/* 12993 */
typedef _TP_CALLBACK_ENVIRON_V1 *PTP_CALLBACK_ENVIRON;

/* 12994 */
typedef _BCryptBufferDesc *PNCryptBufferDesc;

/* 12995 */
typedef int int32_t;

/* 12996 */
typedef tagABORTPATH *PEMRREALIZEPALETTE;

/* 12997 */
typedef int (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(void *);

/* 12998 */
typedef tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;

/* 12999 */
typedef _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;

/* 13000 */
typedef const _CERT_EXTENSION *PCCERT_EXTENSION;

/* 13001 */
typedef _jclass *jclass;

/* 13002 */
typedef _JOB_INFO_2A *LPJOB_INFO_2A;

/* 13003 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

/* 13004 */
typedef tagRID_DEVICE_INFO *PRID_DEVICE_INFO;

/* 13005 */
typedef _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;

/* 13006 */
typedef tagCANDIDATEFORM *LPCANDIDATEFORM;

/* 13007 */
typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;

/* 13008 */
typedef val_context *PVALCONTEXT;

/* 13009 */
typedef tagCANDIDATEFORM *NPCANDIDATEFORM;

/* 13010 */
typedef tagOIFI *LPOLEINPLACEFRAMEINFO;

/* 13011 */
typedef _STORAGE_ALLOCATE_BC_STREAM_INPUT *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

/* 13012 */
typedef _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;

/* 13013 */
typedef tagMDINEXTMENU *LPMDINEXTMENU;

/* 13014 */
typedef unsigned __int8 *RPC_BUFPTR;

/* 13015 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;

/* 13016 */
typedef _BIDI_DATA *PBIDI_DATA;

/* 13017 */
typedef unsigned int narrowOop;

/* 13018 */
typedef _CRYPT_CONTEXT_FUNCTION_CONFIG *PCRYPT_CONTEXT_FUNCTION_CONFIG;

/* 13019 */
typedef _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;

/* 13020 */
typedef void (__cdecl *unexpected_handler)();

/* 13021 */
typedef tagTYPEATTR *LPTYPEATTR;

/* 13022 */
typedef IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER;

/* 13023 */
typedef tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;

/* 13024 */
typedef _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;

/* 13025 */
typedef OPENCARDNAME_EXA *LPOPENCARDNAME_EXA;

/* 13026 */
typedef unsigned int GEOTYPE;

/* 13027 */
typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

/* 13028 */
typedef int (__stdcall *PROC)();

/* 13029 */
typedef _ICONINFO *PICONINFO;

/* 13030 */
typedef void *HMETAFILEPICT;

/* 13031 */
typedef void *OopOrNarrowOopStar;

/* 13032 */
typedef _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64;

/* 13033 */
typedef tagWNDCLASSEXA *PWNDCLASSEX;

/* 13034 */
typedef _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;

/* 13035 */
typedef _BIN_RESULTS *PBIN_RESULTS;

/* 13036 */
typedef tagLOGBRUSH *PLOGBRUSH;

/* 13037 */
typedef tagOLEVERB *LPOLEVERB;

/* 13038 */
typedef char *PNZTCH;

/* 13039 */
typedef _DOC_INFO_2W *LPDOC_INFO_2W;

/* 13040 */
typedef _KTMOBJECT_CURSOR *PKTMOBJECT_CURSOR;

/* 13041 */
typedef void (__stdcall *jvmtiEventMethodExit)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, unsigned __int8, jvalue);

/* 13042 */
typedef wchar_t **LPBSTR;

/* 13043 */
typedef _DOC_INFO_2A *LPDOC_INFO_2A;

/* 13044 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATE;

/* 13045 */
typedef long double (__stdcall *LongBitsToDoubleFn)(JNIEnv_ *, _jclass *, __int64);

/* 13046 */
typedef tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMS;

/* 13047 */
typedef IEnumSTATDATA *LPENUMSTATDATA;

/* 13048 */
typedef _WIN32_STREAM_ID *LPWIN32_STREAM_ID;

/* 13049 */
typedef void __stdcall RPC_ADDRESS_CHANGE_FN(void *);

/* 13050 */
typedef _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;

/* 13051 */
typedef _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;

/* 13052 */
typedef tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;

/* 13053 */
typedef int (__stdcall *LPFNADDPROPSHEETPAGE)(_PSP *, int);

/* 13054 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICS;

/* 13055 */
typedef _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;

/* 13056 */
typedef unsigned int LGRPID;

/* 13057 */
typedef _CPS_URLS *PCPS_URLS;

/* 13058 */
typedef tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;

/* 13059 */
typedef _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE;

/* 13060 */
typedef tagCOMBOBOXINFO *PCOMBOBOXINFO;

/* 13061 */
typedef tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;

/* 13062 */
typedef void (__stdcall *jvmtiEventMonitorWait)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *, __int64);

/* 13063 */
typedef tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION;

/* 13064 */
typedef void (__cdecl *new_handler)();

/* 13065 */
typedef const DLGTEMPLATE *LPCDLGTEMPLATE;

/* 13066 */
typedef _KTMOBJECT_TYPE *PKTMOBJECT_TYPE;

/* 13067 */
typedef _KCRM_TRANSACTION_BLOB *PRKCRM_TRANSACTION_BLOB;

/* 13068 */
typedef tagSOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

/* 13069 */
typedef HMIDIIN__ *HMIDIIN;

/* 13070 */
typedef wchar_t *PWSTR;

/* 13071 */
typedef const char *LPCSTR;

/* 13072 */
typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

/* 13073 */
typedef tagLOGPALETTE *LPLOGPALETTE;

/* 13074 */
typedef _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;

/* 13075 */
typedef unsigned __int16 CLIPFORMAT;

/* 13076 */
typedef tagLOGPALETTE *NPLOGPALETTE;

/* 13077 */
typedef _CRYPT_CONTEXTS *PCRYPT_CONTEXTS;

/* 13078 */
typedef FIND_BY_SID_DATA *PFIND_BY_SID_DATA;

/* 13079 */
typedef _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST;

/* 13080 */
typedef _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING;

/* 13081 */
typedef _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;

/* 13082 */
typedef unsigned __int16 blk_ofs_t;

/* 13083 */
typedef int (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(const _CRYPT_OID_INFO *, void *);

/* 13084 */
typedef IHttpNegotiate *LPHTTPNEGOTIATE;

/* 13085 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;

/* 13086 */
typedef tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;

/* 13087 */
typedef int errno_t;

/* 13088 */
typedef int (__stdcall *LPFNADDPROPSHEETPAGES)(void *, int (__stdcall *)(_PSP *, int), int);

/* 13089 */
typedef tagDIBSECTION *PDIBSECTION;

/* 13090 */
typedef tagMIXERCONTROLA *PMIXERCONTROLA;

/* 13091 */
typedef IEnumFORMATETC *LPENUMFORMATETC;

/* 13092 */
typedef _TOKEN_ELEVATION_TYPE *PTOKEN_ELEVATION_TYPE;

/* 13093 */
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

/* 13094 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

/* 13095 */
typedef jvmtiIterationControl (__stdcall *jvmtiHeapObjectCallback)(__int64, __int64, __int64 *, void *);

/* 13096 */
typedef int LONG_PTR;

/* 13097 */
typedef tagDESIGNVECTOR *LPDESIGNVECTOR;

/* 13098 */
typedef _DISK_EXTENT *PDISK_EXTENT;

/* 13099 */
typedef SYSTEM_BATTERY_STATE *PSYSTEM_BATTERY_STATE;

/* 13100 */
typedef READ_USN_JOURNAL_DATA *PREAD_USN_JOURNAL_DATA;

/* 13101 */
typedef void (__stdcall *jvmtiEventCompiledMethodLoad)(_jvmtiEnv *, struct _jmethodID *, int, const void *, int, const _jvmtiAddrLocationMap *, const void *);

/* 13102 */
typedef void (__cdecl *OopsDo)(OopClosure *);

/* 13103 */
typedef _DOC_INFO_2A *LPDOC_INFO_2;

/* 13104 */
typedef _CERT_HASHED_URL *PCERT_HASHED_URL;

/* 13105 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;

/* 13106 */
typedef _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;

/* 13107 */
typedef int (__stdcall *PVECTORED_EXCEPTION_HANDLER)(_EXCEPTION_POINTERS *);

/* 13108 */
typedef int *PNTSTATUS;

/* 13109 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;

/* 13110 */
typedef _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;

/* 13111 */
typedef _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;

/* 13112 */
typedef tagBITMAPCOREHEADER *PBITMAPCOREHEADER;

/* 13113 */
typedef tagACTCTXA *PACTCTX;

/* 13114 */
typedef unsigned int (__stdcall *LPPAGESETUPHOOK)(HWND__ *, unsigned int, unsigned int, int);

/* 13115 */
typedef _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

/* 13116 */
typedef HDDEDATA__ *__stdcall FNCALLBACK(unsigned int, unsigned int, HCONV__ *, HSZ__ *, HSZ__ *, HDDEDATA__ *, unsigned int, unsigned int);

/* 13117 */
typedef const unsigned __int8 *PFORMAT_STRING;

/* 13118 */
typedef tagWAVEOUTCAPSA *NPWAVEOUTCAPS;

/* 13119 */
typedef tagAXESLISTA *PAXESLIST;

/* 13120 */
typedef _ENUM_PAGE_FILE_INFORMATION *PENUM_PAGE_FILE_INFORMATION;

/* 13121 */
typedef tagWAVEOUTCAPSA *LPWAVEOUTCAPS;

/* 13122 */
typedef NTFS_FILE_RECORD_INPUT_BUFFER *PNTFS_FILE_RECORD_INPUT_BUFFER;

/* 13123 */
typedef tagPALETTEENTRY *PPALETTEENTRY;

/* 13124 */
typedef _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;

/* 13125 */
typedef _NETRESOURCEA *LPNETRESOURCE;

/* 13126 */
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;

/* 13127 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;

/* 13128 */
typedef tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;

/* 13129 */
typedef HWAVE__ *HWAVE;

/* 13130 */
typedef _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;

/* 13131 */
typedef _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;

/* 13132 */
typedef tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;

/* 13133 */
typedef _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;

/* 13134 */
typedef tagHELPWININFOA *LPHELPWININFO;

/* 13135 */
typedef _numberfmtA *LPNUMBERFMT;

/* 13136 */
typedef unsigned int (__stdcall *LPPROGRESS_ROUTINE)(_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, unsigned int, unsigned int, void *, void *, void *);

/* 13137 */
typedef _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;

/* 13138 */
typedef int intptr_t;

/* 13139 */
typedef const tagRECT *LPCRECT;

/* 13140 */
typedef int PDH_STATUS;

/* 13141 */
typedef _VERIFY_INFORMATION *PVERIFY_INFORMATION;

/* 13142 */
typedef void (__stdcall *PFN_CRYPT_FREE)(void *);

/* 13143 */
typedef IBindCtx *LPBINDCTX;

/* 13144 */
typedef unsigned int uint32_t;

/* 13145 */
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

/* 13146 */
typedef void *HANDLE;

/* 13147 */
typedef _CERT_RDN_ATTR *PCERT_RDN_ATTR;

/* 13148 */
typedef _PARTITION_INFORMATION_MBR *PPARTITION_INFORMATION_MBR;

/* 13149 */
typedef tagMIDIOUTCAPS2A *PMIDIOUTCAPS2;

/* 13150 */
typedef _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;

/* 13151 */
typedef _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;

/* 13152 */
typedef tagSTYLEBUFA *PSTYLEBUFA;

/* 13153 */
typedef int (__stdcall *WNDPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 13154 */
typedef void (__stdcall *LPWAVECALLBACK)(HDRVR__ *, unsigned int, unsigned int, unsigned int, unsigned int);

/* 13155 */
typedef _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;

/* 13156 */
typedef _BLENDFUNCTION *PBLENDFUNCTION;

/* 13157 */
typedef _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;

/* 13158 */
typedef _MODEMSETTINGS *LPMODEMSETTINGS;

/* 13159 */
typedef const tagACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

/* 13160 */
typedef _userHENHMETAFILE *wireHENHMETAFILE;

/* 13161 */
typedef _XSAVE_AREA *PXSAVE_AREA;

/* 13162 */
typedef tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;

/* 13163 */
typedef tagMIDIOUTCAPSA *PMIDIOUTCAPS;

/* 13164 */
typedef MultiCounterQuerySetS *MultiCounterQuerySetP;

/* 13165 */
typedef int (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(unsigned int, unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, void *, const wchar_t *, const wchar_t *, unsigned __int8 *, unsigned int, unsigned __int8 *, unsigned int *);

/* 13166 */
typedef _BIDI_REQUEST_CONTAINER *PBIDI_REQUEST_CONTAINER;

/* 13167 */
typedef unsigned int GDI_HANDLE_BUFFER[34];

/* 13168 */
typedef _BIDI_RESPONSE_DATA *LPBIDI_RESPONSE_DATA;

/* 13169 */
typedef const _PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;

/* 13170 */
typedef const char *PCUZZTSTR;

/* 13171 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 13172 */
typedef _FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

/* 13173 */
typedef _JOB_INFO_3 *LPJOB_INFO_3;

/* 13174 */
typedef _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

/* 13175 */
typedef tagPROCESSENTRY32W *PPROCESSENTRY32W;

/* 13176 */
typedef typeArrayOopDesc *typeArrayOop;

/* 13177 */
typedef tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;

/* 13178 */
typedef unsigned __int16 *PSECURITY_DESCRIPTOR_CONTROL;

/* 13179 */
typedef void (__stdcall *PFN_CMSG_FREE)(void *);

/* 13180 */
typedef tagEMRSTRETCHBLT *PEMRSTRETCHBLT;

/* 13181 */
typedef _SENDCMDINPARAMS *LPSENDCMDINPARAMS;

/* 13182 */
typedef _GUID *LPGUID;

/* 13183 */
typedef _ULARGE_INTEGER *PULARGE_INTEGER;

/* 13184 */
typedef const char *PCUTSTR;

/* 13185 */
typedef _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;

/* 13186 */
typedef _cpinfoexA *LPCPINFOEXA;

/* 13187 */
typedef wchar_t *LPWCH;

/* 13188 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;

/* 13189 */
typedef wchar_t *LPUWSTR;

/* 13190 */
typedef const tagACTCTXA *PCACTCTX;

/* 13191 */
typedef unsigned __int16 PRINTEROP_FLAGS;

/* 13192 */
typedef void *HCRYPTOIDFUNCSET;

/* 13193 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;

/* 13194 */
typedef unsigned int address_word;

/* 13195 */
typedef _IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;

/* 13196 */
typedef _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;

/* 13197 */
typedef tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;

/* 13198 */
typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

/* 13199 */
typedef _MONITOR_INFO_1W *PMONITOR_INFO_1W;

/* 13200 */
typedef _cpinfoexW *LPCPINFOEXW;

/* 13201 */
typedef tagEMRFILLPATH *PEMRSTROKEPATH;

/* 13202 */
typedef const _CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;

/* 13203 */
typedef _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;

/* 13204 */
typedef tagMIDIOUTCAPSW *PMIDIOUTCAPSW;

/* 13205 */
typedef int (__stdcall *OLDFONTENUMPROCA)(const tagLOGFONTA *, const tagTEXTMETRICA *, unsigned int, int);

/* 13206 */
typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

/* 13207 */
typedef void (__stdcall *jvmtiEventFieldAccess)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, __int64, _jclass *, _jobject *, struct _jfieldID *);

/* 13208 */
typedef _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS;

/* 13209 */
typedef _IMAGE_RELOCATION *PIMAGE_RELOCATION;

/* 13210 */
typedef const char *PCZZTSTR;

/* 13211 */
typedef _NT_TIB32 *PNT_TIB32;

/* 13212 */
typedef _ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;

/* 13213 */
typedef const wchar_t *PCZZWSTR;

/* 13214 */
typedef tagCHOOSECOLORA *LPCHOOSECOLOR;

/* 13215 */
typedef _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;

/* 13216 */
typedef tagDROPSTRUCT *PDROPSTRUCT;

/* 13217 */
typedef ILockBytes *LPLOCKBYTES;

/* 13218 */
typedef char *LPTCH;

/* 13219 */
typedef _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

/* 13220 */
typedef _MONITOR_INFO_2W *PMONITOR_INFO_2W;

/* 13221 */
typedef tagMIDIOUTCAPSA *PMIDIOUTCAPSA;

/* 13222 */
typedef _CRYPT_INTERFACE_REG *PCRYPT_INTERFACE_REG;

/* 13223 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEX;

/* 13224 */
typedef int (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(_CRYPT_ALGORITHM_IDENTIFIER, _CRYPTOAPI_BLOB, unsigned __int8 *, unsigned int *, void *);

/* 13225 */
typedef _OVERLAPPED *LPOVERLAPPED;

/* 13226 */
typedef _FORM_INFO_1A *LPFORM_INFO_1A;

/* 13227 */
typedef tagMONMSGSTRUCT *PMONMSGSTRUCT;

/* 13228 */
typedef _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;

/* 13229 */
typedef tagRECT *PRECT;

/* 13230 */
typedef const tagACTCTXW *PCACTCTXW;

/* 13231 */
typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

/* 13232 */
typedef tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;

/* 13233 */
typedef HWAVEIN__ **LPHWAVEIN;

/* 13234 */
typedef _cpinfoexA *LPCPINFOEX;

/* 13235 */
typedef int (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(void *, const _CERT_CONTEXT *, unsigned int, const _CERT_CONTEXT **);

/* 13236 */
typedef OPENCARDNAME_EXA *LPOPENCARDNAME_EX;

/* 13237 */
typedef int (__stdcall *pfn_SymSetSearchPath)(void *, const char *);

/* 13238 */
typedef const tagACTCTXA *PCACTCTXA;

/* 13239 */
typedef _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;

/* 13240 */
typedef int clock_t;

/* 13241 */
typedef tagMONITORINFOEXA *LPMONITORINFOEX;

/* 13242 */
typedef _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;

/* 13243 */
typedef _userHPALETTE *wireHPALETTE;

/* 13244 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO;

/* 13245 */
typedef _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;

/* 13246 */
typedef _PATHNAME_BUFFER *PPATHNAME_BUFFER;

/* 13247 */
typedef _PERFORMANCE_DATA *PPERFORMANCE_DATA;

/* 13248 */
typedef _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

/* 13249 */
typedef unsigned __int8 (__stdcall *GetBooleanField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 13250 */
typedef _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP;

/* 13251 */
typedef _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

/* 13252 */
typedef wchar_t *PNZWCH;

/* 13253 */
typedef unsigned int (__stdcall *LPFNDEVCAPS)(char *, char *, unsigned int, char *, _devicemodeA *);

/* 13254 */
typedef void (__cdecl *getCPUIDBrandString_stub_t)(void *);

/* 13255 */
typedef _DOC_INFO_1W *LPDOC_INFO_1W;

/* 13256 */
typedef unsigned __int8 (__cdecl *verify_byte_codes_fn_t)(JNIEnv_ *, _jclass *, char *, int);

/* 13257 */
typedef _DRAWPATRECT *PDRAWPATRECT;

/* 13258 */
typedef tagCONVCONTEXT *PCONVCONTEXT;

/* 13259 */
typedef _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;

/* 13260 */
typedef int (__stdcall *UILANGUAGE_ENUMPROCW)(wchar_t *, int);

/* 13261 */
typedef int (__stdcall *REGISTERWORDENUMPROCA)(const char *, unsigned int, const char *, void *);

/* 13262 */
typedef const tagSCROLLINFO *LPCSCROLLINFO;

/* 13263 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY32;

/* 13264 */
typedef _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;

/* 13265 */
typedef _DRIVER_INFO_5W *LPDRIVER_INFO_5W;

/* 13266 */
typedef _DOC_INFO_1A *LPDOC_INFO_1A;

/* 13267 */
typedef tagLOGBRUSH32 *PLOGBRUSH32;

/* 13268 */
typedef tagMETARECORD *PMETARECORD;

/* 13269 */
typedef unsigned int (__stdcall *LPOCNCONNPROCA)(unsigned int, char *, char *, void *);

/* 13270 */
typedef tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;

/* 13271 */
typedef tWAVEFORMATEX *PWAVEFORMATEX;

/* 13272 */
typedef _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY;

/* 13273 */
typedef IDataObject *LPDATAOBJECT;

/* 13274 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;

/* 13275 */
typedef _RESOURCEMANAGER_COMPLETION_INFORMATION *PRESOURCEMANAGER_COMPLETION_INFORMATION;

/* 13276 */
typedef unsigned int HCRYPTPROV;

/* 13277 */
typedef int (__stdcall *REGISTERWORDENUMPROCW)(const wchar_t *, unsigned int, const wchar_t *, void *);

/* 13278 */
typedef _DEVICE_SEEK_PENALTY_DESCRIPTOR *PDEVICE_SEEK_PENALTY_DESCRIPTOR;

/* 13279 */
typedef _wireVARIANT *wireVARIANT;

/* 13280 */
typedef int (__stdcall *ENUMRESTYPEPROCW)(HINSTANCE__ *, wchar_t *, int);

/* 13281 */
typedef void **PHCRYPTASYNC;

/* 13282 */
typedef hostent *PHOSTENT;

/* 13283 */
typedef tagJOYCAPSW *NPJOYCAPSW;

/* 13284 */
typedef tagJOYCAPSW *LPJOYCAPSW;

/* 13285 */
typedef _SID *PISID;

/* 13286 */
typedef tagSCROLLINFO *LPSCROLLINFO;

/* 13287 */
typedef SC_HANDLE__ *SC_HANDLE;

/* 13288 */
typedef _DRIVER_INFO_4W *LPDRIVER_INFO_4W;

/* 13289 */
typedef _SID_AND_ATTRIBUTES_HASH *PSID_AND_ATTRIBUTES_HASH;

/* 13290 */
typedef char *PTSTR;

/* 13291 */
typedef _jshortArray *jshortArray;

/* 13292 */
typedef tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;

/* 13293 */
typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

/* 13294 */
typedef _OFNOTIFYA *LPOFNOTIFY;

/* 13295 */
typedef const _GUID *__rcGUID_t;

/* 13296 */
typedef HRSRC__ *HRSRC;

/* 13297 */
typedef tagCANDIDATEFORM *PCANDIDATEFORM;

/* 13298 */
typedef void (__stdcall *Agent_OnUnload_t)(JavaVM_ *);

/* 13299 */
typedef _devicemodeW *LPDEVMODEW;

/* 13300 */
typedef _devicemodeW *NPDEVMODEW;

/* 13301 */
typedef _DEVICE_DATA_SET_RANGE *PDEVICE_DATA_SET_RANGE;

/* 13302 */
typedef unsigned __int8 *PSECURITY_CONTEXT_TRACKING_MODE;

/* 13303 */
typedef _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 13304 */
typedef RegisterImpl *Register;

/* 13305 */
typedef const _CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

/* 13306 */
typedef void *HOLEMENU;

/* 13307 */
typedef int (__stdcall *ENUMRESLANGPROCA)(HINSTANCE__ *, const char *, const char *, unsigned __int16, int);

/* 13308 */
typedef tagMENUBARINFO *PMENUBARINFO;

/* 13309 */
typedef _DOC_INFO_1A *LPDOC_INFO_1;

/* 13310 */
typedef _ABC *PABC;

/* 13311 */
typedef void (__stdcall *jvmtiEventFramePop)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *, unsigned __int8);

/* 13312 */
typedef _WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

/* 13313 */
typedef tagMONHSZSTRUCTA *PMONHSZSTRUCT;

/* 13314 */
typedef tagCOPYDATASTRUCT *PCOPYDATASTRUCT;

/* 13315 */
typedef tagMONERRSTRUCT *PMONERRSTRUCT;

/* 13316 */
typedef _OFNOTIFYW *LPOFNOTIFYW;

/* 13317 */
typedef _IDEREGS *PIDEREGS;

/* 13318 */
typedef tagEMRALPHABLEND *PEMRALPHABLEND;

/* 13319 */
typedef _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;

/* 13320 */
typedef _TRANSMIT_FILE_BUFFERS *LPTRANSMIT_FILE_BUFFERS;

/* 13321 */
typedef _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;

/* 13322 */
typedef _ABC *LPABC;

/* 13323 */
typedef _DRIVER_INFO_6W *LPDRIVER_INFO_6W;

/* 13324 */
typedef _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;

/* 13325 */
typedef unsigned __int8 *PUINT8;

/* 13326 */
typedef unsigned __int16 wctype_t;

/* 13327 */
typedef _ABC *NPABC;

/* 13328 */
typedef _KCRM_PROTOCOL_BLOB *PRKCRM_PROTOCOL_BLOB;

/* 13329 */
typedef int (__stdcall *jvmtiStringPrimitiveValueCallback)(__int64, __int64, __int64 *, const unsigned __int16 *, int, void *);

/* 13330 */
typedef _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;

/* 13331 */
typedef _ITEMIDLIST *LPITEMIDLIST;

/* 13332 */
typedef void *HCERTSTORE;

/* 13333 */
typedef _OFNOTIFYA *LPOFNOTIFYA;

/* 13334 */
typedef tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;

/* 13335 */
typedef OPENCARD_SEARCH_CRITERIAW *POPENCARD_SEARCH_CRITERIAW;

/* 13336 */
typedef tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMS;

/* 13337 */
typedef _DWORD_BLOB *UP_DWORD_BLOB;

/* 13338 */
typedef int *PSSIZE_T;

/* 13339 */
typedef const _MMIOINFO *LPCMMIOINFO;

/* 13340 */
typedef _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;

/* 13341 */
typedef UpdateQueryS *UpdateQueryP;

/* 13342 */
typedef _DRIVER_INFO_1W *LPDRIVER_INFO_1W;

/* 13343 */
typedef void (__stdcall *jvmtiEventGarbageCollectionFinish)(_jvmtiEnv *);

/* 13344 */
typedef tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;

/* 13345 */
typedef _OFNOTIFYEXW *LPOFNOTIFYEXW;

/* 13346 */
typedef IInternetBindInfo *LPIINTERNETBINDINFO;

/* 13347 */
typedef unsigned int (__stdcall *APPLICATION_RECOVERY_CALLBACK)(void *);

/* 13348 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMS;

/* 13349 */
typedef _DRIVER_INFO_4A *PDRIVER_INFO_4;

/* 13350 */
typedef tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;

/* 13351 */
typedef _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;

/* 13352 */
typedef _OFNOTIFYEXA *LPOFNOTIFYEXA;

/* 13353 */
typedef const _PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

/* 13354 */
typedef _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;

/* 13355 */
typedef unsigned int POINTER_64_INT;

/* 13356 */
typedef tagREGISTERWORDW *PREGISTERWORDW;

/* 13357 */
typedef _CRYPT_PROPERTY_REF *PCRYPT_PROPERTY_REF;

/* 13358 */
typedef tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;

/* 13359 */
typedef const wchar_t *PCUZZWSTR;

/* 13360 */
typedef _TAPE_ERASE *PTAPE_ERASE;

/* 13361 */
typedef _RESOURCEMANAGER_BASIC_INFORMATION *PRESOURCEMANAGER_BASIC_INFORMATION;

/* 13362 */
typedef _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;

/* 13363 */
typedef _CONTEXT_CHUNK *PCONTEXT_CHUNK;

/* 13364 */
typedef tagWNDCLASSW *PWNDCLASSW;

/* 13365 */
typedef IDropTarget *LPDROPTARGET;

/* 13366 */
typedef tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;

/* 13367 */
typedef unsigned int HREFTYPE;

/* 13368 */
typedef _FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

/* 13369 */
typedef tagMOUSEINPUT *LPMOUSEINPUT;

/* 13370 */
typedef void *PSECURITY_DESCRIPTOR;

/* 13371 */
typedef const void *(__stdcall *PFNDPAMERGECONST)(unsigned int, const void *, const void *, int);

/* 13372 */
typedef const wchar_t *PCUWSTR;

/* 13373 */
typedef tagAUXCAPS2A *PAUXCAPS2A;

/* 13374 */
typedef void *HLOCAL;

/* 13375 */
typedef void (__cdecl *FuncDict)(const void *, const void *, Dict *);

/* 13376 */
typedef HKEY__ *HKEY;

/* 13377 */
typedef const wchar_t *PCWCH;

/* 13378 */
typedef tagMCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;

/* 13379 */
typedef tagMCI_SET_PARMS *PMCI_SET_PARMS;

/* 13380 */
typedef _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO;

/* 13381 */
typedef char *LPUTSTR;

/* 13382 */
typedef int (__stdcall *PROPENUMPROC)(HWND__ *, const char *, void *);

/* 13383 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICE;

/* 13384 */
typedef tagENUMTEXTMETRICW *PENUMTEXTMETRICW;

/* 13385 */
typedef tagGLYPHSET *LPGLYPHSET;

/* 13386 */
typedef _PEB *PPEB;

/* 13387 */
typedef _EXCEPTION_DISPOSITION (__stdcall *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 13388 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRY;

/* 13389 */
typedef unsigned __int64 DWORD64;

/* 13390 */
typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;

/* 13391 */
typedef const tagACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

/* 13392 */
typedef _NOTIFYICONIDENTIFIER *PNOTIFYICONIDENTIFIER;

/* 13393 */
typedef const tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 13394 */
typedef int *PLONG_PTR;

/* 13395 */
typedef const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 13396 */
typedef _PSINJECTDATA *PPSINJECTDATA;

/* 13397 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;

/* 13398 */
typedef int (__cdecl *C_sort_func_t)(const void *, const void *);

/* 13399 */
typedef unsigned int ULONG_PTR;

/* 13400 */
typedef tagALTTABINFO *PALTTABINFO;

/* 13401 */
typedef tagWINDOWINFO *PWINDOWINFO;

/* 13402 */
typedef unsigned int MMRESULT;

/* 13403 */
typedef tagEVENTMSG *NPEVENTMSGMSG;

/* 13404 */
typedef _DRIVER_INFO_4W *PDRIVER_INFO_4W;

/* 13405 */
typedef tagEVENTMSG *LPEVENTMSGMSG;

/* 13406 */
typedef HWND__ *HWND;

/* 13407 */
typedef _SHNAMEMAPPINGA *LPSHNAMEMAPPING;

/* 13408 */
typedef _DRIVER_INFO_3W *LPDRIVER_INFO_3W;

/* 13409 */
typedef _DISK_GEOMETRY_EX *PDISK_GEOMETRY_EX;

/* 13410 */
typedef const char *PCTCH;

/* 13411 */
typedef tagINTERFACEINFO *LPINTERFACEINFO;

/* 13412 */
typedef tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMS;

/* 13413 */
typedef _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;

/* 13414 */
typedef int (__stdcall *OnAttachEntry_t)(JavaVM_ *, char *, void *);

/* 13415 */
typedef void *I_RPC_HANDLE;

/* 13416 */
typedef _SE_ACCESS_REQUEST *PSE_ACCESS_REQUEST;

/* 13417 */
typedef tagSTGMEDIUM *LPSTGMEDIUM;

/* 13418 */
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 13419 */
typedef _DISK_HISTOGRAM *PDISK_HISTOGRAM;

/* 13420 */
typedef IOleWindow *LPOLEWINDOW;

/* 13421 */
typedef _SCHANNEL_ALG *PSCHANNEL_ALG;

/* 13422 */
typedef unsigned __int8 AllocationContext_t;

/* 13423 */
typedef _DRIVER_INFO_4A *PDRIVER_INFO_4A;

/* 13424 */
typedef _OFNOTIFYEXA *LPOFNOTIFYEX;

/* 13425 */
typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)(const wchar_t *);

/* 13426 */
typedef USN_RECORD *PUSN_RECORD;

/* 13427 */
typedef _TOKEN_CONTROL *PTOKEN_CONTROL;

/* 13428 */
typedef _SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

/* 13429 */
typedef int (__cdecl *check_format_fn_t)(char *, unsigned __int8 *, unsigned int, class_size_info *, char *, int, unsigned __int8, unsigned __int8);

/* 13430 */
typedef __int16 int16_t;

/* 13431 */
typedef _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;

/* 13432 */
typedef tagWAVEINCAPSA *PWAVEINCAPS;

/* 13433 */
typedef tagMSG *NPMSG;

/* 13434 */
typedef Node **DUIterator_Fast;

/* 13435 */
typedef _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;

/* 13436 */
typedef int (__stdcall *PROPENUMPROCW)(HWND__ *, const wchar_t *, void *);

/* 13437 */
typedef _CERT_QC_STATEMENT *PCERT_QC_STATEMENT;

/* 13438 */
typedef tagMSG *LPMSG;

/* 13439 */
typedef void (__cdecl *jmpFct_t)(GenerateOopMap *, int, int *);

/* 13440 */
typedef _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;

/* 13441 */
typedef _DRIVER_INFO_2W *LPDRIVER_INFO_2W;

/* 13442 */
typedef void (__stdcall *jvmtiEventMethodEntry)(_jvmtiEnv *, JNIEnv_ *, _jobject *, struct _jmethodID *);

/* 13443 */
typedef tagFINDREPLACEW *LPFINDREPLACEW;

/* 13444 */
typedef tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;

/* 13445 */
typedef int BOOL;

/* 13446 */
typedef in_addr *LPIN_ADDR;

/* 13447 */
typedef tagTLIBATTR *LPTLIBATTR;

/* 13448 */
typedef int (__stdcall *PROPENUMPROCA)(HWND__ *, const char *, void *);

/* 13449 */
typedef tagMODULEENTRY32 *LPMODULEENTRY32;

/* 13450 */
typedef _MAT2 *LPMAT2;

/* 13451 */
typedef tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;

/* 13452 */
typedef void (__stdcall *RPC_HTTP_PROXY_FREE_STRING)(unsigned __int16 *);

/* 13453 */
typedef _BCRYPT_DH_KEY_BLOB *PBCRYPT_DH_KEY_BLOB;

/* 13454 */
typedef tagOLEUPDATE *LPOLEUPDATE;

/* 13455 */
typedef _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;

/* 13456 */
typedef long double (__stdcall *GetDoubleField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 13457 */
typedef tagAXISINFOA *LPAXISINFOA;

/* 13458 */
typedef unsigned int MCIDEVICEID;

/* 13459 */
typedef _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;

/* 13460 */
typedef tagBINDPTR *LPBINDPTR;

/* 13461 */
typedef int (__stdcall *ENUMRESNAMEPROCA)(HINSTANCE__ *, const char *, char *, int);

/* 13462 */
typedef _STORAGE_MEDIA_SERIAL_NUMBER_DATA *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;

/* 13463 */
typedef tagPOINT *NPPOINT;

/* 13464 */
typedef tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;

/* 13465 */
typedef _jcharArray *jcharArray;

/* 13466 */
typedef int *LPBOOL;

/* 13467 */
typedef tagPOINT *LPPOINT;

/* 13468 */
typedef _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;

/* 13469 */
typedef HKL__ *HKL;

/* 13470 */
typedef _SC_ACTION *LPSC_ACTION;

/* 13471 */
typedef void (__thiscall *method_action)(Method *this, int);

/* 13472 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW_V3;

/* 13473 */
typedef const _TEB_ACTIVE_FRAME_CONTEXT *PCTEB_ACTIVE_FRAME_CONTEXT;

/* 13474 */
typedef _PROPSHEETPAGEW_V2 *LPPROPSHEETPAGEW_V2;

/* 13475 */
typedef _PROPSHEETPAGEW_V1 *LPPROPSHEETPAGEW_V1;

/* 13476 */
typedef tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;

/* 13477 */
typedef _CRYPT_PSOURCE_ALGORITHM *PCRYPT_PSOURCE_ALGORITHM;

/* 13478 */
typedef _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;

/* 13479 */
typedef tagRECT *LPRECT;

/* 13480 */
typedef tagRECT *NPRECT;

/* 13481 */
typedef tagAXISINFOW *LPAXISINFOW;

/* 13482 */
typedef _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;

/* 13483 */
typedef _MODEMDEVCAPS *PMODEMDEVCAPS;

/* 13484 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFY_2W;

/* 13485 */
typedef const _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

/* 13486 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACE;

/* 13487 */
typedef in6_addr *PIN6_ADDR;

/* 13488 */
typedef unsigned int SCARDHANDLE;

/* 13489 */
typedef const char *ccstrlist;

/* 13490 */
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;

/* 13491 */
typedef const char *LPCCH;

/* 13492 */
typedef tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2A;

/* 13493 */
typedef PPM_THERMALCHANGE_EVENT *PPPM_THERMALCHANGE_EVENT;

/* 13494 */
typedef tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2A;

/* 13495 */
typedef tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;

/* 13496 */
typedef tagBITMAPINFO *PBITMAPINFO;

/* 13497 */
typedef tagABORTPATH *PEMRABORTPATH;

/* 13498 */
typedef _JOB_INFO_2A *PJOB_INFO_2A;

/* 13499 */
typedef tagWAVEOUTCAPS2W *NPWAVEOUTCAPS2W;

/* 13500 */
typedef _MMIOINFO *PMMIOINFO;

/* 13501 */
typedef tagWAVEOUTCAPS2W *LPWAVEOUTCAPS2W;

/* 13502 */
typedef void *BCRYPT_HASH_HANDLE;

/* 13503 */
typedef const _CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

/* 13504 */
typedef ICreateTypeInfo *LPCREATETYPEINFO;

/* 13505 */
typedef tagEMRRESTOREDC *PEMRRESTOREDC;

/* 13506 */
typedef unsigned int NCRYPT_HASH_HANDLE;

/* 13507 */
typedef unsigned int (__stdcall *pfn_UndecorateSymbolName)(const char *, char *, unsigned int, unsigned int);

/* 13508 */
typedef tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;

/* 13509 */
typedef tagAXISINFOA *LPAXISINFO;

/* 13510 */
typedef AbstractRegisterImpl *AbstractRegister;

/* 13511 */
typedef char *PCHAR;

/* 13512 */
typedef SC_HANDLE__ **LPSC_HANDLE;

/* 13513 */
typedef IBindCtx *LPBC;

/* 13514 */
typedef __int64 __time64_t;

/* 13515 */
typedef char TCHAR;

/* 13516 */
typedef unsigned __int8 UCHAR;

/* 13517 */
typedef timecaps_tag *PTIMECAPS;

/* 13518 */
typedef const _PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;

/* 13519 */
typedef unsigned __int16 jchar;

/* 13520 */
typedef _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA;

/* 13521 */
typedef unsigned int (__stdcall *PFE_EXPORT_FUNC)(unsigned __int8 *, void *, unsigned int);

/* 13522 */
typedef tagMONHSZSTRUCTA *PMONHSZSTRUCTA;

/* 13523 */
typedef const type_info *__RTtypeidReturnType;

/* 13524 */
typedef _JOB_INFO_1A *PJOB_INFO_1A;

/* 13525 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA;

/* 13526 */
typedef unsigned __int8 BCHAR;

/* 13527 */
typedef char CCHAR;

/* 13528 */
typedef char *CardPtr;

/* 13529 */
typedef _RECTL *LPRECTL;

/* 13530 */
typedef _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;

/* 13531 */
typedef _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;

/* 13532 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

/* 13533 */
typedef unsigned __int8 FCHAR;

/* 13534 */
typedef _GUID *PCRM_PROTOCOL_ID;

/* 13535 */
typedef _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;

/* 13536 */
typedef _IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

/* 13537 */
typedef int (__stdcall *JNI_OnLoad_t)(JavaVM_ *, void *);

/* 13538 */
typedef ICatalogFileInfo *LPCATALOGFILEINFO;

/* 13539 */
typedef tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;

/* 13540 */
typedef const _PROPSHEETPAGEW *LPCPROPSHEETPAGEW;

/* 13541 */
typedef tagPANOSE *LPPANOSE;

/* 13542 */
typedef void *GLOBALHANDLE;

/* 13543 */
typedef const wchar_t *LPCWSTR;

/* 13544 */
typedef tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2;

/* 13545 */
typedef tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;

/* 13546 */
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 13547 */
typedef tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2;

/* 13548 */
typedef _wireSAFEARRAY **wirePSAFEARRAY;

/* 13549 */
typedef tagCOLORADJUSTMENT *PCOLORADJUSTMENT;

/* 13550 */
typedef _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;

/* 13551 */
typedef const tagMENUITEMINFOA *LPCMENUITEMINFO;

/* 13552 */
typedef tagEMRBITBLT *PEMRBITBLT;

/* 13553 */
typedef unsigned int *PSAVEPOINT_ID;

/* 13554 */
typedef tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;

/* 13555 */
typedef unsigned int (__stdcall *LPCFHOOKPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 13556 */
typedef const _PROPSHEETPAGEA *LPCPROPSHEETPAGEA;

/* 13557 */
typedef int (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *, _CMSG_MAIL_LIST_ENCRYPT_INFO *, unsigned int, void *);

/* 13558 */
typedef _GENERIC_MAPPING *PGENERIC_MAPPING;

/* 13559 */
typedef _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALS;

/* 13560 */
typedef tagLOGPALETTE *PLOGPALETTE;

/* 13561 */
typedef _CTL_CONTEXT *PCTL_CONTEXT;

/* 13562 */
typedef _FPO_DATA *PFPO_DATA;

/* 13563 */
typedef joyinfoex_tag *PJOYINFOEX;

/* 13564 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;

/* 13565 */
typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;

/* 13566 */
typedef tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMS;

/* 13567 */
typedef _BCryptBuffer *PBCryptBuffer;

/* 13568 */
typedef tagREGISTERWORDA *LPREGISTERWORD;

/* 13569 */
typedef tagHARDWAREINPUT *PHARDWAREINPUT;

/* 13570 */
typedef tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;

/* 13571 */
typedef tagREGISTERWORDA *NPREGISTERWORD;

/* 13572 */
typedef _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY;

/* 13573 */
typedef unsigned __int16 LANGID;

/* 13574 */
typedef _CERT_QC_STATEMENTS_EXT_INFO *PCERT_QC_STATEMENTS_EXT_INFO;

/* 13575 */
typedef char *PSTR;

/* 13576 */
typedef unsigned __int16 _ino_t;

/* 13577 */
typedef tagMIDIINCAPS2A *PMIDIINCAPS2;

/* 13578 */
typedef tagENUMLOGFONTW *LPENUMLOGFONTW;

/* 13579 */
typedef unsigned __int16 char16_t;

/* 13580 */
typedef _COMPATIBILITY_CONTEXT_ELEMENT *PCOMPATIBILITY_CONTEXT_ELEMENT;

/* 13581 */
typedef tagCHARSETINFO *LPCHARSETINFO;

/* 13582 */
typedef _CERT_ID *PCERT_ID;

/* 13583 */
typedef tagCHARSETINFO *NPCHARSETINFO;

/* 13584 */
typedef _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST;

/* 13585 */
typedef _PROPSHEETHEADERW_V2 *LPPROPSHEETHEADERW_V2;

/* 13586 */
typedef _PROPSHEETHEADERW_V1 *LPPROPSHEETHEADERW_V1;

/* 13587 */
typedef _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;

/* 13588 */
typedef _MEMORYSTATUS *LPMEMORYSTATUS;

/* 13589 */
typedef _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

/* 13590 */
typedef wchar_t *BSTR;

/* 13591 */
typedef _DRIVER_INFO_5A *PDRIVER_INFO_5;

/* 13592 */
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;

/* 13593 */
typedef _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;

/* 13594 */
typedef _RPC_ASYNC_NOTIFICATION_INFO *PRPC_ASYNC_NOTIFICATION_INFO;

/* 13595 */
typedef unsigned int *PKSPIN_LOCK;

/* 13596 */
typedef _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;

/* 13597 */
typedef tagLASTINPUTINFO *PLASTINPUTINFO;

/* 13598 */
typedef HSTR__ *HSTR;

/* 13599 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;

/* 13600 */
typedef _KDHELP64 *PKDHELP64;

/* 13601 */
typedef _JOB_INFO_1A *LPJOB_INFO_1;

/* 13602 */
typedef void __stdcall RTL_UMS_SCHEDULER_ENTRY_POINT(_RTL_UMS_SCHEDULER_REASON, unsigned int, void *);

/* 13603 */
typedef unsigned __int8 uint8_t;

/* 13604 */
typedef IInternet *LPIINTERNET;

/* 13605 */
typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

/* 13606 */
typedef tagMIXERLINEW *PMIXERLINEW;

/* 13607 */
typedef tagCREATESTRUCTW *LPCREATESTRUCTW;

/* 13608 */
typedef __int64 jlong;

/* 13609 */
typedef _DRIVER_INFO_8W *LPDRIVER_INFO_8W;

/* 13610 */
typedef void MENUTEMPLATEA;

/* 13611 */
typedef _TIME_DYNAMIC_ZONE_INFORMATION *PDYNAMIC_TIME_ZONE_INFORMATION;

/* 13612 */
typedef int fio_fd;

/* 13613 */
typedef wchar_t *LPWSTR;

/* 13614 */
typedef tagAUXCAPS2A *PAUXCAPS2;

/* 13615 */
typedef void *LPMENUTEMPLATEA;

/* 13616 */
typedef _ADAPTER_STATUS *PADAPTER_STATUS;

/* 13617 */
typedef _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA;

/* 13618 */
typedef _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;

/* 13619 */
typedef unsigned int FLONG;

/* 13620 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;

/* 13621 */
typedef _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;

/* 13622 */
typedef wavehdr_tag *PWAVEHDR;

/* 13623 */
typedef void *LPMENUTEMPLATEW;

/* 13624 */
typedef _PEB_FREE_BLOCK *PPEB_FREE_BLOCK;

/* 13625 */
typedef _SLIST_HEADER *PSLIST_HEADER32;

/* 13626 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONS;

/* 13627 */
typedef void MENUTEMPLATEW;

/* 13628 */
typedef tagMIXERLINEA *PMIXERLINEA;

/* 13629 */
typedef _TP_POOL_STACK_INFORMATION *PTP_POOL_STACK_INFORMATION;

/* 13630 */
typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

/* 13631 */
typedef tagAUXCAPSA *PAUXCAPS;

/* 13632 */
typedef tagCREATESTRUCTA *LPCREATESTRUCTA;

/* 13633 */
typedef void __stdcall RPC_CLIENT_FREE(void *);

/* 13634 */
typedef int *PLONG;

/* 13635 */
typedef _PROCESS_INFORMATION *PPROCESS_INFORMATION;

/* 13636 */
typedef tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

/* 13637 */
typedef _RTL_CONDITION_VARIABLE *PCONDITION_VARIABLE;

/* 13638 */
typedef const _CRYPT_OID_INFO *PCCRYPT_OID_INFO;

/* 13639 */
typedef _CRL_CONTEXT *PCRL_CONTEXT;

/* 13640 */
typedef unsigned int ULONG;

/* 13641 */
typedef IOleObject *LPOLEOBJECT;

/* 13642 */
typedef tagEMRPOLYLINE *PEMRPOLYLINETO;

/* 13643 */
typedef unsigned __int8 (__cdecl *verify_byte_codes_fn_new_t)(JNIEnv_ *, _jclass *, char *, int, int);

/* 13644 */
typedef void *HCRYPTOIDFUNCADDR;

/* 13645 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST;

/* 13646 */
typedef tagREGISTERWORDA *LPREGISTERWORDA;

/* 13647 */
typedef _DRIVER_INFO_5W *PDRIVER_INFO_5W;

/* 13648 */
typedef tagREGISTERWORDA *NPREGISTERWORDA;

/* 13649 */
typedef tagMIDIINCAPS2A *PMIDIINCAPS2A;

/* 13650 */
typedef char *LPTSTR;

/* 13651 */
typedef void (__stdcall *jvmtiEventMonitorContendedEntered)(_jvmtiEnv *, JNIEnv_ *, _jobject *, _jobject *);

/* 13652 */
typedef _DCB *LPDCB;

/* 13653 */
typedef _JOB_INFO_1W *LPJOB_INFO_1W;

/* 13654 */
typedef _MONITOR_DISPLAY_STATE *PMONITOR_DISPLAY_STATE;

/* 13655 */
typedef void (__stdcall *jvmtiEventVMDeath)(_jvmtiEnv *, JNIEnv_ *);

/* 13656 */
typedef tagRAWMOUSE *PRAWMOUSE;

/* 13657 */
typedef int (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(const wchar_t *, unsigned int, void *, void *);

/* 13658 */
typedef tagMIDIINCAPS2W *PMIDIINCAPS2W;

/* 13659 */
typedef _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;

/* 13660 */
typedef tagREGISTERWORDW *NPREGISTERWORDW;

/* 13661 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRIC;

/* 13662 */
typedef void (__cdecl *PMFN)();

/* 13663 */
typedef tagREGISTERWORDW *LPREGISTERWORDW;

/* 13664 */
typedef _DRIVER_INFO_5A *PDRIVER_INFO_5A;

/* 13665 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRIC;

/* 13666 */
typedef int ptrdiff_t;

/* 13667 */
typedef tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;

/* 13668 */
typedef _JOB_INFO_1A *LPJOB_INFO_1A;

/* 13669 */
typedef tagAUXCAPSW *PAUXCAPSW;

/* 13670 */
typedef void MENUTEMPLATE;

/* 13671 */
typedef _PSAPI_WORKING_SET_EX_INFORMATION *PPSAPI_WORKING_SET_EX_INFORMATION;

/* 13672 */
typedef void *LPMENUTEMPLATE;

/* 13673 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;

/* 13674 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO32;

/* 13675 */
typedef _IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

/* 13676 */
typedef unsigned __int8 BOOLEAN;

/* 13677 */
typedef unsigned __int8 boolean;

/* 13678 */
typedef HMIDISTRM__ *HMIDISTRM;

/* 13679 */
typedef _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;

/* 13680 */
typedef _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;

/* 13681 */
typedef tagAUXCAPSA *PAUXCAPSA;

/* 13682 */
typedef _JOB_INFO_4A *PJOB_INFO_4A;

/* 13683 */
typedef tagCREATESTRUCTA *LPCREATESTRUCT;

/* 13684 */
typedef tagMIXERLINEA *PMIXERLINE;

/* 13685 */
typedef void (__stdcall *SENDASYNCPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 13686 */
typedef _ZONEATTRIBUTES *LPZONEATTRIBUTES;

/* 13687 */
typedef HMENU__ *HMENU;

/* 13688 */
typedef int (__stdcall *DLGPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 13689 */
typedef _jlongArray *jlongArray;

/* 13690 */
typedef _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;

/* 13691 */
typedef _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;

/* 13692 */
typedef HWAVEOUT__ **LPHWAVEOUT;

/* 13693 */
typedef char (__stdcall *GetByteField_t)(JNIEnv_ *, _jobject *, struct _jfieldID *);

/* 13694 */
typedef _TP_POOL *PTP_POOL;

/* 13695 */
typedef ICreateTypeLib *LPCREATETYPELIB;

/* 13696 */
typedef _GUID *PUOW;

/* 13697 */
typedef _CONTEXT_EX *PCONTEXT_EX;

/* 13698 */
struct /*VFT*/ ASParNewGeneration_vtbl
{
  _BYTE gap0[356];
  void (__thiscall *adjust_desired_tenuring_threshold)(ASParNewGeneration *this);
};

/* 13699 */
struct /*VFT*/ CallDynamicJavaDirectNode_vtbl
{
  _BYTE gap0[192];
  int (__thiscall *ins_alignment)(CallDynamicJavaDirectNode *this);
};

/* 13700 */
struct /*VFT*/ CallNode_vtbl
{
  _BYTE gap0[108];
  void (__thiscall *calling_convention)(CallNode *this, BasicType *, VMRegPair *, unsigned int);
  bool (__thiscall *guaranteed_safepoint)(CallNode *this);
  void (__thiscall *clone_jvms)(CallNode *this, Compile *);
  bool (__thiscall *may_modify)(CallNode *this, const TypeOopPtr *, PhaseTransform *);
};

/* 13701 */
struct /*VFT*/ CallStaticJavaDirectNode_vtbl
{
  _BYTE gap0[192];
  int (__thiscall *ins_alignment)(CallStaticJavaDirectNode *this);
};

/* 13702 */
struct /*VFT*/ ClassConstant_vtbl
{
  _BYTE gap0[120];
  ciType *(__thiscall *exact_type)(ClassConstant *this);
};

/* 13703 */
struct /*VFT*/ Constant_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  Constant::CompareResult (__thiscall *compare)(Constant *this, Instruction::Condition, Instruction *);
};

/* 13704 */
struct /*VFT*/ ConstraintCastNode_vtbl
{
  _BYTE gap0[104];
  Node *(__thiscall *Ideal_DU_postCCP)(ConstraintCastNode *this, PhaseCCP *);
};

/* 13705 */
struct /*VFT*/ ContiguousSpace_vtbl
{
  void (__thiscall *set_bottom)(Space *this, HeapWord *);
  void (__thiscall *set_end)(Space *this, HeapWord *);
  HeapWord *(__thiscall *saved_mark_word)(Space *this);
  bool (__thiscall *obj_allocated_since_save_marks)(Space *this, oopDesc *const);
  MemRegion *(__thiscall *used_region)(Space *this, MemRegion *result);
  void (__thiscall *initialize)(Space *this, MemRegion, bool, bool);
  void (__thiscall *clear)(Space *this, bool);
  void (__thiscall *mangle_unused_area)(Space *this);
  void (__thiscall *mangle_unused_area_complete)(Space *this);
  void (__thiscall *mangle_region)(Space *this, MemRegion);
  bool (__thiscall *is_free_block)(Space *this, const HeapWord *);
  unsigned int (__thiscall *used)(Space *this);
  unsigned int (__thiscall *free)(Space *this);
  void (__thiscall *oop_iterate)(Space *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(Space *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(Space *this, ObjectClosure *);
  DirtyCardToOopClosure *(__thiscall *new_dcto_cl)(Space *this, ExtendedOopClosure *, CardTableModRefBS::PrecisionStyle, HeapWord *);
  HeapWord *(__thiscall *block_start_const)(Space *this, const void *);
  HeapWord *(__thiscall *block_start)(Space *this, const void *);
  unsigned int (__thiscall *block_size)(Space *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(Space *this, const HeapWord *);
  bool (__thiscall *obj_is_alive)(Space *this, const HeapWord *);
  HeapWord *(__thiscall *allocate)(Space *this, unsigned int);
  HeapWord *(__thiscall *par_allocate)(Space *this, unsigned int);
  void (__thiscall *adjust_pointers)(Space *this);
  void (__thiscall *print)(Space *this);
  void (__thiscall *print_on)(Space *this, outputStream *);
  void (__thiscall *print_short)(Space *this);
  void (__thiscall *print_short_on)(Space *this, outputStream *);
  ContiguousSpace *(__thiscall *toContiguousSpace)(Space *this);
  void (__thiscall *verify)(Space *this);
  void (__thiscall *reset_after_compaction)(CompactibleSpace *this);
  CompactibleSpace *(__thiscall *next_compaction_space)(CompactibleSpace *this);
  void (__thiscall *prepare_for_compaction)(CompactibleSpace *this, CompactPoint *);
  void (__thiscall *compact)(CompactibleSpace *this);
  unsigned int (__thiscall *allowed_dead_ratio)(CompactibleSpace *this);
  HeapWord *(__thiscall *initialize_threshold)(CompactibleSpace *this);
  HeapWord *(__thiscall *forward)(CompactibleSpace *this, oopDesc *, unsigned int, CompactPoint *, HeapWord *);
  unsigned int (__thiscall *adjust_object_size_v)(CompactibleSpace *this, unsigned int);
  unsigned int (__thiscall *minimum_free_block_size)(CompactibleSpace *this);
  HeapWord *(__thiscall *cross_threshold)(CompactibleSpace *this, HeapWord *, HeapWord *);
  void (__thiscall *object_iterate_from)(ContiguousSpace *this, WaterMark, ObjectClosure *);
};

/* 13706 */
struct /*VFT*/ G1CollectedHeap_vtbl
{
  HeapWord *(__thiscall *allocate_new_tlab)(CollectedHeap *this, unsigned int);
  void (__thiscall *accumulate_statistics_all_tlabs)(CollectedHeap *this);
  void (__thiscall *resize_all_tlabs)(CollectedHeap *this);
  void (__thiscall *trace_heap)(CollectedHeap *this, GCWhen::Type, GCTracer *);
  void (__thiscall *check_for_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  void (__thiscall *check_for_non_bad_heap_word_value)(CollectedHeap *this, HeapWord *, unsigned int);
  CollectedHeap::Name (__thiscall *kind)(CollectedHeap *this);
  int (__thiscall *initialize)(CollectedHeap *this);
  void (__thiscall *post_initialize)(CollectedHeap *this);
  void (__thiscall *stop)(CollectedHeap *this);
  unsigned int (__thiscall *capacity)(CollectedHeap *this);
  unsigned int (__thiscall *used)(CollectedHeap *this);
  bool (__thiscall *is_maximal_no_gc)(CollectedHeap *this);
  unsigned int (__thiscall *max_capacity)(CollectedHeap *this);
  bool (__thiscall *is_in)(CollectedHeap *this, const void *);
  bool (__thiscall *is_in_closed_subset)(CollectedHeap *this, const void *);
  bool (__thiscall *is_scavengable)(CollectedHeap *this, const void *);
  void (__thiscall *set_par_threads)(CollectedHeap *this, unsigned int);
  HeapWord *(__thiscall *mem_allocate)(CollectedHeap *this, unsigned int, bool *);
  bool (__thiscall *supports_inline_contig_alloc)(CollectedHeap *this);
  HeapWord **(__thiscall *top_addr)(CollectedHeap *this);
  HeapWord **(__thiscall *end_addr)(CollectedHeap *this);
  void (__thiscall *ensure_parsability)(CollectedHeap *this, bool);
  bool (__thiscall *supports_tlab_allocation)(CollectedHeap *this);
  unsigned int (__thiscall *tlab_capacity)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *tlab_used)(CollectedHeap *this, Thread *);
  unsigned int (__thiscall *max_tlab_size)(CollectedHeap *this);
  unsigned int (__thiscall *unsafe_max_tlab_alloc)(CollectedHeap *this, Thread *);
  bool (__thiscall *can_elide_tlab_store_barriers)(CollectedHeap *this);
  oopDesc *(__thiscall *new_store_pre_barrier)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *can_elide_initializing_store_barrier)(CollectedHeap *this, oopDesc *);
  bool (__thiscall *card_mark_must_follow_store)(CollectedHeap *this);
  void (__thiscall *flush_deferred_store_barrier)(CollectedHeap *this, JavaThread *);
  bool (__thiscall *supports_heap_inspection)(CollectedHeap *this);
  void (__thiscall *collect)(CollectedHeap *this, GCCause::Cause);
  void (__thiscall *do_full_collection)(CollectedHeap *this, bool);
  void (__thiscall *collect_as_vm_thread)(CollectedHeap *this, GCCause::Cause);
  AdaptiveSizePolicy *(__thiscall *size_policy)(CollectedHeap *this);
  CollectorPolicy *(__thiscall *collector_policy)(CollectedHeap *this);
  void (__thiscall *oop_iterate)(CollectedHeap *this, ExtendedOopClosure *);
  void (__thiscall *object_iterate)(CollectedHeap *this, ObjectClosure *);
  void (__thiscall *safe_object_iterate)(CollectedHeap *this, ObjectClosure *);
  HeapWord *(__thiscall *block_start)(CollectedHeap *this, const void *);
  unsigned int (__thiscall *block_size)(CollectedHeap *this, const HeapWord *);
  bool (__thiscall *block_is_obj)(CollectedHeap *this, const HeapWord *);
  __int64 (__thiscall *millis_since_last_gc)(CollectedHeap *this);
  void (__thiscall *prepare_for_verify)(CollectedHeap *this);
  void (__thiscall *print_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print)(CollectedHeap *this);
  void (__thiscall *print_extended_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_on_error)(CollectedHeap *this, outputStream *);
  void (__thiscall *print_gc_threads_on)(CollectedHeap *this, outputStream *);
  void (__thiscall *gc_threads_do)(CollectedHeap *this, ThreadClosure *);
  void (__thiscall *print_tracing_info)(CollectedHeap *this);
  void (__thiscall *register_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *unregister_nmethod)(CollectedHeap *this, nmethod *);
  void (__thiscall *verify)(CollectedHeap *this, bool, VerifyOption);
  void (__thiscall *shutdown)(CollectedHeap *this);
  void (__thiscall *accumulate_statistics_all_gclabs)(CollectedHeap *this);
  bool (__thiscall *supports_object_pinning)(CollectedHeap *this);
  oopDesc *(__thiscall *pin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  void (__thiscall *unpin_object)(CollectedHeap *this, JavaThread *, oopDesc *);
  bool (__thiscall *copy_allocation_context_stats)(CollectedHeap *this, const int *, __int64 *, char *, int);
  void (__thiscall *ref_processing_init)(SharedHeap *this);
  void (__thiscall *space_iterate)(SharedHeap *this, SpaceClosure *);
  Space *(__thiscall *space_containing)(SharedHeap *this, const void *);
  void (__thiscall *gc_prologue)(SharedHeap *this, bool);
  void (__thiscall *gc_epilogue)(SharedHeap *this, bool);
  void (__thiscall *verify)(G1CollectedHeap *this, bool);
  void (__thiscall *shrink)(G1CollectedHeap *this, unsigned int);
};

/* 13707 */
struct /*VFT*/ G1CollectorPolicy_vtbl
{
  void (__thiscall *initialize_alignments)(CollectorPolicy *this);
  void (__thiscall *initialize_flags)(CollectorPolicy *this);
  void (__thiscall *initialize_size_info)(CollectorPolicy *this);
  void (__thiscall *initialize_all)(CollectorPolicy *this);
  GenCollectorPolicy *(__thiscall *as_generation_policy)(CollectorPolicy *this);
  TwoGenerationCollectorPolicy *(__thiscall *as_two_generation_policy)(CollectorPolicy *this);
  MarkSweepPolicy *(__thiscall *as_mark_sweep_policy)(CollectorPolicy *this);
  ConcurrentMarkSweepPolicy *(__thiscall *as_concurrent_mark_sweep_policy)(CollectorPolicy *this);
  G1CollectorPolicy *(__thiscall *as_g1_policy)(CollectorPolicy *this);
  BarrierSet::Name (__thiscall *barrier_set_name)(CollectorPolicy *this);
  GenRemSet *(__thiscall *create_rem_set)(CollectorPolicy *this, MemRegion, int);
  HeapWord *(__thiscall *mem_allocate_work)(CollectorPolicy *this, unsigned int, bool, bool *);
  HeapWord *(__thiscall *satisfy_failed_allocation)(CollectorPolicy *this, unsigned int, bool);
  MetaWord *(__thiscall *satisfy_failed_metadata_allocation)(CollectorPolicy *this, ClassLoaderData *, unsigned int, Metaspace::MetadataType);
  void (__thiscall *initialize_gc_policy_counters)(CollectorPolicy *this);
  CollectorPolicy::Name (__thiscall *kind)(CollectorPolicy *this);
  bool (__thiscall *has_soft_ended_eden)(CollectorPolicy *this);
  void (__thiscall *post_heap_initialize)(CollectorPolicy *this);
  unsigned int (__thiscall *expansion_amount)(G1CollectorPolicy *this);
};

/* 13708 */
struct /*VFT*/ GenCollectorPolicy_vtbl
{
  void (__thiscall *initialize_alignments)(CollectorPolicy *this);
  void (__thiscall *initialize_flags)(CollectorPolicy *this);
  void (__thiscall *initialize_size_info)(CollectorPolicy *this);
  void (__thiscall *initialize_all)(CollectorPolicy *this);
  GenCollectorPolicy *(__thiscall *as_generation_policy)(CollectorPolicy *this);
  TwoGenerationCollectorPolicy *(__thiscall *as_two_generation_policy)(CollectorPolicy *this);
  MarkSweepPolicy *(__thiscall *as_mark_sweep_policy)(CollectorPolicy *this);
  ConcurrentMarkSweepPolicy *(__thiscall *as_concurrent_mark_sweep_policy)(CollectorPolicy *this);
  G1CollectorPolicy *(__thiscall *as_g1_policy)(CollectorPolicy *this);
  BarrierSet::Name (__thiscall *barrier_set_name)(CollectorPolicy *this);
  GenRemSet *(__thiscall *create_rem_set)(CollectorPolicy *this, MemRegion, int);
  HeapWord *(__thiscall *mem_allocate_work)(CollectorPolicy *this, unsigned int, bool, bool *);
  HeapWord *(__thiscall *satisfy_failed_allocation)(CollectorPolicy *this, unsigned int, bool);
  MetaWord *(__thiscall *satisfy_failed_metadata_allocation)(CollectorPolicy *this, ClassLoaderData *, unsigned int, Metaspace::MetadataType);
  void (__thiscall *initialize_gc_policy_counters)(CollectorPolicy *this);
  CollectorPolicy::Name (__thiscall *kind)(CollectorPolicy *this);
  bool (__thiscall *has_soft_ended_eden)(CollectorPolicy *this);
  void (__thiscall *post_heap_initialize)(CollectorPolicy *this);
  bool (__thiscall *should_try_older_generation_allocation)(GenCollectorPolicy *this, unsigned int);
  HeapWord *(__thiscall *expand_heap_and_allocate)(GenCollectorPolicy *this, unsigned int, bool);
  int (__thiscall *number_of_generations)(GenCollectorPolicy *this);
  GenerationSpec **(__thiscall *generations)(GenCollectorPolicy *this);
  void (__thiscall *initialize_generations)(GenCollectorPolicy *this);
  void (__thiscall *initialize_size_policy)(GenCollectorPolicy *this, unsigned int, unsigned int, unsigned int);
};

/* 13709 */
struct /*VFT*/ IXMLDOMAttribute_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_name)(IXMLDOMAttribute *this, wchar_t **);
  HRESULT (__stdcall *get_value)(IXMLDOMAttribute *this, tagVARIANT *);
  HRESULT (__stdcall *put_value)(IXMLDOMAttribute *this, tagVARIANT);
};

/* 13710 */
struct /*VFT*/ IXMLDOMCharacterData_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_data)(IXMLDOMCharacterData *this, wchar_t **);
  HRESULT (__stdcall *put_data)(IXMLDOMCharacterData *this, wchar_t *);
  HRESULT (__stdcall *get_length)(IXMLDOMCharacterData *this, int *);
  HRESULT (__stdcall *substringData)(IXMLDOMCharacterData *this, int, int, wchar_t **);
  HRESULT (__stdcall *appendData)(IXMLDOMCharacterData *this, wchar_t *);
  HRESULT (__stdcall *insertData)(IXMLDOMCharacterData *this, int, wchar_t *);
  HRESULT (__stdcall *deleteData)(IXMLDOMCharacterData *this, int, int);
  HRESULT (__stdcall *replaceData)(IXMLDOMCharacterData *this, int, int, wchar_t *);
};

/* 13711 */
struct /*VFT*/ IXMLDOMDocumentType_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_name)(IXMLDOMDocumentType *this, wchar_t **);
  HRESULT (__stdcall *get_entities)(IXMLDOMDocumentType *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *get_notations)(IXMLDOMDocumentType *this, IXMLDOMNamedNodeMap **);
};

/* 13712 */
struct /*VFT*/ IXMLDOMDocument_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_doctype)(IXMLDOMDocument *this, IXMLDOMDocumentType **);
  HRESULT (__stdcall *get_implementation)(IXMLDOMDocument *this, IXMLDOMImplementation **);
  HRESULT (__stdcall *get_documentElement)(IXMLDOMDocument *this, IXMLDOMElement **);
  HRESULT (__stdcall *putref_documentElement)(IXMLDOMDocument *this, IXMLDOMElement *);
  HRESULT (__stdcall *createElement)(IXMLDOMDocument *this, wchar_t *, IXMLDOMElement **);
  HRESULT (__stdcall *createDocumentFragment)(IXMLDOMDocument *this, IXMLDOMDocumentFragment **);
  HRESULT (__stdcall *createTextNode)(IXMLDOMDocument *this, wchar_t *, IXMLDOMText **);
  HRESULT (__stdcall *createComment)(IXMLDOMDocument *this, wchar_t *, IXMLDOMComment **);
  HRESULT (__stdcall *createCDATASection)(IXMLDOMDocument *this, wchar_t *, IXMLDOMCDATASection **);
  HRESULT (__stdcall *createProcessingInstruction)(IXMLDOMDocument *this, wchar_t *, wchar_t *, IXMLDOMProcessingInstruction **);
  HRESULT (__stdcall *createAttribute)(IXMLDOMDocument *this, wchar_t *, IXMLDOMAttribute **);
  HRESULT (__stdcall *createEntityReference)(IXMLDOMDocument *this, wchar_t *, IXMLDOMEntityReference **);
  HRESULT (__stdcall *getElementsByTagName)(IXMLDOMDocument *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *createNode)(IXMLDOMDocument *this, tagVARIANT, wchar_t *, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *nodeFromID)(IXMLDOMDocument *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *load)(IXMLDOMDocument *this, tagVARIANT, __int16 *);
  HRESULT (__stdcall *get_readyState)(IXMLDOMDocument *this, int *);
  HRESULT (__stdcall *get_parseError)(IXMLDOMDocument *this, IXMLDOMParseError **);
  HRESULT (__stdcall *get_url)(IXMLDOMDocument *this, wchar_t **);
  HRESULT (__stdcall *get_async)(IXMLDOMDocument *this, __int16 *);
  HRESULT (__stdcall *put_async)(IXMLDOMDocument *this, __int16);
  HRESULT (__stdcall *abort)(IXMLDOMDocument *this);
  HRESULT (__stdcall *loadXML)(IXMLDOMDocument *this, wchar_t *, __int16 *);
  HRESULT (__stdcall *save)(IXMLDOMDocument *this, tagVARIANT);
  HRESULT (__stdcall *get_validateOnParse)(IXMLDOMDocument *this, __int16 *);
  HRESULT (__stdcall *put_validateOnParse)(IXMLDOMDocument *this, __int16);
  HRESULT (__stdcall *get_resolveExternals)(IXMLDOMDocument *this, __int16 *);
  HRESULT (__stdcall *put_resolveExternals)(IXMLDOMDocument *this, __int16);
  HRESULT (__stdcall *get_preserveWhiteSpace)(IXMLDOMDocument *this, __int16 *);
  HRESULT (__stdcall *put_preserveWhiteSpace)(IXMLDOMDocument *this, __int16);
  HRESULT (__stdcall *put_onreadystatechange)(IXMLDOMDocument *this, tagVARIANT);
  HRESULT (__stdcall *put_ondataavailable)(IXMLDOMDocument *this, tagVARIANT);
  HRESULT (__stdcall *put_ontransformnode)(IXMLDOMDocument *this, tagVARIANT);
};

/* 13713 */
struct /*VFT*/ IXMLDOMElement_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_tagName)(IXMLDOMElement *this, wchar_t **);
  HRESULT (__stdcall *getAttribute)(IXMLDOMElement *this, wchar_t *, tagVARIANT *);
  HRESULT (__stdcall *setAttribute)(IXMLDOMElement *this, wchar_t *, tagVARIANT);
  HRESULT (__stdcall *removeAttribute)(IXMLDOMElement *this, wchar_t *);
  HRESULT (__stdcall *getAttributeNode)(IXMLDOMElement *this, wchar_t *, IXMLDOMAttribute **);
  HRESULT (__stdcall *setAttributeNode)(IXMLDOMElement *this, IXMLDOMAttribute *, IXMLDOMAttribute **);
  HRESULT (__stdcall *removeAttributeNode)(IXMLDOMElement *this, IXMLDOMAttribute *, IXMLDOMAttribute **);
  HRESULT (__stdcall *getElementsByTagName)(IXMLDOMElement *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *normalize)(IXMLDOMElement *this);
};

/* 13714 */
struct /*VFT*/ IXMLDOMProcessingInstruction_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_target)(IXMLDOMProcessingInstruction *this, wchar_t **);
  HRESULT (__stdcall *get_data)(IXMLDOMProcessingInstruction *this, wchar_t **);
  HRESULT (__stdcall *put_data)(IXMLDOMProcessingInstruction *this, wchar_t *);
};

/* 13715 */
struct /*VFT*/ IXMLDOMText_vtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
  Invoke *Invoke;
  HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *this, tagDOMNodeType *);
  HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *this, IXMLDOMNodeList **);
  HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_attributes)(IXMLDOMNode *this, IXMLDOMNamedNodeMap **);
  HRESULT (__stdcall *insertBefore)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT, IXMLDOMNode **);
  HRESULT (__stdcall *replaceChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *removeChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *appendChild)(IXMLDOMNode *this, IXMLDOMNode *, IXMLDOMNode **);
  HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *this, IXMLDOMDocument **);
  HRESULT (__stdcall *cloneNode)(IXMLDOMNode *this, __int16, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_text)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *put_text)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_specified)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_definition)(IXMLDOMNode *this, IXMLDOMNode **);
  HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *this, tagVARIANT);
  HRESULT (__stdcall *get_dataType)(IXMLDOMNode *this, tagVARIANT *);
  HRESULT (__stdcall *put_dataType)(IXMLDOMNode *this, wchar_t *);
  HRESULT (__stdcall *get_xml)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNode)(IXMLDOMNode *this, IXMLDOMNode *, wchar_t **);
  HRESULT (__stdcall *selectNodes)(IXMLDOMNode *this, wchar_t *, IXMLDOMNodeList **);
  HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *this, wchar_t *, IXMLDOMNode **);
  HRESULT (__stdcall *get_parsed)(IXMLDOMNode *this, __int16 *);
  HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_prefix)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *get_baseName)(IXMLDOMNode *this, wchar_t **);
  HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *this, IXMLDOMNode *, tagVARIANT);
  HRESULT (__stdcall *get_data)(IXMLDOMCharacterData *this, wchar_t **);
  HRESULT (__stdcall *put_data)(IXMLDOMCharacterData *this, wchar_t *);
  HRESULT (__stdcall *get_length)(IXMLDOMCharacterData *this, int *);
  HRESULT (__stdcall *substringData)(IXMLDOMCharacterData *this, int, int, wchar_t **);
  HRESULT (__stdcall *appendData)(IXMLDOMCharacterData *this, wchar_t *);
  HRESULT (__stdcall *insertData)(IXMLDOMCharacterData *this, int, wchar_t *);
  HRESULT (__stdcall *deleteData)(IXMLDOMCharacterData *this, int, int);
  HRESULT (__stdcall *replaceData)(IXMLDOMCharacterData *this, int, int, wchar_t *);
  HRESULT (__stdcall *splitText)(IXMLDOMText *this, int, IXMLDOMText **);
};

/* 13716 */
struct /*VFT*/ IntInterval_vtbl
{
  _BYTE gap0[116];
  bool (__thiscall *is_interval)(IntInterval *this);
};

/* 13717 */
struct /*VFT*/ JavaThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13718 */
struct /*VFT*/ JvmtiAgentThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13719 */
struct /*VFT*/ MachBranchNode_vtbl
{
  _BYTE gap0[188];
  void (__thiscall *label_set)(MachBranchNode *this, Label *, unsigned int);
  void (__thiscall *save_label)(MachBranchNode *this, Label **, unsigned int *);
  MachNode *(__thiscall *short_branch_version)(MachBranchNode *this, Compile *);
};

/* 13720 */
struct /*VFT*/ MachCallNode_vtbl
{
  _BYTE gap0[188];
  int (__thiscall *ret_addr_offset)(MachCallNode *this);
};

/* 13721 */
struct /*VFT*/ MachConstantNode_vtbl
{
  _BYTE gap0[188];
  void (__thiscall *eval_constant)(MachConstantNode *this, Compile *);
};

/* 13722 */
struct /*VFT*/ MachIfNode_vtbl
{
  _BYTE gap0[188];
  void (__thiscall *label_set)(MachBranchNode *this, Label *, unsigned int);
  void (__thiscall *save_label)(MachBranchNode *this, Label **, unsigned int *);
  MachNode *(__thiscall *short_branch_version)(MachBranchNode *this, Compile *);
  void (__thiscall *negate)(MachIfNode *this);
};

/* 13723 */
struct /*VFT*/ MachNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  unsigned int (__thiscall *rule)(MachNode *this);
  unsigned int (__thiscall *oper_input_base)(MachNode *this);
  unsigned int (__thiscall *mach_constant_base_node_input)(MachNode *this);
  MachNode *(__thiscall *cisc_version)(MachNode *this, int, Compile *);
  void (__thiscall *use_cisc_RegMask)(MachNode *this);
  const RegMask *(__thiscall *cisc_RegMask)(MachNode *this);
  unsigned int (__thiscall *two_adr)(MachNode *this);
  bool (__thiscall *requires_postalloc_expand)(MachNode *this);
  void (__thiscall *postalloc_expand)(MachNode *this, GrowableArray<Node *> *, PhaseRegAlloc *);
  unsigned int (__thiscall *emit_size)(MachNode *this, PhaseRegAlloc *);
  int (__thiscall *alignment_required)(MachNode *this);
  int (__thiscall *compute_padding)(MachNode *this, int);
  int (__thiscall *reloc)(MachNode *this);
  int (__thiscall *ins_num_consts)(MachNode *this);
  MachNode *(__thiscall *Expand)(MachNode *this, State *, Node_List *, Node *);
  const MachOper *(__thiscall *memory_operand)(MachNode *this);
  MachNode *(__thiscall *peephole)(MachNode *this, Block *, int, PhaseRegAlloc *, int *, Compile *);
  int (__thiscall *ideal_Opcode)(MachNode *this);
  void (__thiscall *add_case_label)(MachNode *this, int, Label *);
  void (__thiscall *method_set)(MachNode *this, int);
  bool (__thiscall *is_TrapBasedCheckNode)(MachNode *this);
};

/* 13724 */
struct /*VFT*/ MachNullCheckNode_vtbl
{
  _BYTE gap0[188];
  void (__thiscall *label_set)(MachBranchNode *this, Label *, unsigned int);
  void (__thiscall *save_label)(MachBranchNode *this, Label **, unsigned int *);
  MachNode *(__thiscall *short_branch_version)(MachBranchNode *this, Compile *);
  void (__thiscall *negate)(MachNullCheckNode *this);
};

/* 13725 */
struct /*VFT*/ Matcher_vtbl
{
  ConNode *(__thiscall *uncached_makecon)(PhaseTransform *this, const Type *);
  Node *(__thiscall *transform)(PhaseTransform *this, Node *);
  const Type *(__thiscall *saturate)(PhaseTransform *this, const Type *, const Type *, const Type *);
  PhaseIterGVN *(__thiscall *is_IterGVN)(PhaseTransform *this);
  bool (__thiscall *stack_direction)(Matcher *this);
  int (__thiscall *return_addr)(Matcher *this);
  int (__thiscall *regnum_to_fpu_offset)(Matcher *this, int);
};

/* 13726 */
struct /*VFT*/ MemBar_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  MemBar *(__thiscall *as_MemBar)(MemBar *this);
};

/* 13727 */
struct /*VFT*/ MetadataType_vtbl
{
  ValueType *(__thiscall *base)(ValueType *this);
  char (__thiscall *tchar)(ValueType *this);
  const char *(__thiscall *name)(ValueType *this);
  bool (__thiscall *is_constant)(ValueType *this);
  VoidType *(__thiscall *as_VoidType)(ValueType *this);
  IntType *(__thiscall *as_IntType)(ValueType *this);
  LongType *(__thiscall *as_LongType)(ValueType *this);
  FloatType *(__thiscall *as_FloatType)(ValueType *this);
  DoubleType *(__thiscall *as_DoubleType)(ValueType *this);
  ObjectType *(__thiscall *as_ObjectType)(ValueType *this);
  ArrayType *(__thiscall *as_ArrayType)(ValueType *this);
  InstanceType *(__thiscall *as_InstanceType)(ValueType *this);
  ClassType *(__thiscall *as_ClassType)(ValueType *this);
  MetadataType *(__thiscall *as_MetadataType)(ValueType *this);
  MethodType *(__thiscall *as_MethodType)(ValueType *this);
  MethodDataType *(__thiscall *as_MethodDataType)(ValueType *this);
  AddressType *(__thiscall *as_AddressType)(ValueType *this);
  IllegalType *(__thiscall *as_IllegalType)(ValueType *this);
  IntConstant *(__thiscall *as_IntConstant)(ValueType *this);
  LongConstant *(__thiscall *as_LongConstant)(ValueType *this);
  FloatConstant *(__thiscall *as_FloatConstant)(ValueType *this);
  DoubleConstant *(__thiscall *as_DoubleConstant)(ValueType *this);
  ObjectConstant *(__thiscall *as_ObjectConstant)(ValueType *this);
  InstanceConstant *(__thiscall *as_InstanceConstant)(ValueType *this);
  ClassConstant *(__thiscall *as_ClassConstant)(ValueType *this);
  MethodConstant *(__thiscall *as_MethodConstant)(ValueType *this);
  MethodDataConstant *(__thiscall *as_MethodDataConstant)(ValueType *this);
  ArrayConstant *(__thiscall *as_ArrayConstant)(ValueType *this);
  AddressConstant *(__thiscall *as_AddressConstant)(ValueType *this);
  ciMetadata *(__thiscall *constant_value)(MetadataType *this);
};

/* 13728 */
struct /*VFT*/ MultiNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  Node *(__thiscall *match)(MultiNode *this, const ProjNode *, const Matcher *);
};

/* 13729 */
struct /*VFT*/ NamedThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13730 */
struct /*VFT*/ ObjectType_vtbl
{
  ValueType *(__thiscall *base)(ValueType *this);
  char (__thiscall *tchar)(ValueType *this);
  const char *(__thiscall *name)(ValueType *this);
  bool (__thiscall *is_constant)(ValueType *this);
  VoidType *(__thiscall *as_VoidType)(ValueType *this);
  IntType *(__thiscall *as_IntType)(ValueType *this);
  LongType *(__thiscall *as_LongType)(ValueType *this);
  FloatType *(__thiscall *as_FloatType)(ValueType *this);
  DoubleType *(__thiscall *as_DoubleType)(ValueType *this);
  ObjectType *(__thiscall *as_ObjectType)(ValueType *this);
  ArrayType *(__thiscall *as_ArrayType)(ValueType *this);
  InstanceType *(__thiscall *as_InstanceType)(ValueType *this);
  ClassType *(__thiscall *as_ClassType)(ValueType *this);
  MetadataType *(__thiscall *as_MetadataType)(ValueType *this);
  MethodType *(__thiscall *as_MethodType)(ValueType *this);
  MethodDataType *(__thiscall *as_MethodDataType)(ValueType *this);
  AddressType *(__thiscall *as_AddressType)(ValueType *this);
  IllegalType *(__thiscall *as_IllegalType)(ValueType *this);
  IntConstant *(__thiscall *as_IntConstant)(ValueType *this);
  LongConstant *(__thiscall *as_LongConstant)(ValueType *this);
  FloatConstant *(__thiscall *as_FloatConstant)(ValueType *this);
  DoubleConstant *(__thiscall *as_DoubleConstant)(ValueType *this);
  ObjectConstant *(__thiscall *as_ObjectConstant)(ValueType *this);
  InstanceConstant *(__thiscall *as_InstanceConstant)(ValueType *this);
  ClassConstant *(__thiscall *as_ClassConstant)(ValueType *this);
  MethodConstant *(__thiscall *as_MethodConstant)(ValueType *this);
  MethodDataConstant *(__thiscall *as_MethodDataConstant)(ValueType *this);
  ArrayConstant *(__thiscall *as_ArrayConstant)(ValueType *this);
  AddressConstant *(__thiscall *as_AddressConstant)(ValueType *this);
  ciObject *(__thiscall *constant_value)(ObjectType *this);
  ciType *(__thiscall *exact_type)(ObjectType *this);
};

/* 13731 */
struct /*VFT*/ Op2_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  bool (__thiscall *is_commutative)(Op2 *this);
};

/* 13732 */
struct /*VFT*/ PhaseIterGVN_vtbl
{
  _BYTE gap0[16];
  Node *(__thiscall *transform_old)(PhaseIterGVN *this, Node *);
};

/* 13733 */
struct /*VFT*/ ProfileCall_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  ProfileCall *(__thiscall *as_ProfileCall)(ProfileCall *this);
};

/* 13734 */
struct /*VFT*/ ProfileReturnType_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  ProfileReturnType *(__thiscall *as_ProfileReturnType)(ProfileReturnType *this);
};

/* 13735 */
struct /*VFT*/ RuntimeCall_vtbl
{
  bool (__thiscall *needs_exception_state)(Instruction *this);
  Instruction *(__thiscall *as_Instruction)(Instruction *this);
  Phi *(__thiscall *as_Phi)(Instruction *this);
  Local *(__thiscall *as_Local)(Instruction *this);
  Constant *(__thiscall *as_Constant)(Instruction *this);
  AccessField *(__thiscall *as_AccessField)(Instruction *this);
  LoadField *(__thiscall *as_LoadField)(Instruction *this);
  StoreField *(__thiscall *as_StoreField)(Instruction *this);
  AccessArray *(__thiscall *as_AccessArray)(Instruction *this);
  ArrayLength *(__thiscall *as_ArrayLength)(Instruction *this);
  AccessIndexed *(__thiscall *as_AccessIndexed)(Instruction *this);
  LoadIndexed *(__thiscall *as_LoadIndexed)(Instruction *this);
  StoreIndexed *(__thiscall *as_StoreIndexed)(Instruction *this);
  NegateOp *(__thiscall *as_NegateOp)(Instruction *this);
  Op2 *(__thiscall *as_Op2)(Instruction *this);
  ArithmeticOp *(__thiscall *as_ArithmeticOp)(Instruction *this);
  ShiftOp *(__thiscall *as_ShiftOp)(Instruction *this);
  LogicOp *(__thiscall *as_LogicOp)(Instruction *this);
  CompareOp *(__thiscall *as_CompareOp)(Instruction *this);
  IfOp *(__thiscall *as_IfOp)(Instruction *this);
  Convert *(__thiscall *as_Convert)(Instruction *this);
  NullCheck *(__thiscall *as_NullCheck)(Instruction *this);
  OsrEntry *(__thiscall *as_OsrEntry)(Instruction *this);
  StateSplit *(__thiscall *as_StateSplit)(Instruction *this);
  Invoke *(__thiscall *as_Invoke)(Instruction *this);
  NewInstance *(__thiscall *as_NewInstance)(Instruction *this);
  NewArray *(__thiscall *as_NewArray)(Instruction *this);
  NewTypeArray *(__thiscall *as_NewTypeArray)(Instruction *this);
  NewObjectArray *(__thiscall *as_NewObjectArray)(Instruction *this);
  NewMultiArray *(__thiscall *as_NewMultiArray)(Instruction *this);
  TypeCheck *(__thiscall *as_TypeCheck)(Instruction *this);
  CheckCast *(__thiscall *as_CheckCast)(Instruction *this);
  InstanceOf *(__thiscall *as_InstanceOf)(Instruction *this);
  TypeCast *(__thiscall *as_TypeCast)(Instruction *this);
  AccessMonitor *(__thiscall *as_AccessMonitor)(Instruction *this);
  MonitorEnter *(__thiscall *as_MonitorEnter)(Instruction *this);
  MonitorExit *(__thiscall *as_MonitorExit)(Instruction *this);
  Intrinsic *(__thiscall *as_Intrinsic)(Instruction *this);
  BlockBegin *(__thiscall *as_BlockBegin)(Instruction *this);
  BlockEnd *(__thiscall *as_BlockEnd)(Instruction *this);
  Goto *(__thiscall *as_Goto)(Instruction *this);
  If *(__thiscall *as_If)(Instruction *this);
  IfInstanceOf *(__thiscall *as_IfInstanceOf)(Instruction *this);
  TableSwitch *(__thiscall *as_TableSwitch)(Instruction *this);
  LookupSwitch *(__thiscall *as_LookupSwitch)(Instruction *this);
  Return *(__thiscall *as_Return)(Instruction *this);
  Throw *(__thiscall *as_Throw)(Instruction *this);
  Base *(__thiscall *as_Base)(Instruction *this);
  RoundFP *(__thiscall *as_RoundFP)(Instruction *this);
  ExceptionObject *(__thiscall *as_ExceptionObject)(Instruction *this);
  UnsafeOp *(__thiscall *as_UnsafeOp)(Instruction *this);
  ProfileInvoke *(__thiscall *as_ProfileInvoke)(Instruction *this);
  RangeCheckPredicate *(__thiscall *as_RangeCheckPredicate)(Instruction *this);
  void (__thiscall *visit)(Instruction *this, InstructionVisitor *);
  bool (__thiscall *can_trap)(Instruction *this);
  void (__thiscall *input_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *state_values_do)(Instruction *this, ValueVisitor *);
  void (__thiscall *other_values_do)(Instruction *this, ValueVisitor *);
  ciType *(__thiscall *exact_type)(Instruction *this);
  ciType *(__thiscall *declared_type)(Instruction *this);
  const char *(__thiscall *name)(Instruction *this);
  int (__thiscall *hash)(Instruction *this);
  bool (__thiscall *is_equal)(Instruction *this, Instruction *);
  RuntimeCall *(__thiscall *as_RuntimeCall)(RuntimeCall *this);
};

/* 13736 */
struct /*VFT*/ ServiceThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13737 */
struct /*VFT*/ StartNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  Node *(__thiscall *match)(MultiNode *this, const ProjNode *, const Matcher *);
  void (__thiscall *calling_convention)(StartNode *this, BasicType *, VMRegPair *, unsigned int);
};

/* 13738 */
struct /*VFT*/ SurrogateLockerThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13739 */
struct /*VFT*/ Switch_vtbl
{
  _BYTE gap0[252];
  Switch *(__thiscall *as_Switch)(Switch *this);
};

/* 13740 */
struct /*VFT*/ TypeOopPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
  ciKlass *(__thiscall *klass)(TypeOopPtr *this);
  const Type *(__thiscall *cast_to_exactness)(TypeOopPtr *this, bool);
  const TypeOopPtr *(__thiscall *cast_to_instance_id)(TypeOopPtr *this, int);
  const Type *(__thiscall *xmeet_helper)(TypeOopPtr *this, const Type *);
  const TypeOopPtr *(__thiscall *with_inline_depth)(TypeOopPtr *this, int);
};

/* 13741 */
struct /*VFT*/ UnsafeObjectOp_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
};

/* 13742 */
struct /*VFT*/ UnsafePrefetch_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafePrefetch *(__thiscall *as_UnsafePrefetch)(UnsafePrefetch *this);
};

/* 13743 */
struct /*VFT*/ UnsafePutObject_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafePutObject *(__thiscall *as_UnsafePutObject)(UnsafePutObject *this);
};

/* 13744 */
struct /*VFT*/ UnsafeRawOp_vtbl
{
  _BYTE gap0[252];
  UnsafeRawOp *(__thiscall *as_UnsafeRawOp)(UnsafeRawOp *this);
};

/* 13745 */
struct /*VFT*/ VMThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13746 */
struct /*VFT*/ WorkerThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13747 */
struct /*VFT*/ CompilerThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13748 */
struct /*VFT*/ ConcurrentGCThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13749 */
struct /*VFT*/ ConcurrentMarkSweepThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13750 */
struct /*VFT*/ ConcurrentMarkThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13751 */
struct /*VFT*/ G1StringDedupThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
  void (__thiscall *print_on)(G1StringDedupThread *this, outputStream *);
};

/* 13752 */
struct /*VFT*/ GCTaskThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13753 */
struct /*VFT*/ GangWorker_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
  void (__thiscall *print)(GangWorker *this);
  void (__thiscall *initialize)(GangWorker *this);
  void (__thiscall *loop)(GangWorker *this);
};

/* 13754 */
struct /*VFT*/ MultiBranchNode_vtbl
{
  int (__thiscall *Opcode)(Node *this);
  unsigned int (__thiscall *size_of)(Node *this);
  bool (__thiscall *is_CFG)(Node *this);
  bool (__thiscall *depends_only_on_test)(Node *this);
  const Node *(__thiscall *is_block_proj)(Node *this);
  const Type *(__thiscall *bottom_type)(Node *this);
  const TypePtr *(__thiscall *adr_type)(Node *this);
  Node *(__thiscall *Identity)(Node *this, PhaseTransform *);
  const Type *(__thiscall *Value)(Node *this, PhaseTransform *);
  Node *(__thiscall *Ideal)(Node *this, PhaseGVN *, bool);
  bool (__thiscall *is_g1_wb_pre_call)(Node *this);
  bool (__thiscall *is_shenandoah_state_load)(Node *this);
  bool (__thiscall *is_shenandoah_marking_if)(Node *this, PhaseTransform *);
  const Pipeline *(__thiscall *pipeline)(Node *this);
  unsigned int (__thiscall *hash)(Node *this);
  unsigned int (__thiscall *cmp)(Node *this, const Node *);
  unsigned int (__thiscall *ideal_reg)(Node *this);
  unsigned int (__thiscall *match_edge)(Node *this, unsigned int);
  const RegMask *(__thiscall *out_RegMask)(Node *this);
  const RegMask *(__thiscall *in_RegMask)(Node *this, unsigned int);
  JVMState *(__thiscall *jvms)(Node *this);
  void (__thiscall *format)(Node *this, PhaseRegAlloc *, outputStream *);
  void (__thiscall *emit)(Node *this, CodeBuffer *, PhaseRegAlloc *);
  unsigned int (__thiscall *size)(Node *this, PhaseRegAlloc *);
  bool (__thiscall *pinned)(Node *this);
  int (__thiscall *cisc_operand)(Node *this);
  Node *(__thiscall *match)(MultiNode *this, const ProjNode *, const Matcher *);
  int (__thiscall *required_outcnt)(MultiBranchNode *this);
};

/* 13755 */
struct /*VFT*/ PhaseCCP_vtbl
{
  _BYTE gap0[16];
  Node *(__thiscall *transform_old)(PhaseIterGVN *this, Node *);
  Node *(__thiscall *transform_once)(PhaseCCP *this, Node *);
};

/* 13756 */
struct /*VFT*/ ShenandoahControlThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13757 */
struct /*VFT*/ ShenandoahStrDedupThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
  void (__thiscall *stop)(ShenandoahStrDedupThread *this);
};

/* 13758 */
struct /*VFT*/ TypeAryPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
  ciKlass *(__thiscall *klass)(TypeOopPtr *this);
  const Type *(__thiscall *cast_to_exactness)(TypeOopPtr *this, bool);
  const TypeOopPtr *(__thiscall *cast_to_instance_id)(TypeOopPtr *this, int);
  const Type *(__thiscall *xmeet_helper)(TypeOopPtr *this, const Type *);
  const TypeOopPtr *(__thiscall *with_inline_depth)(TypeOopPtr *this, int);
  const TypeAryPtr *(__thiscall *cast_to_size)(TypeAryPtr *this, const TypeInt *);
  const TypeInt *(__thiscall *narrow_size_type)(TypeAryPtr *this, const TypeInt *);
};

/* 13759 */
struct /*VFT*/ TypeInstPtr_vtbl
{
  bool (__thiscall *eq)(Type *this, const Type *);
  const Type *(__thiscall *filter_helper)(Type *this, const Type *, bool);
  const Type *(__thiscall *widen)(Type *this, const Type *, const Type *);
  const Type *(__thiscall *narrow)(Type *this, const Type *);
  const Type *(__thiscall *xmeet)(Type *this, const Type *);
  const Type *(__thiscall *xdual)(Type *this);
  bool (__thiscall *is_finite)(Type *this);
  bool (__thiscall *is_nan)(Type *this);
  bool (__thiscall *singleton)(Type *this);
  bool (__thiscall *empty)(Type *this);
  int (__thiscall *hash)(Type *this);
  const TypeOopPtr *(__thiscall *speculative)(Type *this);
  ciKlass *(__thiscall *speculative_type)(Type *this);
  const Type *(__thiscall *remove_speculative)(Type *this);
  bool (__thiscall *would_improve_type)(Type *this, ciKlass *, int);
  const Type *(__thiscall *cast_to_ptr_type)(TypePtr *this, TypePtr::PTR);
  int (__thiscall *get_con)(TypePtr *this);
  const TypePtr *(__thiscall *add_offset)(TypePtr *this, int);
  ciKlass *(__thiscall *klass)(TypeOopPtr *this);
  const Type *(__thiscall *cast_to_exactness)(TypeOopPtr *this, bool);
  const TypeOopPtr *(__thiscall *cast_to_instance_id)(TypeOopPtr *this, int);
  const Type *(__thiscall *xmeet_helper)(TypeOopPtr *this, const Type *);
  const TypeOopPtr *(__thiscall *with_inline_depth)(TypeOopPtr *this, int);
  const TypeInstPtr *(__thiscall *xmeet_unloaded)(TypeInstPtr *this, const TypeInstPtr *);
};

/* 13760 */
struct /*VFT*/ UnsafeGetAndSetObject_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafeGetAndSetObject *(__thiscall *as_UnsafeGetAndSetObject)(UnsafeGetAndSetObject *this);
};

/* 13761 */
struct /*VFT*/ UnsafeGetObject_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafeGetObject *(__thiscall *as_UnsafeGetObject)(UnsafeGetObject *this);
};

/* 13762 */
struct /*VFT*/ UnsafeGetRaw_vtbl
{
  _BYTE gap0[252];
  UnsafeRawOp *(__thiscall *as_UnsafeRawOp)(UnsafeRawOp *this);
  UnsafeGetRaw *(__thiscall *as_UnsafeGetRaw)(UnsafeGetRaw *this);
};

/* 13763 */
struct /*VFT*/ UnsafePrefetchRead_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafePrefetch *(__thiscall *as_UnsafePrefetch)(UnsafePrefetch *this);
  UnsafePrefetchRead *(__thiscall *as_UnsafePrefetchRead)(UnsafePrefetchRead *this);
};

/* 13764 */
struct /*VFT*/ UnsafePrefetchWrite_vtbl
{
  _BYTE gap0[252];
  UnsafeObjectOp *(__thiscall *as_UnsafeObjectOp)(UnsafeObjectOp *this);
  UnsafePrefetch *(__thiscall *as_UnsafePrefetch)(UnsafePrefetch *this);
  UnsafePrefetchWrite *(__thiscall *as_UnsafePrefetchWrite)(UnsafePrefetchWrite *this);
};

/* 13765 */
struct /*VFT*/ UnsafePutRaw_vtbl
{
  _BYTE gap0[252];
  UnsafeRawOp *(__thiscall *as_UnsafeRawOp)(UnsafeRawOp *this);
  UnsafePutRaw *(__thiscall *as_UnsafePutRaw)(UnsafePutRaw *this);
};

/* 13766 */
struct /*VFT*/ YieldingFlexibleGangWorker_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
  void (__thiscall *print)(GangWorker *this);
  void (__thiscall *initialize)(GangWorker *this);
  void (__thiscall *loop)(GangWorker *this);
};

/* 13767 */
struct /*VFT*/ ConcurrentG1RefineThread_vtbl
{
  void (__thiscall *unused_initial_virtual)(ThreadShadow *this);
  void (__thiscall *~Thread)(Thread *this);
  void (__thiscall *run)(Thread *this);
  bool (__thiscall *is_VM_thread)(Thread *this);
  bool (__thiscall *is_Java_thread)(Thread *this);
  bool (__thiscall *is_Compiler_thread)(Thread *this);
  bool (__thiscall *is_hidden_from_external_view)(Thread *this);
  bool (__thiscall *is_jvmti_agent_thread)(Thread *this);
  bool (__thiscall *is_GC_task_thread)(Thread *this);
  bool (__thiscall *is_Watcher_thread)(Thread *this);
  bool (__thiscall *is_ConcurrentGC_thread)(Thread *this);
  bool (__thiscall *is_Named_thread)(Thread *this);
  bool (__thiscall *is_Worker_thread)(Thread *this);
  WorkerThread *(__thiscall *as_Worker_thread)(Thread *this);
  char *(__thiscall *name)(Thread *this);
  void (__thiscall *oops_do)(Thread *this, OopClosure *, CLDClosure *, CodeBlobClosure *);
  bool (__thiscall *is_lock_owned)(Thread *this, unsigned __int8 *);
  void (__thiscall *print_on_error)(Thread *this, outputStream *, char *, int);
};

/* 13768 */
typedef struct _GUID GUID;

/* 13769 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 13770 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 13771 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 13772 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 13773 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 13774 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 13775 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 13776 */
struct _RTTIClassHierarchyDescriptor
{
  int signature;
  int attributes;
  int numBaseClasses;
  void *baseClassArray;
};

/* 13777 */
struct _RTTIBaseClassDescriptor
{
  void *typeDescriptor;
  int numContainedBases;
  _PMD pmd;
  int attributes;
};

/* 13778 */
struct _RTTICompleteObjectLocator
{
  int signature;
  int offset;
  int cdOffset;
  void *typeDescriptor;
  void *classDescriptor;
};

